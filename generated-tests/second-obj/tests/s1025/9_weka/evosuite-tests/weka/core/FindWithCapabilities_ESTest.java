/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:14:47 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "]|";
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals("]|", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "81-106";
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      assertEquals("81-106", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      capabilities1.m_Owner = (CapabilitiesHandler) findWithCapabilities0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      vector0.add("K?D|{vl,L}&lhFI");
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      SingleIndex singleIndex0 = new SingleIndex("not-no-class");
      SingleIndex.indexToString(1576);
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("nWFP&75V|uB)_n1H");
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("y]TULV:(q`1dgTa");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector1;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Matches = vector1;
      vector1.add("GbaLFs*rO Bwt");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Matches = vector1;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      vector1.add(";~\"K!");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector1;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Matches = vector1;
      vector1.add("GbaLFs*rO Bwt");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Matches = vector1;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      vector1.add(";~\"K!");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      capabilities0.enableAll();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "81-106";
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("8034");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("_V&{PQ'@BO?5^");
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.enableAll();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities2.isEnabled(capabilities_Capability2);
      Random.setNextRandom(1);
      findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability3);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_V&{PQ'@BO?5^";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "qce+;twF/xB_~9Pk";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "qce+;twF/xB_~9Pk";
      stringArray0[6] = "_V&{PQ'@BO?5^";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "-missing-att-values";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Filename = "c|sD^a<Xsd5ow";
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.m_Superclass = "c|sD^a<Xsd5ow";
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Matches = vector0;
      vector0.add("GbaLFs*rO Bwt");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      vector0.add(";~\"K!");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      String string0 = "\tAlso prints the classname that didn't match the criteria.";
      SingleIndex.indexToString((-1834));
      findWithCapabilities0.getHandler();
      String string1 = " classes that matched the criteria:\n";
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-relational-atts");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Matches = vector0;
      vector0.add("GbaLFs*rO Bwt");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      vector0.add(";~\"K!");
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      capabilities0.enableAllClasses();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      int[] intArray0 = new int[1];
      findWithCapabilities0.getOptions();
      intArray0[0] = 44;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1));
      binarySparseInstance0.setMissing((-2893));
      binarySparseInstance0.m_Dataset = null;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.m_NumAttributes = 1791;
      // Undeclared exception!
      try { 
        binarySparseInstance0.equalHeadersMsg(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities1.m_Test = true;
      capabilities0.or(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("not-no-class");
      findWithCapabilities0.setClassIndex("}%b+QS^c*TOM&s?.X)");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3F &4cH]1V";
      stringArray0[1] = "Name";
      stringArray0[2] = "3l2";
      stringArray0[3] = "Va|(U3q\u0004~w>*80#dw0";
      stringArray0[4] = "\tThe index of the class attribute, -1 for none.\n\t'first' and 'last' are also valid.\n\tOnly in conjunction with option '-t'.";
      stringArray0[5] = "|58>-:'vy[Ge_8~Mf";
      stringArray0[6] = "-date-class";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3F&4cH1V";
      stringArray0[1] = "3l2";
      stringArray0[2] = "Name";
      stringArray0[3] = "|58>-:'vy[Ge_8~Mf";
      stringArray0[4] = "3l2";
      stringArray0[5] = "|58>-:'vy[Ge_8~Mf";
      stringArray0[6] = "V|(3q\u0004~w>*80#dw0";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.handles(capabilities_Capability0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Matches = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.listOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("_V&{PQ'@BO?5^");
      findWithCapabilities0.getHandler();
      findWithCapabilities1.getMisses();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.disable(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random.setNextRandom(1667);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      SingleIndex singleIndex0 = new SingleIndex("weka/core/Capabilities.props");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      capabilities0.enableAll();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.m_Test = true;
      findWithCapabilities0.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "37=%C ux9d");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      boolean boolean0 = capabilities0.m_AttributeTest;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      capabilities0.toString();
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Matches = vector0;
      vector0.add("GbaLFs*rO Bwt");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/weka/core/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      vector0.add("X%#");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getMatches();
      TestInstances.forCapabilities(capabilities0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(2368L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Not enough training instances (required: ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      stringArray0[1] = "Not enough training instances (required: ";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      stringArray0[2] = "-missing-class-values";
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Not enough training instances (required: ");
      byteArray0[0] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[3] = "%Cb)RiY^L9RS\"";
      stringArray0[4] = "%Cb)RiY^L9RS\"";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.m_MinimumNumberInstancesTest = false;
      capabilities0.enableAllClassDependencies();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[4] = " packages";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "|%`m");
      findWithCapabilities0.setClassIndex("Unable to continue with installation.");
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.setClassIndex("eTM3 YW/O'.J~");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.enableAll();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setFilename("qce+;twF/xB_~9Pk");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "eTM3 YW/O'.J~";
      stringArray0[2] = "qce+;twF/xB_~9Pk";
      FindWithCapabilities.main(stringArray0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      findWithCapabilities0.find();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities4.m_Handler;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Filename = "c|sD^a<Xsd5ow";
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      String[] stringArray0 = null;
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("c|sD^a<Xsd5ow");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.isEnabled(capabilities_Capability2);
      findWithCapabilities1.find();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability3);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3F &4cH]1V";
      stringArray0[1] = "Name";
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      boolean boolean0 = capabilities1.m_AttributeTest;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler1 = findWithCapabilities0.m_Handler;
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      SingleIndex singleIndex0 = new SingleIndex("not-no-class");
      SingleIndex.indexToString(1576);
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("y]T5LV:(q/`1dgTa");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(21);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-not-no-class");
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.m_Filename = "c|sD^a<Xsd5ow";
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.m_Superclass = "c|sD^a<Xsd5ow";
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability4);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      SingleIndex singleIndex0 = new SingleIndex("]");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("-1");
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities1.m_Test = true;
      capabilities0.or(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_ClassIndex = null;
      Vector<String> vector0 = findWithCapabilities1.find();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getClassIndex();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(21);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-not-no-class");
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-not-no-class";
      stringArray0[1] = "-not-no-class";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "-not-no-class";
      stringArray0[4] = "$Revision: 9186 $";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "-not-no-class";
      stringArray0[7] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Filename = "8034";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.m_Superclass = "8034";
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("not-nominal-class");
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("not-nominal-class");
      String[] stringArray1 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      String[] stringArray0 = null;
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.m_Filename = "c|sD^a<Xsd5ow";
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "\tMust handle missing class values.";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities1.find();
      findWithCapabilities1.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("4pP0^`v!s");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      assertEquals("", findWithCapabilities3.getFilename());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "-no-class";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities1.find();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      String[] stringArray2 = findWithCapabilities4.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.setFilename("Object has wrong class");
      FindWithCapabilities.main(stringArray2);
      findWithCapabilities2.setFilename("-no-class");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities5.setClassIndex("-no-class");
      FindWithCapabilities.main(stringArray2);
      findWithCapabilities1.getMatches();
      findWithCapabilities1.setHandler(findWithCapabilities6);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      // Undeclared exception!
      try { 
        findWithCapabilities6.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "\tMust handle missing class values.";
      findWithCapabilities0.m_Superclass = "\tMust handle missing class values.";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities1.find();
      Locale.getISOLanguages();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities3.m_Matches;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getOptions();
      int[] intArray0 = new int[9];
      intArray0[0] = 4567;
      intArray0[1] = 435;
      intArray0[2] = 506;
      intArray0[3] = (-3024);
      intArray0[4] = 63;
      intArray0[5] = 125;
      intArray0[6] = 114;
      intArray0[7] = (-1794675125);
      intArray0[8] = 34;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 34);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }
}
