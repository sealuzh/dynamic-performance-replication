/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:29:57 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DSUB dSUB0 = new DSUB();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)46);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(0);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals(1, iLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals((short)11, fCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals(1, aCONST_NULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLCONST((LCONST) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(1, 1);
      iNVOKEINTERFACE0.setIndex(529);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1781);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(3248);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      ALOAD aLOAD0 = new ALOAD(3248);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals((short)25, aLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      instructionList0.toString();
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      instructionHandle0.removeAttribute(instructionList0);
      JSR jSR0 = new JSR(instructionHandle0);
      instConstraintVisitor0.visitJSR(jSR0);
      IADD iADD0 = new IADD();
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(206);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(aNEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(130);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDSTORE((DSTORE) null);
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE(46);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      AASTORE aASTORE0 = new AASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitAASTORE(aASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals((short)0, nOP0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR_W((JSR_W) null);
      POP2 pOP2_0 = (POP2)InstructionConstants.POP2;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(pOP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO gOTO0 = null;
      instConstraintVisitor0.visitGOTO((GOTO) null);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The 'objectref' is not of : ReferenceLype or of ReturnaddressType but of ");
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("The 'objectref' is not of : ReferenceLype or of ReturnaddressType but of ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(8192, objectType0);
      OperandStack operandStack1 = new OperandStack(2, objectType0);
      operandStack1.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      operandStack1.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(792);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(270);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(270);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKESPECIAL0);
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitICONST((ICONST) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top %f stack, but s: '");
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'Reference type expected on top %f stack, but s: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(231, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ASTORE aSTORE0 = new ASTORE(289);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM((DREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(3);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals("lload_3", lLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(314);
      ObjectType objectType0 = new ObjectType("$@v");
      OperandStack operandStack0 = new OperandStack(314, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      I2F i2F0 = new I2F();
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type '$@v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of stack, b|t is: '");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      iNEG0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, b|t is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables((byte)115);
      String string0 = localVariables0.toString();
      ObjectType objectType0 = new ObjectType(string0);
      OperandStack operandStack0 = new OperandStack((byte)115, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      INEG iNEG0 = new INEG();
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("gU");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      BasicType basicType0 = Type.DOUBLE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(289);
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'gU'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LCMP lCMP0 = new LCMP();
      LCMP lCMP1 = new LCMP();
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'Reference type expected ontop of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(319, objectType0);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      L2D l2D0 = new L2D();
      ISHR iSHR0 = new ISHR();
      iSHR0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IRETURN iRETURN0 = new IRETURN();
      POP pOP0 = (POP)InstructionConstants.POP;
      instConstraintVisitor0.visitStackInstruction(pOP0);
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 289;
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      operandStack0.equals(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean(false);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      instructionList0.getByteCode();
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      Class<INSTANCEOF>[] classArray0 = (Class<INSTANCEOF>[]) Array.newInstance(Class.class, 2);
      Class<INSTANCEOF> class0 = INSTANCEOF.class;
      classArray0[0] = class0;
      Class<INSTANCEOF> class1 = INSTANCEOF.class;
      classArray0[1] = class1;
      Type.getTypes(classArray0);
      OperandStack operandStack1 = new OperandStack(289, objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack1);
      Frame.getThis();
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FNEG fNEG0 = new FNEG();
      fNEG0.copy();
      instConstraintVisitor0.visitFSTORE((FSTORE) null);
      DCONST dCONST0 = new DCONST(1.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(291);
      int int0 = 225;
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND((LAND) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(291);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DUP dUP0 = new DUP();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      BasicType basicType0 = Type.BOOLEAN;
      objectType0.isAssignmentCompatibleWith(basicType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitDLOAD((DLOAD) null);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'Reference type expected ontop of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      POP pOP0 = (POP)InstructionConstants.POP;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(pOP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP constraint violated: Cannot consume 1 stack slots: only 0 slot(s) left on stack!
         // Stack:
         // Slots used: 0 MaxStack: 225.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Referenqw type exp#ced on toz%of stack,Hbut is: ");
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(270);
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      LocalVariables localVariables0 = new LocalVariables(270);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(270, 270);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = (POP)InstructionConstants.POP;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-728.055F));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionList instructionList1 = new InstructionList(iNSTANCEOF0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type 'Referenqw type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = new ObjectType("{_n Z{C");
      OperandStack operandStack0 = new OperandStack(1966, objectType0);
      OperandStack operandStack1 = new OperandStack(1745);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      CALOAD cALOAD0 = new CALOAD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(1966);
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_2;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(aLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ALOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Index '");
      OperandStack operandStack0 = new OperandStack(835, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1054);
      LocalVariables localVariables1 = new LocalVariables(835);
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      operandStack0.initializeObject((UninitializedObjectType) null);
      F2L f2L0 = new F2L();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1, 835);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      DSUB dSUB0 = new DSUB();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dSUB0.toString(constantPool0);
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      instConstraintVisitor0.visitLocalVariableInstruction(iSTORE0);
      assertEquals(1, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      localVariables0.clone();
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(319, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DUP dUP0 = new DUP();
      String string0 = Constants.ILLEGAL_TYPE;
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(289);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("g&V? <Z:#UTQ+:b");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      PUTFIELD pUTFIELD0 = new PUTFIELD(1232);
      frame0.equals(pUTFIELD0);
      L2I l2I0 = new L2I();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      IMUL iMUL0 = new IMUL();
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lg&V? <Z:#UTQ+:b;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(270);
      ObjectType objectType0 = new ObjectType("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 178, 270);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      localVariables0.getClone();
      byteArrayInputStream0.mark((-172));
      sequenceInputStream0.mark(226);
      frame0.equals(sequenceInputStream0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      LSHL lSHL0 = new LSHL();
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'Referenqe type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(222, objectType0);
      operandStack0.merge(operandStack0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType1 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack1 = new OperandStack(222, objectType0);
      Frame frame1 = new Frame(222, 289);
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IRETURN iRETURN0 = new IRETURN();
      LSHL lSHL0 = new LSHL();
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top %f stack, but is: '");
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      operandStack0.equals(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top %f stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = new ObjectType("{_n Z{C");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      OperandStack operandStack1 = new OperandStack(1745);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FALOAD fALOAD0 = new FALOAD();
      FALOAD fALOAD1 = new FALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFALOAD(fALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FALOAD constraint violated: The 'index' is not of type int but of type {_n Z{C.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF((INSTANCEOF) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(222, objectType0);
      operandStack0.merge(operandStack0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      instConstraintVisitor0.setFrame(frame0);
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(312);
      ObjectType objectType0 = new ObjectType("Stack next-to-top should be an object reference that's not an array reference, but is '");
      OperandStack operandStack0 = new OperandStack(312, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      instructionList0.getByteCode();
      instructionList0.findHandle(312);
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type 'Stack next-to-top should be an object reference that's not an array reference, but is ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(319, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      objectType0.getFirstCommonSuperclass(referenceType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DUP dUP0 = new DUP();
      String string0 = Constants.ILLEGAL_TYPE;
      dUP0.toString();
      instConstraintVisitor0.visitDUP(dUP0);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(846);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(846, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LALOAD lALOAD0 = (LALOAD)InstructionConstants.LALOAD;
      F2I f2I0 = new F2I();
      f2I0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      localVariables0.set(248, objectType0);
      OperandStack operandStack0 = new OperandStack(248, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(3056, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      FCMPG fCMPG0 = new FCMPG();
      fCMPG0.toString(true);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(2811);
      I2F i2F0 = new I2F();
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      NOP nOP0 = new NOP();
      NOP nOP1 = new NOP();
      LALOAD lALOAD0 = new LALOAD();
      LALOAD lALOAD1 = new LALOAD();
      lALOAD0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(339);
      ObjectType objectType0 = new ObjectType("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(339, objectType0);
      ObjectType objectType1 = new ObjectType("V=-QN4Pqts`0");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      DUP dUP0 = new DUP();
      LCMP lCMP0 = new LCMP();
      IRETURN iRETURN0 = new IRETURN();
      DRETURN dRETURN0 = new DRETURN();
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of stack, b|t is: '");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(86);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(270);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(529, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.OBJECT);
      Frame.setThis(uninitializedObjectType1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      localVariables0.clone();
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      LSHL lSHL0 = new LSHL();
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = new ObjectType("{_n Z{C");
      OperandStack operandStack0 = new OperandStack(1966, objectType0);
      OperandStack operandStack1 = new OperandStack(1745);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      CALOAD cALOAD0 = new CALOAD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DUP2 dUP2_0 = new DUP2();
      dUP2_0.toString(false);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of stack, b|t is: '");
      localVariables0.toString();
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      iNEG0.toString();
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type 'Reference type expected on top of stack, b|t is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("Reference type expected ontp of sack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      LDC2_W lDC2_W0 = new LDC2_W(436);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(271);
      String string0 = Constants.ILLEGAL_TYPE;
      ObjectType objectType0 = new ObjectType("V=-QNPqts`0");
      ObjectType objectType1 = ObjectType.getInstance("<illegal type>");
      OperandStack operandStack0 = new OperandStack(43, objectType1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LCMP lCMP0 = new LCMP();
      Boolean boolean0 = new Boolean("<illegal type>");
      frame0.clone();
      IXOR iXOR0 = new IXOR();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      LNEG lNEG1 = new LNEG();
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `illegal type>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 289;
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IRETURN iRETURN0 = new IRETURN();
      LSHL lSHL0 = new LSHL();
      int int1 = Double.BYTES;
      LCMP lCMP0 = new LCMP();
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.DOUBLE);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("gU");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      localVariables0.getClone();
      BasicType basicType0 = Type.DOUBLE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(289);
      LSHL lSHL0 = new LSHL();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      objectType0.isAssignmentCompatibleWith(objectType0.BOOLEAN);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      INEG iNEG0 = new INEG();
      LAND lAND0 = new LAND();
      ConstantLong constantLong0 = new ConstantLong(2);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantClass constantClass0 = new ConstantClass(2);
      FSTORE fSTORE0 = new FSTORE(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'Reference type expected ontop of stack, but is: ''; Instruction type: 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(250);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of Etack, but is: '");
      localVariables0.set(248, objectType0);
      OperandStack operandStack0 = new OperandStack(248, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of stack, b|t is: '");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      DREM dREM0 = new DREM();
      AASTORE aASTORE0 = new AASTORE();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, b|t is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      int int0 = 89;
      OperandStack operandStack0 = new OperandStack(89, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      instConstraintVisitor0.setFrame(frame0);
      DCMPL dCMPL0 = new DCMPL();
      ISHR iSHR0 = new ISHR();
      int int1 = 2166;
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = new ObjectType("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2892));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      localVariables0.merge(localVariables0);
      BasicType basicType0 = Type.BYTE;
      operandStack0.equals(basicType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected ontop of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 3056;
      OperandStack operandStack0 = new OperandStack(3056, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(304);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(225, 304);
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "()LReference type expected on top of Etack, but is: ';");
      FALOAD fALOAD0 = new FALOAD();
      GETFIELD gETFIELD0 = new GETFIELD(225);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(294);
      ObjectType objectType0 = ObjectType.getInstance("ishr");
      localVariables0.set(248, objectType0);
      OperandStack operandStack0 = new OperandStack(248, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LCMP lCMP0 = new LCMP();
      LCMP lCMP1 = new LCMP();
      IXOR iXOR0 = new IXOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 'ishr'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      localVariables0.set(248, objectType0);
      OperandStack operandStack0 = new OperandStack(248, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LCMP lCMP0 = new LCMP();
      LCMP lCMP1 = new LCMP();
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(257);
      ObjectType objectType0 = new ObjectType("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      ObjectType objectType1 = new ObjectType("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(257, objectType1);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables1 = new LocalVariables(257);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type 'Referenqe type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RET rET0 = new RET(225);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 225.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type exp#cted on top of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Reference type exp#cted on top of stack,Hbut is: ");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'Reference type exp#cted on top of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Type.getType("V=-QN4Pqts`0");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(178);
      MockFile mockFile0 = new MockFile((File) null, "V=-QN4Pqts`0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DDIV dDIV0 = new DDIV();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IRETURN iRETURN0 = new IRETURN();
      LSHL lSHL0 = new LSHL();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(222, objectType0);
      operandStack0.merge(operandStack0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(319, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      L2D l2D0 = new L2D();
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      MockFile mockFile0 = new MockFile("V=-QN4Pqts`0", "V=-QN4Pqts`0");
      FCMPG fCMPG1 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(291);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      objectType0.isCastableTo(returnaddressType0);
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      L2D l2D0 = new L2D();
      DUP dUP0 = new DUP();
      FASTORE fASTORE0 = new FASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'V=-QN4Pqts`0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(280);
      ObjectType objectType0 = new ObjectType("The 'arrayref' does not refer to an array with elements of a ReferenceType but to an array of ");
      OperandStack operandStack0 = new OperandStack(280, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      operandStack0.equals(byteArray0);
      instConstraintVisitor0.setFrame(frame1);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does not refer to an array with elements of a ReferenceType but to an array of '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = new ObjectType("{_n Z{C");
      OperandStack operandStack0 = new OperandStack(1966, objectType0);
      OperandStack operandStack1 = new OperandStack(1745);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DUP2 dUP2_0 = new DUP2();
      localVariables0.toString();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type '{_n Z{C'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(270);
      ObjectType objectType0 = ObjectType.getInstance("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(270);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      OperandStack operandStack1 = new OperandStack(270, objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getStart();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      operandStack0.equals(iF_ACMPEQ0);
      instConstraintVisitor0.setFrame(frame1);
      LSUB lSUB0 = new LSUB();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LLOAD lLOAD0 = new LLOAD(8);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(lLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: Read-Access on local variable 8 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(0);
      ObjectType objectType0 = new ObjectType("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      L2D l2D0 = new L2D();
      DUP dUP0 = new DUP();
      dUP0.copy();
      instConstraintVisitor0.visitDUP(dUP0);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(231);
      MockFile mockFile0 = new MockFile((File) null, "V=-QN4Pqts`0");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(89);
      LLOAD lLOAD0 = new LLOAD(294);
      // Undeclared exception!
      try { 
        lLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(270);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      localVariables0.toString();
      int int0 = 529;
      OperandStack operandStack0 = new OperandStack(529, objectType0);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.OBJECT);
      Frame.setThis(uninitializedObjectType1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(285);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("-w Zp945:lbFFp");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      ASTORE aSTORE0 = new ASTORE(239);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals("astore", aSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = new ObjectType("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(319);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2793), 903);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW((ATHROW) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class V=-QN4Pqts`0: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: V=-QN4Pqts`0.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 312;
      LocalVariables localVariables0 = new LocalVariables(312);
      ObjectType objectType0 = new ObjectType("$@v");
      OperandStack operandStack0 = new OperandStack(312, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type '$@v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("gU");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Type.getType("Index '");
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      instructionList0.getByteCode();
      Class<INSTANCEOF>[] classArray0 = (Class<INSTANCEOF>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables((byte)115);
      String string0 = localVariables0.toString();
      ObjectType objectType0 = new ObjectType(string0);
      OperandStack operandStack0 = new OperandStack((byte)115, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      L2D l2D0 = new L2D();
      INEG iNEG0 = new INEG();
      IRETURN iRETURN0 = new IRETURN();
      LSHL lSHL0 = new LSHL();
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `unknown object>
         // 1: <unknown object>
         // 2: <unknown object>
         // 3: <unknown object>
         // 4: <unknown object>
         // 5: <unknown object>
         // 6: <unknown object>
         // 7: <unknown object>
         // 8: <unknown object>
         // 9: <unknown object>
         // 10: <unknown object>
         // 11: <unknown object>
         // 12: <unknown object>
         // 13: <unknown object>
         // 14: <unknown object>
         // 15: <unknown object>
         // 16: <unknown object>
         // 17: <unknown object>
         // 18: <unknown object>
         // 19: <unknown object>
         // 20: <unknown object>
         // 21: <unknown object>
         // 22: <unknown object>
         // 23: <unknown object>
         // 24: <unknown object>
         // 25: <unknown object>
         // 26: <unknown object>
         // 27: <unknown object>
         // 28: <unknown object>
         // 29: <unknown object>
         // 30: <unknown object>
         // 31: <unknown object>
         // 32: <unknown object>
         // 33: <unknown object>
         // 34: <unknown object>
         // 35: <unknown object>
         // 36: <unknown object>
         // 37: <unknown object>
         // 38: <unknown object>
         // 39: <unknown object>
         // 40: <unknown object>
         // 41: <unknown object>
         // 42: <unknown object>
         // 43: <unknown object>
         // 44: <unknown object>
         // 45: <unknown object>
         // 46: <unknown object>
         // 47: <unknown object>
         // 48: <unknown object>
         // 49: <unknown object>
         // 50: <unknown object>
         // 51: <unknown object>
         // 52: <unknown object>
         // 53: <unknown object>
         // 54: <unknown object>
         // 55: <unknown object>
         // 56: <unknown object>
         // 57: <unknown object>
         // 58: <unknown object>
         // 59: <unknown object>
         // 60: <unknown object>
         // 61: <unknown object>
         // 62: <unknown object>
         // 63: <unknown object>
         // 64: <unknown object>
         // 65: <unknown object>
         // 66: <unknown object>
         // 67: <unknown object>
         // 68: <unknown object>
         // 69: <unknown object>
         // 70: <unknown object>
         // 71: <unknown object>
         // 72: <unknown object>
         // 73: <unknown object>
         // 74: <unknown object>
         // 75: <unknown object>
         // 76: <unknown object>
         // 77: <unknown object>
         // 78: <unknown object>
         // 79: <unknown object>
         // 80: <unknown object>
         // 81: <unknown object>
         // 82: <unknown object>
         // 83: <unknown object>
         // 84: <unknown object>
         // 85: <unknown object>
         // 86: <unknown object>
         // 87: <unknown object>
         // 88: <unknown object>
         // 89: <unknown object>
         // 90: <unknown object>
         // 91: <unknown object>
         // 92: <unknown object>
         // 93: <unknown object>
         // 94: <unknown object>
         // 95: <unknown object>
         // 96: <unknown object>
         // 97: <unknown object>
         // 98: <unknown object>
         // 99: <unknown object>
         // 100: <unknown object>
         // 101: <unknown object>
         // 102: <unknown object>
         // 103: <unknown object>
         // 104: <unknown object>
         // 105: <unknown object>
         // 106: <unknown object>
         // 107: <unknown object>
         // 108: <unknown object>
         // 109: <unknown object>
         // 110: <unknown object>
         // 111: <unknown object>
         // 112: <unknown object>
         // 113: <unknown object>
         // 114: <unknown object>
         // ;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      objectType0.isAssignmentCompatibleWith(objectType0.BOOLEAN);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitDLOAD((DLOAD) null);
      LSUB lSUB0 = new LSUB();
      INEG iNEG0 = new INEG();
      DALOAD dALOAD0 = new DALOAD();
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'Reference type expected ontop of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(33, objectType0);
      LocalVariables localVariables0 = new LocalVariables(4134);
      DUP dUP0 = new DUP();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(235);
      Frame frame0 = new Frame(235, (-4464));
      frame0.clone();
      frame0.toString();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      LSHL lSHL0 = new LSHL();
      L2D l2D0 = new L2D();
      IINC iINC0 = new IINC(4134, 66);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      ObjectType objectType0 = new ObjectType("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(319);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2793), 903);
      operandStack0.clone();
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B((I2B) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 270;
      ObjectType objectType0 = ObjectType.getInstance("Referenqw type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      LocalVariables localVariables0 = new LocalVariables(270);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      int int1 = 0;
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'Referenqw type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.clone();
      localVariables0.merge(localVariables0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BIPUSH bIPUSH0 = new BIPUSH((byte)117);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      POP pOP0 = new POP();
      pOP0.toString();
      instConstraintVisitor0.visitPOP(pOP0);
      assertEquals("pop", pOP0.getName());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("gU");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean1 = new Boolean((boolean) boolean0);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      instructionList0.getByteCode();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      localVariables0.clone();
      Character.getName(319);
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Type.getType("V=-QN4Pqts`0");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LSUB lSUB0 = new LSUB();
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(46);
      LocalVariables localVariables1 = new LocalVariables(46);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(46, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Type.getType(class0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LALOAD lALOAD0 = (LALOAD)InstructionConstants.LALOAD;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = new Boolean("");
      ASTORE aSTORE0 = new ASTORE(781);
      InstructionList instructionList0 = new InstructionList();
      IINC iINC0 = new IINC(781, 46);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iINC0.produceStack(constantPoolGen0);
      IINC iINC1 = new IINC(0, 46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      localVariables0.set(225, objectType0);
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      operandStack0.pop();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FSTORE fSTORE0 = new FSTORE((short)46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(257);
      ObjectType objectType0 = new ObjectType("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      ObjectType objectType1 = new ObjectType("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(257, objectType1);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables1 = new LocalVariables(257);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      MONITOREXIT mONITOREXIT1 = new MONITOREXIT();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(518);
      FLOAD fLOAD0 = new FLOAD(518);
      fLOAD0.toString(true);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      ANEWARRAY aNEWARRAY1 = new ANEWARRAY(257);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'Referenqe type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(259, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.set(115, objectType0);
      localVariables0.getClone();
      operandStack0.clone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      IRETURN iRETURN0 = new IRETURN();
      LDC2_W lDC2_W0 = new LDC2_W(115);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(273);
      ObjectType objectType0 = new ObjectType("Reference type expected on top %f stack, but is: '");
      OperandStack operandStack0 = new OperandStack(273, objectType0);
      operandStack0.equals(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LALOAD lALOAD0 = (LALOAD)InstructionConstants.LALOAD;
      InstructionList instructionList0 = new InstructionList(lALOAD0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lALOAD0, (Instruction) lALOAD0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top %f stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Referenqw type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      LocalVariables localVariables0 = new LocalVariables(270);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      f2D0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'Referenqw type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("{_n {C");
      OperandStack operandStack0 = new OperandStack(1745, objectType0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)18;
      ObjectType objectType1 = new ObjectType("");
      OperandStack operandStack1 = new OperandStack((byte)18, objectType0);
      Boolean boolean0 = Boolean.TRUE;
      LocalVariables localVariables0 = new LocalVariables(3255);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Object object0 = new Object();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE((IF_ICMPNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected on top of Etack, but is: '");
      OperandStack operandStack0 = new OperandStack(225, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IRETURN iRETURN0 = new IRETURN();
      LSHL lSHL0 = new LSHL();
      int int0 = Double.BYTES;
      LCMP lCMP0 = new LCMP();
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type 'Reference type expected on top of Etack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = ObjectType.getInstance("{_n {C");
      OperandStack operandStack0 = new OperandStack(1866, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IRETURN iRETURN0 = new IRETURN();
      InstructionHandle instructionHandle0 = null;
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type '{_n {C'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      objectType0.isAssignmentCompatibleWith(objectType0.BOOLEAN);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitDLOAD((DLOAD) null);
      INSTANCEOF iNSTANCEOF0 = null;
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type 'Reference type expected ontop of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = new ObjectType("{_n Z{C");
      int int0 = 1966;
      OperandStack operandStack0 = new OperandStack(1966, objectType0);
      OperandStack operandStack1 = new OperandStack(1745);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      operandStack0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DUP2 dUP2_0 = new DUP2();
      localVariables0.toString();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD((LADD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(319);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectType objectType0 = ObjectType.getInstance("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(319, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DUP dUP0 = new DUP();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(33);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType1.setDescriptorIndex(319);
      constantMethodType1.clone();
      constantMethodType1.setDescriptorIndex(243);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE((IF_ICMPGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(219);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("Reference Mype expected oy top of stack, b|t is: '");
      OperandStack operandStack0 = new OperandStack(288, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.getClone();
      Frame.setThis(uninitializedObjectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(288, (short)1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '1' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables1 = new LocalVariables(2);
      localVariables0.merge(localVariables1);
      BasicType basicType0 = Type.BYTE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The 'objectref' is not of a ReferenceType or of ReturnaddressType but of ");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ObjectType.getInstance("Reference type expected ontop of stack, but is: '");
      LocalVariables localVariables2 = localVariables1.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      frame1.getClone();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR_W0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.getEnd();
      IFNE iFNE0 = new IFNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected ontop of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = new ObjectType("{_n Z{C");
      OperandStack operandStack0 = new OperandStack(1966, objectType0);
      OperandStack operandStack1 = new OperandStack(1745);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      operandStack0.push(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      SWAP sWAP0 = new SWAP();
      SWAP sWAP1 = new SWAP();
      instConstraintVisitor0.visitSWAP(sWAP0);
      assertEquals("swap", sWAP0.getName());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(270);
      ObjectType objectType0 = ObjectType.getInstance("Referenqw type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack1);
      Frame frame2 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame2);
      LSUB lSUB0 = new LSUB();
      I2C i2C0 = new I2C();
      I2C i2C1 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'Referenqw type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(270);
      ObjectType objectType0 = new ObjectType("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 178, 270);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      localVariables0.getClone();
      byteArrayInputStream0.mark(270);
      sequenceInputStream0.mark(226);
      frame0.equals(sequenceInputStream0);
      InstructionList instructionList0 = new InstructionList();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ASTORE aSTORE0 = new ASTORE(663);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      assertEquals(663, aSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(42);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ObjectType objectType0 = ObjectType.getInstance("<clinit>");
      OperandStack operandStack0 = new OperandStack((byte)87, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      IRETURN iRETURN0 = new IRETURN();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(280);
      ObjectType objectType0 = new ObjectType("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(280, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 178, 280);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      localVariables0.getClone();
      byteArrayInputStream0.mark((-598));
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IRETURN iRETURN0 = new IRETURN();
      InstructionHandle instructionHandle0 = null;
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(280);
      ObjectType objectType0 = ObjectType.getInstance("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(280, objectType0);
      Frame frame0 = new Frame(280, 280);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 178, 280);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LDC2_W lDC2_W0 = new LDC2_W(178);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        lDC2_W0.getValue(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LDC2_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(256);
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(256, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      byte[] byteArray0 = new byte[0];
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack1 = new OperandStack(812);
      OperandStack operandStack2 = new OperandStack(256, objectType0);
      operandStack1.push(objectType0);
      ReferenceType referenceType0 = Type.NULL;
      operandStack1.pop();
      Frame frame1 = new Frame(localVariables0, operandStack2);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'Referenqe type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Referenqw type exp#ced on toz%of stack,Hbut i: ");
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(270);
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      LocalVariables localVariables0 = new LocalVariables(270);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type 'Referenqw type exp#ced on toz%of stack,Hbut i: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(154);
      LocalVariables localVariables1 = new LocalVariables(92);
      ObjectType objectType0 = new ObjectType("$@v");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      F2L f2L0 = new F2L();
      F2L f2L1 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type '$@v'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(273);
      ObjectType objectType0 = new ObjectType("Reference type expected on top %f stack, but is: '");
      OperandStack operandStack0 = new OperandStack(273, objectType0);
      operandStack0.equals(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LALOAD lALOAD0 = (LALOAD)InstructionConstants.LALOAD;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstructionList instructionList0 = new InstructionList(lALOAD0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lALOAD0, (Instruction) lALOAD0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      F2I f2I0 = new F2I();
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'Reference type expected on top %f stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = ObjectType.getInstance("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.clone();
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'Referenqe type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("gU");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      BasicType basicType0 = Type.DOUBLE;
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type 'gU'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(289);
      ObjectType objectType0 = new ObjectType("Reference type expected on top of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(289, objectType0);
      operandStack0.push(objectType0);
      Boolean boolean0 = new Boolean("Reference type expected on top of stack, but is: '");
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      frame0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on top of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("V=-QN4Pqts`0");
      OperandStack operandStack0 = new OperandStack(319, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      objectType0.getFirstCommonSuperclass(referenceType0);
      LSUB lSUB0 = new LSUB();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = null;
      LCMP lCMP0 = new LCMP();
      LCONST lCONST0 = null;
      try {
        lCONST0 = new LCONST(319);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LCONST can be used only for 0 and 1: 319
         //
         verifyException("org.apache.bcel.generic.LCONST", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalVariables localVariables0 = new LocalVariables(1745);
      ObjectType objectType0 = new ObjectType("{_n Z{C");
      OperandStack operandStack0 = new OperandStack(1966, objectType0);
      OperandStack operandStack1 = new OperandStack(1745);
      Boolean boolean0 = Boolean.TRUE;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      CALOAD cALOAD0 = new CALOAD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DUP2 dUP2_0 = new DUP2();
      dUP2_0.toString(false);
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type '{_n Z{C'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Referenqw type exp#ced on toz%of stack,Hbut is: ");
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(270);
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      LocalVariables localVariables0 = new LocalVariables(270);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DLOAD dLOAD0 = new DLOAD(270);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      LUSHR lUSHR0 = new LUSHR();
      operandStack0.push(objectType0);
      LUSHR lUSHR1 = new LUSHR();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      DUP2_X2 dUP2_X2_1 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Referenqw type exp#ced on toz%of stack,Hbut is: ");
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(270);
      OperandStack operandStack0 = new OperandStack(270, objectType0);
      LocalVariables localVariables0 = new LocalVariables(270);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(270, 270);
      localVariables0.merge(localVariables1);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = (POP)InstructionConstants.POP;
      DNEG dNEG0 = new DNEG();
      dNEG0.toString(true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'Referenqw type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(244);
      ObjectType objectType0 = ObjectType.getInstance("ifnonnull");
      OperandStack operandStack0 = new OperandStack(244, objectType0);
      operandStack0.push(objectType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-90);
      LCMP lCMP0 = new LCMP();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.getClone();
      LSHL lSHL0 = new LSHL();
      DUP dUP0 = new DUP();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      FCMPG fCMPG0 = new FCMPG();
      FCMPG fCMPG1 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'ifnonnull'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(280);
      ObjectType objectType0 = ObjectType.getInstance("Referenqe type exp#ced on toz%of stack,Hbut is: ");
      OperandStack operandStack0 = new OperandStack(280, objectType0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack1 = new OperandStack(2638, objectType0);
      OperandStack operandStack2 = new OperandStack(55, objectType0);
      ReferenceType referenceType0 = Type.NULL;
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Method.getComparator();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-598));
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITORENTER((MONITORENTER) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Referenqe type exp#ced on toz%of stack,Hbut is: ");
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'Referenqe type exp#ced on toz%of stack,Hbut is: '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("Reference type expected ontp of sack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitDLOAD((DLOAD) null);
      LUSHR lUSHR0 = new LUSHR();
      LUSHR lUSHR1 = new LUSHR();
      POP pOP0 = new POP();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      POP pOP1 = new POP();
      pOP1.accept(instConstraintVisitor0);
      Instruction.readInstruction(byteSequence0);
      localVariables0.toString();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP_X1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DUP_X1 constraint violated: Cannot produce 1 stack slots: only 0 free stack slot(s) left.
         // Stack:
         // Slots used: 2 MaxStack: 2.
         // Reference type expected ontp of sack, but is: ' (Size: 1)
         // Reference type expected ontp of sack, but is: ' (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("Reference type expected ontp of sack, but is: '");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitDLOAD((DLOAD) null);
      LUSHR lUSHR0 = new LUSHR();
      POP pOP0 = new POP();
      FileSystemHandling.shouldAllThrowIOExceptions();
      pOP0.accept(instConstraintVisitor0);
      LRETURN lRETURN0 = new LRETURN();
      pOP0.toString();
      pOP0.produceStack((ConstantPoolGen) null);
      localVariables0.toString();
      OperandStack operandStack1 = new OperandStack(210, objectType0);
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      operandStack1.equals(iMPDEP2_0);
      operandStack1.clone();
      DUP_X2 dUP_X2_0 = new DUP_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
