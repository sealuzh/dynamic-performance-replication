/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:38:18 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.Label;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.beans.VetoableChangeListenerProxy;
import java.beans.beancontext.BeanContext;
import java.beans.beancontext.BeanContextServicesSupport;
import java.beans.beancontext.BeanContextSupport;
import java.io.IOException;
import java.text.AttributedCharacterIterator;
import java.time.Clock;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.function.Function;
import javax.swing.ActionMap;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.JSplitPane;
import javax.swing.KeyStroke;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.CheckGOE;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.Resample;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.getFilter();
      String string1 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("+1/B*=bQHe@");
      boolean boolean1 = filter0.isBusy();
      assertTrue(boolean1 == boolean0);
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFocusTraversalPolicy();
      filter0.stop();
      TextViewer textViewer0 = new TextViewer();
      filter0.addDataSourceListener(textViewer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.connectionNotification("SC", "SC");
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, 304, 304);
      filter0.acceptTestSet(testSetEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(testSetEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.TestSetEvent : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeTrainingSetListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      filter0.setVisual((BeanVisual) null);
      assertFalse(filter0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(1956);
      Filter filter0 = new Filter();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setWrappedAlgorithm(nominalToBinary0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(nominalToBinary0, (Instances) null, 1956, 21);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("NominalToBinary", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getLocale();
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      filter0.removeMouseWheelListener((MouseWheelListener) null);
      filter0.removeTestSetListener((TestSetListener) null);
      filter0.stop();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      costBenefitAnalysis0.add((Component) filter0);
      filter0.connectionNotification("instance", (Object) null);
      filter0.getFilter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      Object object0 = BeanContext.globalHierarchyLock;
      Loader loader0 = new Loader();
      loader0.getStructure("");
      filter0.connectionNotification("", loader0);
      filter0.useDefaultVisual();
      filter0.stop();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("instance", arrayList0, 226);
      filter0.setIgnoreRepaint(true);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      attributeSummarizer0.addAncestorListener(ancestorListener0);
      filter0.doLayout();
      attributeSummarizer0.setOffscreenYAxis("instance");
      Classifier classifier0 = new Classifier();
      DataSetEvent dataSetEvent0 = new DataSetEvent(classifier0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeTestSetListener(attributeSummarizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanVisual beanVisual0 = appender0.m_visual;
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, 0, 2);
      testSetEvent0.m_maxRunNumber = 3;
      filter0.acceptTestSet(testSetEvent0);
      filter0.stop();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ImageSaver imageSaver0 = new ImageSaver();
      Logger logger0 = imageSaver0.m_logger;
      Appender appender1 = new Appender();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      InstanceEvent instanceEvent0 = new InstanceEvent(clustererPerformanceEvaluator0);
      filter0.getCustomName();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("configuration");
      Associator associator0 = new Associator();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.getActionMap();
      ActionMap actionMap0 = new ActionMap();
      filter0.setActionMap(actionMap0);
      predictionAppender0.getInheritsPopupMenu();
      predictionAppender0.add((Component) associator0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.isBusy();
      filter0.getAlignmentX();
      flowByExpression0.setIgnoreRepaint(false);
      filter0.setFocusTraversalPolicyProvider(true);
      filter0.addTestSetListener(flowByExpression0);
      filter0.getWrappedAlgorithm();
      filter0.connectionNotification("configuration", predictionAppender0);
      filter0.connectionNotification("configuration", actionMap0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      Object object0 = BeanContext.globalHierarchyLock;
      Loader loader0 = new Loader();
      loader0.getStructure("");
      filter0.useDefaultVisual();
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("oIKdRyaw", beanContextSupport0);
      Sorter sorter0 = new Sorter();
      filter0.connectionNotification("", beanContextSupport0);
      filter0.useDefaultVisual();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      filter0.getFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Filter filter1 = new Filter();
      filter1.stop();
      boolean boolean0 = filter0.eventGeneratable("weka/gui/beans/icons/");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      Associator associator0 = new Associator();
      filter0.addDataSourceListener(associator0);
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy(")", beanContextServicesSupport0);
      Sorter sorter0 = new Sorter();
      MockThaiBuddhistDate.now();
      filter0.useDefaultVisual();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("configuration", arrayList0, 0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      Filter filter1 = new Filter();
      filter0.acceptDataSet(dataSetEvent0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      String string0 = filter1.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{84Q~Z!}L'.J");
      assertFalse(boolean0);
      
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      assertNotNull(beanContextSupport0);
      assertEquals(0, beanContextSupport0.size());
      assertFalse(beanContextSupport0.isDelegated());
      assertFalse(beanContextSupport0.isSerializing());
      assertTrue(beanContextSupport0.isEmpty());
      assertFalse(beanContextSupport0.isDesignTime());
      
      filter0.removeVetoableChangeListener(beanContextSupport0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals(0, beanContextSupport0.size());
      assertFalse(beanContextSupport0.isDelegated());
      assertFalse(beanContextSupport0.isSerializing());
      assertTrue(beanContextSupport0.isEmpty());
      assertFalse(beanContextSupport0.isDesignTime());
      
      boolean boolean1 = filter0.connectionAllowed(".arff");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.connectionNotification("FI87M/@", ".arff");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean4 = beanContextSupport0.add("FI87M/@");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(beanContextSupport0.isDelegated());
      assertEquals(1, beanContextSupport0.size());
      assertFalse(beanContextSupport0.isSerializing());
      assertFalse(beanContextSupport0.isEmpty());
      assertFalse(beanContextSupport0.isDesignTime());
      
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      assertNotNull(stratifiedRemoveFolds0);
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertNotNull(textDirectoryLoader0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertNotNull(instances0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      
      boolean boolean5 = instances0.containsAll(beanContextSupport0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(beanContextSupport0.isDelegated());
      assertEquals(1, beanContextSupport0.size());
      assertFalse(beanContextSupport0.isSerializing());
      assertFalse(beanContextSupport0.isEmpty());
      assertFalse(beanContextSupport0.isDesignTime());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      
      textDirectoryLoader0.setCharSet(".bsi");
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(".bsi", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      
      boolean boolean6 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      
      instances0.deleteWithMissing((-3285));
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(".bsi", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      
      boolean boolean7 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean7);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      assertNotNull(stringArray0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(".bsi", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      
      InstanceEvent instanceEvent0 = new InstanceEvent(stratifiedRemoveFolds0, instances0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(".bsi", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals(0, instanceEvent0.getStatus());
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(".bsi", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      
      filter0.setFilter(stratifiedRemoveFolds0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", filter0.globalInfo());
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      
      filter0.useDefaultVisual();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", filter0.globalInfo());
      
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", string0);
      assertNotNull(string0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", filter0.globalInfo());
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertNotNull(enumeration0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", filter0.globalInfo());
      
      String string1 = filter0.getCustomName();
      assertEquals("StratifiedRemoveFolds", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", filter0.globalInfo());
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(beanContextSupport0, instances0, (-3285), 1266);
      assertNotNull(trainingSetEvent0);
      assertFalse(beanContextSupport0.isDelegated());
      assertEquals(1, beanContextSupport0.size());
      assertFalse(beanContextSupport0.isSerializing());
      assertFalse(beanContextSupport0.isEmpty());
      assertFalse(beanContextSupport0.isDesignTime());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals((-3285), trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(1266, trainingSetEvent0.getMaxSetNumber());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(".bsi", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", filter0.globalInfo());
      assertFalse(beanContextSupport0.isDelegated());
      assertEquals(1, beanContextSupport0.size());
      assertFalse(beanContextSupport0.isSerializing());
      assertFalse(beanContextSupport0.isEmpty());
      assertFalse(beanContextSupport0.isDesignTime());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals((-3285), trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(1266, trainingSetEvent0.getMaxSetNumber());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(".bsi", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      HierarchyListener[] hierarchyListenerArray0 = filter0.getHierarchyListeners();
      assertNotNull(hierarchyListenerArray0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean0 = filter0.eventGeneratable("fx>;/ h*wa;&TTi");
      assertFalse(boolean0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertNotNull(attributeSummarizer0);
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.isBusy());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Instances instances0 = new Instances("fx>;/ h*wa;&TTi", arrayList0, 2567);
      assertNotNull(instances0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fx>;/ h*wa;&TTi", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      
      MultiFilter multiFilter1 = new MultiFilter();
      assertFalse(multiFilter1.equals((Object)multiFilter0));
      assertNotNull(multiFilter1);
      assertFalse(multiFilter1.getDebug());
      assertFalse(multiFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter1.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter1.globalInfo());
      assertTrue(multiFilter1.isNewBatch());
      assertFalse(multiFilter1.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter1.debugTipText());
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(multiFilter1, instances0);
      assertFalse(multiFilter1.equals((Object)multiFilter0));
      assertNotNull(dataSetEvent0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fx>;/ h*wa;&TTi", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(multiFilter1.getDebug());
      assertFalse(multiFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter1.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter1.globalInfo());
      assertTrue(multiFilter1.isNewBatch());
      assertFalse(multiFilter1.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter1.debugTipText());
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(multiFilter1.equals((Object)multiFilter0));
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fx>;/ h*wa;&TTi", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(multiFilter1.getDebug());
      assertFalse(multiFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter1.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter1.globalInfo());
      assertTrue(multiFilter1.isNewBatch());
      assertFalse(multiFilter1.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter1.debugTipText());
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotSame(filter0, filter1);
      assertNotSame(multiFilter1, multiFilter0);
      
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      assertNotNull(basicPanelUI0);
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      
      filter0.addTrainingSetListener(filter0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotSame(filter0, filter1);
      
      String string0 = filter0.getCustomName();
      assertEquals("MultiFilter", string0);
      assertFalse(filter0.equals((Object)filter1));
      assertNotNull(string0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotSame(filter0, filter1);
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke('1');
      assertNotNull(keyStroke0);
      assertFalse(keyStroke0.isOnKeyRelease());
      assertEquals('1', keyStroke0.getKeyChar());
      assertEquals(0, keyStroke0.getModifiers());
      assertEquals(0, keyStroke0.getKeyCode());
      assertEquals(400, keyStroke0.getKeyEventType());
      
      TestSetEvent testSetEvent0 = new TestSetEvent("MultiFilter", instances0);
      assertNotNull(testSetEvent0);
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fx>;/ h*wa;&TTi", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      
      filter1.acceptTestSet(testSetEvent0);
      assertFalse(filter1.equals((Object)filter0));
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.isBusy());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("fx>;/ h*wa;&TTi", instances0.relationName());
      assertEquals(0, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertNotSame(filter1, filter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = filter0.eventGeneratable("configuration");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      Sorter sorter0 = new Sorter();
      assertNotNull(sorter0);
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isBusy());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      assertNotNull(thaiBuddhistDate0);
      
      ThaiBuddhistDate thaiBuddhistDate1 = MockThaiBuddhistDate.now();
      assertTrue(thaiBuddhistDate1.equals((Object)thaiBuddhistDate0));
      assertNotNull(thaiBuddhistDate1);
      assertNotSame(thaiBuddhistDate1, thaiBuddhistDate0);
      
      filter0.useDefaultVisual();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertNotNull(beanVisual0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Instances instances0 = new Instances("configuration", arrayList0, 1);
      assertNotNull(instances0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      assertNotNull(dataSetEvent0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertTrue(dataSetEvent0.isStructureOnly());
      
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertTrue(dataSetEvent0.isStructureOnly());
      
      filter0.addTrainingSetListener(associator0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertNotNull(allFilter0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      
      System.setCurrentTimeMillis(106L);
      TestSetEvent testSetEvent0 = new TestSetEvent(allFilter0, instances0);
      assertNotNull(testSetEvent0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      
      filter0.removeInstanceListener(filter0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      
      MetaBean metaBean0 = new MetaBean();
      assertNotNull(metaBean0);
      assertTrue(metaBean0.getFocusTraversalKeysEnabled());
      assertFalse(metaBean0.getIgnoreRepaint());
      assertFalse(metaBean0.isFocusTraversalPolicySet());
      assertEquals("Group", metaBean0.getCustomName());
      assertFalse(metaBean0.isFocusCycleRoot());
      assertFalse(metaBean0.isFocusTraversalPolicyProvider());
      
      filter0.connectionNotification("configuration", metaBean0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(metaBean0.getFocusTraversalKeysEnabled());
      assertFalse(metaBean0.getIgnoreRepaint());
      assertFalse(metaBean0.isFocusTraversalPolicySet());
      assertEquals("Group", metaBean0.getCustomName());
      assertFalse(metaBean0.isFocusCycleRoot());
      assertFalse(metaBean0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = filter0.eventGeneratable("configuration");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isFocusCycleRoot());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.getIgnoreRepaint());
      
      filter0.addDataSourceListener(associator0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isFocusCycleRoot());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.getIgnoreRepaint());
      
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      assertNotNull(beanContextSupport0);
      assertFalse(beanContextSupport0.isSerializing());
      assertFalse(beanContextSupport0.isDesignTime());
      assertFalse(beanContextSupport0.isDelegated());
      assertEquals(0, beanContextSupport0.size());
      assertTrue(beanContextSupport0.isEmpty());
      
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy(")", beanContextSupport0);
      assertNotNull(vetoableChangeListenerProxy0);
      assertFalse(beanContextSupport0.isSerializing());
      assertFalse(beanContextSupport0.isDesignTime());
      assertFalse(beanContextSupport0.isDelegated());
      assertEquals(0, beanContextSupport0.size());
      assertTrue(beanContextSupport0.isEmpty());
      assertEquals(")", vetoableChangeListenerProxy0.getPropertyName());
      
      Sorter sorter0 = new Sorter();
      assertNotNull(sorter0);
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertEquals("10000", sorter0.getBufferSize());
      assertEquals("", sorter0.getTempDirectory());
      assertNull(sorter0.getSortDetails());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      filter0.connectionNotification("configuration", mockThaiBuddhistDate0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.useDefaultVisual();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertNotNull(beanVisual0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("AllFilter", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      
      AllFilter allFilter0 = (AllFilter)filter0.getFilter();
      assertNotNull(allFilter0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Instances instances0 = new Instances("configuration", arrayList0, 0);
      assertNotNull(instances0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      assertNotNull(dataSetEvent0);
      assertTrue(dataSetEvent0.isStructureOnly());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.equals((Object)filter1));
      assertTrue(dataSetEvent0.isStructureOnly());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertNotSame(filter0, filter1);
      
      Filter filter2 = new Filter();
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      assertNotNull(filter2);
      assertFalse(filter2.isBusy());
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      filter2.setLog(sysErrLog0);
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.isBusy());
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertNotSame(filter2, filter1);
      assertNotSame(filter2, filter0);
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      filter1.notifyInstanceListeners(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals(0, instanceEvent0.getStatus());
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
      
      filter0.addTrainingSetListener(associator0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isFocusCycleRoot());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.getIgnoreRepaint());
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      
      AllFilter allFilter1 = (AllFilter)filter1.getWrappedAlgorithm();
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      assertFalse(allFilter1.equals((Object)allFilter0));
      assertNotNull(allFilter1);
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(allFilter1.isOutputFormatDefined());
      assertTrue(allFilter1.isNewBatch());
      assertFalse(allFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(allFilter1.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter1.globalInfo());
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
      assertNotSame(allFilter1, allFilter0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(arrayList0, instances0, (-1934218055), 2);
      assertNotNull(trainingSetEvent0);
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(2, trainingSetEvent0.getMaxSetNumber());
      assertEquals((-1934218055), trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertNotNull(scatterPlotMatrix0);
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      
      TrainingSetEvent trainingSetEvent1 = new TrainingSetEvent(scatterPlotMatrix0, instances0, 1609, 0, (-25), (-25));
      assertFalse(trainingSetEvent1.equals((Object)trainingSetEvent0));
      assertNotNull(trainingSetEvent1);
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertEquals(0, trainingSetEvent1.getMaxRunNumber());
      assertEquals(1609, trainingSetEvent1.getRunNumber());
      assertTrue(trainingSetEvent1.isStructureOnly());
      assertEquals((-25), trainingSetEvent1.getSetNumber());
      assertEquals((-25), trainingSetEvent1.getMaxSetNumber());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(trainingSetEvent0.equals((Object)trainingSetEvent1));
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(2, trainingSetEvent0.getMaxSetNumber());
      assertEquals((-1934218055), trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("configuration", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertNotSame(trainingSetEvent0, trainingSetEvent1);
      
      Resample resample0 = new Resample();
      assertNotNull(resample0);
      assertEquals("Whether to use bias towards a uniform class. A value of 0 leaves the class distribution as-is, a value of 1 ensures the class distribution is uniform in the output data.", resample0.biasToUniformClassTipText());
      assertEquals("Inverts the selection (only if instances are drawn WITHOUT replacement).", resample0.invertSelectionTipText());
      assertFalse(resample0.isOutputFormatDefined());
      assertEquals("Sets the random number seed for subsampling.", resample0.randomSeedTipText());
      assertEquals(100.0, resample0.getSampleSizePercent(), 0.01);
      assertEquals(0.0, resample0.getBiasToUniformClass(), 0.01);
      assertEquals("Produces a random subsample of a dataset using either sampling with replacement or without replacement.\nThe original dataset must fit entirely in memory. The number of instances in the generated dataset may be specified. The dataset must have a nominal class attribute. If not, use the unsupervised version. The filter can be made to maintain the class distribution in the subsample, or to bias the class distribution toward a uniform distribution. When used in batch mode (i.e. in the FilteredClassifier), subsequent batches are NOT resampled.", resample0.globalInfo());
      assertFalse(resample0.getNoReplacement());
      assertFalse(resample0.isFirstBatchDone());
      assertFalse(resample0.getInvertSelection());
      assertEquals(1, resample0.getRandomSeed());
      assertFalse(resample0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The subsample size as a percentage of the original set.", resample0.sampleSizePercentTipText());
      assertTrue(resample0.isNewBatch());
      assertEquals("Disables the replacement of instances.", resample0.noReplacementTipText());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      boolean boolean0 = filter0.isPaintingForPrint();
      assertFalse(boolean0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      filter0.performRequest("Stop");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Label label0 = null;
      try {
        label0 = new Label("Stop", 46);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) null);
      assertNull(mouseListener0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MouseListener mouseListener1 = AWTEventMulticaster.remove((MouseListener) null, (MouseListener) null);
      assertNull(mouseListener1);
      
      filter0.removeMouseListener((MouseListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      filter0.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      filter0.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      CSVLoader cSVLoader0 = new CSVLoader();
      assertNotNull(cSVLoader0);
      assertEquals("The character to use as separator for the columns/fields (use '\\t' for TAB).", cSVLoader0.fieldSeparatorTipText());
      assertEquals(".csv", cSVLoader0.getFileExtension());
      assertEquals("The placeholder for missing values, default is '?'.", cSVLoader0.missingValueTipText());
      assertEquals("\",'", cSVLoader0.getEnclosureCharacters());
      assertFalse(cSVLoader0.getUseRelativePath());
      assertEquals("The range of attributes to force to type STRING, example ranges: 'first-last', '1,4,7-14, 50-last'.", cSVLoader0.dateAttributesTipText());
      assertEquals("?", cSVLoader0.getMissingValue());
      assertEquals("First row of data does not contain attribute names", cSVLoader0.noHeaderRowPresentTipText());
      assertEquals("The range of attributes to force to be of type NOMINAL, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader0.nominalAttributesTipText());
      assertFalse(cSVLoader0.getNoHeaderRowPresent());
      assertEquals("The range of attributes to force to be of type STRING, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader0.stringAttributesTipText());
      assertEquals("The format to use for parsing date values.", cSVLoader0.dateFormatTipText());
      assertEquals("", cSVLoader0.getDateFormat());
      assertEquals("Reads a source that is in comma separated format (the default). One can also change the column separator from comma to tab or another character. Assumes that the first row in the file determines the number of and names of the attributes.", cSVLoader0.globalInfo());
      assertEquals("CSV data files", cSVLoader0.getFileDescription());
      assertEquals("Use relative rather than absolute paths", cSVLoader0.useRelativePathTipText());
      assertEquals("The characters to use as enclosures for strings. E.g. \",'", cSVLoader0.enclosureCharactersTipText());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      HierarchyListener[] hierarchyListenerArray0 = filter0.getHierarchyListeners();
      assertNotNull(hierarchyListenerArray0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean0 = filter0.eventGeneratable(" : incorrect ");
      assertFalse(boolean0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertNotNull(attributeSummarizer0);
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      
      System.setCurrentTimeMillis(9223372036854775807L);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertNotNull(flowByExpression0);
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      
      FlowByExpression flowByExpression1 = new FlowByExpression();
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertNotNull(flowByExpression1);
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals("", flowByExpression1.getExpressionString());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isBusy());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      
      InstanceEvent instanceEvent0 = flowByExpression1.m_ie;
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      instanceEvent0.setStatus((-1045));
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals("", flowByExpression1.getExpressionString());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isBusy());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertEquals((-1045), instanceEvent0.getStatus());
      assertNotSame(flowByExpression1, flowByExpression0);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals("", flowByExpression1.getExpressionString());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isBusy());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertEquals((-1045), instanceEvent0.getStatus());
      assertNotSame(flowByExpression1, flowByExpression0);
      
      boolean boolean2 = filter0.isBusy();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      
      filter0.setCustomName(" : Lncorrect ");
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals(" : Lncorrect ", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = filter0.getVerifyInputWhenFocusTarget();
      assertTrue(boolean0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Sorter sorter0 = new Sorter();
      assertNotNull(sorter0);
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isBusy());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertEquals("", sorter0.getTempDirectory());
      assertNull(sorter0.getSortDetails());
      assertEquals("10000", sorter0.getBufferSize());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertNotNull(flowByExpression0);
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      
      FlowByExpression flowByExpression1 = new FlowByExpression();
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertNotNull(flowByExpression1);
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertFalse(flowByExpression1.isBusy());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("", flowByExpression1.getExpressionString());
      
      InstanceEvent instanceEvent0 = flowByExpression1.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      filter0.setLog(sysErrLog0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      flowByExpression1.addAncestorListener(ancestorListener0);
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertFalse(flowByExpression1.isBusy());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("", flowByExpression1.getExpressionString());
      assertNotSame(flowByExpression1, flowByExpression0);
      
      Appender appender1 = new Appender();
      assertFalse(appender1.equals((Object)appender0));
      assertNotNull(appender1);
      assertFalse(appender1.isFocusTraversalPolicySet());
      assertEquals("Appender", appender1.getCustomName());
      assertTrue(appender1.getFocusTraversalKeysEnabled());
      assertFalse(appender1.isBusy());
      assertFalse(appender1.getIgnoreRepaint());
      assertFalse(appender1.isFocusTraversalPolicyProvider());
      assertFalse(appender1.isFocusCycleRoot());
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertFalse(flowByExpression1.isBusy());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("", flowByExpression1.getExpressionString());
      assertEquals(0, instanceEvent0.getStatus());
      assertNotSame(flowByExpression1, flowByExpression0);
      
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertNotNull(string0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.removeInstanceListener(flowByExpression0);
      assertFalse(flowByExpression0.equals((Object)flowByExpression1));
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertNotSame(flowByExpression0, flowByExpression1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      
      HierarchyListener[] hierarchyListenerArray0 = filter0.getHierarchyListeners();
      assertNotNull(hierarchyListenerArray0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      InstanceEvent instanceEvent1 = appender0.m_ie;
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertNotNull(instanceEvent1);
      assertEquals(0, instanceEvent1.getStatus());
      assertSame(instanceEvent1, instanceEvent0);
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertNotNull(predictionAppender0);
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      assertNotNull(spreadSubsample0);
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      assertNotNull(styleConstants0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      instanceEvent1.setStatus(1);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertEquals(1, instanceEvent1.getStatus());
      assertSame(instanceEvent1, instanceEvent0);
      
      sysErrLog0.statusMessage("0r0=");
      sysErrLog0.logMessage("0r0=");
      filter0.setLog(sysErrLog0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      
      Appender appender1 = new Appender();
      assertFalse(appender1.equals((Object)appender0));
      assertNotNull(appender1);
      assertFalse(appender1.isBusy());
      assertFalse(appender1.isFocusTraversalPolicyProvider());
      assertFalse(appender1.isFocusTraversalPolicySet());
      assertFalse(appender1.getIgnoreRepaint());
      assertEquals("Appender", appender1.getCustomName());
      assertFalse(appender1.isFocusCycleRoot());
      assertTrue(appender1.getFocusTraversalKeysEnabled());
      
      Appender appender2 = new Appender();
      assertFalse(appender2.equals((Object)appender1));
      assertFalse(appender2.equals((Object)appender0));
      assertNotNull(appender2);
      assertFalse(appender2.getIgnoreRepaint());
      assertFalse(appender2.isBusy());
      assertFalse(appender2.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender2.getCustomName());
      assertFalse(appender2.isFocusTraversalPolicySet());
      assertTrue(appender2.getFocusTraversalKeysEnabled());
      assertFalse(appender2.isFocusCycleRoot());
      
      filter0.acceptInstance(instanceEvent1);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(appender0.equals((Object)appender1));
      assertFalse(appender0.equals((Object)appender2));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertEquals(1, instanceEvent1.getStatus());
      assertNotSame(appender0, appender1);
      assertNotSame(appender0, appender2);
      assertSame(instanceEvent1, instanceEvent0);
      
      filter0.connectionNotification("G3\"6|BG+r;&m`", "G3\"6|BG+r;&m`");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      
      Random.setNextRandom(1);
      filter0.addTestSetListener(appender2);
      assertFalse(appender2.equals((Object)appender1));
      assertFalse(appender2.equals((Object)appender0));
      assertFalse(appender2.getIgnoreRepaint());
      assertFalse(appender2.isBusy());
      assertFalse(appender2.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender2.getCustomName());
      assertFalse(appender2.isFocusTraversalPolicySet());
      assertTrue(appender2.getFocusTraversalKeysEnabled());
      assertFalse(appender2.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotSame(appender2, appender1);
      assertNotSame(appender2, appender0);
      
      filter0.removeInstanceListener(appender0);
      assertFalse(appender0.equals((Object)appender1));
      assertFalse(appender0.equals((Object)appender2));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertNotSame(appender0, appender1);
      assertNotSame(appender0, appender2);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertNotNull(enumeration0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      assertNotNull(findWithCapabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      filter0.setInheritsPopupMenu(false);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertNotNull(scatterPlotMatrix0);
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertEquals("EM", clusterer0.getCustomName());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isFocusCycleRoot());
      
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      assertNotNull(crossValidationFoldMaker0);
      assertEquals(10, crossValidationFoldMaker0.getFolds());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicySet());
      assertFalse(crossValidationFoldMaker0.getPreserveOrder());
      assertFalse(crossValidationFoldMaker0.isBusy());
      assertEquals("Split an incoming data set into cross validation folds. Separate train and test sets are produced for each of the k folds.", crossValidationFoldMaker0.globalInfo());
      assertEquals("CrossValidationFoldMaker", crossValidationFoldMaker0.getCustomName());
      assertFalse(crossValidationFoldMaker0.getIgnoreRepaint());
      assertEquals("The number of train and test splits to produce", crossValidationFoldMaker0.foldsTipText());
      assertTrue(crossValidationFoldMaker0.getFocusTraversalKeysEnabled());
      assertEquals("The randomization seed", crossValidationFoldMaker0.seedTipText());
      assertEquals(1, crossValidationFoldMaker0.getSeed());
      assertFalse(crossValidationFoldMaker0.isFocusCycleRoot());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicyProvider());
      
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertFalse(filter0.equals((Object)filter1));
      assertNotNull(string0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotSame(filter0, filter1);
      
      Classifier classifier0 = new Classifier();
      assertNotNull(classifier0);
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertEquals(2, classifier0.getExecutionSlots());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      
      Classifier classifier1 = new Classifier();
      assertFalse(classifier1.equals((Object)classifier0));
      assertNotNull(classifier1);
      assertEquals("", classifier1.getLoadClassifierFileName());
      assertTrue(classifier1.getFocusTraversalKeysEnabled());
      assertFalse(classifier1.getIgnoreRepaint());
      assertEquals("ZeroR", classifier1.getCustomName());
      assertFalse(classifier1.hasIncomingStreamInstances());
      assertEquals(2, classifier1.getExecutionSlots());
      assertFalse(classifier1.getResetIncrementalClassifier());
      assertFalse(classifier1.getBlockOnLastFold());
      assertTrue(classifier1.getUpdateIncrementalClassifier());
      assertFalse(classifier1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier1.globalInfo());
      assertFalse(classifier1.hasIncomingBatchInstances());
      assertFalse(classifier1.isFocusTraversalPolicySet());
      assertFalse(classifier1.isFocusTraversalPolicyProvider());
      
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      assertNotNull(spreadSubsample0);
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      
      filter1.setFilter(spreadSubsample0);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isBusy());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("SpreadSubsample", filter1.getCustomName());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter1.globalInfo());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertNotSame(filter1, filter0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Clusterer clusterer1 = new Clusterer();
      assertFalse(clusterer1.equals((Object)clusterer0));
      assertNotNull(clusterer1);
      assertTrue(clusterer1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer1.globalInfo());
      assertEquals("EM", clusterer1.getCustomName());
      assertFalse(clusterer1.hasIncomingBatchInstances());
      assertFalse(clusterer1.isFocusTraversalPolicyProvider());
      assertFalse(clusterer1.isFocusCycleRoot());
      assertFalse(clusterer1.getIgnoreRepaint());
      assertFalse(clusterer1.isFocusTraversalPolicySet());
      assertFalse(clusterer1.isBusy());
      
      filter0.connectionNotification("model", clusterer1);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(clusterer1.equals((Object)clusterer0));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(clusterer1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer1.globalInfo());
      assertEquals("EM", clusterer1.getCustomName());
      assertFalse(clusterer1.hasIncomingBatchInstances());
      assertFalse(clusterer1.isFocusTraversalPolicyProvider());
      assertFalse(clusterer1.isFocusCycleRoot());
      assertFalse(clusterer1.getIgnoreRepaint());
      assertFalse(clusterer1.isFocusTraversalPolicySet());
      assertFalse(clusterer1.isBusy());
      assertNotSame(filter0, filter1);
      assertNotSame(clusterer1, clusterer0);
      
      filter1.removeDataSourceListener(scatterPlotMatrix0);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isBusy());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("SpreadSubsample", filter1.getCustomName());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter1.globalInfo());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertNotSame(filter1, filter0);
      
      filter0.disconnectionNotification("W", appender0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertNotSame(filter0, filter1);
      
      filter0.setCustomName("Done.");
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals("Done.", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotSame(filter0, filter1);
      
      boolean boolean0 = filter0.eventGeneratable("model");
      assertTrue(boolean0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals("Done.", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotSame(filter0, filter1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      assertNotNull(findWithCapabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertNotNull(classAssigner0);
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      
      Instances instances0 = classAssigner0.getConnectedFormat();
      assertNull(instances0);
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      DataSetEvent dataSetEvent0 = new DataSetEvent(findWithCapabilities0, (Instances) null);
      assertNotNull(dataSetEvent0);
      assertEquals("", findWithCapabilities0.getFilename());
      assertFalse(dataSetEvent0.isStructureOnly());
      
      filter0.connectionNotification("@data", findWithCapabilities0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("", findWithCapabilities0.getFilename());
      
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertNotNull(scatterPlotMatrix0);
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertEquals("EM", clusterer0.getCustomName());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.isFocusCycleRoot());
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("@relation", (Instances) null);
      assertNotNull(trainingSetEvent0);
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertFalse(filter0.equals((Object)filter1));
      assertNotNull(string0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotSame(filter0, filter1);
      
      Classifier classifier0 = new Classifier();
      assertNotNull(classifier0);
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.getIgnoreRepaint());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      
      Classifier classifier1 = new Classifier();
      assertFalse(classifier1.equals((Object)classifier0));
      assertNotNull(classifier1);
      assertEquals("", classifier1.getLoadClassifierFileName());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier1.globalInfo());
      assertFalse(classifier1.hasIncomingStreamInstances());
      assertFalse(classifier1.isFocusTraversalPolicySet());
      assertFalse(classifier1.getResetIncrementalClassifier());
      assertFalse(classifier1.getIgnoreRepaint());
      assertFalse(classifier1.hasIncomingBatchInstances());
      assertTrue(classifier1.getUpdateIncrementalClassifier());
      assertFalse(classifier1.getBlockOnLastFold());
      assertFalse(classifier1.isFocusTraversalPolicyProvider());
      assertFalse(classifier1.isFocusCycleRoot());
      assertEquals("ZeroR", classifier1.getCustomName());
      assertTrue(classifier1.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier1.getExecutionSlots());
      
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      assertNotNull(spreadSubsample0);
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      
      filter1.setFilter(spreadSubsample0);
      assertFalse(filter1.equals((Object)filter0));
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertEquals("SpreadSubsample", filter1.getCustomName());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertNotSame(filter1, filter0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Clusterer clusterer1 = new Clusterer();
      assertFalse(clusterer1.equals((Object)clusterer0));
      assertNotNull(clusterer1);
      assertFalse(clusterer1.hasIncomingBatchInstances());
      assertFalse(clusterer1.isFocusTraversalPolicyProvider());
      assertFalse(clusterer1.isFocusCycleRoot());
      assertEquals("EM", clusterer1.getCustomName());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer1.globalInfo());
      assertFalse(clusterer1.isBusy());
      assertTrue(clusterer1.getFocusTraversalKeysEnabled());
      assertFalse(clusterer1.getIgnoreRepaint());
      assertFalse(clusterer1.isFocusTraversalPolicySet());
      
      filter0.connectionNotification("model", clusterer1);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(clusterer1.equals((Object)clusterer0));
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(clusterer1.hasIncomingBatchInstances());
      assertFalse(clusterer1.isFocusTraversalPolicyProvider());
      assertFalse(clusterer1.isFocusCycleRoot());
      assertEquals("EM", clusterer1.getCustomName());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer1.globalInfo());
      assertFalse(clusterer1.isBusy());
      assertTrue(clusterer1.getFocusTraversalKeysEnabled());
      assertFalse(clusterer1.getIgnoreRepaint());
      assertFalse(clusterer1.isFocusTraversalPolicySet());
      assertNotSame(filter0, filter1);
      assertNotSame(clusterer1, clusterer0);
      
      filter0.disconnectionNotification("W", appender0);
      assertFalse(filter0.equals((Object)filter1));
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertNotSame(filter0, filter1);
      
      boolean boolean0 = filter0.eventGeneratable("@data");
      assertTrue(boolean0);
      assertFalse(filter0.equals((Object)filter1));
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotSame(filter0, filter1);
      
      filter0.addInstanceListener(classAssigner0);
      assertFalse(filter0.equals((Object)filter1));
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isBusy());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertNotSame(filter0, filter1);
      
      filter1.setCustomName("idine");
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("idine", filter1.getCustomName());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>Produces a random subsample of a dataset</font><br><br> The original dataset must fit entirely in memory.<br>This filter allows you to specify the maximum \"spread\" between the rarest and most common class.<br>For example, you may specify that there be at most a 2:1 difference in class frequencies.<br>When used in batch mode, subsequent batches are NOT resampled.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertNotSame(filter1, filter0);
      
      filter0.removeInstanceListener(classifier1);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(classifier1.equals((Object)classifier0));
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("", classifier1.getLoadClassifierFileName());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier1.globalInfo());
      assertFalse(classifier1.hasIncomingStreamInstances());
      assertFalse(classifier1.isFocusTraversalPolicySet());
      assertFalse(classifier1.getResetIncrementalClassifier());
      assertFalse(classifier1.getIgnoreRepaint());
      assertFalse(classifier1.hasIncomingBatchInstances());
      assertTrue(classifier1.getUpdateIncrementalClassifier());
      assertFalse(classifier1.getBlockOnLastFold());
      assertFalse(classifier1.isFocusTraversalPolicyProvider());
      assertFalse(classifier1.isFocusCycleRoot());
      assertEquals("ZeroR", classifier1.getCustomName());
      assertTrue(classifier1.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier1.getExecutionSlots());
      assertNotSame(filter0, filter1);
      assertNotSame(classifier1, classifier0);
      
      String string1 = filter0.getCustomName();
      assertEquals("AllFilter", string1);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotSame(filter0, filter1);
      
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities0));
      assertNotNull(findWithCapabilities1);
      assertEquals("", findWithCapabilities1.getFilename());
      
      InstanceEvent instanceEvent0 = new InstanceEvent(findWithCapabilities1);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities0));
      assertNotNull(instanceEvent0);
      assertEquals("", findWithCapabilities1.getFilename());
      assertEquals(0, instanceEvent0.getStatus());
      
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.ClassAssigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("AllFilter", filter0.getCustomName());
      
      HierarchyListener[] hierarchyListenerArray0 = filter0.getHierarchyListeners();
      assertNotNull(hierarchyListenerArray0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("AllFilter", filter0.getCustomName());
      
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isFocusCycleRoot());
      assertEquals("Apriori", associator0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusTraversalPolicySet());
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertNotNull(attributeSummarizer0);
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertNotNull(flowByExpression0);
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      
      FlowByExpression flowByExpression1 = new FlowByExpression();
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertNotNull(flowByExpression1);
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertEquals("", flowByExpression1.getExpressionString());
      assertFalse(flowByExpression1.isBusy());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
      assertNotNull(mockThaiBuddhistDate1);
      
      AttributeSummarizer attributeSummarizer1 = new AttributeSummarizer();
      assertFalse(attributeSummarizer1.equals((Object)attributeSummarizer0));
      assertNotNull(attributeSummarizer1);
      assertEquals("Attribute summary", attributeSummarizer1.getPerspectiveTitle());
      assertFalse(attributeSummarizer1.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer1.getGridWidth());
      assertEquals("400", attributeSummarizer1.getOffscreenHeight());
      assertFalse(attributeSummarizer1.isBusy());
      assertEquals((-1), attributeSummarizer1.getColoringIndex());
      assertFalse(attributeSummarizer1.getIgnoreRepaint());
      assertEquals("500", attributeSummarizer1.getOffscreenWidth());
      assertFalse(attributeSummarizer1.isFocusCycleRoot());
      assertFalse(attributeSummarizer1.isFocusTraversalPolicySet());
      assertEquals("", attributeSummarizer1.getOffscreenAdditionalOpts());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer1.getPerspectiveTipText());
      assertEquals("", attributeSummarizer1.getOffscreenYAxis());
      assertEquals("Weka Chart Renderer", attributeSummarizer1.getOffscreenRendererName());
      assertTrue(attributeSummarizer1.acceptsInstances());
      assertTrue(attributeSummarizer1.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer1.getOffscreenXAxis());
      assertEquals("AttributeSummarizer", attributeSummarizer1.getCustomName());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer1.globalInfo());
      assertEquals(100, attributeSummarizer1.getMaxPlots());
      
      JFrame jFrame0 = attributeSummarizer1.m_popupFrame;
      assertNull(jFrame0);
      
      filter0.connectionNotification("instance", attributeSummarizer0);
      assertFalse(attributeSummarizer0.equals((Object)attributeSummarizer1));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertNotSame(attributeSummarizer0, attributeSummarizer1);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Filter filter2 = new Filter();
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      assertNotNull(filter2);
      assertFalse(filter2.isBusy());
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isFocusTraversalPolicySet());
      
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      assertNotNull(basicPanelUI0);
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals(0, instanceEvent0.getStatus());
      assertNotSame(filter0, filter2);
      assertNotSame(filter0, filter1);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertNotNull(scatterPlotMatrix0);
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      
      filter0.addTrainingSetListener(scatterPlotMatrix0);
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertNotSame(filter0, filter2);
      assertNotSame(filter0, filter1);
      
      String string0 = filter1.getCustomName();
      assertEquals("AllFilter", string0);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      assertNotNull(string0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparing((Function<? super Object, ? extends String>) function0);
      assertNotNull(comparator0);
      
      Comparator<Object> comparator1 = Comparator.nullsFirst((Comparator<? super Object>) comparator0);
      assertFalse(comparator1.equals((Object)comparator0));
      assertNotNull(comparator1);
      
      arrayList0.sort(comparator1);
      assertFalse(comparator0.equals((Object)comparator1));
      assertFalse(comparator1.equals((Object)comparator0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke('u');
      assertNotNull(keyStroke0);
      assertFalse(keyStroke0.isOnKeyRelease());
      assertEquals(0, keyStroke0.getModifiers());
      assertEquals('u', keyStroke0.getKeyChar());
      assertEquals(400, keyStroke0.getKeyEventType());
      assertEquals(0, keyStroke0.getKeyCode());
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertFalse(clusterer0.isFocusCycleRoot());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertEquals("EM", clusterer0.getCustomName());
      
      filter1.removeDataSourceListener(appender0);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      String[] stringArray0 = new String[0];
      MultiFilter.main(stringArray0);
      filter0.setFilter(multiFilter0);
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      InstanceEvent instanceEvent1 = appender0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent1);
      assertEquals(0, instanceEvent1.getStatus());
      assertSame(instanceEvent1, instanceEvent0);
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertNotNull(predictionAppender0);
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender0.isBusy());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      assertNotNull(spreadSubsample0);
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      assertNotNull(styleConstants0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      
      TestInstances testInstances1 = new TestInstances();
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertFalse(testInstances1.equals((Object)testInstances0));
      assertNotNull(testInstances1);
      assertEquals(0, testInstances1.getNumDate());
      assertEquals(2, testInstances1.getNumNominalValues());
      assertFalse(testInstances1.getNoClass());
      assertEquals(10, testInstances1.getNumInstancesRelational());
      assertEquals(2, testInstances1.getNumRelationalNominalValues());
      assertEquals((-1), testInstances1.getClassIndex());
      assertEquals(1, testInstances1.getClassType());
      assertEquals(20, testInstances1.getNumInstances());
      assertEquals(1, testInstances1.getNumNominal());
      assertEquals(0, testInstances1.getNumRelationalDate());
      assertEquals("Testdata", testInstances1.getRelation());
      assertEquals(" ", testInstances1.getWordSeparators());
      assertEquals(2, testInstances1.getNumClasses());
      assertEquals(2, testInstances1.getNumAttributes());
      assertEquals(0, testInstances1.getNumRelational());
      assertEquals(0, testInstances1.getNumString());
      assertEquals(0, testInstances1.getNumNumeric());
      assertEquals(1, testInstances1.getSeed());
      assertEquals(1, testInstances1.getNumRelationalNominal());
      assertEquals(0, testInstances1.getNumRelationalNumeric());
      assertFalse(testInstances1.getMultiInstance());
      assertEquals(0, testInstances1.getNumRelationalString());
      
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      assertNotNull(jPopupMenu0);
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      
      Instances instances0 = testInstances1.generate();
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertFalse(testInstances1.equals((Object)testInstances0));
      assertNotNull(instances0);
      assertEquals(0, testInstances1.getNumDate());
      assertEquals(2, testInstances1.getNumNominalValues());
      assertFalse(testInstances1.getNoClass());
      assertEquals(10, testInstances1.getNumInstancesRelational());
      assertEquals(2, testInstances1.getNumRelationalNominalValues());
      assertEquals((-1), testInstances1.getClassIndex());
      assertEquals(1, testInstances1.getClassType());
      assertEquals(20, testInstances1.getNumInstances());
      assertEquals(1, testInstances1.getNumNominal());
      assertEquals(0, testInstances1.getNumRelationalDate());
      assertEquals("Testdata", testInstances1.getRelation());
      assertEquals(" ", testInstances1.getWordSeparators());
      assertEquals(2, testInstances1.getNumClasses());
      assertEquals(2, testInstances1.getNumAttributes());
      assertEquals(0, testInstances1.getNumRelational());
      assertEquals(0, testInstances1.getNumString());
      assertEquals(0, testInstances1.getNumNumeric());
      assertEquals(1, testInstances1.getSeed());
      assertEquals(1, testInstances1.getNumRelationalNominal());
      assertEquals(0, testInstances1.getNumRelationalNumeric());
      assertFalse(testInstances1.getMultiInstance());
      assertEquals(0, testInstances1.getNumRelationalString());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertNotSame(testInstances1, testInstances0);
      
      instanceEvent1.setStructure(instances0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertFalse(testInstances1.equals((Object)testInstances0));
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals(0, instanceEvent1.getStatus());
      assertEquals(0, testInstances1.getNumDate());
      assertEquals(2, testInstances1.getNumNominalValues());
      assertFalse(testInstances1.getNoClass());
      assertEquals(10, testInstances1.getNumInstancesRelational());
      assertEquals(2, testInstances1.getNumRelationalNominalValues());
      assertEquals((-1), testInstances1.getClassIndex());
      assertEquals(1, testInstances1.getClassType());
      assertEquals(20, testInstances1.getNumInstances());
      assertEquals(1, testInstances1.getNumNominal());
      assertEquals(0, testInstances1.getNumRelationalDate());
      assertEquals("Testdata", testInstances1.getRelation());
      assertEquals(" ", testInstances1.getWordSeparators());
      assertEquals(2, testInstances1.getNumClasses());
      assertEquals(2, testInstances1.getNumAttributes());
      assertEquals(0, testInstances1.getNumRelational());
      assertEquals(0, testInstances1.getNumString());
      assertEquals(0, testInstances1.getNumNumeric());
      assertEquals(1, testInstances1.getSeed());
      assertEquals(1, testInstances1.getNumRelationalNominal());
      assertEquals(0, testInstances1.getNumRelationalNumeric());
      assertFalse(testInstances1.getMultiInstance());
      assertEquals(0, testInstances1.getNumRelationalString());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20, instances0.size());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertSame(instanceEvent1, instanceEvent0);
      assertNotSame(testInstances1, testInstances0);
      
      PredictionAppender predictionAppender1 = new PredictionAppender();
      assertFalse(predictionAppender1.equals((Object)predictionAppender0));
      assertNotNull(predictionAppender1);
      assertFalse(predictionAppender1.isFocusCycleRoot());
      assertFalse(predictionAppender1.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender1.isBusy());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender1.globalInfo());
      assertEquals("PredictionAppender", predictionAppender1.getCustomName());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender1.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender1.getAppendPredictedProbabilities());
      assertFalse(predictionAppender1.getIgnoreRepaint());
      assertFalse(predictionAppender1.isFocusTraversalPolicySet());
      assertTrue(predictionAppender1.getFocusTraversalKeysEnabled());
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals(0, instanceEvent0.getStatus());
      assertSame(instanceEvent0, instanceEvent1);
      
      C45Loader c45Loader0 = new C45Loader();
      assertNotNull(c45Loader0);
      assertEquals("Reads a file that is C45 format. Can take a filestem or filestem with .names or .data appended. Assumes that path/<filestem>.names and path/<filestem>.data exist and contain the names and data respectively.", c45Loader0.globalInfo());
      assertEquals("C4.5 data files", c45Loader0.getFileDescription());
      assertFalse(c45Loader0.getUseRelativePath());
      assertEquals("Use relative rather than absolute paths", c45Loader0.useRelativePathTipText());
      assertEquals(".names", c45Loader0.getFileExtension());
      
      try { 
        c45Loader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      HierarchyListener[] hierarchyListenerArray0 = filter0.getHierarchyListeners();
      assertNotNull(hierarchyListenerArray0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertNotNull(flowByExpression0);
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      
      ActionMap actionMap0 = new ActionMap();
      assertNotNull(actionMap0);
      
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      instanceEvent0.setStatus(2);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals(2, instanceEvent0.getStatus());
      
      filter0.stop();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      
      InstanceEvent instanceEvent1 = appender0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(instanceEvent1.equals((Object)instanceEvent0));
      assertNotNull(instanceEvent1);
      assertEquals(0, instanceEvent1.getStatus());
      assertNotSame(instanceEvent1, instanceEvent0);
      
      InstanceEvent instanceEvent2 = appender0.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(instanceEvent2.equals((Object)instanceEvent0));
      assertNotNull(instanceEvent2);
      assertEquals(0, instanceEvent2.getStatus());
      assertSame(instanceEvent2, instanceEvent1);
      assertNotSame(instanceEvent2, instanceEvent0);
      
      instanceEvent2.setStatus(1);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(instanceEvent2.equals((Object)instanceEvent0));
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals(1, instanceEvent2.getStatus());
      assertSame(instanceEvent2, instanceEvent1);
      assertNotSame(instanceEvent2, instanceEvent0);
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertNotNull(predictionAppender0);
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isBusy());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      
      filter0.acceptInstance(instanceEvent2);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(instanceEvent2.equals((Object)instanceEvent0));
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals(1, instanceEvent2.getStatus());
      assertSame(instanceEvent2, instanceEvent1);
      assertNotSame(instanceEvent2, instanceEvent0);
      
      Loader loader0 = new Loader();
      assertNotNull(loader0);
      assertFalse(loader0.getIgnoreRepaint());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertFalse(loader0.isFocusCycleRoot());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      assertNotNull(spreadSubsample0);
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(spreadSubsample0.getAdjustWeights());
      
      Object object0 = loader0.getClientProperty(spreadSubsample0);
      assertNull(object0);
      assertEquals(0.0, spreadSubsample0.getDistributionSpread(), 0.01);
      assertEquals("The maximum class distribution spread. (0 = no maximum spread, 1 = uniform distribution, 10 = allow at most a 10:1 ratio between the classes).", spreadSubsample0.distributionSpreadTipText());
      assertEquals("Produces a random subsample of a dataset. The original dataset must fit entirely in memory. This filter allows you to specify the maximum \"spread\" between the rarest and most common class. For example, you may specify that there be at most a 2:1 difference in class frequencies. When used in batch mode, subsequent batches are NOT resampled.", spreadSubsample0.globalInfo());
      assertFalse(spreadSubsample0.isFirstBatchDone());
      assertFalse(spreadSubsample0.isOutputFormatDefined());
      assertEquals("Sets the random number seed for subsampling.", spreadSubsample0.randomSeedTipText());
      assertEquals(0.0, spreadSubsample0.getMaxCount(), 0.01);
      assertEquals(1, spreadSubsample0.getRandomSeed());
      assertEquals("Wether instance weights will be adjusted to maintain total weight per class.", spreadSubsample0.adjustWeightsTipText());
      assertEquals("The maximum count for any class value (0 = unlimited).", spreadSubsample0.maxCountTipText());
      assertTrue(spreadSubsample0.isNewBatch());
      assertFalse(spreadSubsample0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(spreadSubsample0.getAdjustWeights());
      assertFalse(loader0.getIgnoreRepaint());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertFalse(loader0.isFocusCycleRoot());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      sysErrLog0.logMessage("0r0=");
      Appender appender1 = new Appender();
      assertFalse(appender1.equals((Object)appender0));
      assertNotNull(appender1);
      assertFalse(appender1.getIgnoreRepaint());
      assertFalse(appender1.isFocusTraversalPolicySet());
      assertTrue(appender1.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender1.getCustomName());
      assertFalse(appender1.isFocusCycleRoot());
      assertFalse(appender1.isBusy());
      assertFalse(appender1.isFocusTraversalPolicyProvider());
      
      flowByExpression0.addAncestorListener((AncestorListener) null);
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      
      Appender appender2 = new Appender();
      assertFalse(appender2.equals((Object)appender0));
      assertFalse(appender2.equals((Object)appender1));
      assertNotNull(appender2);
      assertTrue(appender2.getFocusTraversalKeysEnabled());
      assertFalse(appender2.getIgnoreRepaint());
      assertFalse(appender2.isBusy());
      assertFalse(appender2.isFocusCycleRoot());
      assertFalse(appender2.isFocusTraversalPolicyProvider());
      assertFalse(appender2.isFocusTraversalPolicySet());
      assertEquals("Appender", appender2.getCustomName());
      
      InstanceEvent instanceEvent3 = flowByExpression0.m_ie;
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(instanceEvent3.equals((Object)instanceEvent1));
      assertFalse(instanceEvent3.equals((Object)instanceEvent2));
      assertNotNull(instanceEvent3);
      assertEquals(2, instanceEvent3.getStatus());
      assertNotSame(instanceEvent3, instanceEvent1);
      assertNotSame(instanceEvent3, instanceEvent2);
      assertSame(instanceEvent3, instanceEvent0);
      
      filter0.notifyInstanceListeners(instanceEvent2);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(appender0.equals((Object)appender1));
      assertFalse(appender0.equals((Object)appender2));
      assertFalse(instanceEvent2.equals((Object)instanceEvent3));
      assertFalse(instanceEvent2.equals((Object)instanceEvent0));
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals(1, instanceEvent2.getStatus());
      assertNotSame(appender0, appender1);
      assertNotSame(appender0, appender2);
      assertNotSame(instanceEvent2, instanceEvent3);
      assertSame(instanceEvent2, instanceEvent1);
      assertNotSame(instanceEvent2, instanceEvent0);
      
      filter0.acceptInstance(instanceEvent3);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(instanceEvent3.equals((Object)instanceEvent1));
      assertFalse(instanceEvent3.equals((Object)instanceEvent2));
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals(2, instanceEvent3.getStatus());
      assertNotSame(instanceEvent3, instanceEvent1);
      assertNotSame(instanceEvent3, instanceEvent2);
      assertSame(instanceEvent3, instanceEvent0);
      
      JRootPane jRootPane0 = filter0.getRootPane();
      assertNull(jRootPane0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      
      filter0.removeInstanceListener(flowByExpression0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        filter0.performRequest(">^_GfUt&t=CN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >^_GfUt&t=CN not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      assertNotNull(trainTestSplitMaker0);
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      
      filter0.removeTestSetListener(trainTestSplitMaker0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      
      filter0.addInstanceListener((InstanceListener) null);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      assertNotNull(findWithCapabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertNotNull(classAssigner0);
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      
      Instances instances0 = classAssigner0.getConnectedFormat();
      assertNull(instances0);
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      filter0.setInheritsPopupMenu(false);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(findWithCapabilities0, (Instances) null);
      assertNotNull(dataSetEvent0);
      assertEquals("", findWithCapabilities0.getFilename());
      assertFalse(dataSetEvent0.isStructureOnly());
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("", findWithCapabilities0.getFilename());
      assertFalse(dataSetEvent0.isStructureOnly());
      
      filter0.connectionNotification("@data", findWithCapabilities0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("", findWithCapabilities0.getFilename());
      
      filter0.stop();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertNotNull(scatterPlotMatrix0);
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      assertNotNull(costBenefitAnalysis0);
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertFalse(costBenefitAnalysis0.isBusy());
      
      Clusterer clusterer0 = new Clusterer();
      assertNotNull(clusterer0);
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.isFocusCycleRoot());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertEquals("EM", clusterer0.getCustomName());
      
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      assertNotNull(crossValidationFoldMaker0);
      assertTrue(crossValidationFoldMaker0.getFocusTraversalKeysEnabled());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicySet());
      assertEquals("Split an incoming data set into cross validation folds. Separate train and test sets are produced for each of the k folds.", crossValidationFoldMaker0.globalInfo());
      assertFalse(crossValidationFoldMaker0.getIgnoreRepaint());
      assertFalse(crossValidationFoldMaker0.isBusy());
      assertEquals("The number of train and test splits to produce", crossValidationFoldMaker0.foldsTipText());
      assertFalse(crossValidationFoldMaker0.getPreserveOrder());
      assertEquals(10, crossValidationFoldMaker0.getFolds());
      assertEquals("The randomization seed", crossValidationFoldMaker0.seedTipText());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicyProvider());
      assertEquals(1, crossValidationFoldMaker0.getSeed());
      assertEquals("CrossValidationFoldMaker", crossValidationFoldMaker0.getCustomName());
      assertFalse(crossValidationFoldMaker0.isFocusCycleRoot());
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("@relation", (Instances) null);
      assertNotNull(trainingSetEvent0);
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      
      filter1.transferFocusDownCycle();
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertNotSame(filter1, filter0);
      
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertFalse(filter0.equals((Object)filter1));
      assertNotNull(string0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotSame(filter0, filter1);
      
      Classifier classifier0 = new Classifier();
      assertNotNull(classifier0);
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusCycleRoot());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.getIgnoreRepaint());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingBatchInstances());
      
      Classifier classifier1 = new Classifier();
      assertFalse(classifier1.equals((Object)classifier0));
      assertNotNull(classifier1);
      assertEquals("ZeroR", classifier1.getCustomName());
      assertFalse(classifier1.isFocusTraversalPolicyProvider());
      assertFalse(classifier1.getBlockOnLastFold());
      assertTrue(classifier1.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier1.getExecutionSlots());
      assertFalse(classifier1.isFocusTraversalPolicySet());
      assertFalse(classifier1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier1.globalInfo());
      assertFalse(classifier1.hasIncomingStreamInstances());
      assertTrue(classifier1.getUpdateIncrementalClassifier());
      assertEquals("", classifier1.getLoadClassifierFileName());
      assertFalse(classifier1.getResetIncrementalClassifier());
      assertFalse(classifier1.getIgnoreRepaint());
      assertFalse(classifier1.hasIncomingBatchInstances());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      assertNotNull(basicComboBoxEditor0);
      
      classifier0.removeFocusListener(basicComboBoxEditor0);
      assertFalse(classifier0.equals((Object)classifier1));
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.isFocusCycleRoot());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.getIgnoreRepaint());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertNotSame(classifier0, classifier1);
      
      filter1.disconnectionNotification(".arff", attributedCharacterIterator_Attribute0);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertNotSame(filter1, filter0);
      
      boolean boolean0 = filter0.eventGeneratable("W");
      assertFalse(boolean0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotSame(filter0, filter1);
      
      filter0.addInstanceListener(filter1);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertNotSame(filter0, filter1);
      assertNotSame(filter1, filter0);
      
      filter1.setCustomName("model");
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("model", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertNotSame(filter1, filter0);
      
      Classifier classifier2 = new Classifier();
      assertFalse(classifier2.equals((Object)classifier1));
      assertFalse(classifier2.equals((Object)classifier0));
      assertNotNull(classifier2);
      assertEquals(2, classifier2.getExecutionSlots());
      assertFalse(classifier2.isFocusTraversalPolicySet());
      assertFalse(classifier2.getResetIncrementalClassifier());
      assertTrue(classifier2.getUpdateIncrementalClassifier());
      assertFalse(classifier2.hasIncomingStreamInstances());
      assertTrue(classifier2.getFocusTraversalKeysEnabled());
      assertEquals("", classifier2.getLoadClassifierFileName());
      assertEquals("ZeroR", classifier2.getCustomName());
      assertFalse(classifier2.hasIncomingBatchInstances());
      assertFalse(classifier2.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier2.globalInfo());
      assertFalse(classifier2.isFocusTraversalPolicyProvider());
      assertFalse(classifier2.getBlockOnLastFold());
      assertFalse(classifier2.isFocusCycleRoot());
      
      filter0.removeInstanceListener(classifier2);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(classifier2.equals((Object)classifier1));
      assertFalse(classifier2.equals((Object)classifier0));
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals(2, classifier2.getExecutionSlots());
      assertFalse(classifier2.isFocusTraversalPolicySet());
      assertFalse(classifier2.getResetIncrementalClassifier());
      assertTrue(classifier2.getUpdateIncrementalClassifier());
      assertFalse(classifier2.hasIncomingStreamInstances());
      assertTrue(classifier2.getFocusTraversalKeysEnabled());
      assertEquals("", classifier2.getLoadClassifierFileName());
      assertEquals("ZeroR", classifier2.getCustomName());
      assertFalse(classifier2.hasIncomingBatchInstances());
      assertFalse(classifier2.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier2.globalInfo());
      assertFalse(classifier2.isFocusTraversalPolicyProvider());
      assertFalse(classifier2.getBlockOnLastFold());
      assertFalse(classifier2.isFocusCycleRoot());
      assertNotSame(filter0, filter1);
      assertNotSame(classifier2, classifier1);
      assertNotSame(classifier2, classifier0);
      
      String string1 = filter1.getCustomName();
      assertEquals("model", string1);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("model", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertNotSame(filter1, filter0);
      
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities0));
      assertNotNull(findWithCapabilities1);
      assertEquals("", findWithCapabilities1.getFilename());
      
      InstanceEvent instanceEvent0 = new InstanceEvent(costBenefitAnalysis0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertFalse(costBenefitAnalysis0.isBusy());
      
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals("CostBenefitAnalysis", costBenefitAnalysis0.getCustomName());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicySet());
      assertEquals("Visualize performance charts (such as ROC).", costBenefitAnalysis0.globalInfo());
      assertFalse(costBenefitAnalysis0.isFocusTraversalPolicyProvider());
      assertFalse(costBenefitAnalysis0.isFocusCycleRoot());
      assertFalse(costBenefitAnalysis0.getIgnoreRepaint());
      assertTrue(costBenefitAnalysis0.getFocusTraversalKeysEnabled());
      assertFalse(costBenefitAnalysis0.isBusy());
      assertNotSame(filter0, filter1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      
      Associator associator0 = new Associator();
      assertNotNull(associator0);
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      
      filter0.setFilter(multiFilter0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertTrue(multiFilter0.isNewBatch());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertNotNull(flowByExpression0);
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("", flowByExpression0.getExpressionString());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      
      Instances instances0 = testInstances0.generate();
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(instances0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertNotNull(checkGOE0);
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(arrayList0, instances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(dataSetEvent0);
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(dataSetEvent0.isStructureOnly());
      
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(dataSetEvent0.isStructureOnly());
      
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      assertNotNull(basicPanelUI0);
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      
      filter0.addTrainingSetListener(associator0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isBusy());
      
      String string0 = JSplitPane.DIVIDER;
      assertEquals("divider", string0);
      assertNotNull(string0);
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke("configuration");
      assertNull(keyStroke0);
      
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertNotNull(nominalToBinary0);
      assertFalse(nominalToBinary0.isOutputFormatDefined());
      assertEquals("Whether resulting binary attributes will be nominal.", nominalToBinary0.binaryAttributesNominalTipText());
      assertFalse(nominalToBinary0.getTransformAllValues());
      assertTrue(nominalToBinary0.isNewBatch());
      assertFalse(nominalToBinary0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(nominalToBinary0.isFirstBatchDone());
      assertEquals("Whether all nominal values are turned into new attributes, not only if there are more than 2.", nominalToBinary0.transformAllValuesTipText());
      assertFalse(nominalToBinary0.getBinaryAttributesNominal());
      
      MultiFilter multiFilter1 = new MultiFilter();
      assertFalse(multiFilter1.equals((Object)multiFilter0));
      assertNotNull(multiFilter1);
      assertFalse(multiFilter1.isOutputFormatDefined());
      assertFalse(multiFilter1.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter1.globalInfo());
      assertFalse(multiFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter1.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
      assertTrue(multiFilter1.isNewBatch());
      assertEquals("Turns on output of debugging information.", multiFilter1.debugTipText());
      
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.STARTSWITH;
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression_ExpressionClause_ExpressionType0, instances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(testSetEvent0);
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      
      filter0.acceptTestSet(testSetEvent0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertFalse(testInstances0.getNoClass());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      
      // Undeclared exception!
      try { 
        filter0.performRequest("divider");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // divider not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      assertNotNull(multiFilter0);
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      
      Filter filter0 = new Filter();
      assertNotNull(filter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      filter0.setFilter(multiFilter0);
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      
      Appender appender0 = new Appender();
      assertNotNull(appender0);
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertNotNull(predictionAppender0);
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      assertNotNull(styleConstants0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(testInstances0);
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      
      TestInstances testInstances1 = new TestInstances();
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertFalse(testInstances1.equals((Object)testInstances0));
      assertNotNull(testInstances1);
      assertEquals(1, testInstances1.getSeed());
      assertEquals(1, testInstances1.getNumNominal());
      assertEquals(1, testInstances1.getNumRelationalNominal());
      assertEquals((-1), testInstances1.getClassIndex());
      assertEquals(2, testInstances1.getNumNominalValues());
      assertEquals(0, testInstances1.getNumDate());
      assertEquals(2, testInstances1.getNumClasses());
      assertEquals(0, testInstances1.getNumRelational());
      assertEquals(20, testInstances1.getNumInstances());
      assertEquals(" ", testInstances1.getWordSeparators());
      assertEquals("Testdata", testInstances1.getRelation());
      assertEquals(2, testInstances1.getNumAttributes());
      assertEquals(1, testInstances1.getClassType());
      assertEquals(0, testInstances1.getNumRelationalDate());
      assertEquals(0, testInstances1.getNumNumeric());
      assertEquals(2, testInstances1.getNumRelationalNominalValues());
      assertFalse(testInstances1.getNoClass());
      assertEquals(10, testInstances1.getNumInstancesRelational());
      assertFalse(testInstances1.getMultiInstance());
      assertEquals(0, testInstances1.getNumString());
      assertEquals(0, testInstances1.getNumRelationalString());
      assertEquals(0, testInstances1.getNumRelationalNumeric());
      
      ActionMap actionMap0 = filter0.getActionMap();
      assertNotNull(actionMap0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertNotNull(substringLabeler0);
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertNotNull(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      
      instanceEvent0.setStatus((-1));
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals((-1), instanceEvent0.getStatus());
      
      boolean boolean0 = substringLabeler0.isOpaque();
      assertTrue(boolean0);
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(sparseInstance0);
      assertEquals(2, sparseInstance0.numValues());
      assertEquals(2, sparseInstance0.numAttributes());
      assertEquals(0.0, sparseInstance0.weight(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 2.0}, doubleArray0, 0.01);
      
      instanceEvent0.setInstance(sparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, sparseInstance0.numValues());
      assertEquals(2, sparseInstance0.numAttributes());
      assertEquals(0.0, sparseInstance0.weight(), 0.01);
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals((-1), instanceEvent0.getStatus());
      assertArrayEquals(new double[] {(-1.0), 2.0}, doubleArray0, 0.01);
      
      Appender appender1 = new Appender();
      assertFalse(appender1.equals((Object)appender0));
      assertNotNull(appender1);
      assertTrue(appender1.getFocusTraversalKeysEnabled());
      assertFalse(appender1.isFocusCycleRoot());
      assertFalse(appender1.isFocusTraversalPolicySet());
      assertFalse(appender1.getIgnoreRepaint());
      assertFalse(appender1.isBusy());
      assertFalse(appender1.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender1.getCustomName());
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals((-1), instanceEvent0.getStatus());
      
      PredictionAppender predictionAppender1 = new PredictionAppender();
      assertFalse(predictionAppender1.equals((Object)predictionAppender0));
      assertNotNull(predictionAppender1);
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender1.globalInfo());
      assertFalse(predictionAppender1.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender1.isFocusTraversalPolicySet());
      assertFalse(predictionAppender1.getAppendPredictedProbabilities());
      assertTrue(predictionAppender1.getFocusTraversalKeysEnabled());
      assertEquals("PredictionAppender", predictionAppender1.getCustomName());
      assertFalse(predictionAppender1.getIgnoreRepaint());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender1.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender1.isFocusCycleRoot());
      assertFalse(predictionAppender1.isBusy());
      
      String string0 = filter0.getCustomName();
      assertEquals("MultiFilter", string0);
      assertNotNull(string0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertNotNull(enumeration0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertNotNull(beanVisual0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("MultiFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusCycleRoot());
  }
}
