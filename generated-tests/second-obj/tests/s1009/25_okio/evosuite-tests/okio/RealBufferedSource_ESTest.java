/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:39:32 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 2730L;
      buffer0.writeLongLe(2730L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readFully(buffer1, 2738L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      HashingSource hashingSource1 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.hmacSha256(hashingSource0, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer();
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775794L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 5888L;
      try { 
        realBufferedSource0.skip(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      buffer0.readString(charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 16;
      buffer0.writeUtf8CodePoint(16);
      realBufferedSource0.toString();
      try { 
        realBufferedSource0.skip(100000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[1];
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte) (-56));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readString(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-12));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString[] byteStringArray0 = new ByteString[8];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(8, options0.size());
      assertNotNull(options0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 174L;
      Pipe pipe0 = new Pipe(174L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      long long1 = realBufferedSource0.indexOf((byte)0, (long) (byte)0, (long) (byte)0);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(long1 == long0);
      
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = buffer0.readString(charset0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(string0);
      assertEquals("", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pipe pipe0 = new Pipe(19L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Pipe pipe1 = new Pipe(19L);
      assertNotNull(pipe1);
      assertFalse(pipe1.equals((Object)pipe0));
      
      Source source0 = pipe1.source();
      assertNotSame(pipe1, pipe0);
      assertNotNull(source0);
      assertFalse(pipe1.equals((Object)pipe0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      assertFalse(pipe0.equals((Object)pipe1));
      
      String string0 = realBufferedSource0.toString();
      assertNotSame(pipe0, pipe1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      assertFalse(pipe0.equals((Object)pipe1));
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotSame(pipe0, pipe1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(pipe0.equals((Object)pipe1));
      
      byte[] byteArray0 = new byte[2];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      String string1 = realBufferedSource0.readString(charset0);
      assertNotSame(pipe0, pipe1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(pipe0.equals((Object)pipe1));
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray1 = realBufferedSource0.readByteArray();
      assertNotSame(pipe0, pipe1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(byteArray1);
      assertFalse(pipe0.equals((Object)pipe1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertNotNull(charset1);
      
      try { 
        realBufferedSource0.readString(19L, charset1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = realBufferedSource0.indexOf(byteString0, 8192L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      realBufferedSource0.skip((-64L));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        realBufferedSource0.readByteArray(718L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.flush();
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readUtf8(1112L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-103);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte) (-103)}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte) (-103)}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte) (-103)}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((-466L), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -466
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      String string0 = "";
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = buffer0.sha1();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      long long0 = (-1101L);
      boolean boolean0 = realBufferedSource0.rangeEquals((-1101L), byteString0);
      assertNotSame(byteString0, byteString1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertFalse(boolean0);
      assertFalse(byteString0.equals((Object)byteString1));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = true;
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      Inflater inflater0 = new Inflater(false);
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      
      HashingSource hashingSource0 = HashingSource.md5(source0);
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = realBufferedSource1.rangeEquals(100000000000L, byteString0, (-1055), (-1055));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(16, byteString0.size());
      assertFalse(boolean0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString1 = realBufferedSource1.readByteString();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(byteString1, byteString0);
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      
      int int0 = byteString1.lastIndexOf(byteString0, (-1055));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(16, byteString0.size());
      assertEquals(0, byteString1.size());
      assertEquals((-1), int0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString1, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      pipe0.sourceClosed = false;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "duration <= 0: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte byte0 = (byte)7;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)7;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)7, (byte)70, (byte)7}, byteArray0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      long long0 = realBufferedSource0.indexOfElement(byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertEquals((-1L), long0);
      assertFalse(byteString1.equals((Object)byteString0));
      
      boolean boolean2 = realBufferedSource0.rangeEquals((long) (byte)7, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(3, byteString2.size());
      assertNotNull(byteString2);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)7, (byte)70, (byte)7}, byteArray0);
      
      ByteString byteString3 = byteString2.hmacSha512(byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString2.size());
      assertEquals(64, byteString3.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)7, (byte)70, (byte)7}, byteArray0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString2, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 100000000000L;
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      assertEquals("buffer([size=0])", string0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(7, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pipe pipe0 = new Pipe(19L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      String string0 = hashingSource0.toString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = ByteString.decodeBase64("HashingSource(okio.Buffer@0000000001)");
      assertNull(byteString1);
      
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((-1L), byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)22;
      byteArray0[1] = (byte)77;
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(3, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)14, (byte)77, (byte)0}, byteArray0);
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertEquals(3, byteString3.size());
      assertNotNull(byteString3);
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)14, (byte)77, (byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(1, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, options0.size());
      assertEquals((-1), int0);
      
      boolean boolean1 = realBufferedSource0.exhausted();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 19L;
      Pipe pipe0 = new Pipe(19L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      String string0 = hashingSource0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = ByteString.decodeBase64("HashingSource(okio.Buffer@0000000001)");
      assertNull(byteString1);
      
      long long1 = realBufferedSource0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((-1L), byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)22;
      ByteString byteString2 = new ByteString(byteArray0);
      assertEquals(3, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)14, (byte)22, (byte)0}, byteArray0);
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertEquals(3, byteString3.size());
      assertNotNull(byteString3);
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)14, (byte)22, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)22, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-125);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")2: HR0h|u:");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(4, options0.size());
      assertNotNull(options0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "duration <= 0: ");
      assertFalse(boolean0);
      
      realBufferedSource0.skip((-2918L));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(4, options0.size());
      assertNotNull(options0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      int int0 = realBufferedSource2.select(options0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4, options0.size());
      assertEquals(0, int0);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      try { 
        realBufferedSource0.readUtf8LineStrict((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = realBufferedSource0.indexOf(byteString0, 8192L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      realBufferedSource0.skip((-64L));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      Inflater inflater0 = new Inflater(true);
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflater0);
      
      Inflater inflater1 = new Inflater(true);
      assertEquals(0, inflater1.getAdler());
      assertFalse(inflater1.needsDictionary());
      assertEquals(0L, inflater1.getBytesRead());
      assertEquals(0L, inflater1.getBytesWritten());
      assertEquals(0, inflater1.getTotalOut());
      assertEquals(0, inflater1.getRemaining());
      assertEquals(0, inflater1.getTotalIn());
      assertTrue(inflater1.needsInput());
      assertNotNull(inflater1);
      assertFalse(inflater1.equals((Object)inflater0));
      
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertNotNull(inflaterSource0);
      assertFalse(inflater0.equals((Object)inflater1));
      
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString2 = realBufferedSource0.readByteString();
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0, byteString2.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      boolean boolean0 = realBufferedSource0.rangeEquals(8192L, byteString2, 2, (-419));
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0, byteString2.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(boolean0);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      long long1 = realBufferedSource0.indexOf((byte)59, 1662L);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(long1 == long0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = true;
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      long long0 = source0.read(realBufferedSource0.buffer, 626L);
      assertEquals((-1L), long0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[20];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(20, options0.size());
      assertNotNull(options0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      int int0 = realBufferedSource2.select(options0);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertEquals(20, options0.size());
      assertEquals(0, int0);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      boolean boolean0 = byteString0.rangeEquals(0, byteString0, 1866, 1952257861);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      String string0 = byteString0.base64Url();
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0, byteString0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      boolean boolean1 = realBufferedSource1.rangeEquals(2L, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0, byteString0.size());
      assertTrue(boolean1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)48, (-2666L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-2666 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(string0);
      assertEquals("", string0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      int int0 = realBufferedSource2.select(options0);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, options0.size());
      assertEquals((-1), int0);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = 3609;
      // Undeclared exception!
      try { 
        options0.get(1866);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1866
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = true;
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      assertFalse(pipe_PipeSource0.equals((Object)source0));
      
      long long0 = pipe_PipeSource0.read(realBufferedSource0.buffer, 100000000000L);
      assertNotSame(source0, pipe_PipeSource0);
      assertNotSame(pipe_PipeSource0, source0);
      assertEquals((-1L), long0);
      assertFalse(source0.equals((Object)pipe_PipeSource0));
      assertFalse(pipe_PipeSource0.equals((Object)source0));
      
      Inflater inflater0 = new Inflater(true);
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      Inflater inflater1 = new Inflater(true);
      assertEquals(0, inflater1.getTotalOut());
      assertEquals(0L, inflater1.getBytesRead());
      assertEquals(0, inflater1.getAdler());
      assertFalse(inflater1.needsDictionary());
      assertEquals(0, inflater1.getRemaining());
      assertEquals(0, inflater1.getTotalIn());
      assertEquals(0L, inflater1.getBytesWritten());
      assertTrue(inflater1.needsInput());
      assertNotNull(inflater1);
      assertFalse(inflater1.equals((Object)inflater0));
      
      InflaterSource inflaterSource0 = new InflaterSource(realBufferedSource0, inflater0);
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      assertFalse(source0.equals((Object)pipe_PipeSource0));
      assertFalse(inflater0.equals((Object)inflater1));
      
      HashingSource hashingSource0 = HashingSource.md5(source0);
      assertNotSame(source0, pipe_PipeSource0);
      assertNotNull(hashingSource0);
      assertFalse(source0.equals((Object)pipe_PipeSource0));
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource2);
      assertFalse(source0.equals((Object)pipe_PipeSource0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      ByteString byteString0 = realBufferedSource2.readByteString();
      assertNotSame(source0, pipe_PipeSource0);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(source0.equals((Object)pipe_PipeSource0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      boolean boolean0 = realBufferedSource1.rangeEquals(626L, byteString0, 2, 2);
      assertNotSame(source0, pipe_PipeSource0);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
      assertFalse(source0.equals((Object)pipe_PipeSource0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      long long1 = realBufferedSource2.indexOf((byte)59, 647L);
      assertNotSame(source0, pipe_PipeSource0);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertEquals((-1L), long1);
      assertFalse(source0.equals((Object)pipe_PipeSource0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNull(string0);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(timeout0);
      
      try { 
        realBufferedSource0.readByteArray(1226L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte byte0 = (byte) (-1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-1), 9223372036854775807L, (-331L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=9223372036854775807 toIndex=-331
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = realBufferedSource0.indexOf(byteString0, 8192L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "duration <= 0: ");
      assertFalse(boolean0);
      
      realBufferedSource0.skip((-64L));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[9];
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(16, byteString2.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(byteString2);
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      
      Options options0 = Options.of(byteStringArray0);
      assertEquals(9, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (byte)120);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = true;
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      assertNotNull(realBufferedSource0);
      
      long long0 = source0.read(realBufferedSource0.buffer, 626L);
      assertEquals((-1L), long0);
      
      Inflater inflater0 = new Inflater(false);
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertNotNull(inflater0);
      
      Inflater inflater1 = new Inflater(true);
      assertEquals(0L, inflater1.getBytesWritten());
      assertFalse(inflater1.needsDictionary());
      assertEquals(0, inflater1.getTotalIn());
      assertEquals(0L, inflater1.getBytesRead());
      assertTrue(inflater1.needsInput());
      assertEquals(0, inflater1.getRemaining());
      assertEquals(0, inflater1.getTotalOut());
      assertEquals(0, inflater1.getAdler());
      assertNotNull(inflater1);
      assertFalse(inflater1.equals((Object)inflater0));
      
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater1);
      assertEquals(0L, inflater1.getBytesWritten());
      assertFalse(inflater1.needsDictionary());
      assertEquals(0, inflater1.getTotalIn());
      assertEquals(0L, inflater1.getBytesRead());
      assertTrue(inflater1.needsInput());
      assertEquals(0, inflater1.getRemaining());
      assertEquals(0, inflater1.getTotalOut());
      assertEquals(0, inflater1.getAdler());
      assertNotNull(inflaterSource0);
      assertFalse(inflater1.equals((Object)inflater0));
      
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      assertNotSame(inflater1, inflater0);
      assertEquals(0L, inflater1.getBytesWritten());
      assertFalse(inflater1.needsDictionary());
      assertEquals(0, inflater1.getTotalIn());
      assertEquals(0L, inflater1.getBytesRead());
      assertTrue(inflater1.needsInput());
      assertEquals(0, inflater1.getRemaining());
      assertEquals(0, inflater1.getTotalOut());
      assertEquals(0, inflater1.getAdler());
      assertNotNull(hashingSource0);
      assertFalse(inflater1.equals((Object)inflater0));
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha512();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      
      boolean boolean0 = realBufferedSource1.rangeEquals((-1L), byteString1, (-618), 2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString1.size());
      assertFalse(boolean0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      
      long long1 = realBufferedSource1.indexOf((byte)59, (long) 2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(long1 == long0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)48, (byte)0, (byte)51}, byteArray0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflaterSink0);
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(7, deflater0.getTotalOut());
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSink0.buffer, byteString0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(20, byteString0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(7, deflater0.getTotalOut());
      assertNotNull(realBufferedSource0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = realBufferedSource0.indexOf(byteString0, 8192L);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.Buffer");
      assertFalse(boolean0);
      
      realBufferedSource0.skip((-64L));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[9];
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      byteStringArray0[0] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[2] = byteString0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteString byteString2 = realBufferedSource0.readByteString();
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0, byteString2.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      
      byteStringArray0[8] = byteString2;
      byteStringArray0[1] = byteString0;
      long long1 = realBufferedSource0.read(buffer0, 9223372036854775807L);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(9, options0.size());
      assertNotNull(options0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      String string0 = realBufferedSource1.readUtf8();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertEquals(3, byteString3.size());
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      String string1 = realBufferedSource2.readUtf8();
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      realBufferedSource2.close();
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)1, (-1L), (long) (byte)1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(deflaterSink0);
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      realBufferedSource1.close();
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(inputStream0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(gzipSink0);
      
      Deflater deflater0 = gzipSink0.deflater();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) realBufferedSource1.buffer, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflaterSink0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      deflaterSink0.flush();
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(5L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(5, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(realBufferedSource1, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(hashingSource1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        realBufferedSource2.readString(9223372036854775807L, charset0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      GzipSink gzipSink0 = new GzipSink(bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(gzipSink0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Deflater deflater0 = gzipSink0.deflater();
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflaterSink0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Sink sink0 = pipe0.sink();
      assertNotNull(sink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(sink0);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      
      deflaterSink0.flush();
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(5L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(5, deflater0.getTotalOut());
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      long long0 = realBufferedSource1.readAll(buffer0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(deflaterSink0);
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(7, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      
      deflater0.finish();
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(7, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-701));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(7, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(1, deflater0.getAdler());
      assertNotNull(bufferedSink0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fromIndex=%s toIndex=%s");
      assertFalse(boolean0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      long long0 = realBufferedSource0.readAll(deflaterSink0);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, deflater0.getBytesRead());
      assertEquals(20L, deflater0.getBytesWritten());
      assertEquals(7, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(166986515, deflater0.getAdler());
      assertEquals(20, deflater0.getTotalOut());
      assertEquals(7L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xab
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readString(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(16);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      
      String string1 = realBufferedSource0.toString();
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(string1);
      assertEquals("buffer([hex=10])", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[3];
      realBufferedSource0.skip((byte) (-3));
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readString(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      assertEquals("", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(16);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      String string1 = realBufferedSource0.toString();
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string1);
      assertEquals("buffer([hex=10])", string1);
      assertFalse(string1.equals((Object)string0));
      
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[5] = byteString0;
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-5);
      int int0 = realBufferedSource0.read(byteArray0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-5), (byte)0, (byte)0}, byteArray0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertNotNull(charset1);
      
      String string2 = realBufferedSource0.readString(charset0);
      assertSame(charset0, charset1);
      assertSame(buffer0, buffer1);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      ByteString byteString1 = realBufferedSource0.readByteString((long) (byte)0);
      assertNotSame(byteString1, byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0, byteString1.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      String string0 = realBufferedSource0.buffer.readString(charset0);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      Buffer buffer2 = realBufferedSource1.buffer.writeUtf8CodePoint((-3));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      String string1 = realBufferedSource1.toString();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string1);
      assertEquals("buffer([size=0])", string1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(string1.equals((Object)string0));
      
      try { 
        realBufferedSource1.skip(1326L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 9223372036854775765L;
      Pipe pipe0 = new Pipe(9223372036854775765L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      Pipe pipe1 = new Pipe((byte)33);
      assertNotNull(pipe1);
      assertFalse(pipe1.equals((Object)pipe0));
      
      Source source0 = pipe1.source();
      assertNotSame(pipe1, pipe0);
      assertNotNull(source0);
      assertFalse(pipe1.equals((Object)pipe0));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      assertFalse(pipe0.equals((Object)pipe1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      realBufferedSource1.close();
      assertNotSame(pipe0, pipe1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(pipe0.equals((Object)pipe1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byte byte0 = (byte)108;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(6, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.skip(558L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflater0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)48, (byte)0, (byte)51}, byteArray0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflaterSink0);
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSink0.buffer, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(20, byteString0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.finishDeflate();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      int int0 = realBufferedSource1.readUtf8CodePoint();
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(120, int0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource2);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(2, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        realBufferedSource2.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.finishDeflate();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      
      deflater0.finish();
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort((-701));
      assertSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink1, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertNotNull(realBufferedSink1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fromIndex=%s toIndex=%s");
      assertFalse(boolean0);
      
      Buffer buffer1 = realBufferedSink1.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      Inflater inflater0 = new Inflater(false);
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(inflaterSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, deflater0.getAdler());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      
      try { 
        realBufferedSource0.readAll(buffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readString(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(16);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      String string1 = realBufferedSource0.toString();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertNotNull(string1);
      assertEquals("buffer([hex=10])", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = realBufferedSource0.readUtf8Line();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(string2);
      assertEquals("\u0010", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long0 = 54L;
      try { 
        realBufferedSource0.readByteString(2495L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflaterSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      
      deflater0.finish();
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-701));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(7L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(bufferedSink0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fromIndex=%s toIndex=%s");
      assertFalse(boolean0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x78
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = 9223372036854775807L;
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "duration <0: ");
      assertFalse(boolean0);
      
      realBufferedSource0.skip((-2918L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      ByteString byteString2 = hashingSink0.hash();
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString2.size());
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteString2.equals((Object)byteString0));
      
      ByteString byteString3 = new ByteString((byte[]) null);
      assertNotNull(byteString3);
      
      long long1 = realBufferedSource0.indexOfElement(byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(long1 == long0);
      
      int int0 = 84;
      Buffer buffer2 = buffer1.writeShort(84);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      
      boolean boolean1 = realBufferedSource1.rangeEquals((long) 84, byteString2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString2.size());
      assertFalse(boolean1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(boolean1 == boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString2.equals((Object)byteString0));
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      
      ByteString byteString4 = new ByteString((byte[]) null);
      assertNotNull(byteString4);
      
      // Undeclared exception!
      try { 
        byteString4.lastIndexOf(byteString3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.finishDeflate();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(gzipSink0);
      
      Deflater deflater1 = gzipSink0.deflater();
      assertNotSame(deflater0, deflater1);
      assertNotSame(deflater1, deflater0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater1.needsInput());
      assertEquals(0L, deflater1.getBytesRead());
      assertEquals(0, deflater1.getTotalOut());
      assertEquals(0L, deflater1.getBytesWritten());
      assertEquals(1, deflater1.getAdler());
      assertEquals(0, deflater1.getTotalIn());
      assertNotNull(deflater1);
      assertFalse(deflater1.equals((Object)deflater0));
      
      HashingSink hashingSink1 = HashingSink.sha1(gzipSink0);
      assertNotSame(deflater0, deflater1);
      assertNotSame(hashingSink1, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(hashingSink1);
      assertFalse(deflater0.equals((Object)deflater1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(realBufferedSink1);
      assertFalse(deflater0.equals((Object)deflater1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotSame(deflater0, deflater1);
      assertNotSame(hashingSink0, hashingSink1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(deflater0.equals((Object)deflater1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertNotSame(deflater0, deflater1);
      assertNotSame(hashingSink0, hashingSink1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(8, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(20, byteString0.size());
      assertEquals((-1L), long0);
      assertFalse(deflater0.equals((Object)deflater1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      boolean boolean0 = realBufferedSource0.request(1000L);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(outputStream0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(48);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Pipe pipe0 = new Pipe(19L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      int int0 = (-1401);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-1401));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x87
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(deflaterSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7, deflater0.getTotalOut());
      assertEquals(7L, deflater0.getBytesWritten());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalIn());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffe");
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-3);
      byteArray0[6] = (byte)1;
      byteArray0[6] = (byte) (-28);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(string0);
      assertEquals("", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      Options options1 = Options.of(byteStringArray0);
      assertNotSame(options1, options0);
      assertEquals(0, options1.size());
      assertNotNull(options1);
      assertTrue(options1.equals((Object)options0));
      
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0, deflater0.getTotalIn());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertNotNull(deflaterSink0);
      
      deflaterSink0.finishDeflate();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      assertNotNull(realBufferedSink0);
      
      deflaterSink0.flush();
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(8, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(8L, deflater0.getBytesWritten());
      assertTrue(deflater0.needsInput());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      String string0 = "9v%`hiP;";
      ByteString byteString0 = ByteString.decodeBase64("9v%`hiP;");
      assertNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }
}
