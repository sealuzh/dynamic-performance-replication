/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:04:02 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Properties;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import javax.accessibility.AccessibleAction;
import javax.swing.JComponent;
import javax.swing.JTree;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "@data");
      LWL lWL0 = new LWL();
      ArffLoader arffLoader0 = new ArffLoader();
      testInstances0.toString();
      Evaluation.makeOptionString(lWL0, true);
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Vector<String> vector0 = new Vector<String>();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(".arff");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.KBMeanInformation();
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Vector<String> vector0 = new Vector<String>();
      doubleArray0[3] = 4.6;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1000.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf(instances0);
      LWL lWL0 = new LWL();
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1261.0396, intArray0, 4);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) lWL0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf((Object) null);
      Utils.log2 = (double) (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      instances0.getRandomNumberGenerator(1L);
      Evaluation.handleCostOption((String) null, 1);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.lastIndexOf(instances0);
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[3];
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances2, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      instances0.lastIndexOf("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      Utils.log2 = (double) (-1);
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.SFMeanEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.meanAbsoluteError();
      evaluation0.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass(0.0, 2.0);
      LWL lWL0 = new LWL();
      evaluation0.m_NumClasses = 4;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.makeOptionString(lWL0, true);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = Evaluation.MIN_SF_PROB;
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/.arff");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Vector<String> vector0 = new Vector<String>();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(".arff");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.KBRelativeInformation();
      evaluation0.addNumericTrainClass((-2420.141087957216), 4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("U2K'", 110);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-1.0E-6), (-17.831564517452));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/.bsi");
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.toSummaryString("    return ", true);
      Utils.log2 = (double) (-2);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      instances0.getRandomNumberGenerator(1L);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.getRevision();
      evaluation0.numInstances();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ArffLoader arffLoader0 = new ArffLoader();
      TestInstances testInstances1 = new TestInstances();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 110.7817884856166;
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.falseNegativeRate(1280);
      evaluation0.getHeader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cfj*=S}YNDFML+k{3<";
      stringArray0[1] = "\n\n=== Error on training data ===\n";
      stringArray0[2] = "b6";
      stringArray0[3] = "-i\n";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/.arff");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(".arff");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.setDiscardPredictions(false);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.numTrueNegatives(3);
      evaluation0.SFPriorEntropy();
      Float float0 = new Float(0.975);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      evaluation0.toClassDetailsString("@data");
      evaluation0.sizeOfPredictedRegions();
      evaluation0.unclassified();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      evaluation0.toMatrixString();
      Instances instances1 = new Instances(instances0);
      instances1.lastIndexOf("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      testInstances0.setNumNominal(2456);
      evaluation0.toCumulativeMarginDistributionString();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Instances instances1 = textDirectoryLoader0.getStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      instances0.add((Instance) denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      evaluation0.kappa();
      IBk iBk0 = new IBk();
      evaluation0.setDiscardPredictions(true);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.numTrueNegatives(1112551770);
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.unclassified();
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.updateStatsForPredictor(4, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setNumExecutionSlots");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      KDTree kDTree0 = new KDTree();
      LMT lMT0 = new LMT();
      IBk iBk0 = new IBk();
      iBk0.enumerateMeasures();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.KBInformation();
      evaluation0.toSummaryString(false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "@data");
      evaluation0.areaUnderROC(454);
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      MultiScheme multiScheme0 = new MultiScheme();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances1.sort((Comparator<? super Instance>) null);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.toString();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      // Undeclared exception!
      try { 
        evaluation0.recall(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", protectedProperties0);
      instances1.insertAttributeAt(attribute0, 2);
      instances1.delete();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances1.iterator();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.equals(multiScheme0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Float float0 = new Float((double) 5);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      evaluation0.toMatrixString();
      Instances instances1 = new Instances(instances0);
      instances1.lastIndexOf("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      testInstances0.setNumNominal(2456);
      testInstances0.setRelationalClassFormat(instances0);
      LWL lWL0 = new LWL();
      instances0.addAll((Collection<? extends Instance>) instances1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass(4.9E-324, 2.0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      TestInstances testInstances1 = new TestInstances();
      evaluation0.equals(evaluation1);
      evaluation1.weightedAreaUnderROC();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getRevision();
      evaluation1.setPriors(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      double double0 = UnivariateKernelEstimator.CONST;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      DenseInstance denseInstance0 = new DenseInstance(1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b28Rp\";51");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      evaluation0.toClassDetailsString();
      Utils.log2 = (double) 1;
      ArffLoader arffLoader0 = new ArffLoader();
      TestInstances testInstances1 = new TestInstances();
      evaluation0.equals(evaluation0);
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      evaluation0.kappa();
      evaluation0.totalCost();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      instances1.compactify();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumNominal((-256));
      LWL lWL1 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.falsePositiveRate(696);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.relativeAbsoluteError();
      evaluation0.SFMeanEntropyGain();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.SFEntropyGain();
      Evaluation.getGlobalInfo(lWL0);
      double double0 = evaluation0.m_SumErr;
      Evaluation.getGlobalInfo(lWL0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(106);
      evaluation0.kappa();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumNominal((-2256));
      LWL lWL1 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances1);
      evaluation0.falsePositiveRate(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getRevision();
      evaluation0.relativeAbsoluteError();
      StringReader stringReader0 = new StringReader("8034");
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Line 1: expected number of columns
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.falseNegativeRate((-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance(1280);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      instances0.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      KDTree kDTree0 = new KDTree();
      IBk iBk0 = new IBk();
      iBk0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.weightedFalseNegativeRate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      XML xML0 = new XML();
      xML0.getHeader();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      textDirectoryLoader0.getStructure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      IBk iBk0 = new IBk();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      System.setCurrentTimeMillis(0L);
      DenseInstance denseInstance0 = new DenseInstance(4);
      evaluation0.numTrueNegatives(4);
      evaluation0.SFPriorEntropy();
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.iterator();
      AbstractClassifier.runClassifier(lWL0, testInstances0.DEFAULT_WORDS);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      KDTree kDTree0 = new KDTree();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.SFMeanEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.numTrueNegatives((-1));
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      testInstances0.setNumNominalValues(0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      AbstractClassifier.runClassifier(lWL0, testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      KDTree kDTree0 = new KDTree(instances0);
      IBk iBk0 = new IBk();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.unclassified();
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.m_Incorrect;
      try { 
        evaluation0.evaluateModelOnce((Classifier) iBk0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Vector<String> vector0 = new Vector<String>();
      LWL lWL0 = new LWL();
      lWL0.globalInfo();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances1 = new Instances(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      instances1.lastIndexOf(additiveRegression0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelational(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      evaluation0.toCumulativeMarginDistributionString();
      LWL lWL1 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances1);
      evaluation0.falsePositiveRate(2);
      evaluation0.updateMargins(doubleArray0, 0, 621.789);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      Vector<String> vector0 = new Vector<String>();
      doubleArray0[3] = 4.6;
      doubleArray0[1] = 3.0;
      doubleArray0[3] = 3.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.relativeAbsoluteError();
      evaluation0.unclassified();
      evaluation0.toClassDetailsString("graph");
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.m_Incorrect;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4.6, intArray0, 6);
      evaluation0.kappa();
      evaluation0.matthewsCorrelationCoefficient((-2395));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString((String) null, true);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      instances0.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      evaluation0.SFMeanEntropyGain();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.m_Incorrect;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayesMultinomialUpdateable0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Vector<String> vector0 = new Vector<String>();
      doubleArray0[3] = 4.6;
      doubleArray0[1] = 3.0;
      doubleArray0[3] = 1678.6568000829;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.relativeAbsoluteError();
      evaluation0.unclassified();
      evaluation0.toClassDetailsString("graph");
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.pctCorrect();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayesMultinomialUpdateable0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 596.67890791;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.getClassPriors();
      String string0 = JTree.INVOKES_STOP_CELL_EDITING_PROPERTY;
      evaluation0.falseNegativeRate(78);
      evaluation0.toSummaryString(false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMicroFmeasure();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation2.useNoPriors();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String string0 = MatlabLoader.FILE_EXTENSION;
      LWL lWL0 = new LWL();
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 5, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stack<String> stack0 = new Stack<String>();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      evaluation0.relativeAbsoluteError();
      evaluation0.m_SumPredicted = (-2.0);
      evaluation0.setPriors(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toSummaryString(true);
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/.arff");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Vector<String> vector0 = new Vector<String>();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(".arff");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.KBRelativeInformation();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      instances0.lastIndexOf("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      Utils.log2 = (double) (-1);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.useNoPriors();
      evaluation0.kappa();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = OptionHandlerJavadoc.OPTIONS_ENDTAG;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.useNoPriors();
      evaluation0.kappa();
      simpleKMeans0.getClusterCentroids();
      evaluation0.SFMeanEntropyGain();
      StringReader stringReader0 = new StringReader("@relation");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Stack<String> stack0 = new Stack<String>();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.addNumericTrainClass(391.0, (-2777.5358752323));
      LWL lWL0 = new LWL();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      AbstractClassifier.makeCopy(randomCommittee0);
      Evaluation.makeOptionString(lWL0, true);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = Evaluation.MIN_SF_PROB;
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Vector<String> vector0 = new Vector<String>();
      doubleArray0[3] = 4.6;
      evaluation0.m_NoPriors = true;
      evaluation0.toSummaryString("@relation", false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      evaluation0.relativeAbsoluteError();
      evaluation0.unclassified();
      double double0 = evaluation0.m_SumAbsErr;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double double1 = evaluation1.m_ConfLevel;
      evaluation1.errorRate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      textDirectoryLoader0.getDirectory();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      int int0 = 19;
      CostMatrix costMatrix0 = new CostMatrix(19);
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      evaluation0.priorEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances1.iterator();
      AbstractClassifier.runClassifier(lWL0, testInstances0.DEFAULT_WORDS);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      KDTree kDTree0 = new KDTree();
      IBk iBk0 = new IBk();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.SFMeanEntropyGain();
      evaluation0.setDiscardPredictions(false);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFPriorEntropy();
      Float float0 = new Float((double) 3);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instances instances2 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.areaUnderPRC(1);
      evaluation1.trueNegativeRate(1839);
      evaluation0.matthewsCorrelationCoefficient((-1949));
      evaluation0.correct();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Vector<String> vector0 = new Vector<String>();
      evaluation0.m_NoPriors = true;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      evaluation0.relativeAbsoluteError();
      evaluation0.unclassified();
      double double0 = evaluation0.m_SumAbsErr;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances0 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      evaluation1.equals(optionHandlerJavadoc0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable2.getRevision();
      evaluation0.relativeAbsoluteError();
      textDirectoryLoader0.getDirectory();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation0.m_PriorEstimator;
      PipedReader pipedReader0 = new PipedReader(2570);
      PipedReader pipedReader1 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader1);
      pipedWriter0.flush();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      DecisionStump decisionStump0 = new DecisionStump();
      PipedReader pipedReader2 = null;
      try {
        pipedReader2 = new PipedReader(pipedWriter0, 2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      instances0.lastIndexOf("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.useNoPriors();
      KDTree kDTree0 = new KDTree(instances0);
      LMT lMT0 = new LMT();
      IBk iBk0 = new IBk();
      IBk iBk1 = new IBk();
      iBk1.enumerateMeasures();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumPriorAbsErr;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      evaluation1.incorrect();
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      instances0.lastIndexOf("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      Utils.log2 = (double) (-1);
      double[] doubleArray0 = evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation.handleCostOption("", (-2));
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      capabilities0.dependencies();
      naiveBayesMultinomialUpdateable0.getTechnicalInformation();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.makeDistribution((-1));
      evaluation0.correlationCoefficient();
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      evaluation0.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass(375.515, 2075.3937262014083);
      LWL lWL0 = new LWL();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.makeOptionString(lWL0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = null;
      try {
        instances1 = new Instances("saveInstancesTipText", arrayList0, (-1112551771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1112551771
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.getCapabilities();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Instances instances1 = textDirectoryLoader0.getStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setNumExecutionSlots");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation0.kappa();
      IBk iBk0 = new IBk();
      iBk0.enumerateMeasures();
      evaluation0.setDiscardPredictions(true);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.numTrueNegatives(1112551770);
      double double0 = UnivariateKernelEstimator.CONST;
      Float float0 = new Float((double) 1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      instances0.iterator();
      ArffLoader arffLoader0 = new ArffLoader();
      TestInstances testInstances1 = new TestInstances();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.equals((Object) null);
      KDTree kDTree0 = new KDTree();
      IBk iBk0 = new IBk();
      IBk iBk1 = new IBk();
      iBk0.enumerateMeasures();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      evaluation1.addNumericTrainClass(2950.12, (-1314.07));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AbstractClassifier.runClassifier(lWL0, testInstances0.DEFAULT_WORDS);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      evaluation0.setDiscardPredictions(true);
      testInstances0.setSeed(5);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFPriorEntropy();
      Float float0 = new Float((-667.3094616));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.pctUnclassified();
      Instances instances2 = null;
      try {
        instances2 = new Instances((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getRevision();
      evaluation0.relativeAbsoluteError();
      simpleLinearRegression0.buildClassifier(instances0);
      evaluation0.setPriors(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation1.SFMeanEntropyGain();
      double double0 = UnivariateKernelEstimator.CONST;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation1.incorrect();
      evaluation0.SFEntropyGain();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        evaluation0.toClassDetailsString("getErrorOnProbabilities");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      evaluation0.priorEntropy();
      evaluation0.priorEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Instances instances1 = textDirectoryLoader1.getStructure();
      instances0.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      CoverTree coverTree0 = new CoverTree();
      instances1.iterator();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      AbstractClassifier.runClassifier(classifier0, testInstances0.DEFAULT_WORDS);
      IBk iBk0 = new IBk((-2));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.getCapabilities();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      evaluation0.equals(reliefFAttributeEval0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      testInstances1.setNumRelational(20);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      testInstances0.setNumNominal(20);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      testInstances0.setNumNominalValues(0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      AbstractClassifier.runClassifier(lWL0, testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      KDTree kDTree0 = new KDTree();
      IBk iBk0 = new IBk();
      iBk0.enumerateMeasures();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.getDiscardPredictions();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      Vector<String> vector0 = new Vector<String>();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(1);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.pctIncorrect();
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      testInstances0.setNumNominalValues(0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      AbstractClassifier.runClassifier(lWL0, testInstances0.DEFAULT_WORDS);
      KDTree kDTree0 = new KDTree(instances0);
      IBk iBk0 = new IBk();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.unclassified();
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.m_Incorrect;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      evaluation1.correct();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances1.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2034);
      KDTree kDTree0 = new KDTree();
      IBk iBk0 = new IBk();
      IBk iBk1 = new IBk();
      iBk1.setMeanSquared(true);
      iBk1.enumerateMeasures();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.SFMeanEntropyGain();
      evaluation0.setDiscardPredictions(false);
      double double1 = NimbusStyle.MINI_SCALE;
      evaluation0.numTrueNegatives(500);
      evaluation0.SFPriorEntropy();
      Float float0 = new Float((double) (-2));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFEntropyGain();
      evaluation0.toClassDetailsString(".arff");
      evaluation0.sizeOfPredictedRegions();
      evaluation0.unclassified();
      evaluation0.numTruePositives(4);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.unclassified();
      MockRandom mockRandom0 = new MockRandom((-1155L));
      try { 
        evaluation0.crossValidateModel(" \nTotal Number of Instances                0     \n", instances1, (-100), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         // Total Number of Instances                0     
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Stack<String> stack0 = new Stack<String>();
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.KBRelativeInformation();
      evaluation0.SFSchemeEntropy();
      double[] doubleArray0 = new double[5];
      SparseInstance sparseInstance0 = new SparseInstance(2575.5446527, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.updateStatsForPredictor(2, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getRevision();
      evaluation0.relativeAbsoluteError();
      simpleLinearRegression0.buildClassifier(instances0);
      capabilities0.dependencies();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<!-- options-end -->");
      naiveBayesMultinomialUpdateable1.getTechnicalInformation();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialUpdateable0, instances0, 3098, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getRevision();
      evaluation0.relativeAbsoluteError();
      simpleLinearRegression0.buildClassifier(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<!-- options-end -->");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-2), 2.0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      TestInstances testInstances1 = new TestInstances();
      evaluation1.m_SumSqrPredicted = 2.0;
      evaluation0.equals(evaluation1);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      XML xML0 = new XML();
      xML0.getHeader();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", false);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      ArffLoader arffLoader0 = new ArffLoader();
      textDirectoryLoader0.setRetrieval(3);
      Evaluation.makeOptionString(lWL0, false);
      double double0 = evaluation0.m_TotalCoverage;
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      evaluation0.sizeOfPredictedRegions();
      DenseInstance denseInstance0 = new DenseInstance(0, (double[]) null);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.errorRate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      textDirectoryLoader0.getDirectory();
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation2.m_PriorEstimator;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = 3.4;
      evaluation0.toSummaryString(" ", true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      instances0.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.iterator();
      ArffLoader arffLoader0 = new ArffLoader();
      MultiScheme multiScheme0 = new MultiScheme();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable1.getRevision();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Bagging bagging0 = new Bagging();
      Capabilities capabilities0 = bagging0.getCapabilities();
      capabilities0.dependencies();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      naiveBayesMultinomialUpdateable0.getTechnicalInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.makeDistribution(0.22499999403953552);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Utils.log2 = (double) 1;
      ArffLoader arffLoader0 = new ArffLoader();
      TestInstances testInstances1 = new TestInstances();
      evaluation0.equals(evaluation0);
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      evaluation0.sizeOfPredictedRegions();
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString("H`Zjb/", true);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      instances0.delete();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.iterator();
      ArffLoader arffLoader0 = new ArffLoader();
      TestInstances testInstances1 = new TestInstances();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.equals(instances0);
      KDTree kDTree0 = new KDTree();
      IBk iBk0 = new IBk();
      iBk0.enumerateMeasures();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<String> vector0 = new Vector<String>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      instances0.iterator();
      AbstractClassifier.runClassifier((Classifier) null, (String[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      KDTree kDTree0 = new KDTree();
      IBk iBk0 = new IBk();
      iBk0.enumerateMeasures();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.SFMeanEntropyGain();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 1719.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = AccessibleAction.DECREMENT;
      evaluation0.toMatrixString();
      instances0.lastIndexOf(testInstances0);
      evaluation0.getClassPriors();
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.makeDistribution(Double.NaN);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.delete();
      evaluation0.m_MissingClass = 1044.53;
      MultiScheme multiScheme0 = new MultiScheme();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.equals(multiClassClassifier0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder(evoSuiteFile0);
      converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-648.636349882);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 2;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getRevision();
      simpleLinearRegression0.buildClassifier(instances0);
      capabilities0.dependencies();
      naiveBayesMultinomialUpdateable1.getTechnicalInformation();
      MockRandom mockRandom0 = new MockRandom();
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      try { 
        evaluation1.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances1 = new TestInstances();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable2.getRevision();
      capabilities0.dependencies();
      naiveBayesMultinomialUpdateable2.getTechnicalInformation();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.getClassPriors();
      evaluation0.correlationCoefficient();
      evaluation0.SFPriorEntropy();
      evaluation0.falseNegativeRate(14);
      evaluation0.incorrect();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 647.55484;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4233.048220572372, (int[]) null, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Utils.log2 = (double) (-2);
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nTotal Number of Instances                0     \n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      converterUtils_DataSource0.reset();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1;
      evaluation1.updateStatsForClassifier(doubleArray0, instance0);
      evaluation1.incorrect();
      evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Utils.log2 = (double) (-2);
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nTotal Number of Instances                0     \n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      converterUtils_DataSource0.reset();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      try { 
        evaluation1.evaluateModelOnce((double) 6, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Utils.log2 = (double) (-2);
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.incorrect();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Utils.log2 = (double) (-2);
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nTotal Number of Instances                0     \n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      converterUtils_DataSource0.reset();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = Double.NaN;
      evaluation0.updateStatsForClassifier(doubleArray0, instance0);
      evaluation1.incorrect();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (-2.0);
      doubleArray1[4] = (-2.0);
      doubleArray1[5] = (-2.0);
      doubleArray1[6] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray1, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Float float0 = new Float((double) (-1));
      Utils.log2 = (double) (-2);
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nTotal Number of Instances                0     \n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      evaluation1.incorrect();
      evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
      evaluation1.toClassDetailsString();
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      evaluation0.KBInformation();
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.addNumericTrainClass((-2), (-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.m_SumPriorSqrErr = (double) 2;
      Float float0 = new Float((double) (-1));
      Utils.log2 = (double) (-2);
      evaluation0.toSummaryString();
      evaluation0.rootRelativeSquaredError();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nTotal Number of Instances                0     \n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      evaluation1.incorrect();
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      evaluation2.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
      String string0 = DefaultEditorKit.cutAction;
      evaluation0.KBInformation();
      evaluation2.KBInformation();
      evaluation2.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
      try { 
        Evaluation.evaluateModel("  public static void main(String args[]) {\n", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name   public static void main(String args[]) {
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
