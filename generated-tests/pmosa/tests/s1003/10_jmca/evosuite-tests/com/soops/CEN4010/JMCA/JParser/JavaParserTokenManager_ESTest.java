/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:42:12 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 26, 26);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 26);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      javaCharStream0.ReInit((InputStream) pushbackInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 4149, 4149, 120);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4149, column 4150.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)0);
      byteArrayInputStream0.markSupported();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)118, (byte)118);
      byteArrayInputStream0.markSupported();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      byteArrayInputStream0.skip(0L);
      javaParserTokenManager0.getNextToken();
      byteArrayInputStream0.markSupported();
      javaCharStream0.AdjustBuffSize();
      StringReader stringReader0 = new StringReader("vv");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE, 7);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (int) (byte) (-116));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -116. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 101, 101);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals("I", token0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)118, (byte)118);
      byteArrayInputStream0.markSupported();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      byteArrayInputStream0.skip(0L);
      javaParserTokenManager0.getNextToken();
      byteArrayInputStream0.markSupported();
      javaCharStream0.AdjustBuffSize();
      StringReader stringReader0 = new StringReader("vv");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE, 7);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (int) (byte) (-116));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -116. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[3] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)118, (byte)0);
      byteArrayInputStream0.markSupported();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      byteArrayInputStream0.skip(0L);
      javaParserTokenManager0.getNextToken();
      byteArrayInputStream0.markSupported();
      javaCharStream0.AdjustBuffSize();
      StringReader stringReader0 = new StringReader("v");
      byteArrayInputStream0.markSupported();
      javaCharStream0.AdjustBuffSize();
      StringReader stringReader1 = new StringReader("v");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 74, 2529, 3418);
      Token.newToken((-1483));
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-23);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)40;
      byte byte1 = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-122), 1145);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1145, 28);
      byteArrayInputStream1.skip((-1290L));
      javaParserTokenManager0.ReInit(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.next;
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -122, column 1145.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)40, (byte)40);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 21, (byte) (-122));
      byteArrayInputStream1.skip(0L);
      javaParserTokenManager0.ReInit(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.next;
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 40. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)47, (byte)47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 56.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)47, (byte)47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 56.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)96, 93);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 3);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 96, column 97.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)118, (byte)118);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = (int) (byte)118;
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 18. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)56, (byte)122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 56, column 128.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2724, (byte)54);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2724, column 71.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '1';
      charArray0[2] = 'f';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 28, 547);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(549, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)38;
      char[] charArray0 = new char[25];
      charArray0[0] = '9';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = ' ';
      charArray0[4] = 'R';
      charArray0[5] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)66, 101);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(103, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)117, (byte)117);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(118, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)73, (byte)73);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)42, (byte)42);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 4149, 4149, 120);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(103, token0.kind);
      assertEquals("*", token0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)38, (byte)0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(38, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 121, (byte)117);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 121, column 123.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 28, 2);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 70. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-475), (byte)69);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(70, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)63, (byte)63);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 103, (-1909));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals("?", token0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)56, (byte)122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 56, column 128.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1413), (byte)56);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 121, (byte)117);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 121, column 118.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-16), (byte) (-16));
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 98, (byte)63);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(98, javaCharStream1.getEndLine());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)53, (byte)53);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 103, (-1909));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaCharStream1.Done();
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 53, column 62.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte)63;
      byteArray1[6] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)63, 1460);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("&", token0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)56, 3404);
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '%';
      charArray0[2] = 't';
      charArray0[3] = '?';
      charArray0[4] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 1252, (-2325));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1252, column -2325.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)57, (byte)57);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":$p\",gxpD");
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 57, column 60.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)44, (byte)122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(",", token0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)51, (byte)51);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)51, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 51, column 56.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, (byte)63, (-1080));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(98, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("&&", token0.toString());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(105, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("&", token1.toString());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
      
      javaParserTokenManager0.SwitchTo(1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)49, (byte) (-67)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)51, (byte)51);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)51, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 51, column 56.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 118);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 446, (byte)42);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-1), 2016);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(4, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2020, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals(2016, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(30, token0.kind);
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(2020, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(2016, javaCharStream2.getBeginColumn());
      assertEquals(2020, javaCharStream2.getEndColumn());
      assertEquals("false", token0.toString());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(4, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(2020, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(2016, javaCharStream2.getBeginColumn());
      assertEquals(2020, javaCharStream2.getEndColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2016, token1.beginColumn);
      assertEquals(30, token1.kind);
      assertEquals((-1), token1.endLine);
      assertEquals((-1), token1.beginLine);
      assertEquals(2020, token1.endColumn);
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(2020, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(2016, javaCharStream2.getBeginColumn());
      assertEquals(2020, javaCharStream2.getEndColumn());
      assertEquals("false", token1.toString());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.ReInit(javaCharStream2);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(4, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(2020, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(2016, javaCharStream2.getBeginColumn());
      assertEquals(2020, javaCharStream2.getEndColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "while";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "while");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)33, (byte)51, (byte)63}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)33, (byte)122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)33, (byte)51, (byte)63}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)33, (byte)51, (byte)63}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)33, (byte)51, (byte)63}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("!", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)33, (byte)51, (byte)63}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)33, (byte)51, (byte)63}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo((byte)51);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 51. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)48, (byte)72, (byte)6}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)96, 42);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)48, (byte)72, (byte)6}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)96, (byte)48, (byte)72, (byte)6}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 96, column 42.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-115), (byte)117, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-115), 2588);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-115), (byte)117, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-115), (byte)117, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -115, column 2594.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)122, (byte)38, (byte)38, (byte)122, (byte)122, (byte)38}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)122, 1970);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)122, (byte)38, (byte)38, (byte)122, (byte)122, (byte)38}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)38, (byte)122, (byte)38, (byte)38, (byte)122, (byte)122, (byte)38}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)38, (byte)122, (byte)38, (byte)38, (byte)122, (byte)122, (byte)38}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)38, (byte)122, (byte)38, (byte)38, (byte)122, (byte)122, (byte)38}, byteArray0);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.beginLine);
      assertEquals(105, token0.kind);
      assertEquals(1970, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertEquals(1970, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1970, javaCharStream0.getBeginColumn());
      assertEquals(1970, javaCharStream0.getColumn());
      assertEquals(1970, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("&", token0.toString());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)38, (byte)122, (byte)38, (byte)38, (byte)122, (byte)122, (byte)38}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1088), (byte)44);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1088), 4515);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4515, token0.beginColumn);
      assertEquals(4517, token0.endColumn);
      assertEquals((-1088), token0.endLine);
      assertEquals((-1088), token0.beginLine);
      assertEquals(4517, javaCharStream1.getColumn());
      assertEquals(4517, javaCharStream1.getEndColumn());
      assertEquals((-1088), javaCharStream1.getLine());
      assertEquals((-1088), javaCharStream1.getEndLine());
      assertEquals((-1088), javaCharStream1.getBeginLine());
      assertEquals(4515, javaCharStream1.getBeginColumn());
      assertEquals("lll", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'l', 'l', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)100, (byte)65, (byte)112, (byte)21, (byte)34, (byte)103, (byte)18, (byte)34, (byte)86}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)100, (byte)65, (byte)112, (byte)21, (byte)34, (byte)103, (byte)18, (byte)34, (byte)86}, byteArray0);
      
      boolean boolean0 = byteArrayInputStream1.markSupported();
      assertTrue(boolean0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)100, (byte)65, (byte)112, (byte)21, (byte)34, (byte)103, (byte)18, (byte)34, (byte)86}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 270, 4809);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)100, (byte)65, (byte)112, (byte)21, (byte)34, (byte)103, (byte)18, (byte)34, (byte)86}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)100, (byte)65, (byte)112, (byte)21, (byte)34, (byte)103, (byte)18, (byte)34, (byte)86}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(4809, token0.beginColumn);
      assertEquals(270, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4811, token0.endColumn);
      assertEquals(270, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("dAp", token0.toString());
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(270, javaCharStream0.getLine());
      assertEquals(270, javaCharStream0.getEndLine());
      assertEquals(4811, javaCharStream0.getEndColumn());
      assertEquals(4811, javaCharStream0.getColumn());
      assertEquals(270, javaCharStream0.getBeginLine());
      assertEquals(4809, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)100, (byte)65, (byte)112, (byte)21, (byte)34, (byte)103, (byte)18, (byte)34, (byte)86}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)57, (byte)38, (byte)38, (byte)57, (byte)38, (byte)38}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = '.';
      charArray0[2] = '1';
      charArray0[3] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', '.', '1', '1'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'w', '.', '1', '1'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 17, (byte)38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', '.', '1', '1'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'w', '.', '1', '1'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(17, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(38, token0.beginColumn);
      assertEquals(38, token0.endColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("w", token0.toString());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'w', '.', '1', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = ',';
      charArray0[2] = '*';
      charArray0[3] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', ',', '*', 'E'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 97, (byte)38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', ',', '*', 'E'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', ',', '*', 'E'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token0.beginLine);
      assertEquals(38, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(38, token0.endColumn);
      assertEquals(97, token0.endLine);
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals("c", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', ',', '*', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '-';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'f';
      charArray0[5] = '1';
      charArray0[6] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '-', 'K', 'K', 'f', '1', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)57, 1356);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '-', 'K', 'K', 'f', '1', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '-', 'K', 'K', 'f', '1', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1356, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(57, token0.beginLine);
      assertEquals(57, token0.endLine);
      assertEquals(1356, token0.beginColumn);
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(1356, javaCharStream0.getBeginColumn());
      assertEquals(1356, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(1356, javaCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '-', 'K', 'K', 'f', '1', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 53, (-646));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.kind);
      assertEquals(53, token0.beginLine);
      assertEquals((-646), token0.endColumn);
      assertEquals((-646), token0.beginColumn);
      assertEquals(53, token0.endLine);
      assertEquals((-646), javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals((-646), javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals((-646), javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 21, 80);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(80, token0.beginColumn);
      assertEquals(21, token0.endLine);
      assertEquals(81, token0.endColumn);
      assertEquals(21, token0.beginLine);
      assertEquals(100, token0.kind);
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals("--", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 80. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'f', 'f', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 21, 80);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', 'f', 'f', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', 'f', 'f', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token0.endLine);
      assertEquals(80, token0.endColumn);
      assertEquals(80, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(21, token0.beginLine);
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', 'f', 'f', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 80. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte) (-54), (byte)51, (byte)92}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)6, 85);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte) (-54), (byte)51, (byte)92}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte) (-54), (byte)51, (byte)92}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte) (-54), (byte)51, (byte)92}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte) (-54), (byte)51, (byte)92}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 6, column 90.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "while");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)34}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)65, (byte)34}, byteArray0);
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)65, (byte)34}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 7, 630);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)65, (byte)34}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)65, (byte)34}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(630, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(630, token0.endColumn);
      assertEquals(7, token0.endLine);
      assertEquals(7, token0.beginLine);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals(630, javaCharStream0.getEndColumn());
      assertEquals(630, javaCharStream0.getBeginColumn());
      assertEquals(630, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals("A", token0.toString());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)65, (byte)34}, byteArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals(630, javaCharStream0.getEndColumn());
      assertEquals(630, javaCharStream0.getBeginColumn());
      assertEquals(630, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)65, (byte)34}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)44, (byte)44, (byte)44, (byte)44, (byte)44, (byte)44, (byte)44, (byte)44}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '\\';
      charArray0[3] = '-';
      charArray0[4] = 'f';
      charArray0[5] = '5';
      charArray0[6] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'K', '\\', '-', 'f', '5', '-'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 33, (byte)44);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', 'K', '\\', '-', 'f', '5', '-'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', 'K', '\\', '-', 'f', '5', '-'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(33, token0.endLine);
      assertEquals(44, token0.endColumn);
      assertEquals(44, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(33, token0.beginLine);
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', 'K', '\\', '-', 'f', '5', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = 'c';
      charArray0[8] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ',', ',', ',', ',', 'c', ','}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ',', ',', ',', ',', 'c', ','}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 114, (byte)38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ',', ',', ',', ',', 'c', ','}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ',', ',', ',', ',', 'c', ','}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(114, token0.endLine);
      assertEquals(114, token0.beginLine);
      assertEquals(40, token0.endColumn);
      assertEquals(38, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("ccc", token0.toString());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ',', ',', ',', ',', 'c', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '1';
      charArray0[2] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '1', '-'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(45, int0);
      assertArrayEquals(new char[] {'-', '1', '-'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-315), 24);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', '1', '-'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', '1', '-'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'-', '1', '-'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -315, column 26.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = '-';
      charArray0[4] = '-';
      charArray0[1] = '\\';
      charArray0[6] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '\\', 'f', '-', '-', '\u0000', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 33, 91);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', '\\', 'f', '-', '-', '\u0000', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', '\\', 'f', '-', '-', '\u0000', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(91, token0.beginColumn);
      assertEquals(91, token0.endColumn);
      assertEquals(33, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(33, token0.beginLine);
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', '\\', 'f', '-', '-', '\u0000', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/'5(71");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = '(';
      charArray0[2] = 'a';
      charArray0[3] = '3';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)41, (byte)12, (byte)4, (byte) (-46), (byte)69}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)82, (byte)41, (byte)12, (byte)4, (byte) (-46), (byte)69}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, (byte)41, (byte)41);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)41, (byte)12, (byte)4, (byte) (-46), (byte)69}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)82, (byte)41, (byte)12, (byte)4, (byte) (-46), (byte)69}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, token0.beginColumn);
      assertEquals(41, token0.endColumn);
      assertEquals(41, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("R", token0.toString());
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)82, (byte)41, (byte)12, (byte)4, (byte) (-46), (byte)69}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[2];
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, (byte)0, 79);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '\u0000', '4', '4', '4', '4', '4', '4'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 79, 2971);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'4', '\u0000', '4', '4', '4', '4', '4', '4'}, charArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, (-1), 35);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertArrayEquals(new char[] {'4', '\u0000', '4', '4', '4', '4', '4', '4'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'4', '\u0000', '4', '4', '4', '4', '4', '4'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 43.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '.';
      charArray1[1] = '1';
      charArray1[2] = '.';
      charArray1[3] = '1';
      charArray1[4] = '~';
      charArray1[5] = ',';
      charArray1[6] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '1', '.', '1', '~', ',', '.'}, charArray1);
      
      int int0 = charArrayReader0.read();
      assertEquals(46, int0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', '1', '.', '1', '~', ',', '.'}, charArray1);
      
      charArrayReader0.reset();
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', '1', '.', '1', '~', ',', '.'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)38, (-1153));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '1', '.', '1', '~', ',', '.'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '1', '.', '1', '~', ',', '.'}, charArray1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1153), token0.beginColumn);
      assertEquals((-1152), token0.endColumn);
      assertEquals(38, token0.endLine);
      assertEquals(70, token0.kind);
      assertEquals(38, token0.beginLine);
      assertEquals(38, javaCharStream0.getLine());
      assertEquals((-1152), javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getBeginLine());
      assertEquals((-1153), javaCharStream0.getBeginColumn());
      assertEquals((-1152), javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getEndLine());
      assertEquals(".1", token0.toString());
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '1', '.', '1', '~', ',', '.'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 816, 816);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      charArray0[7] = '~';
      charArray0[8] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(126, int0);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), (-1440));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(90, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1440), token0.endColumn);
      assertEquals((-1440), token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1440), javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1440), javaCharStream1.getBeginColumn());
      assertEquals((-1440), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("~", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)66, (byte)38, (byte)38, (byte)38, (byte)38, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 42, 47);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)66, (byte)38, (byte)38, (byte)38, (byte)38, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)38, (byte)66, (byte)38, (byte)38, (byte)38, (byte)38, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.kind);
      assertEquals(42, token0.beginLine);
      assertEquals(47, token0.endColumn);
      assertEquals(42, token0.endLine);
      assertEquals(47, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)38, (byte)66, (byte)38, (byte)38, (byte)38, (byte)38, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(48, token1.beginColumn);
      assertEquals(48, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(42, token1.beginLine);
      assertEquals(42, token1.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals("B", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)38, (byte)66, (byte)38, (byte)38, (byte)38, (byte)38, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = ')';
      charArray0[2] = 'l';
      charArray0[3] = 'x';
      charArray0[4] = 'd';
      charArray0[5] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'p', ')', 'l', 'x', 'd', 'A'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 321, 42);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'p', ')', 'l', 'x', 'd', 'A'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'p', ')', 'l', 'x', 'd', 'A'}, charArray0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(321, token2.endLine);
      assertEquals(321, token2.beginLine);
      assertEquals(42, token2.endColumn);
      assertEquals(42, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(42, javaCharStream1.getBeginColumn());
      assertEquals(42, javaCharStream1.getEndColumn());
      assertEquals(321, javaCharStream1.getEndLine());
      assertEquals(42, javaCharStream1.getColumn());
      assertEquals(321, javaCharStream1.getLine());
      assertEquals(321, javaCharStream1.getBeginLine());
      assertEquals("p", token2.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'p', ')', 'l', 'x', 'd', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '0';
      charArray0[2] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '0', 'x'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-115), 46);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\'', '0', 'x'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', '0', 'x'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -115, column 49.  Encountered: <EOF> after : \"\\'0x\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '0';
      charArray0[2] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '0', 'x'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\'', '0', 'x'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 19, (byte) (-115));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\'', '0', 'x'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', '0', 'x'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 19, column -112.  Encountered: <EOF> after : \"\\'0x\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[2] = '+';
      charArray0[3] = '8';
      charArray0[4] = 'p';
      charArray0[5] = '1';
      charArray0[6] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Y', 'r', '+', '8', 'p', '1', 'x'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'Y', 'r', '+', '8', 'p', '1', 'x'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 22, 114);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'Y', 'r', '+', '8', 'p', '1', 'x'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'Y', 'r', '+', '8', 'p', '1', 'x'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(114, token0.beginColumn);
      assertEquals(22, token0.endLine);
      assertEquals(22, token0.beginLine);
      assertEquals(115, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals("Yr", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'Y', 'r', '+', '8', 'p', '1', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '@';
      charArray0[2] = '.';
      charArray0[3] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', '@', '.', 'v'}, charArray0);
      
      int int0 = 22;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 80, 22);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'!', '@', '.', 'v'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)57, 51, 1191);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'!', '@', '.', 'v'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'!', '@', '.', 'v'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(51, token0.endColumn);
      assertEquals(51, token0.beginColumn);
      assertEquals(57, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(57, token0.endLine);
      assertEquals(57, javaCharStream1.getBeginLine());
      assertEquals(57, javaCharStream1.getEndLine());
      assertEquals(51, javaCharStream1.getBeginColumn());
      assertEquals(57, javaCharStream1.getLine());
      assertEquals(51, javaCharStream1.getColumn());
      assertEquals(51, javaCharStream1.getEndColumn());
      assertEquals("!", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'!', '@', '.', 'v'}, charArray0);
      
      javaParserTokenManager0.lengthOfMatch = 4;
      assertEquals(57, javaCharStream1.getBeginLine());
      assertEquals(57, javaCharStream1.getEndLine());
      assertEquals(51, javaCharStream1.getBeginColumn());
      assertEquals(57, javaCharStream1.getLine());
      assertEquals(51, javaCharStream1.getColumn());
      assertEquals(51, javaCharStream1.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1191);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1191. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 4244, 1422);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1422, token0.beginColumn);
      assertEquals(1422, token0.endColumn);
      assertEquals(4244, token0.beginLine);
      assertEquals(4244, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1422, javaCharStream0.getColumn());
      assertEquals(1422, javaCharStream0.getEndColumn());
      assertEquals(1422, javaCharStream0.getBeginColumn());
      assertEquals(4244, javaCharStream0.getEndLine());
      assertEquals(4244, javaCharStream0.getLine());
      assertEquals(4244, javaCharStream0.getBeginLine());
      assertEquals("P", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'P'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)48;
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-2799), 39);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(42, token0.endColumn);
      assertEquals((-2799), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-2799), token0.endLine);
      assertEquals(39, token0.beginColumn);
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals((-2799), javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals((-2799), javaCharStream0.getLine());
      assertEquals((-2799), javaCharStream0.getEndLine());
      assertEquals("xxxx", token0.toString());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 297, 7);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token0.kind);
      assertEquals(7, token0.beginColumn);
      assertEquals(297, token0.beginLine);
      assertEquals(7, token0.endColumn);
      assertEquals(297, token0.endLine);
      assertEquals(297, javaCharStream0.getLine());
      assertEquals(297, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(297, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C=!iG6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2145388542, 26);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2145388542, token0.beginLine);
      assertEquals(26, token0.endColumn);
      assertEquals(2145388542, token0.endLine);
      assertEquals(26, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals("C", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(26, token1.beginColumn);
      assertEquals(26, token1.endColumn);
      assertEquals(2145388542, token1.beginLine);
      assertEquals(2145388542, token1.endLine);
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals("C", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) null, (-720));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("falsF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 816, 816);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '~';
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), 37);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(820, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(816, token0.beginLine);
      assertEquals(816, token0.endLine);
      assertEquals(816, token0.beginColumn);
      assertEquals(816, javaCharStream0.getBeginLine());
      assertEquals(816, javaCharStream0.getLine());
      assertEquals(820, javaCharStream0.getEndColumn());
      assertEquals(816, javaCharStream0.getBeginColumn());
      assertEquals(816, javaCharStream0.getEndLine());
      assertEquals(820, javaCharStream0.getColumn());
      assertEquals("falsF", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '1';
      charArray0[2] = 'I';
      charArray0[3] = '.';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '1', 'I', '.', '1', '1', '1', 'I'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-214), 46);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '1', 'I', '.', '1', '1', '1', 'I'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '1', 'I', '.', '1', '1', '1', 'I'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-214), token0.beginLine);
      assertEquals(70, token0.kind);
      assertEquals(47, token0.endColumn);
      assertEquals(46, token0.beginColumn);
      assertEquals((-214), token0.endLine);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals((-214), javaCharStream0.getEndLine());
      assertEquals((-214), javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals((-214), javaCharStream0.getLine());
      assertEquals(".1", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '1', 'I', '.', '1', '1', '1', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '4';
      charArray0[2] = '-';
      charArray0[3] = '1';
      charArray0[4] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-656), 53);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-656), token0.beginLine);
      assertEquals((-656), token0.endLine);
      assertEquals(53, token0.beginColumn);
      assertEquals(54, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-656), javaCharStream0.getLine());
      assertEquals((-656), javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals((-656), javaCharStream0.getEndLine());
      assertEquals("K4", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '4';
      charArray0[2] = '-';
      charArray0[3] = '1';
      charArray0[4] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("K4", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'K', '4', '-', '1', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'I';
      charArray0[2] = '.';
      charArray0[3] = '1';
      charArray0[4] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', 'I', '.', '1', 'e'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 40, 40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', 'I', '.', '1', 'e'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 51, 297, 297);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'.', 'I', '.', '1', 'e'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', 'I', '.', '1', 'e'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(297, token0.endColumn);
      assertEquals(297, token0.beginColumn);
      assertEquals(51, token0.endLine);
      assertEquals(85, token0.kind);
      assertEquals(51, token0.beginLine);
      assertEquals(51, javaCharStream1.getLine());
      assertEquals(51, javaCharStream1.getEndLine());
      assertEquals(51, javaCharStream1.getBeginLine());
      assertEquals(297, javaCharStream1.getEndColumn());
      assertEquals(297, javaCharStream1.getBeginColumn());
      assertEquals(297, javaCharStream1.getColumn());
      assertEquals(".", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', 'I', '.', '1', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '|';
      charArray0[2] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(81, int0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 9, 23);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      boolean boolean0 = charArrayReader1.ready();
      assertTrue(boolean0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(23, token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals(9, token0.beginLine);
      assertEquals(9, token0.endLine);
      assertEquals(23, token0.endColumn);
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals("|", token0.toString());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'N'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'N'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 106, 321);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'N'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'N'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token0.endLine);
      assertEquals(321, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(106, token0.beginLine);
      assertEquals(321, token0.beginColumn);
      assertEquals(321, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(321, javaCharStream0.getColumn());
      assertEquals(321, javaCharStream0.getEndColumn());
      assertEquals("N", token0.toString());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'S';
      charArray0[2] = '4';
      charArray0[3] = '-';
      charArray0[4] = '1';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, 37);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, token0.beginColumn);
      assertEquals(37, token0.endColumn);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 289, 7);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertEquals(289, token0.endLine);
      assertEquals(289, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(289, javaCharStream0.getBeginLine());
      assertEquals(289, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(289, javaCharStream0.getLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(289, javaCharStream0.getBeginLine());
      assertEquals(289, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(289, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = '3';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      charArray0[7] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', '3', 'd', 'd', 'd'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 43);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', '3', 'd', 'd', 'd'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 762, (byte)35);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', '3', 'd', 'd', 'd'}, charArray0);
      
      javaCharStream0.ExpandBuff(false);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', '3', 'd', 'd', 'd'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', '3', 'd', 'd', 'd'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(42, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(762, token0.beginLine);
      assertEquals(762, token0.endLine);
      assertEquals(35, token0.beginColumn);
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(762, javaCharStream0.getBeginLine());
      assertEquals(762, javaCharStream0.getLine());
      assertEquals(762, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals("dddd3ddd", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', '3', 'd', 'd', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'S';
      charArray0[2] = '4';
      charArray0[3] = '-';
      charArray0[4] = '1';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, 'f');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('-', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(103, token0.beginColumn);
      assertEquals(104, token0.endColumn);
      assertEquals(46, token0.endLine);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals("S4", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(103, token0.beginColumn);
      assertEquals(104, token0.endColumn);
      assertEquals(46, token0.endLine);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals("S4", token0.toString());
      assertArrayEquals(new char[] {'-', 'S', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '.';
      charArray0[2] = 'S';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'S';
      charArray0[6] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '.', 'S', 'I', 'I', 'S', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 92, (byte)35);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'1', '.', 'S', 'I', 'I', 'S', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'1', '.', 'S', 'I', 'I', 'S', '.'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 92, column 42.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '.';
      charArray0[2] = 'S';
      charArray0[3] = 'I';
      charArray0[5] = 'S';
      charArray0[6] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '.', 'S', 'I', '\u0000', 'S', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 92, (byte)35);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'1', '.', 'S', 'I', '\u0000', 'S', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'1', '.', 'S', 'I', '\u0000', 'S', '.'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 92, column 42.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '4';
      charArray0[3] = '-';
      charArray0[4] = '1';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, 'f');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', '-', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('-', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'-', '-', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', '-', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, token0.kind);
      assertEquals(46, token0.endLine);
      assertEquals(46, token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(103, token0.endColumn);
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'-', '-', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, token0.kind);
      assertEquals(46, token0.endLine);
      assertEquals(46, token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(103, token0.endColumn);
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertArrayEquals(new char[] {'-', '-', '4', '-', '1', '\u0000', 'f', 'f', 'f'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(46);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 46. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)72;
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = 'V';
      charArray0[2] = 'W';
      charArray0[3] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'V', 'W', 'B'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'%', 'V', 'W', 'B'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 56, 115);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'%', 'V', 'W', 'B'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'%', 'V', 'W', 'B'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(56, token0.beginLine);
      assertEquals(115, token0.endColumn);
      assertEquals(115, token0.beginColumn);
      assertEquals(56, token0.endLine);
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(56, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals("%", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'%', 'V', 'W', 'B'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(56, token0.beginLine);
      assertEquals(115, token0.endColumn);
      assertEquals(115, token0.beginColumn);
      assertEquals(56, token0.endLine);
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(56, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals("%", token0.toString());
      assertArrayEquals(new char[] {'%', 'V', 'W', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1527, (-809));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-808), token0.endColumn);
      assertEquals((-809), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1527, token0.endLine);
      assertEquals(1527, token0.beginLine);
      assertEquals(1527, javaCharStream0.getBeginLine());
      assertEquals(1527, javaCharStream0.getEndLine());
      assertEquals(1527, javaCharStream0.getLine());
      assertEquals((-808), javaCharStream0.getEndColumn());
      assertEquals((-809), javaCharStream0.getBeginColumn());
      assertEquals((-808), javaCharStream0.getColumn());
      assertEquals("ee", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-809), token1.beginColumn);
      assertEquals((-808), token1.endColumn);
      assertEquals(1527, token1.endLine);
      assertEquals(1527, token1.beginLine);
      assertEquals(1527, javaCharStream0.getBeginLine());
      assertEquals(1527, javaCharStream0.getEndLine());
      assertEquals(1527, javaCharStream0.getLine());
      assertEquals((-808), javaCharStream0.getEndColumn());
      assertEquals((-809), javaCharStream0.getBeginColumn());
      assertEquals((-808), javaCharStream0.getColumn());
      assertEquals("ee", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '|';
      charArray0[2] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, 537);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.beginLine);
      assertEquals(537, token0.beginColumn);
      assertEquals(46, token0.endLine);
      assertEquals(537, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(537, javaCharStream0.getBeginColumn());
      assertEquals(537, javaCharStream0.getEndColumn());
      assertEquals(537, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals("Q", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'Q', '|', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)44, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 44, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)48, (byte)122);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1, 39, 38);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(48, token0.beginLine);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals("0", token0.toString());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(48, token0.beginLine);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals("0", token0.toString());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, (byte)48, (byte)122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.beginColumn);
      assertEquals(48, token0.endLine);
      assertEquals(122, token0.endColumn);
      assertEquals(48, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals("0", token0.toString());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)24, (byte) (-110), (byte) (-101)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)24, (byte) (-110), (byte) (-101)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)116, (byte)24, (byte) (-110), (byte) (-101)}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip((-1064L));
      assertEquals(0L, long0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)116, (byte)24, (byte) (-110), (byte) (-101)}, byteArray0);
      
      MockFile mockFile0 = new MockFile("\"||\"");
      assertFalse(mockFile0.isDirectory());
      assertEquals("\"||\"", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("\"||\"", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("\"||\"", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("\"||\"", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("\"||\"", (Object[]) javaParserTokenManager0.lexStateNames);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(mockFile0.isDirectory());
      assertEquals(4L, mockFile0.length());
      assertEquals("\"||\"", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("\"||\"", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotNull(printStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)24, (byte) (-110), (byte) (-101)}, byteArray0);
      
      javaParserTokenManager0.debugStream = printStream0;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(mockFile0.isDirectory());
      assertEquals(4L, mockFile0.length());
      assertEquals("\"||\"", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("\"||\"", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("t", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)116, (byte)24, (byte) (-110), (byte) (-101)}, byteArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("t", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)116, (byte)24, (byte) (-110), (byte) (-101)}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u0018\" (24), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', '\u0000', 'i', 'i'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)94, (byte) (-115));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', '\u0000', 'i', 'i'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', '\u0000', 'i', 'i'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.beginLine);
      assertEquals(94, token0.endLine);
      assertEquals((-115), token0.endColumn);
      assertEquals((-115), token0.beginColumn);
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals((-115), javaCharStream0.getEndColumn());
      assertEquals((-115), javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals((-115), javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals("i", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', '\u0000', 'i', 'i'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 94, column -114.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = '{';
      charArray0[2] = 'K';
      charArray0[3] = 'w';
      charArray0[4] = 'L';
      charArray0[5] = ']';
      charArray0[6] = '5';
      charArray0[7] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'F', '{', 'K', 'w', 'L', ']', '5', 't'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 46, (byte)51);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'F', '{', 'K', 'w', 'L', ']', '5', 't'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'F', '{', 'K', 'w', 'L', ']', '5', 't'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'F', '{', 'K', 'w', 'L', ']', '5', 't'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("F", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'F', '{', 'K', 'w', 'L', ']', '5', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-38);
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '9';
      charArray0[2] = 'S';
      charArray0[3] = 'K';
      charArray0[4] = 'f';
      charArray0[5] = ',';
      charArray0[6] = 'b';
      charArray0[7] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '9', 'S', 'K', 'f', ',', 'b', 'P'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2763, 1577);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'t', '9', 'S', 'K', 'f', ',', 'b', 'P'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'t', '9', 'S', 'K', 'f', ',', 'b', 'P'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'t', '9', 'S', 'K', 'f', ',', 'b', 'P'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("t9SKf", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'t', '9', 'S', 'K', 'f', ',', 'b', 'P'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)94, 27);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      long long0 = charArrayReader0.skip((-1));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(27, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.endLine);
      assertEquals(27, token0.beginColumn);
      assertEquals(94, token0.beginLine);
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token1.endLine);
      assertEquals(27, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(94, token1.beginLine);
      assertEquals(27, token1.endColumn);
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals("U", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'U'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', 'i', 'i', 'i'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-3023), (-926));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', 'i', 'i', 'i'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-2329), (-1), (byte)51);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', 'i', 'i', 'i'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', 'i', 'i', 'i'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-2329), token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals((-2329), token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-2329), javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals((-2329), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-2329), javaCharStream1.getBeginLine());
      assertEquals("ii", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', 'i', 'i', 'i'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-2329), token1.beginLine);
      assertEquals((-2329), token1.endLine);
      assertEquals((-1), token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-2329), javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals((-2329), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-2329), javaCharStream1.getBeginLine());
      assertEquals("ii", token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'i', 'i', '\u0000', 'i', 'i', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)48, (byte)72, (byte)6}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = '_';
      charArray0[2] = '4';
      charArray0[3] = 'S';
      charArray0[4] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {')', '_', '4', 'S', ']'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {')', '_', '4', 'S', ']'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)6, (byte)72);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {')', '_', '4', 'S', ']'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {')', '_', '4', 'S', ']'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, token0.endLine);
      assertEquals(6, token0.beginLine);
      assertEquals(72, token0.beginColumn);
      assertEquals(72, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(")", token0.toString());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertNotNull(token0);
      assertArrayEquals(new char[] {')', '_', '4', 'S', ']'}, charArray0);
      
      Token token1 = Token.newToken(1074);
      assertNotSame(token1, token0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNull(token1.toString());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {')', '_', '4', 'S', ']'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertEquals(6, token0.endLine);
      assertEquals(6, token0.beginLine);
      assertEquals(72, token0.beginColumn);
      assertEquals(72, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(")", token0.toString());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {')', '_', '4', 'S', ']'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'B';
      charArray0[4] = 'W';
      charArray0[5] = '%';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[6] = '%';
      charArray0[7] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'V', '%', ')', 'B', 'W', '%', '%', '%'}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'V', '%', ')', 'B', 'W', '%', '%', '%'}, charArray0);
      
      charArrayReader0.mark(2160);
      assertArrayEquals(new char[] {'V', '%', ')', 'B', 'W', '%', '%', '%'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2160, 40);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'V', '%', ')', 'B', 'W', '%', '%', '%'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'V', '%', ')', 'B', 'W', '%', '%', '%'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.endColumn);
      assertEquals(2160, token0.beginLine);
      assertEquals(2160, token0.endLine);
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals("V", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'V', '%', ')', 'B', 'W', '%', '%', '%'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.endColumn);
      assertEquals(2160, token0.beginLine);
      assertEquals(2160, token0.endLine);
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals("V", token0.toString());
      assertArrayEquals(new char[] {'V', '%', ')', 'B', 'W', '%', '%', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)58, (byte)43, (byte)17, (byte)25, (byte)30, (byte)9, (byte)45}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2595), (byte)30);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)58, (byte)43, (byte)17, (byte)25, (byte)30, (byte)9, (byte)45}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)58, (byte)43, (byte)17, (byte)25, (byte)30, (byte)9, (byte)45}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token0.endColumn);
      assertEquals((-2595), token0.endLine);
      assertEquals(30, token0.beginColumn);
      assertEquals((-2595), token0.beginLine);
      assertEquals(92, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals((-2595), javaCharStream0.getEndLine());
      assertEquals((-2595), javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals((-2595), javaCharStream0.getLine());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)58, (byte)43, (byte)17, (byte)25, (byte)30, (byte)9, (byte)45}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-115);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'h'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2013), (byte)117);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'h'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'h'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2013), token0.beginLine);
      assertEquals((-2013), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(117, token0.endColumn);
      assertEquals(117, token0.beginColumn);
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals((-2013), javaCharStream0.getLine());
      assertEquals((-2013), javaCharStream0.getEndLine());
      assertEquals((-2013), javaCharStream0.getBeginLine());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals("h", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = 'g';
      charArray0[2] = ')';
      charArray0[3] = 'Y';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[4] = '4';
      charArray0[5] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', 'g', ')', 'Y', '4', '('}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1626, 22);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'=', 'g', ')', 'Y', '4', '('}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'=', 'g', ')', 'Y', '4', '('}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1626, token0.beginLine);
      assertEquals(22, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(22, token0.beginColumn);
      assertEquals(1626, token0.endLine);
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(1626, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(1626, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1626, javaCharStream0.getLine());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'=', 'g', ')', 'Y', '4', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)122;
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '4';
      charArray0[2] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', '4', 'D'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'O', '4', 'D'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'O', '4', 'D'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'O', '4', 'D'}, charArray0);
      
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("O4D", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'O', '4', 'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'q';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      charArray0[4] = 'l';
      charArray0[5] = 'z';
      charArray0[6] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      charArrayReader0.mark(2160);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, (-4834));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('c', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-4834), token0.beginColumn);
      assertEquals(34, token0.beginLine);
      assertEquals((-4829), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.endLine);
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals((-4829), javaCharStream0.getColumn());
      assertEquals((-4834), javaCharStream0.getBeginColumn());
      assertEquals((-4829), javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals("q9klzI", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-4834), token0.beginColumn);
      assertEquals(34, token0.beginLine);
      assertEquals((-4829), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.endLine);
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals((-4829), javaCharStream0.getColumn());
      assertEquals((-4834), javaCharStream0.getBeginColumn());
      assertEquals((-4829), javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals("q9klzI", token0.toString());
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)48, (byte)72, (byte)6}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = ']';
      charArray0[2] = 's';
      charArray0[3] = 'N';
      charArray0[4] = '&';
      charArray0[5] = 'G';
      charArray0[6] = 'I';
      charArray0[7] = ' ';
      charArray0[8] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'H', ']', 's', 'N', '&', 'G', 'I', ' ', 'O'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'H', ']', 's', 'N', '&', 'G', 'I', ' ', 'O'}, charArray0);
      
      charArrayReader0.mark((byte)48);
      assertArrayEquals(new char[] {'H', ']', 's', 'N', '&', 'G', 'I', ' ', 'O'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2160, (byte)96);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'H', ']', 's', 'N', '&', 'G', 'I', ' ', 'O'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'H', ']', 's', 'N', '&', 'G', 'I', ' ', 'O'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2160, token0.beginLine);
      assertEquals(96, token0.endColumn);
      assertEquals(96, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2160, token0.endLine);
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals("H", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'H', ']', 's', 'N', '&', 'G', 'I', ' ', 'O'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2160, token0.beginLine);
      assertEquals(96, token0.endColumn);
      assertEquals(96, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2160, token0.endLine);
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals("H", token0.toString());
      assertArrayEquals(new char[] {'H', ']', 's', 'N', '&', 'G', 'I', ' ', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)25, (byte)43}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)43, 25);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)25, (byte)43}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)25, (byte)43}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(101, token0.kind);
      assertEquals(43, token0.endLine);
      assertEquals(43, token0.beginLine);
      assertEquals(25, token0.endColumn);
      assertEquals(25, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)25, (byte)43}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      char[] charArray0 = new char[6];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[0] = 'v';
      charArray0[1] = 'F';
      charArray0[2] = '$';
      charArray0[5] = '';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'v', 'F', '$', '\u0000', '\u0000', ''}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'v', 'F', '$', '\u0000', '\u0000', ''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 17, (byte)48);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'v', 'F', '$', '\u0000', '\u0000', ''}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'v', 'F', '$', '\u0000', '\u0000', ''}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(17, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(48, token0.beginColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals("vF$", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'v', 'F', '$', '\u0000', '\u0000', ''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'd';
      charArray0[2] = '@';
      charArray0[3] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'd', '@', 'R'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)47, (byte)47);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'g', 'd', '@', 'R'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'g', 'd', '@', 'R'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(48, token0.endColumn);
      assertEquals(47, token0.endLine);
      assertEquals(47, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals("gd", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'g', 'd', '@', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94, (byte)94, (byte)46, (byte)94, (byte)94, (byte)94}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1352, (byte)94);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94, (byte)94, (byte)46, (byte)94, (byte)94, (byte)94}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94, (byte)94, (byte)46, (byte)94, (byte)94, (byte)94}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1352, token0.endLine);
      assertEquals(94, token0.endColumn);
      assertEquals(94, token0.beginColumn);
      assertEquals(107, token0.kind);
      assertEquals(1352, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1352, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(1352, javaCharStream0.getLine());
      assertEquals(1352, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals("^", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94, (byte)94, (byte)46, (byte)94, (byte)94, (byte)94}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-7), (-7));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      long long0 = charArrayReader0.skip((-7));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      Token token0 = Token.newToken('W');
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-7), token1.beginLine);
      assertEquals((-7), token1.beginColumn);
      assertEquals((-7), token1.endColumn);
      assertEquals((-7), token1.endLine);
      assertEquals((-7), javaCharStream0.getBeginColumn());
      assertEquals((-7), javaCharStream0.getEndLine());
      assertEquals((-7), javaCharStream0.getColumn());
      assertEquals((-7), javaCharStream0.getBeginLine());
      assertEquals((-7), javaCharStream0.getEndColumn());
      assertEquals((-7), javaCharStream0.getLine());
      assertEquals("W", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'W'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = '.';
      charArray0[6] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2, 2914);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2, token0.endLine);
      assertEquals(2914, token0.beginColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(2916, token0.endColumn);
      assertEquals(121, token0.kind);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2916, javaCharStream0.getEndColumn());
      assertEquals(2916, javaCharStream0.getColumn());
      assertEquals(2914, javaCharStream0.getBeginColumn());
      assertEquals("...", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.', '.'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2916, javaCharStream0.getEndColumn());
      assertEquals(2916, javaCharStream0.getColumn());
      assertEquals(2914, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.', '.', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94, (byte)94, (byte)46, (byte)94, (byte)94, (byte)94}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '\\';
      charArray0[2] = 'c';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'D';
      charArray0[6] = '3';
      charArray0[7] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', '\\', 'c', 'H', 'H', 'D', '3', 't'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)94, 87);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'7', '\\', 'c', 'H', 'H', 'D', '3', 't'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'7', '\\', 'c', 'H', 'H', 'D', '3', 't'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 94, column 95.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'q';
      charArray0[2] = '9';
      charArray0[3] = 'k';
      charArray0[4] = 'l';
      charArray0[5] = 'z';
      charArray0[6] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 778, 64);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(778, token0.beginLine);
      assertEquals(70, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(64, token0.beginColumn);
      assertEquals(778, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals("cq9klzI", token0.toString());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(778, javaCharStream0.getBeginLine());
      assertEquals(778, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(778, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(778, javaCharStream0.getBeginLine());
      assertEquals(778, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(778, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'c', 'q', '9', 'k', 'l', 'z', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-119)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-119), 2048);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-119)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-119)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2048, token0.endColumn);
      assertEquals(2048, token0.beginColumn);
      assertEquals((-119), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-119), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2048, javaCharStream0.getColumn());
      assertEquals((-119), javaCharStream0.getEndLine());
      assertEquals(2048, javaCharStream0.getEndColumn());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals((-119), javaCharStream0.getBeginLine());
      assertEquals((-119), javaCharStream0.getLine());
      assertEquals("a", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-119)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'G';
      charArray0[2] = '1';
      charArray0[3] = 'G';
      charArray0[4] = 'B';
      charArray0[5] = 'z';
      charArray0[6] = 'x';
      charArray0[7] = 'i';
      charArray0[8] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', 'G', '1', 'G', 'B', 'z', 'x', 'i', 'w'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2717, 44);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'O', 'G', '1', 'G', 'B', 'z', 'x', 'i', 'w'}, charArray0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('O', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2717, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(2717, javaCharStream0.getEndLine());
      assertEquals(2717, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'O', 'G', '1', 'G', 'B', 'z', 'x', 'i', 'w'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2717, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(2717, javaCharStream0.getEndLine());
      assertEquals(2717, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'O', 'G', '1', 'G', 'B', 'z', 'x', 'i', 'w'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(45, token0.beginColumn);
      assertEquals(2717, token0.endLine);
      assertEquals(2717, token0.beginLine);
      assertEquals(52, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals("G1GBzxiw", token0.toString());
      assertEquals(2717, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(2717, javaCharStream0.getEndLine());
      assertEquals(2717, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'O', 'G', '1', 'G', 'B', 'z', 'x', 'i', 'w'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(45, token0.beginColumn);
      assertEquals(2717, token0.endLine);
      assertEquals(2717, token0.beginLine);
      assertEquals(52, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals("G1GBzxiw", token0.toString());
      assertEquals(2717, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(2717, javaCharStream0.getEndLine());
      assertEquals(2717, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'O', 'G', '1', 'G', 'B', 'z', 'x', 'i', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'E';
      charArray0[2] = '4';
      charArray0[3] = ' ';
      charArray0[4] = 'l';
      charArray0[5] = 'b';
      charArray0[6] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k', 'E', '4', ' ', 'l', 'b', 't'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1088), 2639);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'k', 'E', '4', ' ', 'l', 'b', 't'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'k', 'E', '4', ' ', 'l', 'b', 't'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2641, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1088), token0.endLine);
      assertEquals((-1088), token0.beginLine);
      assertEquals(2639, token0.beginColumn);
      assertEquals(2641, javaCharStream0.getColumn());
      assertEquals(2641, javaCharStream0.getEndColumn());
      assertEquals((-1088), javaCharStream0.getLine());
      assertEquals((-1088), javaCharStream0.getBeginLine());
      assertEquals(2639, javaCharStream0.getBeginColumn());
      assertEquals((-1088), javaCharStream0.getEndLine());
      assertEquals("kE4", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'k', 'E', '4', ' ', 'l', 'b', 't'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2641, javaCharStream0.getColumn());
      assertEquals(2641, javaCharStream0.getEndColumn());
      assertEquals((-1088), javaCharStream0.getLine());
      assertEquals((-1088), javaCharStream0.getBeginLine());
      assertEquals(2639, javaCharStream0.getBeginColumn());
      assertEquals((-1088), javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'k', 'E', '4', ' ', 'l', 'b', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)122, (byte)122, (byte)122, (byte)122}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = 'g';
      charArray0[4] = '`';
      charArray0[5] = 'R';
      charArray0[6] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, (byte)122);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (byte)122, (byte)122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("%", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token1.kind);
      assertEquals(122, token1.endLine);
      assertEquals(123, token1.beginColumn);
      assertEquals(123, token1.endColumn);
      assertEquals(122, token1.beginLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
      
      token0.specialToken = token1;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("%", token0.toString());
      assertEquals("<", token1.toString());
      assertEquals("<", token0.specialToken.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(token0, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("%", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {'%', '<', 'c', 'g', '`', 'R', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)48, (byte)122);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      StringReader stringReader0 = new StringReader("|=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(115, token0.kind);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals("|=", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 't';
      charArray0[2] = '';
      charArray0[3] = 'x';
      charArray0[4] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'$', 't', '', 'x', 'M'}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'$', 't', '', 'x', 'M'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)69, 24);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'$', 't', '', 'x', 'M'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'$', 't', '', 'x', 'M'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.beginLine);
      assertEquals(25, token0.endColumn);
      assertEquals(24, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals("$t", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'$', 't', '', 'x', 'M'}, charArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'$', 't', '', 'x', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '2';
      charArray0[2] = 'L';
      charArray0[3] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '2', 'L', 'l'}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', '2', 'L', 'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 40, 17);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'+', '2', 'L', 'l'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'+', '2', 'L', 'l'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.beginLine);
      assertEquals(101, token0.kind);
      assertEquals(17, token0.beginColumn);
      assertEquals(17, token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'+', '2', 'L', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ht=D");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      StringReader stringReader0 = new StringReader("'!3");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)51, 24);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 51, column 27.  Encountered: <EOF> after : \"\\'!3\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)35}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'i';
      charArray0[2] = '&';
      charArray0[3] = 'h';
      charArray0[4] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'m', 'i', '&', 'h', '='}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)35, 46);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'m', 'i', '&', 'h', '='}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'m', 'i', '&', 'h', '='}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'m', 'i', '&', 'h', '='}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(35, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(35, token0.endLine);
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals("mi", token0.toString());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'m', 'i', '&', 'h', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)115, (byte)38, (byte)38, (byte)115, (byte)38, (byte)38}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)115, 1970);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)38, (byte)115, (byte)38, (byte)38, (byte)115, (byte)38, (byte)38}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)38, (byte)115, (byte)38, (byte)38, (byte)115, (byte)38, (byte)38}, byteArray0);
      
      javaCharStream0.available = (int) (byte)38;
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)38, (byte)115, (byte)38, (byte)38, (byte)115, (byte)38, (byte)38}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)38, (byte)115, (byte)38, (byte)38, (byte)115, (byte)38, (byte)38}, byteArray0);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1970, token0.endColumn);
      assertEquals(105, token0.kind);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginLine);
      assertEquals(1970, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(1970, javaCharStream0.getColumn());
      assertEquals(1970, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(1970, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)38, (byte)115, (byte)38, (byte)38, (byte)115, (byte)38, (byte)38}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-4096));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4096. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'b';
      charArray0[2] = ',';
      charArray0[3] = 'K';
      charArray0[0] = 'f';
      charArray0[5] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'f', 'b', ',', 'K', '\u0000', 'K'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 24, 42);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'f', 'b', ',', 'K', '\u0000', 'K'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'f', 'b', ',', 'K', '\u0000', 'K'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'f', 'b', ',', 'K', '\u0000', 'K'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'f', 'b', ',', 'K', '\u0000', 'K'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("fb", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'f', 'b', ',', 'K', '\u0000', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)6, (byte)48, (byte)48, (byte)96, (byte)48, (byte)72}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 106, 31);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)6, (byte)48, (byte)48, (byte)96, (byte)48, (byte)72}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48, (byte)6, (byte)48, (byte)48, (byte)96, (byte)48, (byte)72}, byteArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)48, (byte)6, (byte)48, (byte)48, (byte)96, (byte)48, (byte)72}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 106, column 38.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'A';
      charArray0[2] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', 'A', '\"'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)122, (-1622));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\"', 'A', '\"'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\"', 'A', '\"'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\"', 'A', '\"'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.kind);
      assertEquals(122, token0.endLine);
      assertEquals(122, token0.beginLine);
      assertEquals((-1622), token0.beginColumn);
      assertEquals((-1620), token0.endColumn);
      assertEquals((-1622), javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals((-1620), javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals((-1620), javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("\"A\"", token0.toString());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\"', 'A', '\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1622));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1622. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      StringReader stringReader0 = new StringReader("strictfp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)94, 77);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.endColumn);
      assertEquals(94, token0.beginLine);
      assertEquals(77, token0.beginColumn);
      assertEquals(53, token0.kind);
      assertEquals(94, token0.endLine);
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals("strictfp", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(77, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)57, (byte)38, (byte)38, (byte)57, (byte)38, (byte)38, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '1';
      charArray0[3] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 17, (byte)38);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token0.kind);
      assertEquals(17, token0.beginLine);
      assertEquals(17, token0.endLine);
      assertEquals(38, token0.beginColumn);
      assertEquals(38, token0.endColumn);
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(39, token1.beginColumn);
      assertEquals(70, token1.kind);
      assertEquals(17, token1.endLine);
      assertEquals(17, token1.beginLine);
      assertEquals(41, token1.endColumn);
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(".11", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(85, token0.kind);
      assertEquals(17, token0.beginLine);
      assertEquals(17, token0.endLine);
      assertEquals(38, token0.beginColumn);
      assertEquals(38, token0.endColumn);
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {'.', '.', '1', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)48;
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', 'Y'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 118, (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'b', 'Y'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'b', 'Y'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'b', 'Y'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(118, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals(118, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals("bY", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'b', 'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)72;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'L', 'L', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)96, (byte)72);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'L', 'L', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'L', 'L', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token0.beginLine);
      assertEquals(96, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(72, token0.beginColumn);
      assertEquals(73, token0.endColumn);
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals("LL", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'L', 'L', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'L', 'L', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 96, column 74.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o2It$9KtP7TX~5");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 816, 816);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '/';
      charArray0[3] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '/', '-'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 43, (-1634));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(11, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(816, token0.endLine);
      assertEquals(827, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(816, token0.beginLine);
      assertEquals(816, token0.beginColumn);
      assertEquals(816, javaCharStream0.getBeginColumn());
      assertEquals(816, javaCharStream0.getLine());
      assertEquals(827, javaCharStream0.getEndColumn());
      assertEquals(816, javaCharStream0.getEndLine());
      assertEquals(816, javaCharStream0.getBeginLine());
      assertEquals(827, javaCharStream0.getColumn());
      assertEquals("o2It$9KtP7TX", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '.';
      charArray0[2] = '\"';
      charArray0[3] = 'h';
      charArray0[4] = 'b';
      charArray0[5] = 'i';
      charArray0[6] = 'A';
      charArray0[7] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', '.', '\"', 'h', 'b', 'i', 'A', '['}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'j', '.', '\"', 'h', 'b', 'i', 'A', '['}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'j', '.', '\"', 'h', 'b', 'i', 'A', '['}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1256), (byte)122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'j', '.', '\"', 'h', 'b', 'i', 'A', '['}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'j', '.', '\"', 'h', 'b', 'i', 'A', '['}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.beginColumn);
      assertEquals((-1256), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1256), token0.endLine);
      assertEquals((-1256), javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals((-1256), javaCharStream0.getLine());
      assertEquals((-1256), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals("j", token0.toString());
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'j', '.', '\"', 'h', 'b', 'i', 'A', '['}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-384));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -384. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '_';
      charArray0[2] = 'f';
      charArray0[3] = '%';
      charArray0[4] = 'V';
      charArray0[5] = '-';
      charArray0[6] = '-';
      charArray0[7] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '_', 'f', '%', 'V', '-', '-', '-'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'%', '_', 'f', '%', 'V', '-', '-', '-'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)72, (byte)72);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'%', '_', 'f', '%', 'V', '-', '-', '-'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'%', '_', 'f', '%', 'V', '-', '-', '-'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'%', '_', 'f', '%', 'V', '-', '-', '-'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(108, token0.kind);
      assertEquals(72, token0.beginColumn);
      assertEquals(72, token0.endColumn);
      assertEquals(72, token0.endLine);
      assertEquals(72, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("%", token0.toString());
      assertEquals(72, javaCharStream0.getBeginLine());
      assertEquals(72, javaCharStream0.getLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(72, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'%', '_', 'f', '%', 'V', '-', '-', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = '+';
      charArray0[2] = 'F';
      charArray0[3] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'J', '+', 'F', 'G'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 78, (-1250));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'J', '+', 'F', 'G'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'J', '+', 'F', 'G'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(78, token0.beginLine);
      assertEquals((-1250), token0.beginColumn);
      assertEquals((-1250), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(78, token0.endLine);
      assertEquals((-1250), javaCharStream0.getColumn());
      assertEquals((-1250), javaCharStream0.getBeginColumn());
      assertEquals((-1250), javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals("J", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'J', '+', 'F', 'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)122, (byte)122, (byte)122, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'O';
      charArray0[2] = '`';
      charArray0[3] = 'g';
      charArray0[4] = '`';
      charArray0[5] = '<';
      charArray0[6] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'O', '`', 'g', '`', '<', 'c'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'g', 'O', '`', 'g', '`', '<', 'c'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 37);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'g', 'O', '`', 'g', '`', '<', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1317), (-2801));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'g', 'O', '`', 'g', '`', '<', 'c'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'g', 'O', '`', 'g', '`', '<', 'c'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2801), token0.beginColumn);
      assertEquals((-2800), token0.endColumn);
      assertEquals((-1317), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1317), token0.beginLine);
      assertEquals((-1317), javaCharStream0.getLine());
      assertEquals((-2801), javaCharStream0.getBeginColumn());
      assertEquals((-1317), javaCharStream0.getEndLine());
      assertEquals((-2800), javaCharStream0.getColumn());
      assertEquals((-1317), javaCharStream0.getBeginLine());
      assertEquals((-2800), javaCharStream0.getEndColumn());
      assertEquals("gO", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'g', 'O', '`', 'g', '`', '<', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '['}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-119), 89);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'0', '['}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'0', '['}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -119, column 91.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[5] = (byte)38;
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = 'D';
      charArray0[2] = 'd';
      charArray0[3] = 't';
      charArray0[4] = 's';
      charArray0[5] = '`';
      charArray0[6] = '|';
      charArray0[8] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'_', 'D', 'd', 't', 's', '`', '|', '\u0000', 'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 22, 92);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'_', 'D', 'd', 't', 's', '`', '|', '\u0000', 'l'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'_', 'D', 'd', 't', 's', '`', '|', '\u0000', 'l'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(96, token0.endColumn);
      assertEquals(22, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(22, token0.endLine);
      assertEquals(92, token0.beginColumn);
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals("_Ddts", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'_', 'D', 'd', 't', 's', '`', '|', '\u0000', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("falsF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 816, 816);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-102), 16);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(16, token0.beginColumn);
      assertEquals((-102), token0.beginLine);
      assertEquals((-102), token0.endLine);
      assertEquals(104, token0.kind);
      assertEquals(16, token0.endColumn);
      assertEquals((-102), javaCharStream1.getEndLine());
      assertEquals(16, javaCharStream1.getBeginColumn());
      assertEquals(16, javaCharStream1.getColumn());
      assertEquals(16, javaCharStream1.getEndColumn());
      assertEquals((-102), javaCharStream1.getBeginLine());
      assertEquals((-102), javaCharStream1.getLine());
      assertEquals("/", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[3] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0, (byte)72}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)48, 20);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0, (byte)72}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)0, (byte)72}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+b;$R;OY{;3L-@mvD7");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 48, column 24.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '#';
      charArray0[2] = '<';
      charArray0[3] = '(';
      charArray0[4] = ' ';
      charArray0[5] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', '#', '<', '(', ' ', ','}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'@', '#', '<', '(', ' ', ','}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'@', '#', '<', '(', ' ', ','}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 2106, 116);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'@', '#', '<', '(', ' ', ','}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'@', '#', '<', '(', ' ', ','}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'@', '#', '<', '(', ' ', ','}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("@", token0.toString());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'@', '#', '<', '(', ' ', ','}, charArray0);
  }
}
