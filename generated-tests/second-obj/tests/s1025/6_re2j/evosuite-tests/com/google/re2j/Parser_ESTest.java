/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:10:52 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("),=c$-Ng35lJGl6", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      Regexp[] regexpArray0 = new Regexp[2];
      Parser.parse("", 33);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-55), 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -55
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "?";
      try { 
        Parser.parse("?", (-560));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", (-4215));
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[6] = regexp0;
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 757);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p?\u0002AZl/J4o", 3545);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 4853;
      Regexp regexp0 = Parser.parse("Ps", 4853);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = null;
      int int1 = 5996;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "iGbwZW|iZ98W:&RG?";
      String string1 = "[e-";
      try { 
        Parser.parse("[e-", (-4215));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[e-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "4";
      Parser.subarray((Regexp[]) null, 1368, 1368);
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      int int0 = 1412;
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("4", 1620);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 124, 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "[e-";
      int int0 = 80;
      try { 
        Parser.parse("[e-", 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[e-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1648;
      try { 
        Parser.parse("g=Z[", 1648);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "[:";
      try { 
        Parser.parse("[:", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "[:7";
      int int0 = 36;
      try { 
        Parser.parse("[:7", 68405);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", 2548);
      String string0 = "AvSD51z";
      int int0 = (-4546);
      Parser parser0 = new Parser(string0, int0);
      String string1 = "yd1<MzwF]3$h$gmRWF";
      Regexp regexp1 = Parser.parse(string1, int0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      int int0 = 13;
      try { 
        Parser.parse("*J8:aeL?/Jd}X|+(z", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Parser.parse("_(", (-1407));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `_(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      try { 
        Parser.parse("(F", 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(F`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Parser.parse("*<v=hj[e", 1101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = Parser.parse("P.", 40);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      int int0 = 8303;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-5308), 8303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.max = (-3125);
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("|/", 0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, (-678));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "%z{5}a[GP.j!DBE";
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 767;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string1 = "|*xItw";
      int int1 = 560;
      try { 
        Parser.parse("|*xItw", 560);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("Xp|/", 0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "{h6|";
      int int0 = 573;
      Parser parser0 = new Parser("{h6|", 573);
      assertNotNull(parser0);
      
      int int1 = (-1732);
      Regexp regexp0 = Parser.parse("{h6|", (-1732));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("p7", 573);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(string0, int0);
      assertNotNull(regexp2);
      assertFalse(int0 == int1);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string1 = "\\P\\h7";
      int int2 = (-3666);
      Regexp regexp3 = Parser.parse(string1, int2);
      assertNotNull(regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^O", 45);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 86, 4226);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 3572;
      String string0 = "M.";
      Regexp regexp0 = Parser.parse("M.", 3572);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int1 = 1063;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1429), 1063);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1429
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.min = (-3125);
      regexp0.min = 1777;
      regexp0.max = (-3125);
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("|/", 1777);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1777, (-678));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4", 69);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 1238, 1238);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "i+*Q";
      try { 
        Parser.parse("i+*Q", 613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 3613;
      String string0 = "N'60C.m6v";
      int int1 = 670;
      Parser parser0 = new Parser("N'60C.m6v", 670);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("$)M@q&rW%Cy'", 3613);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      int int0 = (-919);
      try { 
        Parser.parse("+z=}68NVieLWP/z.", 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[15];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      String string0 = "{)]k<=fY~5";
      int int0 = 3077;
      try { 
        Parser.parse("{)]k<=fY~5", 3077);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Parser.parse("%z{5}a)P.!9E", 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\"", (-5304));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-5304), (-5304));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "\\p\\a6";
      Regexp regexp0 = Parser.parse("pa6", 64);
      assertNotNull(regexp0);
      
      int int0 = 89;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-2468);
      Regexp regexp0 = Parser.parse("C", (-2468));
      assertNotNull(regexp0);
      
      regexp0.cap = int0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = 110;
      int int2 = 118;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "<G`!#\\2AZl/J4o";
      int int0 = (-634);
      int int1 = 53;
      Parser parser0 = new Parser("YnmjThg=YbclU!<e]", 53);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("^", 53);
      assertNotNull(regexp0);
      
      String string1 = "A!_1x;W6t\\6^";
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("d", 2013);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("pP", (-55));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 381);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      regexp0.op = regexp_Op0;
      regexp0.name = "[::]";
      String string0 = regexp0.toString();
      assertEquals("$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "[:";
      int int0 = 8313;
      try { 
        Parser.parse("[:", 8313);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "\\B";
      Regexp regexp0 = Parser.parse("B", (-6554));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("B", 2);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("B", 1096);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = Parser.parse("H!g", 104);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp5 = new Regexp(regexp0);
      assertNotNull(regexp5);
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp3));
      
      Regexp regexp6 = Parser.parse("B", 1096);
      assertNotNull(regexp6);
      assertTrue(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      
      Regexp regexp7 = new Regexp(regexp1);
      assertNotNull(regexp7);
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp5));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp4));
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      Regexp[] regexpArray0 = regexp7.subs;
      assertNull(regexpArray0);
      
      int int0 = 124;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 124, (-1797));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Parser.parse("((?P", 2548);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("(|d2\"|@C?zy4sC", (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(|d2\"|@C?zy4sC`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "[:\\x0-\\x10FFFF}]";
      Regexp regexp0 = Parser.parse("[:x0-x10FFFF}]", 2584);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int0 = 42;
      int int1 = 115;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "(?i:";
      int int0 = (-64);
      try { 
        Parser.parse("(?i:", (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = new Regexp((Regexp.Op) null);
      assertNotNull(regexp0);
      
      String string0 = "(?i&2:";
      int int0 = 117;
      try { 
        Parser.parse("(?i&2:", 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?i&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("G{*|\"", 44);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1716), (-1716));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?", 30);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("~%VJ1x(W", 30);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("a", 448);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-2292);
      Regexp regexp0 = Parser.parse("\u0005,", (-2292));
      assertNotNull(regexp0);
      
      String string0 = "(?P<";
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 66;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertNotNull(regexp1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp0.cap = 66;
      int int1 = 3716;
      Regexp regexp2 = Parser.parse("\r", 3716);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1672);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("d", 376);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray1 = new Regexp[9];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexpArray1[3] = regexp0;
      regexpArray1[4] = regexp0;
      regexpArray1[5] = regexp0;
      regexpArray1[6] = regexp0;
      regexpArray1[7] = regexp0;
      regexpArray1[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1), 4096);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-3121);
      intArray0[2] = (-3121);
      intArray0[2] = (-3121);
      intArray0[3] = (-3121);
      intArray0[4] = (-3121);
      intArray0[5] = (-3121);
      intArray0[6] = (-3121);
      intArray0[7] = (-3121);
      Regexp regexp1 = Parser.parse("\u0000", 21);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("r%", (-3121));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("r%", 43);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1340;
      Regexp regexp0 = Parser.parse("\u0000aH", 1340);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("'", 6);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1368), 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1368
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000#iqY6aJ5,", (-64));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("p", (-64));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "K3{63ph@^";
      Regexp regexp0 = Parser.parse("K3{63ph@^", 1368);
      assertNotNull(regexp0);
      
      regexp0.min = 1368;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = regexp1.subs;
      assertNotNull(regexpArray0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1368, 4461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1368
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 110;
      Regexp regexp0 = Parser.parse("[T:]", 848);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 848, 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 961;
      try { 
        Parser.parse("(?-m", 961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 612;
      try { 
        Parser.parse("(?-m:$", 612);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?-m:$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">\n", (-1383));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[1] = regexp0;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2474), (-4215));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(-m:$)", 411);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("(-m:$)", 2116);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 46, 591);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 381;
      int int1 = 1356;
      Regexp regexp0 = Parser.parse("", 18);
      assertNotNull(regexp0);
      
      String string0 = "{1";
      Regexp regexp1 = Parser.parse("{1", 381);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("P::]", 381);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertNotNull(regexp3);
      assertFalse(int0 == int1);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      String string1 = "Khmer";
      String string2 = "!L-=@33";
      int int2 = 1398;
      Regexp regexp4 = Parser.parse(string2, int2);
      assertNotNull(regexp4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      
      Parser parser0 = new Parser(string0, int1);
      assertNotNull(parser0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      String string3 = "Tagbanwa";
      int int3 = 10;
      Regexp regexp5 = Parser.parse(string3, int3);
      assertNotNull(regexp5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      
      int int4 = 65535;
      Regexp regexp6 = Parser.parse(string1, int4);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      
      int int5 = 105;
      Regexp regexp7 = Parser.parse(string0, int5);
      assertNotNull(regexp7);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp5);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("J5{", 3572);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("A", 80);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertNotNull(regexp2);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("Lm#H+$80", 1757);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      Regexp regexp4 = Parser.parse("6sB6>Rk?M0~Wy4", 59);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ibwZW|iZ8W:&RG?", (-4239));
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals((Object) null);
      assertFalse(boolean0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      boolean boolean1 = regexp1.equals("ibwZW|iZ8W:&RG?");
      assertFalse(boolean1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-406), (-4239));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 2108;
      Regexp regexp0 = Parser.parse("[e-]", 2108);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[\\-e]", string0);
      assertNotNull(string0);
      
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Parser.parse("[:Jd-Pc/k", (-2363));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `d-P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "f\\2AZ/J";
      int int0 = 2584;
      Regexp regexp0 = Parser.parse("f\u0002AZ/J", 2584);
      assertNotNull(regexp0);
      
      String string1 = "^)C\\2nIN";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op1);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      Regexp regexp3 = new Regexp(regexp_Op2);
      assertNotNull(regexp3);
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = Parser.parse("\u0007wXUtu", 144);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "\\D\\2AZp/Jo";
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 1093;
      Regexp regexp0 = Parser.parse("D\u0002AZp/Jo", 1093);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 612);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("\\z", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      regexp1.name = "(?P<(?(bQ3'J4";
      regexp1.min = 103;
      Regexp regexp3 = Parser.parse("z", 612);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      Regexp regexp4 = Parser.parse("7MBU1=B{h", 103);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      
      try { 
        Parser.parse("(?P<(?(bQ3'J4", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = "\\x";
      int int0 = 45;
      Regexp regexp0 = Parser.parse("x", 45);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      regexpArray0[2] = regexp2;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 976;
      String string0 = "\\xPE\\2AZp/Jk";
      String string1 = "(?";
      String string2 = "g~K0&:0";
      int int1 = (-1992);
      Regexp regexp0 = Parser.parse("xPE\u0002AZp/Jk", (-1992));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string3 = regexp0.toString();
      assertEquals("xPE\\x02AZp/Jk", string3);
      assertNotNull(string3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(regexp0, regexp1);
      
      String string4 = "";
      int int2 = 16;
      try { 
        Parser.parse(string1, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-26674148);
      Regexp regexp0 = Parser.parse("[s^x00-x{1bFF&F}]", (-26674148));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[&0-x\\{\\}]", string0);
      assertNotNull(string0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      int[] intArray0 = new int[9];
      int int1 = 102;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = intArray0[1];
      intArray0[4] = int0;
      intArray0[0] = int0;
      intArray0[6] = int0;
      int int2 = (-62);
      intArray0[7] = int2;
      intArray0[8] = int0;
      regexp1.runes = intArray0;
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("d", 376);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 376;
      intArray0[1] = 376;
      intArray0[2] = 376;
      intArray0[3] = 376;
      intArray0[4] = 376;
      intArray0[5] = 376;
      intArray0[6] = 376;
      intArray0[7] = 376;
      String string0 = regexp0.toString();
      assertEquals("d", string0);
      assertNotNull(string0);
      
      String string1 = "=t<cV|R{z:";
      int int0 = 123;
      Regexp regexp1 = Parser.parse("d", (-1986));
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse("fY0(13[](=jf8?", 376);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[](=jf8?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "%z{5}a[GP.j!DBE";
      String string1 = "Eo.S|kf)2$,(gu~gG/l";
      int int0 = 3924;
      try { 
        Parser.parse("Eo.S|kf)2$,(gu~gG/l", 3924);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "\\2";
      Parser parser0 = new Parser("\u0002", 16);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("invalid escape sequence", 1503);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("\u0002", 16);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      int int0 = (-1215);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Parser.parse("(?:(pQ3'J4", 1265);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:(pQ3'J4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-26674136);
      String string0 = "[:-uzr\\Pi";
      try { 
        Parser.parse("[:-uzrPi", (-26674136));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-uzrPi`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("]VU#&d*?B}?'E", 120);
      assertNotNull(regexp0);
      
      int int0 = 66639;
      Regexp regexp1 = Parser.parse("7}Cy\"!", 66639);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse("(?P<", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("", 6);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", (-26674136));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("K3{63ph@^", 6);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray1);
      assertSame(regexpArray1, regexpArray0);
      
      int int0 = 57;
      int int1 = 72;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 72, 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000k#iqY6aJ5,", (-60));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("\\x00k#iqY6aJ5,", string0);
      assertNotNull(string0);
      
      String string1 = "P;O*PAE\\Tf\\%4H{Kd\"";
      Regexp regexp1 = Parser.parse("P;O*PAETf%4H{Kd\"", (-3265));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("x00k#iqY6aJ5,", (-60));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = Parser.parse("\u0000k#iqY6aJ5,", (-3265));
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      
      int int0 = 66639;
      Parser parser0 = new Parser("missing argument to repetition operator", 66639);
      assertNotNull(parser0);
      
      Regexp regexp5 = Parser.parse("L,;w}h$pF", 66639);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      
      try { 
        Parser.parse("M6[^\n&", (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^
         // &`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "\\1!7*q;";
      Regexp regexp0 = Parser.parse("\u0001!7*q;", 2584);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "\\P2AZ/J";
      int int0 = 105;
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("\uD804\uDCBE", 105);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("DB", 1408);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("DB", (-2));
      assertNotNull(regexp4);
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("\uD804\uDCBE", 105);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp0));
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      
      regexpArray0[5] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1, 1394);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "\\f\\3w]1AZ/Jo";
      int int0 = 2584;
      int int1 = 10088;
      Regexp regexp0 = Parser.parse("\f\u0003w]1AZ/Jo", 2584);
      assertNotNull(regexp0);
      
      String string1 = "[:blank:]";
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotNull(regexp1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string2 = "[::]";
      Parser parser0 = new Parser(string2, int1);
      assertNotNull(parser0);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotNull(regexp2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 56;
      Regexp regexp0 = Parser.parse("\f\u0002AZB/Jo", 56);
      assertNotNull(regexp0);
      
      String string0 = "l#Lb Y5vr&5'CrHYt";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-64);
      String string0 = "aWD]h*,z`%N";
      Regexp regexp0 = Parser.parse("aWD]h*,z`%N", (-64));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("\t", (-64));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-64), (-64));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp[] regexpArray2 = new Regexp[5];
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      
      regexpArray2[0] = regexp0;
      regexpArray2[1] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      regexpArray2[2] = regexp2;
      regexpArray2[3] = regexp0;
      regexpArray2[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, 1546, (-64));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[s^x00-x{10FFFF}]", (-26674136));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[0-x\\{\\}]", string0);
      assertNotNull(string0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "<G`!#\\2AZl/J4o";
      Regexp regexp0 = Parser.parse("<G`!#\u0002AZl/J4o", 118);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("(z", 118);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      int int0 = (-634);
      Parser parser0 = new Parser("YnmjThg=YbclU!<e]", 53);
      assertNotNull(parser0);
      
      Regexp regexp2 = Parser.parse("A!_1x;W6t\u0006^", 53);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string1 = "(b";
      Regexp regexp3 = Parser.parse(string1, int0);
      assertNotNull(regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      int int1 = 98;
      Regexp regexp4 = Parser.parse(string0, int1);
      assertNotNull(regexp4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      
      Regexp regexp6 = new Regexp(regexp5);
      assertNotNull(regexp6);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp5));
      
      int int2 = (-705);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp4.op = regexp_Op1;
      regexpArray0[2] = regexp5;
      regexpArray0[3] = regexp4;
      regexpArray0[4] = regexp6;
      regexpArray0[5] = regexp6;
      regexpArray0[6] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -705
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      int int0 = 2268;
      Regexp regexp0 = Parser.parse("\u0004-s@;^CQtxFvYb", 2268);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexpArray0[1]);
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op2 = Regexp.Op.STAR;
      Regexp regexp5 = new Regexp(regexp_Op2);
      assertNotNull(regexp5);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op2);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexpArray0[4]);
      assertNotNull(regexp7);
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp5));
      
      regexpArray0[7] = regexp7;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 612);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("\\z", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("%", 1640);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = Parser.parse("[:\uD809\uDC70-\uD809\uDC73]", 36);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      Regexp regexp5 = Parser.parse("%", 1640);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      
      Regexp regexp6 = Parser.parse("%", (-1235));
      assertNotNull(regexp6);
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp6;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp4;
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp5;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp4;
      regexpArray0[7] = regexp5;
      regexpArray0[8] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 36, 185);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-56);
      Regexp regexp0 = Parser.parse("CD}`OVM", (-561));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("pP", (-56));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexp1.runes = null;
      regexp1.flags = 2860;
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-56), (-1002));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("c48;tI0", 981);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("c48;tI0", 981);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("Buginese", (-1637));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      
      Regexp regexp5 = Parser.parse("x{", 15);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      
      Regexp regexp6 = Parser.parse("p:", 15);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      
      Parser parser0 = new Parser("Diacritic", (-1637));
      assertNotNull(parser0);
      
      Regexp regexp7 = Parser.parse("x{", 52);
      assertNotNull(regexp7);
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp6));
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp6);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("(?s:", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?s:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-1371);
      Parser parser0 = new Parser("6sB6>Rk?M0~Wy4", (-1371));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("6sB6>Rk?M0~Wy4", 82);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("6sB6>Rk?M0~Wy4", 66639);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("6sB6>Rk?M0~Wy4", (-1371));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      try { 
        Parser.parse(".`[%]m q+@[y/O=2K7", (-1371));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[y/O=2K7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "{Ho@HW[-uz\\Pi";
      try { 
        Parser.parse("{Ho@HW[-uzPi", 68405);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-uzPi`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1216;
      Regexp regexp0 = Parser.parse("[e-]", 80);
      assertNotNull(regexp0);
      
      String string0 = null;
      int int1 = 44;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8tE=zuaC=n[-]", 80);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("F6O/F#0 s7D", 4746);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vE", 2312);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 2114;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2312, 2114);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1216;
      Regexp regexp0 = Parser.parse("[::Vx00-x{1FFFF}u]", 1216);
      assertNotNull(regexp0);
      
      String string0 = "invalid nested repetition operator";
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = (-1495);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 901, (-1495));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "\\17f*q.;";
      int int0 = 2584;
      Regexp regexp0 = Parser.parse("\u000Ff*q.;", 2584);
      assertNotNull(regexp0);
      
      regexp0.cap = 447;
      String string1 = regexp0.toString();
      assertEquals("\\x0ff*q(?s:.);", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = null;
      Regexp regexp3 = null;
      try {
        regexp3 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("|[::7:)wX]", 1860);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = regexp0.toString();
      assertEquals("(?:)|[\\)7:Xw]", string0);
      assertNotNull(string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp[] regexpArray1 = regexp0.subs;
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
  }
}
