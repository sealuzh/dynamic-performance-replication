/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:58:58 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.StringCharacterIterator;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setDateFormat("");
      Class<JobAttributes> class0 = JobAttributes.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.parseKey();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.getExtraProcessors();
      Feature feature0 = Feature.UseBigDecimal;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeMap<Byte, BigInteger> treeMap0 = new TreeMap<Byte, BigInteger>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ti7962M9bD4Xp8(1");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 14, json : Ti7962M9bD4Xp8(1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mFJ#NFKfsprvl_k?6");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zGWy(Cpc[-4@sB");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : zGWy(Cpc[-4@sB
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{UAwNll0U14q", parserConfig0, 1424);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-1800));
      JSONScanner jSONScanner0 = new JSONScanner("");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      jSONScanner0.scanSymbol(defaultJSONParser0.symbolTable);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '$';
      charArray0[2] = 'S';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 2);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken");
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.deserializer.OptionalCodec", parserConfig0, (-2093064));
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z;xXjV@)a+@'");
      defaultJSONParser0.getObject("Z;xXjV@)a+@'");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : Z;xXjV@)a+@'
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Wr_teCIassName");
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z;xXjV@)a+@'");
      defaultJSONParser0.getFieldTypeResolver();
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect error, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H#{nUEX(] CNfiyN@e");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getDateFormat();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.parseKey();
      List<ExtraProcessor> list0 = new Vector<ExtraProcessor>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("IO");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LfE{gtW/N", parserConfig0, (-899));
      TreeMap<Byte, BigInteger> treeMap0 = new TreeMap<Byte, BigInteger>();
      defaultJSONParser0.handleResovleTask(treeMap0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LfE{gtW/N", parserConfig0, (-899));
      TreeMap<Byte, BigInteger> treeMap0 = new TreeMap<Byte, BigInteger>();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      defaultJSONParser0.checkMapResolve(treeMap0, rectangle0);
      assertTrue(rectangle0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mFJ#NFKfsprvl_k?6");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zGWy(Cpc[-4@sB");
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseKey();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3983, 3983);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getSymbolTable();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("X?+=kf3U<jn#hzST", parserConfig0, 1835);
      Locale locale0 = new Locale("X?+=kf3U<jn#hzST", "fastjson.parser.deny", "");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getDateFormat();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.getSymbolTable();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : int
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")niQx", parserConfig0);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      
      Feature feature0 = Feature.DisableASM;
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(20, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LfE{gtW/N", parserConfig0, (-899));
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      defaultJSONParser0.setContext((Object) "LfE{gtW/N", (Object) numberFormat0);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeAccept");
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(0, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0);
      Class<Field> class0 = Field.class;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      int int0 = (-899);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LfE{gtW/N", parserConfig0, (-899));
      defaultJSONParser0.setDateFormat("LfE{gtW/N");
      TreeSet<MockGregorianCalendar> treeSet0 = new TreeSet<MockGregorianCalendar>();
      defaultJSONParser0.checkListResolve(treeSet0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) "fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fieldName fastjson.parser.deny, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Wn*esylsF}t%A{^Sk");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      JSONScanner jSONScanner0 = new JSONScanner("Wn*esylsF}t%A{^Sk");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName com.alibaba.fastjson.parser.JSONScanner@3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z;xXjV@)a+@'");
      defaultJSONParser0.getObject("Z;xXjV@)a+@'");
      defaultJSONParser0.getFieldTypeResolver();
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Vector<ExtraProcessor> vector0 = new Vector<ExtraProcessor>();
      defaultJSONParser0.parse();
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "Z;xXjV@)a+@'";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z;xXjV@)a+@'");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N]NOvf1)jLD}I[r", 378);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "..");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.JAPAN;
      MessageFormat messageFormat0 = new MessageFormat("", locale0);
      defaultJSONParser0.setContext((Object) decimalFormat0, (Object) messageFormat0);
      defaultJSONParser0.setDateFormat("");
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.y1 = 1.0;
      Line2D.Double line2D_Double1 = new Line2D.Double(11.277207663052522, 1.0, 0.0, 0.0);
      Point point0 = new Point();
      defaultJSONParser0.resolveReference("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Wr_teCIassName");
      JSON.setDefaultTypeKey("Wr_teCIassName");
      defaultJSONParser0.setDateFormat("Wr_teCIassName");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "Wr_teCIassName");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.getContext();
      Insets insets0 = new Insets(45, 0, 45, (-1113));
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(0, 1, (-1546), 1539, (-1.0), 0, 2, 1, insets0, 0, 45);
      defaultJSONParser0.setContext((ParseContext) null, (Object) gridBagConstraints0, (Object) null);
      Vector<ExtraProcessor> vector0 = new Vector<ExtraProcessor>();
      defaultJSONParser0.parse();
      Object object0 = defaultJSONParser0.getObject("unclosed jsonArray");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "->j5-@";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("->j5-@");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Locale locale0 = Locale.JAPANESE;
      MessageFormat messageFormat0 = new MessageFormat("->j5-@", locale0);
      defaultJSONParser0.setContext((Object) numberFormat0, (Object) messageFormat0);
      defaultJSONParser0.setDateFormat("k\"");
      TreeMap<Byte, BigInteger> treeMap0 = new TreeMap<Byte, BigInteger>();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Line2D.Double line2D_Double1 = new Line2D.Double(0.0, 0.0, 0.0, 0.0);
      Class<Boolean> class0 = Boolean.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, linkedHashMap0);
      defaultJSONParser0.resolveReference("->j5-@");
      defaultJSONParser0.getObject("$");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser((char[]) null, 12, parserConfig0, (-502));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.concurrent.atomic.LongAdder");
      defaultJSONParser0.getExtraTypeProviders();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect [, actual ");
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : syntax error, expect [, actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7^#X");
      JSON.DEFFAULT_DATE_FORMAT = "7^#X";
      defaultJSONParser0.parse();
      JSON.DEFAULT_PARSER_FEATURE = 31;
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      TreeMap<BigInteger, Rectangle> treeMap0 = new TreeMap<BigInteger, Rectangle>();
      Line2D.Double line2D_Double1 = new Line2D.Double();
      String string0 = "8mipKh0iA/$";
      // Undeclared exception!
      try { 
        JSON.parseObject("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<BufferCapabilities, Method> hashMap0 = new HashMap<BufferCapabilities, Method>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("()[C");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Feature feature0 = Feature.DisableASM;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":true", parserConfig0);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getLexer();
      defaultJSONParser0.parseObject((Type) class0);
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      Double double0 = new Double(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayList0, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 0.0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}", (-308));
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}", parserConfig0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      linkedHashMap0.entrySet();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      ParserConfig.parserAllFieldToCache(class0, linkedHashMap0);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.setDateFormat("$");
      Integer integer0 = new Integer((-2183));
      int int0 = Calendar.PM;
      defaultJSONParser0.parseObject((Map) linkedHashMap0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-2433));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '}';
      charArray0[2] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 990);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setResolveStatus(0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "Z;xXjV@)a+@'";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z;xXjV@)a+@'");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Locale locale0 = Locale.KOREAN;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Z;xXjV@)a+@'", defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : Z;xXjV@)a+@'
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.setPositiveSuffix("");
      MessageFormat messageFormat0 = new MessageFormat("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) decimalFormat0, (Object) messageFormat0);
      assertNotNull(parseContext0);
      
      messageFormat0.toPattern();
      defaultJSONParser0.handleResovleTask(messageFormat0);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      point0.setLocation(point1);
      Locale locale0 = Locale.TAIWAN;
      defaultJSONParser0.popContext();
      Insets insets0 = new Insets(0, 0, 2, (-1));
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setDateFormat((String) null);
      TreeSet<MockGregorianCalendar> treeSet0 = new TreeSet<MockGregorianCalendar>();
      defaultJSONParser0.checkListResolve(treeSet0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("mFJ#NFKfsprvl_k?6", parserConfig0);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      HashSet<BitSet> hashSet0 = new HashSet<BitSet>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wr_teC!I|ssName");
      ParserConfig parserConfig1 = new ParserConfig();
      parserConfig1.addDeny("K9qiwj56w_ Rf=+XF");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<Date>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Wr_teC!I|ssName");
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wr_teC!I|ssName");
      ParserConfig parserConfig1 = new ParserConfig();
      parserConfig1.setAutoTypeSupport(false);
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getSymbolTable();
      DateFormat dateFormat0 = DateFormat.getInstance();
      DateFormat.getTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getExtraTypeProviders();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      defaultJSONParser0.parseObject(class0);
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1722, 1722);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("->j5-@");
      Locale locale0 = JSON.defaultLocale;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      defaultJSONParser0.getFieldTypeResolver();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.accept(2);
      defaultJSONParser0.checkListResolve(list0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(dateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@4f76f1a0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}", (-319));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.popContext();
      Class<Long> class0 = Long.TYPE;
      Double double0 = new Double((-319));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null]", parserConfig0, (-2849));
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      Class<Dimension> class1 = Dimension.class;
      defaultJSONParser0.parseObject(class1);
      Locale locale0 = Locale.ROOT;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("CamelCase", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'C'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y@KrLDVzw");
      ParserConfig.getGlobalInstance();
      defaultJSONParser0.getResolveTaskList();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.setDateFormat("Y@KrLDVzw");
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig parserConfig1 = new ParserConfig(true);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet");
      ParserConfig.getGlobalInstance();
      defaultJSONParser0.getResolveTaskList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0);
      Feature feature0 = Feature.DisableASM;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 7, json : , name 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}", (-319));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.popContext();
      Class<Long> class0 = Long.TYPE;
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      Double double0 = new Double(0);
      Double.sum(0, (-319));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IdentityHashMap<Properties, MockJapaneseDate> identityHashMap0 = new IdentityHashMap<Properties, MockJapaneseDate>(0);
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(13, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0);
      int int0 = (-1704);
      String string0 = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "";
      parserConfig0.addAccept("");
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rOF)j#)$AK");
      parserConfig0.addAccept("[F");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not support type : ");
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0);
      Point point0 = new Point();
      defaultJSONParser0.parse();
      TreeMap<BigDecimal, Byte> treeMap0 = new TreeMap<BigDecimal, Byte>();
      IdentityHashMap<Properties, MockJapaneseDate> identityHashMap0 = new IdentityHashMap<Properties, MockJapaneseDate>(0);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser((String) null, parserConfig1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "5";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5", parserConfig0);
      Point point0 = new Point();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("D:yG=!F]hMw3!");
      boolean boolean0 = new Boolean("fastjson.parser.autoTypeAccept");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double.isFinite(0.75);
      parserConfig0.setAsmEnable(false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      Insets insets0 = new Insets(45, 0, 45, 2);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(0, 1, (-1546), 0, (-1.0), 0, 2, 1, insets0, 0, 45);
      Vector<ExtraProcessor> vector0 = new Vector<ExtraProcessor>();
      defaultJSONParser0.parse();
      int int0 = Opcodes.IF_ACMPNE;
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list1 = defaultJSONParser0.getExtraProcessors();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0);
      Feature feature0 = Feature.DisableASM;
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , name 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      Point point0 = new Point(0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSeH");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.parseKey();
      Random.setNextRandom(1);
      defaultJSONParser0.getResolveTaskList();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName []
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":true", parserConfig0, 387);
      ParserConfig parserConfig1 = new ParserConfig();
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents1 = BufferCapabilities.FlipContents.BACKGROUND;
      TreeMap<Time, Date> treeMap0 = new TreeMap<Time, Date>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig1);
      Class<Integer> class0 = Integer.TYPE;
      defaultJSONParser0.parseKey();
      ClassLoader.getSystemClassLoader();
      Class<Date> class1 = Date.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : :true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "{";
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{", parserConfig0);
      defaultJSONParser0.setResolveStatus(2629);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '*';
      charArray0[2] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2171);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(timeZone0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("D:yG=!F]hMw3!", parserConfig0);
      Double double0 = new Double(0.0);
      Double.isFinite(0);
      parserConfig0.setAsmEnable(false);
      Double.sum(0.0, 1);
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(double0, "D:yG=!F]hMw3!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : D:yG=!F]hMw3!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      jSONObject0.getJSONObject("1.2.46");
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 4, info : pos 4, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'?sw'");
      defaultJSONParser0.parse((Object) "'?sw'");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "'?sw'", (Object) "'?sw'");
      parseContext0.toString();
      parseContext0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mFJ#NFKfsprvl_k?6");
      parseContext0.toString();
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ParserConfig parserConfig1 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]bCB2}i{]uA7'*b", parserConfig1);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]bCB2}i{]uA7'*b
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Point point0 = new Point();
      point0.translate(1, 1);
      Dimension dimension0 = new Dimension(155, 1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0);
      Feature feature0 = Feature.DisableASM;
      BitSet bitSet0 = new BitSet();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 7, json : , name 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Xd;<orG2w");
      defaultJSONParser0.accept(1, 2);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      ParserConfig parserConfig0 = new ParserConfig(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.parse((Object) "null");
      Feature feature0 = Feature.DisableASM;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("NaN", hashtable0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("null", parserConfig1, 1647);
      int int0 = defaultJSONParser2.getResolveStatus();
      assertEquals(0, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      defaultJSONParser1.handleResovleTask(parserConfig0);
      defaultJSONParser2.parseObject((Map) hashtable0);
      assertEquals(0, defaultJSONParser2.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("D:yG=!F]hMw3!", parserConfig0);
      Double double0 = new Double(0);
      Double.isFinite(0);
      Double.isFinite(0.75);
      parserConfig0.setAsmEnable(false);
      Double.sum((-1762.3349120823), 1.0);
      Locale locale0 = new Locale("mFJ#NFKfsprvl_k?6", "mFJ#NFKfsprvl_k?6");
      MessageFormat messageFormat0 = new MessageFormat("gGXa:~GIl2+v>xS", locale0);
      messageFormat0.clone();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "D:yG=!F]hMw3!", (Object) parserConfig0);
      parseContext0.toString();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Line2D.Double line2D_Double1 = new Line2D.Double();
      Point point0 = new Point((byte)11, 181);
      defaultJSONParser0.resolveReference("$");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : D:yG=!F]hMw3!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TreeSet");
      ParserConfig.getGlobalInstance();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig(false);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName []
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(",{]PudSj(U![", parserConfig0, 1);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser1.fieldTypeResolver;
      defaultJSONParser0.fieldTypeResolver = null;
      parserConfig0.getDeserializer((Type) null);
      HashMap<BufferCapabilities, Method> hashMap0 = new HashMap<BufferCapabilities, Method>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) hashMap0, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(",{]PudSj(U![", parserConfig0, 1);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser1.fieldTypeResolver;
      defaultJSONParser0.fieldTypeResolver = null;
      parserConfig0.getDeserializer((Type) null);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = null;
      typeArray0[1] = null;
      typeArray0[2] = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
