/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:03:00 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(942, (-108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -108.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(990, 990);
      compressedVector0.setAll(990);
      compressedVector0.hadamardProduct(compressedVector0);
      assertEquals(990, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector.fromCollection(linkedList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(972);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      compressedVector0.toCSV(numberFormat0);
      compressedVector0.toBinary();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.blankOfLength(975);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.copyOfLength(32);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      compressedVector0.toDenseVector();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1000, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3958.7773);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toDenseVector();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(3720, (double) 3720, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000, 1000);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector.random(1000, (double) 0, (Random) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(Integer.MAX_VALUE, (-2120.48055224), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(271, 271);
      compressedVector0.swapElements(Integer.MAX_VALUE, 271);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.product();
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1235.35).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(0, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(940, 940);
      compressedVector0.setAll(940);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1578));
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(971);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      hashMap0.put(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 971);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1135, 1135);
      compressedVector0.setAll(1135);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1135, 347);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(931, 976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Vector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2829.13135503);
      doubleArray0[1] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toMatrixMarket();
      Byte byte0 = new Byte((byte)17);
      compressedVector0.swapElements(0, (byte)17);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      compressedVector0.swapElements(976, (-1202));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(987, 987);
      compressedVector0.setAll(987);
      compressedVector0.swapElements((-1526), (-1526));
      compressedVector0.nonZeroAt((-1526));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1917, 1017);
      compressedVector0.setAll(1017);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1114);
      compressedVector0.copyOfLength(937);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1360);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000, 1000);
      compressedVector0.nonZeroAt(3);
      compressedVector0.get(3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1012, 1012);
      compressedVector0.setAll(1012);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.add((-235.21486233503185));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      compressedVector1.set(933, 933);
      compressedVector1.blankOfLength(933);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(933, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      compressedVector0.product();
      compressedVector0.swapElements(957, 68);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1000).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1000, vectorFunction0);
      compressedVector0.nonZeroAt(3);
      Integer integer0 = new Integer(971);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(1416);
      Integer.remainderUnsigned(971, 1000);
      hashMap0.put(integer1, integer2);
      CompressedVector.fromMap(hashMap0, 1416);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      compressedVector0.min();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1526), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(978);
      compressedVector0.setAll(978);
      int int0 = 931;
      compressedVector0.isZeroAt(945);
      // Undeclared exception!
      try { 
        CompressedVector.zero(945, 978);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 978.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      compressedVector1.set(933, 933);
      compressedVector1.blankOfLength(933);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)933).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(933, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-36), 976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 976
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1576), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(931, (-1576));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector.zero(0, 0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Vector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2829.13135503);
      doubleArray0[1] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.swapElements(0, (-1232));
      CompressedVector.fromArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(978);
      compressedVector0.setAll(521237.7284716573);
      Vector vector0 = compressedVector0.sliceLeft(978);
      compressedVector0.hadamardProduct(vector0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1000, 1000);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1000).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1000, vectorFunction0);
      compressedVector0.nonZeroAt(3);
      compressedVector0.get(3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1017, 1017);
      compressedVector0.setAll(1017);
      compressedVector0.toBinary();
      compressedVector0.swapElements(1019, 1019);
      compressedVector0.swapElements(3, 3);
      compressedVector0.blankOfLength(48);
      MockRandom mockRandom0 = new MockRandom(48);
      mockRandom0.ints(1393L);
      mockRandom0.doubles();
      CompressedVector.random(64, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      compressedVector0.setAll(976);
      compressedVector0.toColumnMatrix();
      compressedVector0.swapElements((-1906), (-744));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2045), vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector.zero(1024, 1024);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Vector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-892);
      doubleArray0[1] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.swapElements((-892), 0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-892);
      doubleArray0[2] = (-2829.13135503);
      doubleArray0[3] = (double) (-892);
      doubleArray0[4] = (-2829.13135503);
      doubleArray0[5] = (double) (-892);
      doubleArray0[6] = (-2829.13135503);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (-2829.13135503);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.swapElements(8, (-892));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      compressedVector0.copyOfLength(976);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
      compressedVector0.swapElements(990, 990);
      CompressedVector.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.toSparseVector();
      compressedVector0.setAll(976);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1526), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Vector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2829.13135503);
      doubleArray0[1] = (double) 0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-2146724855), vectorFunction0);
      compressedVector1.nonZeroIterator();
      compressedVector0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(976, 976);
      compressedVector0.setAll(976);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.set(931, 0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1625, 99);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1625, vectorFunction1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Vector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2829.13135503);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toMatrixMarket();
      Byte byte0 = new Byte((byte) (-17));
      compressedVector0.swapElements(9, 0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1029;
      CompressedVector compressedVector0 = CompressedVector.zero(1029, 1029);
      compressedVector0.setAll(1029);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = new CompressedVector(1029, 1029);
      compressedVector0.copyOfLength(1029);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1029, (double)1029, (double)1029, (double)1029, 1724.404358439).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("a[Kj5Fb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }
}
