/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:34:08 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-848));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RuntimeInvisibleAnnoations";
      stringArray0[1] = "RuntimeInvisibleAnnoations";
      stringArray0[2] = "RuntimeInvisibleAnnoations";
      stringArray0[3] = "RuntimeInvisibleAnnoations";
      classWriter0.visit(49, 49, "RuntimeInvisibleAnnoations", "$", "RuntimeInvisibleAnnoations", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 64703, "RuntimeInvisibleAnnoations", ",", "uL%!7C[0 FPB%6rV?Cl", "RuntimeInvisibleAnnoations");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      classWriter0.index = (-598);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2221), "&Nk/,", "uL%!7C[0 FPB%6r@?Cl", "&Nk/,", "uL%!7C[0 FPB%6r@?Cl");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-848));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RuntimeInvisibleAnnoations";
      stringArray0[1] = "RuntimeInvisibleAnnoations";
      stringArray0[2] = "RuntimeInvisibleAnnoations";
      stringArray0[3] = "RuntimeInvisibleAnnoations";
      classWriter0.visit(49, 49, "RuntimeInvisibleAnnoations", "$", "RuntimeInvisibleAnnoations", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 64703, "RuntimeInvisibleAnnoations", ",", "uL%!7C[0 FPB%6rV?Cl", "RuntimeInvisibleAnnoations");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      classWriter0.index = (-598);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2221), "&Nk/,", "uL%!7C[0 FPB%6r@?Cl", "&Nk/,", "uL%!7C[0 FPB%6r@?Cl");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "(R`3Q!*bO>}@", "wheel.asm.Handler", "]I0T*.J%Msw9eO", "(3{@sY/57(?%yc");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2145);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "z", "z", "z", "z");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2434);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2434, "og.apache.8ommons.io.filefilter.FalseFlFilter", "og.apache.8ommons.io.filefilter.FalseFlFilter", (String) null, "og.apache.8ommons.io.filefilter.FalseFlFilter");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1726);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-797), "[5OwBqbja0$i", "-.<bg,o", "X-++X_U%", "-.<bg,o");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = (-797);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation("\u0002#l2V]B8*G", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777226);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", (String) null, (Object) null);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 40, "Lwhel.asm.<bel", "Lwhel.asm.<bel", "Lwhel.asm.<bel", "Lwhel.asm.<bel");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = (-2185);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777226);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, (String) null, (String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2139);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-712), "", "@d`4{>F5o!r", (String) null, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2145);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = 131072;
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-910), "IZ/?ck,]~_D9L", "IZ/?ck,]~_D9L", "", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2396));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2396), "", "The strings must not be null", "N9os~*'.OqeHY.(", (Object) null);
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2396));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1964, "", "/}!", "~ddh", (Object) null);
      fieldWriter0.visitAnnotation("The strings must not be null", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2145);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 127, "", "", (String) null, "V");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&Nk/,";
      stringArray0[1] = "&Nk/,";
      stringArray0[2] = "&Nk/,";
      stringArray0[3] = "&Nk/,";
      classWriter0.visit(50, 50, "&Nk/,", "&Nk/,", "&Nk/,", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2221), "&Nk/,", "uL%!7C[0 FPB%6r@?Cl", "&Nk/,", "uL%!7C[0 FPB%6r@?Cl");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2424);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2424, "orgapache.commonr.io.fifiltel.FalseFVDilter", "orgapache.commonr.io.fifiltel.FalseFVDilter", "orgapache.commonr.io.fifiltel.FalseFVDilter", "orgapache.commonr.io.fifiltel.FalseFVDilter");
      Attribute attribute0 = new Attribute("orgapache.commonr.io.fifiltel.FalseFVDilter");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-833), "", "", "", "");
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&Nk/,";
      stringArray0[1] = "&Nk/,";
      stringArray0[2] = "&Nk/,";
      stringArray0[3] = "&Nk/,";
      classWriter0.visit(50, 50, "&Nk/,", "&Nk/,", "&Nk/,", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2221), "&Nk/,", "uL%!7C[0 FPB%6r@?Cl", "&Nk/,", "uL%!7C[0 FPB%6r@?Cl");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2221), "&Nk/,", "uL%!7C[0 FPB%6r@?Cl", "&Nk/,", "uL%!7C[0 FPB%6r@?Cl");
      fieldWriter0.visitAnnotation("&Nk/,", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2396));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2396), "", "The strings must not be null", "N9os~*'.OqeHY.(", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2145);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 127, "", "", (String) null, "V");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1726);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-797), "[5OwBqbja0$i", "-.<bg,o", "X-++X_U%", "-.<bg,o");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 36, "", "Q`%", "", "^Ae8E mD6yi*5N9?<");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3078);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 529, "wheel.asm.ByteVector", "Deprecated", "P>E%z@_R;X%s", "wheel.asm.ByteVector");
      fieldWriter0.next = fieldWriter0;
      fieldWriter0.next.visitEnd();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2424);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2424, "orgapache.commons.io.fifilter.FalseFVFilter", "orgapache.commons.io.fifilter.FalseFVFilter", "orgapache.commons.io.fifilter.FalseFVFilter", "orgapache.commons.io.fifilter.FalseFVFilter");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
