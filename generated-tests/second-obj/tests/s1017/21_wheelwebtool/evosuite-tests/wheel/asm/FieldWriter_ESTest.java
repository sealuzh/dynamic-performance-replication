/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:16:43 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "#9,=9#8_E( &$a", "", "#9,=9#8_E( &$a");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-1203), "~%@L_9S?M3|~z,qKs/", "", "", "~%@L_9S?M3|~z,qKs/");
      int int0 = Frame.UNINITIALIZED_THIS;
      assertEquals(16777222, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = new Item(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "gB|&SsyVhBE\"", "gB|&SsyVhBE\"", "gB|&SsyVhBE\"", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      System.setCurrentTimeMillis(2);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2087));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2087), "", "", "", "");
      int int0 = Type.INT;
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "#9,=9#8_E( &$a", "", "#9,=9#8_E( &$a");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2092));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2092), "b*{Jryxp>.G9", "", "b*{Jryxp>.G9", "");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1656, "#9,=9#8_E &$a", "#9,=9#8_E &$a", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268435456);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1570), "", "", "#9,=9#8_E &$a", "#9,=9#8_E &$a");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = new ByteVector(3096);
      fieldWriter0.visitEnd();
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "#9,=9#8_E &$a", "", "#9,=9#8_E &$a");
      fieldWriter0.visitAnnotation("Signature", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(268435456);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 268435456, "The list of prefixes must not be null", "", (String) null, "");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(379);
      ByteVector byteVector1 = byteVector0.put11(16, 13);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "gB|&SsyVhBE\"", "gB|&SsyVhBE\"", "gB|&SsyVhBE\"", "gB|&SsyVhBE\"");
      fieldWriter0.visitAnnotation("gB|&SsyVhBE\"", true);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8("gB|&SsyVhBE\"");
      ByteVector byteVector2 = byteVector1.putInt(131072);
      fieldWriter0.put(byteVector2);
      assertSame(byteVector1, byteVector2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2092));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2092), "b*{Jryxp>.G9", "", "b*{Jryxp>.G9", "");
      Attribute attribute0 = new Attribute("b*{Jryxp>.G9");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter(131040);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131040, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector1 = byteVector0.put11(1247, (-1234));
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter(131040);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      stringArray0[1] = "";
      stringArray0[2] = "";
      classWriter0.visit(131040, 131040, "", "", "/Zs%", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131040, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2092));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Izor~&5";
      stringArray0[5] = "Izor~&5";
      stringArray0[6] = "";
      stringArray0[7] = "Izor~&5";
      stringArray0[8] = "Izor~&5";
      classWriter0.visit((-1), 8, "", "", "Izor~&5", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "", "Izor~&5", "", "");
      fieldWriter0.getSize();
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-1614));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }
}
