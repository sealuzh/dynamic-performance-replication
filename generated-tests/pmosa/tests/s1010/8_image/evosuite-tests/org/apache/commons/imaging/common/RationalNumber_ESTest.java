/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:20:17 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.5516981147811748E-4);
      int int0 = rationalNumber0.intValue();
      assertEquals(2, rationalNumber0.numerator);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, (-4840));
      rationalNumber0.negate();
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-3553.4));
      assertEquals((-17767), rationalNumber1.numerator);
      assertEquals((byte)31, rationalNumber1.byteValue());
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-4840), 0);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(0, (-4840));
      assertEquals(1, rationalNumber3.divisor);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(2034.0);
      assertEquals(2034, rationalNumber4.intValue());
      
      rationalNumber0.intValue();
      rationalNumber2.negate();
      assertEquals(1, rationalNumber2.numerator);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1368.5);
      String string0 = rationalNumber0.toString();
      assertEquals("2737/2 (1,368.5)", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1368, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.138235792401247E-8);
      assertEquals(5.1382357548964946E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(19461933, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483647L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483647", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(Integer.MAX_VALUE, (-3555));
      RationalNumber.valueOf(Integer.MAX_VALUE);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(Integer.MAX_VALUE);
      String string0 = rationalNumber0.toString();
      assertEquals("2147483647/-3555 (-604,074.162)", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0);
      assertEquals(1, rationalNumber2.numerator);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-604,074.162", string1);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-604074.2F), float0, 0.01F);
      assertEquals((-604074.1623066104), rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-3555));
      assertEquals((-3555.0F), rationalNumber3.floatValue(), 0.01F);
      
      String string2 = rationalNumber1.toString();
      assertEquals("2,147,483,647", string2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1, 0L);
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      rationalNumber2.negate();
      rationalNumber0.doubleValue();
      rationalNumber0.negate();
      RationalNumber.valueOf(0);
      rationalNumber0.longValue();
      rationalNumber1.toString();
      rationalNumber1.intValue();
      rationalNumber3.toString();
      // Undeclared exception!
      try { 
        rationalNumber2.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-973.2758549));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2708, 2476L);
      RationalNumber.factoryMethod((-2147483648L), 0L);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(453L, 677);
      rationalNumber0.toDisplayString();
      assertEquals(2708, rationalNumber0.divisor);
      
      rationalNumber1.negate();
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("1.094", string0);
      
      RationalNumber.valueOf(1143.71712813);
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1595.507882));
      String string1 = rationalNumber3.toString();
      assertEquals("-10222419/6407 (-1,595.508)", string1);
      
      RationalNumber.factoryMethod((-833L), (-80L));
      rationalNumber3.doubleValue();
      rationalNumber1.floatValue();
      rationalNumber1.intValue();
      assertEquals((byte)1, rationalNumber1.byteValue());
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(85L, 2698L);
      rationalNumber2.floatValue();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(7.489673566851707E-5);
      assertEquals(7.489515E-5F, rationalNumber5.floatValue(), 0.01F);
      
      rationalNumber4.floatValue();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(80, (-10222419));
      assertEquals((-7.825936E-6F), rationalNumber6.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483663L, 2147483663L);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483663L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483663, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber.factoryMethod((-2147483663L), (-30L));
      long long0 = 0L;
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, 2147483647L);
      RationalNumber.valueOf(1.0);
      rationalNumber0.toString();
      rationalNumber0.toDisplayString();
      RationalNumber.factoryMethod(2147483647L, 5);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483663L), (-15L));
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1.0);
      assertEquals(1, rationalNumber1.numerator);
      
      String string0 = rationalNumber0.toString();
      assertEquals("134,217,729", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("134217729", string1);
      
      RationalNumber.factoryMethod(2147483638L, 1);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(0L, (-2147483663L));
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(0, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(0L);
      assertEquals(0.0F, rationalNumber4.floatValue(), 0.01F);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(1299.115916461);
      assertEquals(1299.1158F, rationalNumber5.floatValue(), 0.01F);
      
      rationalNumber0.floatValue();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(1, 1);
      assertEquals(1.0, rationalNumber6.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483681L, 2147483681L);
      assertEquals(1L, rationalNumber0.longValue());
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483681L, 1);
      String string0 = rationalNumber1.toString();
      assertEquals("-2,147,483,615", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(338L, 1);
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(2147483615L, rationalNumber3.longValue());
      
      long long0 = rationalNumber2.longValue();
      assertEquals(338L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(3710L, 2147483663L);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1073741831, rationalNumber0.divisor);
      assertEquals(1.7276033646490205E-6, double0, 0.01);
  }
}
