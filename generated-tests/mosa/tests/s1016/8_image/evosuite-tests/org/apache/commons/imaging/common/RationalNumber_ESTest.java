/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:59:17 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-0.4504600089051014));
      assertEquals((-0.45046002F), rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(38.9129);
      assertEquals(10000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(864.2993238049);
      float float0 = rationalNumber0.floatValue();
      assertEquals(864.2993F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1773.1413829029357);
      assertEquals(42440139, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2711.38);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2,711.38", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2711.38);
      long long0 = rationalNumber0.longValue();
      assertEquals(135569, rationalNumber0.numerator);
      assertEquals(2711L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-3.5362326239144712));
      assertEquals((-3.536231884057971), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-3966), (-3966));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-196L), (-2147483670L));
      assertEquals(9.126961137730095E-8, rationalNumber1.doubleValue(), 0.01);
      assertEquals(1073741835, rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836317584145E9);
      assertEquals(2.147483632E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483632, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483715L), (-2147483715L));
      String string0 = rationalNumber1.toDisplayString();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1L, rationalNumber1.longValue());
      assertEquals("1", string0);
      assertEquals(1, rationalNumber1.intValue());
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0E-8, double0, 0.01);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483670L), 1L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1L);
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-110.800230108485));
      assertEquals((-53295), rationalNumber2.numerator);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483626", string0);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1642L);
      assertEquals((byte)106, rationalNumber3.byteValue());
      
      String string1 = rationalNumber1.toString();
      assertEquals("1", string1);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(1L, 1642L);
      String string2 = rationalNumber4.toDisplayString();
      assertEquals("0.001", string2);
      
      int int0 = rationalNumber1.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      String string0 = rationalNumber0.toString();
      assertEquals("1/100000000 (0)", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1L, (-2147483670L));
      assertEquals(4.656612920782288E-10, rationalNumber1.doubleValue(), 0.01);
      assertEquals(1, rationalNumber1.numerator);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(159L, 100000000);
      rationalNumber2.toString();
      rationalNumber1.floatValue();
      RationalNumber.valueOf(159L);
      long long0 = 1L;
      RationalNumber.factoryMethod(3081L, (-117L));
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      rationalNumber0.longValue();
      RationalNumber.valueOf(0L);
      rationalNumber3.doubleValue();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483670L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483670, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2370L), 4294967293L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-0", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-5.518086259735829E-7), double0, 0.01);
      assertEquals(395, rationalNumber0.numerator);
  }
}
