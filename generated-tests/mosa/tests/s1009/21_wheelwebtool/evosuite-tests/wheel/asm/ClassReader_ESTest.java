/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:39:28 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classReader0.getClassName();
      classReader0.getSuperName();
      int int0 = classReader0.getAccess();
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte byte0 = (byte)13;
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)13;
      byteArray0[9] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[12] = (byte)122;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(2);
      String string0 = classWriter0.thisName;
      classReader0.getItem(2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      // Undeclared exception!
      try { 
        classReader0.readClass(101, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 529);
      classWriter0.newInteger(1);
      classReader0.accept((ClassVisitor) classWriter0, (-112));
      classReader0.copyPool(classWriter0);
      classReader0.readLong(2);
      classReader0.getInterfaces();
      classReader0.readUnsignedShort(1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(6892);
      ClassWriter classWriter1 = new ClassWriter(78);
      classReader0.accept((ClassVisitor) classWriter1, 78);
      classReader0.getClassName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      String string0 = classWriter0.thisName;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassWriter classWriter1 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter1, 1);
      classReader0.getClassName();
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1979));
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classWriter0.getCommonSuperClass("java/lang/String", "java/lang/String");
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, (-1054));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1979));
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classWriter0.getCommonSuperClass("java/lang/String", "java/lang/String");
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 529);
      classReader0.accept((ClassVisitor) classWriter0, (-112));
      classReader0.copyPool(classWriter0);
      classReader0.readLong(2);
      classReader0.readByte(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "wheel.asm.MethodWriter";
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassWriter classWriter1 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter1, 1);
      classReader0.getClassName();
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      charArray0[2] = 'U';
      charArray0[3] = 'N';
      charArray0[4] = 'E';
      // Undeclared exception!
      try { 
        classReader0.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.getInterfaces();
      classReader0.copyPool(classWriter0);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.getCommonSuperClass("wheel.asm.MethodWriter", "wheel.asm.MethodWriter");
      classWriter0.getCommonSuperClass("wheel.asm.MethodWriter", "wheel.asm.MethodWriter");
      classReader0.accept((ClassVisitor) classWriter0, (-1680));
      int int0 = (-3176);
      classReader0.readInt(int0);
      classReader0.getAccess();
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "wheel.asm.MethodWriter";
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 1114);
      String string1 = classWriter0.getCommonSuperClass(string0, string0);
      classWriter0.getCommonSuperClass(string1, string0);
      int int0 = (-1680);
      classReader0.accept((ClassVisitor) classWriter0, int0);
      int int1 = (-3176);
      classReader0.readInt(int1);
      classReader0.getAccess();
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(6892);
      classReader0.accept((ClassVisitor) classWriter0, (-2104));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, (-1));
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      ClassReader classReader1 = new ClassReader(dataInputStream0);
      classReader1.getClassName();
      ClassReader classReader2 = new ClassReader(classReader1.b);
      int int0 = 22;
      char[] charArray0 = null;
      classReader2.readConst(int0, charArray0);
      classReader1.getClassName();
      dataInputStream0.readUTF();
      classReader1.getInterfaces();
      int int1 = 429;
      classReader1.getItem(int1);
  }
}
