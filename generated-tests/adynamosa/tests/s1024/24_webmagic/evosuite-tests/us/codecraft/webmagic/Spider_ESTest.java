/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 14:39:55 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.utils.FilePersistentBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      String string0 = "Rru9*-R;D*Y";
      String string1 = "(?is)<!DOCTYPE.*?>";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("(?is)<!DOCTYPE.*?>", "Rru9*-R;D*Y");
      String string2 = "";
      String string3 = "Z3y};F+9=*";
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "Z3y};F+9=*");
      PhantomJSDownloader phantomJSDownloader2 = phantomJSDownloader1.setRetryNum(566);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 566);
      spider0.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setDownloader(phantomJSDownloader2);
      Spider.Status.fromValue(566);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      linkedList0.offerLast(collectorPipeline0);
      Spider spider2 = spider0.setPipelines(linkedList0);
      // Undeclared exception!
      try { 
        spider2.get("Rru9*-R;D*Y");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.commonPool();
      Spider spider1 = spider0.clearPipeline();
      spider1.setSpawnUrl(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider0.pipeline(jsonFilePipeline0);
      spider2.getUUID();
      spider2.setUUID("us.codecraft.webmagic.pipeline.ConsolePipeline");
      String string0 = "";
      Json json0 = new Json("");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1111, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      spider2.thread((ExecutorService) null, 1932);
      int int0 = (-1696);
      // Undeclared exception!
      try { 
        spider0.sleep((-1696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u00029");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\u00029");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("\u00029", "\u00029");
      phantomJSDownloader0.setRetryNum(817);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(31);
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 3);
      spider3.sleep(3);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u00029");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\u00029");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("\u00029", "\u00029");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(817);
      Spider spider3 = spider2.downloader(phantomJSDownloader1);
      spider0.getSpiderListeners();
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      spider4.stop();
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", retryTimes=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      Json json0 = new Json(", retryTimes=");
      // Undeclared exception!
      try { 
        json0.removePadding("-n{-cntz-*>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{L\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "{L\"");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider1.thread(86);
      spider1.sleep(4514);
      spider3.run();
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("");
      FilePipeline filePipeline0 = new FilePipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Stopped");
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      List<String> list0 = null;
      Json json0 = new Json((List<String>) null);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      json0.toList(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Request request0 = new Request();
      Request request1 = request0.setPriority((-3945L));
      Request request2 = request1.setCharset("Stopped");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      AtomicInteger atomicInteger0 = new AtomicInteger(39);
      spider0.stat = atomicInteger0;
      FilePipeline filePipeline0 = new FilePipeline("^}60GkH&b");
      Spider.Status.values();
      spider0.setUUID(" stop fail!");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      spider0.setExitWhenComplete(true);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spider0.getCollectorPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.setEmptySleepTime((-1798));
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2763);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider0.scheduler((Scheduler) null);
      spider2.setExitWhenComplete(false);
      spider0.thread(1209);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedTransferQueue<FilePipeline> linkedTransferQueue0 = new LinkedTransferQueue<FilePipeline>();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>(linkedTransferQueue0);
      spider1.setPipelines(linkedList0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      spider3.addRequest(requestArray0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.addPipeline(consolePipeline0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]9VRX)nH3GIVb=n");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop success!", " stop fail!");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      forkJoinPool0.getQueuedTaskCount();
      Spider spider3 = spider1.clearPipeline();
      spider1.clearPipeline();
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider3.getAll((Collection<String>) linkedBlockingDeque0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider2.startUrls(linkedList0);
      Spider spider4 = spider2.setExitWhenComplete(false);
      spider4.addPipeline((Pipeline) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider5 = spider0.startUrls(linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " stop success!";
      stringArray0[1] = " stop success!";
      stringArray0[2] = "]9VRX)nH3GIVb=n";
      stringArray0[3] = " stop fail!";
      stringArray0[4] = " stop fail!";
      stringArray0[5] = " stop fail!";
      // Undeclared exception!
      try { 
        spider5.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(".SYo?t,,J$DRV,|", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider2 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider1.setDownloader(phantomJSDownloader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider2.run();
      spider3.setExitWhenComplete(true);
      spider2.getStartTime();
      spider0.getSpiderListeners();
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader("J6W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(7);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "GGO[B~/|94!Zi)ovfo");
      phantomJSDownloader0.setRetryNum(7);
      Spider spider1 = spider0.thread(7);
      spider1.sleep(7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Request request0 = new Request();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      spider0.extractAndAddRequests(page1, false);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      FilePipeline filePipeline0 = new FilePipeline("_cycle_tried_times");
      Site site0 = simplePageProcessor0.getSite();
      Site site1 = site0.setDisableCookieManagement(false);
      Site site2 = site1.setUseGzip(false);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Site site3 = site2.setAcceptStatCode(linkedHashSet0);
      Site site4 = site3.setCharset("");
      spider1.site = site4;
      site2.setUserAgent("0");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.getCollectorPipeline();
      spider0.getSite();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("RLu9*R;D*Y", "GGO[B~/|94!Zi)ovfo");
      phantomJSDownloader0.setRetryNum(566);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 566);
      Spider spider2 = spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.setScheduler(priorityScheduler0);
      spider2.scheduler = (Scheduler) priorityScheduler0;
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider3.sleep(39);
      Spider.Status spider_Status0 = Spider.Status.fromValue(566);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setScheduler(spider2.scheduler);
      spider1.setSpawnUrl(true);
      Spider.Status spider_Status1 = spider2.getStatus();
      assertSame(spider_Status1, spider_Status0);
      
      long long0 = spider3.getPageCount();
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XtV]iLp]ARIQPg|&Y7");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setUUID("XtV]iLp]ARIQPg|&Y7");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XtV]iLp]ARIQPg|&Y7", "XtV]iLp]ARIQPg|&Y7");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      FilePipeline filePipeline0 = new FilePipeline("1NKQK;HL0Ufj");
      spider1.pipeline(filePipeline0);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.clearPipeline();
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = spider2.getAll((Collection<String>) linkedBlockingDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      Spider spider5 = spider4.startUrls(list1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      String[] stringArray0 = new String[1];
      spider5.run();
      spider5.thread(3);
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"xhj390h+-wdMSrX[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(1);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[0];
      Spider spider4 = spider3.addUrl(stringArray0);
      assertTrue(spider4.isSpawnUrl());
      
      Spider spider5 = spider4.setSpawnUrl(false);
      spider5.addUrl(stringArray0);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", acceptStatCode=", ", acceptStatCode=");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      forkJoinPool0.getQueuedTaskCount();
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.clearPipeline();
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider5 = spider4.startUrls(linkedList0);
      spider5.addPipeline((Pipeline) null);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      String[] stringArray0 = new String[0];
      spider4.test(stringArray0);
      // Undeclared exception!
      try { 
        spider3.get("downloading page: ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = ", acceptStatCode=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      forkJoinPool0.submit((Runnable) spider0);
      Spider spider1 = spider0.setUUID(", acceptStatCode=");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", acceptStatCode=", ", acceptStatCode=");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.clearPipeline();
      spider3.clearPipeline();
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingDeque0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Spider.Status.fromValue(7);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider2 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setPriority((-2042L));
      // Undeclared exception!
      try { 
        spider1.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "o";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("o");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("o");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Request request0 = new Request("o");
      Spider spider0 = new Spider(simplePageProcessor1);
      FilePipeline filePipeline0 = new FilePipeline("_cycle_tried_times");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider1.thread(2);
      spider2.getUUID();
      // Undeclared exception!
      try { 
        spider3.get("_(w\"u5EbN:");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "GIMBfjsccthscNaSmv1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      String string1 = "";
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      boolean boolean0 = false;
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      String string2 = "T#e%z!QR4_r";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GIMBfjsccthscNaSmv1", "");
      spider2.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider2.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Spider.Status.fromValue(7);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider0.run();
      // Undeclared exception!
      try { 
        spider1.thread((-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GIMBfjsccthscNSmv1", "Spider ");
      spider1.setDownloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider0.setSpawnUrl(false);
      Spider spider4 = spider3.startUrls(list1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider3.pipeline(resultItemsCollectorPipeline0);
      spider2.getSpiderListeners();
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      List<Request> list2 = spider5.getAll((Collection<String>) linkedBlockingDeque0);
      spider2.startRequest(list2);
      spider4.setUUID("");
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GIMBfjsccthscNSmv1", "Spider ");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      Spider spider4 = spider3.startUrls(list1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider5 = spider3.pipeline(resultItemsCollectorPipeline0);
      spider5.setUUID("process request ");
      spider4.run();
      spider4.getAll((Collection<String>) linkedBlockingDeque0);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("o");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o");
      Request request0 = new Request("o");
      Spider spider0 = new Spider(simplePageProcessor1);
      FilePipeline filePipeline0 = new FilePipeline("_cycle_tried_times");
      Spider spider1 = spider0.setExitWhenComplete(false);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      spider2.pipeline(filePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GIMBfjsccthscNaSmv1", "Spider ");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      Spider spider4 = spider3.startUrls(list1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider3.pipeline(resultItemsCollectorPipeline0);
      spider4.run();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", acceptStatCode=", ", acceptStatCode=");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.clearPipeline();
      spider2.clearPipeline();
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      spider1.startUrls(list1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("RLu9*R;D*Y", "GGO[B~/|94!Zi)ovfo");
      phantomJSDownloader0.setRetryNum(566);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 566);
      Spider spider2 = spider1.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.scheduler = (Scheduler) priorityScheduler0;
      spider2.setDownloader(phantomJSDownloader0);
      Spider.Status.fromValue(566);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "GGO[B~/|94!Zi)ovfo";
      stringArray0[2] = ", acceptStatCode=";
      stringArray0[3] = ", acceptStatCode=";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setExitWhenComplete(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider0.setPipelines(linkedList0);
      Spider spider3 = spider1.downloader((Downloader) null);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      linkedList1.add((Pipeline) jsonFilePipeline0);
      spider2.setSpawnUrl(false);
      spider3.clearPipeline();
      spider0.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", acceptStatCode=", ", acceptStatCode=");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[1];
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.clearPipeline();
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = spider2.getAll((Collection<String>) linkedBlockingDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      spider4.startUrls(list1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", acceptStatCode=";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GIMBfjsccthscNaSmv1", "Spider ");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider1.addRequest(requestArray0);
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider2.setScheduler(priorityScheduler0);
      spider4.startUrls(list1);
      spider3.startRequest((List<Request>) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Spider ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "GIMBfjsccthscNaSmv1";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Page page0 = new Page();
      Request request0 = new Request();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~Qd=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setSpawnUrl(false);
      Spider spider5 = spider4.setExitWhenComplete(true);
      spider5.sleep(1020);
      // Undeclared exception!
      try { 
        spider4.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("o");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider1.getUUID();
      spider1.isExitWhenComplete();
      Page page0 = new Page();
      page0.setSkip(true);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("$VALUES");
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.thread((ExecutorService) null, 3);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider4 = spider3.pipeline(jsonFilePipeline0);
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      Request request0 = new Request();
      Request request1 = request0.setUrl("us.codecraft.webmagic.Site$1");
      // Undeclared exception!
      try { 
        spider5.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page0 = new Page();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Request request0 = new Request("u/+<");
      Request request1 = new Request("");
      Request request2 = request1.setPriority((-1530L));
      Request request3 = request2.setBinaryContent(false);
      Request request4 = request3.addCookie("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).", "_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      spider0.clearPipeline();
      Request request0 = new Request("m,");
      Request request1 = request0.setBinaryContent(true);
      Request request2 = request1.addCookie("", (String) null);
      Request request3 = request2.addHeader("", "_cycle_tried_times");
      Request request4 = request3.setCharset("m,");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider0.isExitWhenComplete();
      Spider spider1 = spider0.setSpawnUrl(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      spider1.addPipeline((Pipeline) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = null;
      try {
        fileCacheQueueScheduler0 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "us.codecraft.webmagic.Spider";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GGO[B~/|94!Zi)ovfo", "us.codecraft.webmagic.Spider$Status");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(566);
      spider0.setDownloader(phantomJSDownloader1);
      stringArray0[1] = "RLu9*R;D*Y";
      stringArray0[2] = "UpAHxRO%9)[-a4<3Ukl";
      stringArray0[3] = "/x!c)i9";
      stringArray0[4] = "UpAHxRO%9)[-a4<3Ukl";
      stringArray0[5] = "UpAHxRO%9)[-a4<3Ukl";
      stringArray0[6] = "S";
      stringArray0[7] = "UpAHxRO%9)[-a4<3Ukl";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1455);
      Spider spider2 = spider0.scheduler((Scheduler) null);
      spider2.isSpawnUrl();
      Spider spider3 = spider1.setScheduler((Scheduler) null);
      spider1.getScheduler();
      // Undeclared exception!
      try { 
        spider3.get(" stop fail!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      Page page0 = new Page();
      Page page1 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      Request request0 = new Request();
      request0.setBinaryContent(true);
      request0.setUrl("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("GIMBfjsccthscNaSmv1");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Spider spider2 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider1.stop();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.model.HttpRequestBody");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("us.codecraft.webmagic.model.HttpRequestBody");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      Request request0 = new Request();
      Request request1 = request0.setUrl("#+");
      Request request2 = request1.addHeader("#+", (String) null);
      Request request3 = request2.setPriority(1879L);
      Request request4 = request3.setCharset("us.codecraft.webmagic.samples.scheduler.DelayQueueScheduler$RequestWrapper");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      Request request0 = new Request(".$n[`VbBRE");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request1 = request0.setPriority(1L);
      // Undeclared exception!
      try { 
        spider0.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "P@al i+j");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider3.setSpawnUrl(false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-2387), 3489, 2054L, timeUnit0, synchronousQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1455);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      spider1.isSpawnUrl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider2 = spider1.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertTrue(spider1.isSpawnUrl());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1441);
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setUUID((String) null);
      spider0.isSpawnUrl();
      spider0.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider3.isExitWhenComplete();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider4 = spider1.pipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("J<3ve}C{");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider4.scheduler(duplicateRemovedScheduler0);
      int int0 = spider0.getThreadAlive();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertTrue(spider1.isSpawnUrl());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1441);
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setUUID((String) null);
      spider0.isSpawnUrl();
      spider3.isExitWhenComplete();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.pipeline(jsonFilePipeline0);
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      spider0.exitWhenComplete = false;
      spider0.isExitWhenComplete();
      spider0.getScheduler();
      spider0.clearPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider0.isExitWhenComplete();
      spider0.setSpawnUrl(false);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(1698);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      Spider spider3 = spider2.setSpawnUrl(true);
      Spider spider4 = spider3.scheduler((Scheduler) null);
      Spider spider5 = spider4.addPipeline(multiPagePipeline0);
      spider5.getStartTime();
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider6 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider6.getPageCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      Request request0 = new Request("Up,HxRO%9)[-a4<3Ukl");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.start();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page0 = new Page();
      page0.setStatusCode((-2379));
      page0.setDownloadSuccess(true);
      System.setCurrentTimeMillis((-2379));
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.setSpawnUrl(false);
      int int0 = 30000;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(30000, 31, 31, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Up,HxRO%9)[-a4<3Ukl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.pipeline(jsonFilePipeline0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Json json0 = new Json("GIMBfjsccthscNaSmv1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setDownloader((Downloader) null);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      
      boolean boolean1 = spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      spider0.setScheduler((Scheduler) null);
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setUUID("k#.1cFF_V=ttEW");
      Spider spider3 = spider1.setUUID((String) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider3.scheduler(queueScheduler0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "GIMBfjsccthscNaSmv1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GIMBfjsccthscNaSmv1", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      int int0 = 1285;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1285);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Pipeline> list1 = spider1.getAll((Collection<String>) list0);
      Spider spider4 = spider3.setPipelines(list1);
      spider4.getThreadAlive();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      Spider spider1 = spider0.setUUID("");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      jsonFilePipeline0.setPath("");
      spider0.getUUID();
      spider1.isSpawnUrl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider0.setSpawnUrl(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Stopped";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Stopped";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider.create(simplePageProcessor1);
      spider1.getUUID();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      jsonFilePipeline0.setPath("_|");
      spider0.getUUID();
      spider0.isSpawnUrl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider1.setSpawnUrl(false);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("O-&K+HUr(u1@[%&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.model.HttpRequestBody", "O-&K+HUr(u1@[%&");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.getSite();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FilePersistentBase.PATH_SEPERATOR = "Stopped";
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      spider1.sleep(37);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ClIhyC");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("ClIhyC");
      spider0.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = " stop fail!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.sleep((-2158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      assertTrue(spider1.isSpawnUrl());
      
      Spider spider2 = spider0.setSpawnUrl(false);
      Spider spider3 = spider1.pipeline(collectorPipeline0);
      spider2.getUUID();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UpAHxRO%9)[-a4<3Ukl");
      spider3.isSpawnUrl();
      spider0.isExitWhenComplete();
      boolean boolean0 = spider2.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      FilePersistentBase.PATH_SEPERATOR = "Stopped";
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider3.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.setSpawnUrl(false);
      boolean boolean1 = spider1.isExitWhenComplete();
      assertFalse(spider0.isSpawnUrl());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ClIhyC");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("ClIhyC");
      spider0.clearPipeline();
      String string0 = spider0.getUUID();
      assertNotNull(string0);
      
      boolean boolean0 = spider1.isSpawnUrl();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider1.sleep((-2158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", acceptStatCode=", ", acceptStatCode=");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      Spider spider4 = spider3.clearPipeline();
      forkJoinPool0.isShutdown();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Locale.LanguageRange> list0 = spider2.getAll((Collection<String>) linkedBlockingDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      Spider spider5 = spider4.startUrls(list1);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider5.pipeline(resultItemsCollectorPipeline0);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ClIhyC");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("");
      spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider1.sleep(0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request("$VALUES");
      Request request1 = request0.setUrl("$VALUES");
      priorityScheduler0.pushWhenNoDuplicate(request1, spider0);
      spider0.scheduler(priorityScheduler0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.pipeline((Pipeline) null);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Page.fail();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" error", (String) null);
      Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      Spider spider2 = spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider2.scheduler(queueScheduler0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider2.startRequest(list0);
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleAttributes();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      spider1.getScheduler();
      // Undeclared exception!
      try { 
        spider1.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      String[] stringArray0 = new String[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.clearPipeline();
      spider1.checkIfRunning();
      Spider spider2 = Spider.create(simplePageProcessor0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[1];
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$Status", stringArray0[0]);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Json json0 = new Json(linkedList0);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      Request[] requestArray0 = new Request[1];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      Page.fail();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      spider1.setUUID("UpAHxRO%9)[-a4<3Ukl");
      spider1.getThreadAlive();
      int int0 = 0;
      Spider spider2 = spider1.setUUID("");
      Page.fail();
      spider2.stop();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, 2628, 0L, timeUnit0, (BlockingQueue<Runnable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "/";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("/", "");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("A(1<G?j3a");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = null;
      Spider spider1 = spider0.setUUID((String) null);
      Spider spider2 = spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.scheduler(queueScheduler0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider4 = spider2.startRequest(list0);
      spider4.thread(86);
      spider4.getSpiderListeners();
      spider3.setSpiderListeners((List<SpiderListener>) null);
      spider0.setSpawnUrl(true);
      int int0 = (-2540);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-2540), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("M.E5*PS`Rc");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      Json json0 = new Json((List<String>) null);
      spider0.getSpiderListeners();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider.Status spider_Status0 = spider0.getStatus();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider_Status0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("(?is)<script.*?>.*?</script>");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("e)tt");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Page page0 = Page.fail();
      page0.getTargetRequests();
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleAttributes();
      spider0.setEmptySleepTime(173);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      Page.fail();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        spider1.get("UpAHxRO%9)[-a4<3Ukl");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      spider0.clearPipeline();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = null;
      Spider spider1 = spider0.setUUID((String) null);
      spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "UpAHxRO%9)[-a4<3Ukl";
      stringArray0[3] = null;
      stringArray0[4] = "UpAHxRO%9)[-a4<3Ukl";
      stringArray0[5] = null;
      stringArray0[6] = "UpAHxRO%9)[-a4<3Ukl";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      Page page0 = Page.fail();
      page0.setSkip(true);
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider1.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(1);
      assertEquals(Spider.Status.Running, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(2644);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<script.*?>.*?</script>");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      Request request0 = new Request("(?is)<script.*?>.*?</script>");
      Request request1 = request0.setMethod("HYKv&E");
      Request request2 = request1.putExtra("HYKv&E", spider_Status0);
      String string0 = "(m!M8G~";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Request request3 = request2.addHeader("(m!M8G~", "(?is)<script.*?>.*?</script>");
      Map<String, Object> map0 = request3.getExtras();
      Request request4 = request2.setExtras(map0);
      // Undeclared exception!
      try { 
        spider0.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Spider.Status.fromValue(2644);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<script.*?>.*?</script>");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      int int0 = 0;
      spider0.setUUID("(?is)<script.*?>.*?</script>");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Page.fail();
      spider0.stop();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(2644, 0, (-2357L), timeUnit0, (BlockingQueue<Runnable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      spider1.addUrl(stringArray0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider2.setPipelines(linkedList0);
      Spider spider3 = spider1.downloader((Downloader) null);
      spider3.runAsync();
      assertEquals(Spider.Status.Init, spider3.getStatus());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Spider.Status.fromValue(2644);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("(?is)<script.*?>.*?</script>", "(?is)<script.*?>.*?</script>");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'@l> z~Dw4nx/q2j");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.downloader(phantomJSDownloader0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2644, threadFactory0);
      spider2.setExecutorService(scheduledThreadPoolExecutor0);
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(2644);
      phantomJSDownloader1.setThread(3861);
      List<Request> list0 = null;
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.start();
      Spider spider1 = spider0.setSpawnUrl(false);
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "$E5s";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$E5s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      spider0.pipeline(jsonFilePipeline0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "abs:href";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("abs:href");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider1.setExecutorService(forkJoinPool0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setSpawnUrl(false);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      Request[] requestArray0 = new Request[0];
      spider3.addRequest(requestArray0);
      Json json0 = new Json("");
      String string1 = "x2HR95nBSY*ihP";
      // Undeclared exception!
      try { 
        json0.removePadding("x2HR95nBSY*ihP");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "?8J4F";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?8J4F");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?8J4F", "?8J4F");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      boolean boolean0 = false;
      Spider spider2 = spider1.setSpawnUrl(false);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider2.startRequest(list0);
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider3.setPipelines(linkedList0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-1657), forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "YT<,8b_Z@BlFc";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("YT<,8b_Z@BlFc");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-2387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("download page {} error", "%20");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3861, threadFactory0);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      phantomJSDownloader0.setThread(934);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      // Undeclared exception!
      try { 
        spider4.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1455);
      int int0 = 1143;
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 1143);
      Spider spider3 = spider2.setUUID(" stop fail!");
      spider3.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "POST";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("POST");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "[";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.clearPipeline();
      Page page0 = Page.fail();
      Spider.create(simplePageProcessor0);
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Spider.Status.fromValue((-1784));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Page page0 = null;
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GIMBfjsccthscNaSmv1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      spider2.scheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("GIMBfjsccthscNaSmv1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("process request ");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.setExitWhenComplete(false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, 0, (-2509L), timeUnit0, blockingQueue0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", acceptStatCode=", ", acceptStatCode=");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.Spider$1");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider2 = spider0.setScheduler(fileCacheQueueScheduler0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "us.codecraft.webmagic.Spider$1");
      Spider spider3 = spider1.setDownloader(phantomJSDownloader1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider2.run();
      CollectorPipeline collectorPipeline0 = spider3.getCollectorPipeline();
      Spider spider4 = spider2.pipeline(collectorPipeline0);
      spider0.getSpiderListeners();
      spider3.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline(", acceptStatCode=");
      spider2.addPipeline(filePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Request request0 = new Request("");
      duplicateRemovedScheduler0.push(request0, spider4);
      spider0.setScheduler(duplicateRemovedScheduler0);
      Request request1 = null;
      Spider spider5 = spider2.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider5.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zTPrG$57O7bc7(oV");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[9];
      Request request0 = new Request("zTPrG$57O7bc7(oV");
      Request request1 = request0.setUrl("zTPrG$57O7bc7(oV");
      Request request2 = request1.setPriority(0L);
      boolean boolean0 = false;
      Request request3 = request2.setBinaryContent(false);
      Request request4 = request3.addCookie("*xw>G", "zTPrG$57O7bc7(oV");
      Request request5 = request4.setCharset("_cycle_tried_times");
      requestArray0[0] = request5;
      Request request6 = request3.addHeader("*xw>G", "zTPrG$57O7bc7(oV");
      requestArray0[1] = request6;
      Request request7 = request1.setUrl("_cycle_tried_times");
      requestArray0[2] = request7;
      Request request8 = request1.addCookie("zTPrG$57O7bc7(oV", "+f0`bY'");
      requestArray0[3] = request8;
      Request request9 = request0.setUrl("");
      requestArray0[4] = request9;
      Request request10 = new Request();
      requestArray0[5] = request10;
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      ResultItems resultItems0 = page1.getResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request11 = request10.setExtras(map0);
      requestArray0[6] = request11;
      Request request12 = request11.setPriority(2763L);
      requestArray0[7] = request12;
      Request request13 = request0.setUrl("{=K#`");
      requestArray0[8] = request13;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      spider1.addPipeline(resultItemsCollectorPipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Spider is already running!";
      stringArray0[1] = "Spider is already running!";
      stringArray0[2] = "Spider is already running!";
      stringArray0[3] = "Spider is already running!";
      stringArray0[4] = "Spider is already running!";
      stringArray0[5] = "Spider is already running!";
      stringArray0[6] = "Spider is already running!";
      stringArray0[7] = "Spider is already running!";
      stringArray0[8] = "Spider is already running!";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Page page0 = Page.fail();
      Page page1 = page0.setRawText((String) null);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      Spider spider2 = spider1.addPipeline((Pipeline) null);
      spider2.setExitWhenComplete(true);
      LinkedTransferQueue<FilePipeline> linkedTransferQueue0 = new LinkedTransferQueue<FilePipeline>();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>(linkedTransferQueue0);
      spider1.setPipelines(linkedList0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 2644;
      Spider.Status.fromValue(2644);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<script.*?>.*?</script>");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      int int1 = 0;
      long long0 = (-2357L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      BlockingQueue<Runnable> blockingQueue0 = null;
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.setSpawnUrl(true);
      int int0 = (-4327);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("", (-4327));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!ermdM_&ru");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UpAHxRO%9)[-a4<3Ukl");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      Spider spider2 = spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.scheduler(queueScheduler0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider3.startRequest(list0);
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("O0A S@<J7WW#h~");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      String string0 = "downloading page: ";
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("downloading page: ");
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      int int0 = 651;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-118), 651, (-2382L), timeUnit0, (BlockingQueue<Runnable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "\"Py BTn?,~tnf~";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"Py BTn?,~tnf~");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.downloader((Downloader) null);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      spider2.thread(125);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "b9FZ9$";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b9FZ9$");
      Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("b9FZ9$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      String string1 = "$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).";
      page0.setRawText("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider0.setPipelines((List<Pipeline>) null);
      ExecutorService executorService0 = null;
      int int0 = 31;
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }
}
