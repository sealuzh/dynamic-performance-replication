/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:55:25 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3401);
      cCSMatrix0.getColumn(3401);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(9, 0.0, (Random) mockRandom0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2808, 2808, 2808);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3420);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(383);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix.identity(3158);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[0] = 1682.19425969027;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-930.788266190811);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-192);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(37, (-192), (double) (-192), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(48, 48);
      cCSMatrix0.setAll(48);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      cCSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1000;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(1000, 1000, (double) 1000, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 8, 0.3, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(7393, 7393, 7393);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.minInColumn(8);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.toBinary();
      cCSMatrix0.blankOfShape(0, 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1265, 1265);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.getRow(0);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3401);
      cCSMatrix0.min();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3710, 0);
      int int0 = 0;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(0, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CCSMatrix.from1DArray(1, 1, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(45, 45);
      Matrix matrix0 = cCSMatrix0.multiply((Matrix) cCSMatrix0);
      matrix0.toBinary();
      matrix0.max();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      cCSMatrix0.max();
      cCSMatrix0.setAll(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(2521, 2521);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2521
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(32);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 1771, 4);
      cCSMatrix0.minInColumn(147);
      cCSMatrix0.nonZeroColumnMajorIterator();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3441);
      cCSMatrix0.copyOfShape(3441, 252);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-18);
      int int1 = 3414;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-18), 3414, 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -18x3414
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 21;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(8, 21, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) columnMajorSparseMatrix0, (-746), 3754, 2062, 0, 2062, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2062x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(48, 48);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero((int) (byte)32, (int) (byte)32);
      cCSMatrix0.add((Matrix) rowMajorSparseMatrix0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 3397, 1);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      cCSMatrix0.maxInColumn(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(45, 45);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.multiply((Matrix) cCSMatrix0);
      cCSMatrix0.columnMajorIterator();
      CCSMatrix.zero(45, 27);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)9, (-136.1954126), (-136.1954126), (-136.1954126), 1520.8639195022).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.min();
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(48, 48);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(8);
      Matrix matrix0 = cCSMatrix1.removeLastRow();
      CCSMatrix.block(cCSMatrix0, matrix0, matrix0, matrix0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(3);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(623);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3420);
      cCSMatrix0.minInColumn(32);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 1510);
      int int0 = 1076;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1076, vectorFunction0);
      cCSMatrix0.removeFirstColumn();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 1510);
      int int0 = 1076;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3754, (double)3754, (double)1076, (double)1510, (double)1510).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1076, vectorFunction0);
      cCSMatrix0.removeFirstColumn();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3;
      Matrix.identity(3);
      int int1 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 1534);
      Matrix matrix0 = cCSMatrix0.copyOfRows(1534);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
      matrix0.toBinary();
      int int0 = 48;
      int int1 = 1420;
      cCSMatrix1.copyOfShape(int0, int1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(9, 9, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1265, (-1072.7793178292648));
      int[] intArray0 = new int[1];
      intArray0[0] = 48;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(48, vectorFunction0);
      long long0 = (-1L);
      cCSMatrix0.rotate();
      MockRandom mockRandom0 = new MockRandom(long0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1265, 1265);
      int[] intArray0 = new int[8];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(1265);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1265
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(48, 48);
      Double double0 = new Double(48);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (-2211.25732650723), 100.0, 100.0, (double)48).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateColumn(2, vectorFunction0);
      cCSMatrix1.removeFirstColumn();
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
      cCSMatrix1.maxInColumn(2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)9, (double)9, 1072.0, 1195.58119, 1195.58119).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction1);
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 383;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(383);
      cCSMatrix0.shuffle();
      cCSMatrix0.removeLastRow();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3754;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 1534);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1086, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3754);
      cCSMatrix1.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom(1086);
      CCSMatrix.randomSymmetric(1534, 0.03125, (Random) mockRandom0);
      int int1 = 9;
      cCSMatrix1.copyOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 1510);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1043, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(948);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.transformRow(871, vectorFunction0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      CCSMatrix.zero(1510, (-531));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3420);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(252, 3420);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)53);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1456, (int) (byte)53);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((int) (byte)32, 4);
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(49, 49);
      int[] intArray0 = new int[13];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      matrix0.minInColumn(0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 3;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1398, 3);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3754, 1534);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1086, vectorProcedure0);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }
}
