/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:36:11 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectStreamConstants;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteOrder;
import java.util.Locale;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeAscii0, 50, 50, byteArray0, byteOrder0, 50);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1717986917), 2441, fieldTypeDouble0, 2441, 2441, byteArray0, byteOrder0, 2441);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getOffset();
      assertEquals(2441, tiffField0.getDirectoryType());
      assertEquals(2441, tiffField0.getSortHint());
      assertEquals(2441, int0);
      assertEquals((-1717986917), tiffField0.getTag());
      assertEquals(19528, tiffField0.getBytesLength());
      assertEquals(2441L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat((-452), " (");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-452), (-452), fieldTypeFloat0, 1276L, 1276L, byteArray0, byteOrder0, (-452));
      int int0 = tiffField0.getDirectoryType();
      assertEquals(1276, tiffField0.getOffset());
      assertEquals((-452), tiffField0.getTag());
      assertEquals((-452), tiffField0.getSortHint());
      assertEquals((-452), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(406, "");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(406, 406, fieldTypeDouble0, 406, 406, (byte[]) null, byteOrder0, 406);
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      fieldTypeByte0.writeData(byteArray0, byteOrder0);
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeByte0, 7456L, (-517L), byteArray0, byteOrder0, 153);
      String string0 = tiffField0.getValueDescription();
      assertEquals(153, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(7456, tiffField0.getBytesLength());
      assertEquals((-517), tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(7456L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(315, 315, fieldTypeShort0, 315, 315, (byte[]) null, byteOrder0, 315);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(315, tiffField0.getDirectoryType());
      assertEquals("315 (0x13b: Artist): ", string0);
      assertEquals(315, tiffField0.getOffset());
      assertEquals(315, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(3372, 3372, fieldTypeAscii0, 3372, 3372, byteArray0, byteOrder0, 3372);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [Ljava.lang.String;@a56f15
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1328, 1328, fieldTypeByte0, 4L, 1328, byteArray0, byteOrder0, (byte)1);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(4985, (byte)1);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertNotNull(string0);
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1328, tiffField0.getDirectoryType());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Byte", string0);
      assertEquals(1328, tiffField0.getTag());
      assertEquals(1328, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2428, 2428, fieldTypeAscii0, 2428, 2428, byteArray0, byteOrder0, 2428);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [Ljava.lang.String;@44bc312f for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong0, 0, 1666L, byteArray0, byteOrder0, 0);
      boolean boolean0 = tiffField0.isLocalValue();
      assertTrue(boolean0);
      
      tiffField0.getIntValueOrArraySum();
      int int0 = tiffField0.getSortHint();
      assertEquals(0, int0);
      assertEquals(1666, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1473, 1473, fieldTypeAscii0, 1473, 1473, byteArray0, byteOrder0, 1473);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value:  for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[192];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(0, (-1551), fieldTypeFloat0, 50, (-264), byteArray0, byteOrder0, 50);
      int int0 = tiffField0.getOffset();
      assertEquals((-264), int0);
      
      System.setCurrentTimeMillis((-1551));
      tiffField0.getDoubleArrayValue();
      assertEquals(200, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-1551), tiffField0.getDirectoryType());
      assertEquals(50L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-1717986917), "");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1717986917), (-1717986917), fieldTypeDouble0, (-1717986917), (-1717986917), byteArray0, byteOrder0, (-1717986917));
      String string0 = tiffField0.getTagName();
      assertEquals((-1717986917), tiffField0.getOffset());
      assertEquals((-1717986917), tiffField0.getSortHint());
      assertEquals((-1717986917), tiffField0.getDirectoryType());
      assertEquals("Unknown Tag (0x9999999b)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[84];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(17, 17, fieldTypeAscii0.FLOAT, 17, 17, byteArray0, byteOrder0, 17);
      tiffField0.getValueDescription();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)23;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)23, (byte)23, fieldTypeRational0, (byte)23, (byte)23, byteArray0, byteOrder0, (byte)23);
      tiffField0.getIntArrayValue();
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(23, tiffField0.getOffset());
      assertEquals(23, tiffField0.getDirectoryType());
      assertEquals(23, tiffField0.getTag());
      assertEquals(184, tiffField0.getBytesLength());
      assertEquals(23L, tiffField0.getCount());
      assertFalse(boolean0);
      assertEquals(23, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-2119), (-2119), fieldTypeLong0, 801L, (-2119), byteArray0, byteOrder0, (-2119));
      tiffField0.getIntArrayValue();
      assertEquals((-2119), tiffField0.getOffset());
      assertEquals(801L, tiffField0.getCount());
      assertEquals(3204, tiffField0.getBytesLength());
      assertEquals((-2119), tiffField0.getTag());
      assertEquals((-2119), tiffField0.getSortHint());
      assertEquals((-2119), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(617, 617, fieldTypeAscii0.DOUBLE, 617, 617, byteArray0, byteOrder0, 617);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@4690d3ec for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(50, 429, fieldTypeShort0, 0L, (-2147483648L), byteArray0, (ByteOrder) null, 10);
      String string0 = tiffField0.getValueDescription();
      assertEquals(429, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getTag());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(10, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(335, 335, fieldTypeShort0, 335, 2882L, byteArray0, byteOrder0, 28);
      tiffField0.getFieldTypeName();
      tiffField0.getIntArrayValue();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[227];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((-1171), (-1171), fieldTypeFloat0, 1L, (-1171), byteArray0, byteOrder0, 19);
      String string0 = tiffField0.getValueDescription();
      assertEquals((-1171), tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-1171), tiffField0.getTag());
      assertEquals(19, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals((-1171), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[257];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(270, 270, fieldTypeShort0, 270, 270, byteArray0, byteOrder0, 270);
      String string0 = tiffField0.getValueDescription();
      assertEquals(270, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(270L, tiffField0.getCount());
      assertEquals(270, tiffField0.getDirectoryType());
      assertEquals(540, tiffField0.getBytesLength());
      assertEquals(270, tiffField0.getSortHint());
      assertEquals(270, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(16, "LNf9Uem<6g");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)49;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(16, 16, fieldTypeShort0, 1L, (-2147483648L), byteArray0, byteOrder0, (byte)0);
      tiffField0.getDoubleArrayValue();
      assertEquals(16, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(16, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
      assertEquals(2, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50966, 50966, fieldTypeLong0, 957L, 0L, byteArray0, byteOrder0, (byte)2);
      tiffField0.getDoubleArrayValue();
      assertEquals(50966, tiffField0.getTag());
      assertEquals(50966, tiffField0.getDirectoryType());
      assertEquals(957L, tiffField0.getCount());
      assertEquals(2, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(3828, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(41988, (-2220), fieldTypeLong0, 168L, 5201L, byteArray0, byteOrder0, 3221);
      String string0 = tiffField0.getTagName();
      assertEquals("DigitalZoomRatio", string0);
      assertEquals((-2220), tiffField0.getDirectoryType());
      assertEquals(5201, tiffField0.getOffset());
      assertEquals(3221, tiffField0.getSortHint());
      assertEquals(41988, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)0, 636, fieldTypeAscii0, (byte)0, 636, byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(636, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(636, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(617, 617, fieldTypeAscii0.DOUBLE, 617, 617, byteArray0, byteOrder0, 617);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      tiffField0.getValueDescription();
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotSame(byteOrder2, byteOrder1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[128];
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(48, (-1043), fieldTypeLong0, 3032L, (-4391L), byteArray0, byteOrder0, 10);
      tiffField0.getIntValueOrArraySum();
      int int0 = Short.BYTES;
      tiffField0.getTag();
      String string0 = File.separator;
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat((-3980), "=s{kq+c");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)39;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1037, 1037, fieldTypeFloat0, 1L, 1L, byteArray0, byteOrder0, (byte)0);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(1L, tiffField0.getCount());
      assertNull(tiffElement0);
      
      tiffField0.getIntArrayValue();
      assertEquals(1037, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1037, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[197];
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(21, (-1841), fieldTypeLong0, (byte)2, 4L, byteArray0, byteOrder0, 25);
      String string0 = tiffField0.getValueDescription();
      assertEquals("0, 0", string0);
      assertNotNull(string0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(21, tiffField0.getTag());
      assertNotNull(tiffElement0);
      assertEquals(25, tiffField0.getSortHint());
      assertEquals(4L, tiffElement0.offset);
      assertEquals((-1841), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeAscii0, 50, 4L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "java.lang.String@0000000002, java.lang.String@0000000003");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat((-3980), "=s{kq+c");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)39;
      TiffField tiffField0 = new TiffField(1037, (-3980), fieldTypeFloat0, 1L, 1887L, byteArray0, byteOrder0, (byte)39);
      tiffField0.getIntValueOrArraySum();
      int int0 = tiffField0.getOffset();
      assertEquals(1037, tiffField0.getTag());
      assertEquals(1887, int0);
      assertEquals((-3980), tiffField0.getDirectoryType());
      assertEquals(39, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-2169), (-2169), fieldTypeLong0, (-2169), (-2169), (byte[]) null, byteOrder0, (-2169));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-2169), 2146381809);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertNull(string0);
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals((-2169), tiffField0.getDirectoryType());
      assertEquals((-2169), tiffField0.getTag());
      assertEquals((-2169), tiffField0.getOffset());
      assertEquals((-2169), tiffField0.getSortHint());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1), 65535, fieldTypeAscii0, 1L, 168L, byteArray0, byteOrder0, (-2262));
      assertEquals(1, tiffField0.getBytesLength());
      
      String string0 = tiffField0.getStringValue();
      assertEquals((-2262), tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(168, tiffField0.getOffset());
      assertEquals(65535, tiffField0.getDirectoryType());
      assertEquals((-1), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[198];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField((byte) (-5), (-64), fieldTypeShort0, 5279L, 1L, byteArray0, (ByteOrder) null, (byte)48);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-64), tiffField0.getDirectoryType());
      assertEquals(0, int0);
      assertEquals(1, tiffField0.getOffset());
      assertEquals(48, tiffField0.getSortHint());
      assertEquals((-5), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField((-434), (byte)0, fieldTypeShort0, 50, (byte)0, byteArray0, byteOrder0, 50);
      tiffField0.getDoubleArrayValue();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[7] = (byte)45;
      byteArray0[5] = (byte)25;
      byteArray0[7] = (byte)3;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(32, 32, fieldTypeRational0, 32, 32, byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(1, int0);
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(32, tiffField0.getTag());
      assertEquals(32, tiffField0.getOffset());
      assertEquals(32, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1717986939), 2441, fieldTypeDouble0, 2441, 2441, byteArray0, byteOrder0, 2441);
      byteOrder0.toString();
      int int0 = tiffField0.getOffset();
      assertEquals(2441, int0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(2441, tiffField0.getDirectoryType());
      assertEquals(2441, tiffField0.getSortHint());
      assertEquals((-1717986939), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      long long0 = 932L;
      TiffField tiffField0 = new TiffField((byte) (-22), (byte) (-22), fieldTypeRational0, 932L, (byte) (-22), byteArray0, byteOrder0, (byte) (-22));
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[116];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1753, 1753, fieldTypeAscii0, 1753, 1753, byteArray0, byteOrder0, 1753);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(1753L, tiffElement0.offset);
      assertNotNull(tiffElement0);
      assertEquals(1753, tiffField0.getDirectoryType());
      assertEquals(1753, tiffField0.getSortHint());
      assertEquals(1753, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational((-1678), "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)1, 1779, fieldTypeRational0, 2106L, (byte) (-49), byteArray0, byteOrder0, (byte) (-49));
      ByteOrder.nativeOrder();
      tiffField0.getDoubleArrayValue();
      int int0 = Pattern.MULTILINE;
      int int1 = Float.MAX_EXPONENT;
      try { 
        FieldType.getFieldType(127);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 127 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[215];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField((byte)2, (-485), fieldTypeByte0, 305, (-485), byteArray0, byteOrder0, 3176);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(3176, tiffField0.getSortHint());
      assertEquals((-485), tiffField0.getDirectoryType());
      assertNotNull(tiffElement0);
      assertEquals(2, tiffField0.getTag());
      assertEquals((-485L), tiffElement0.offset);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[215];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(305, 305, fieldTypeFloat0, 305, 305, byteArray0, byteOrder0, 305);
      tiffField0.getValueDescription();
      tiffField0.getOffset();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (53)");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[217];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong0, 9752L, 2944L, byteArray0, byteOrder0, 13);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      tiffField0.getValueDescription();
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      int int0 = (-3356);
      Object object0 = new Object();
      try { 
        fieldTypeLong0.writeData(object0, byteOrder2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: java.lang.Object@3ab45034 (java.lang.Object)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[420];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2145, 2145, fieldTypeDouble0, 3562L, 3562L, byteArray0, byteOrder0, 2145);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField1 = new TiffField(2145, 2145, fieldTypeDouble0, 1L, 2145, byteArray0, byteOrder0, 2145);
      tiffField0.toString();
      tiffField1.getDoubleValue();
      ByteOrder byteOrder3 = ByteOrder.LITTLE_ENDIAN;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("2145 (0x861: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (3562 Double)", "2145 (0x861: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (3562 Double)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2145 (0x861: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (3562 Double)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
