/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:39:46 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.CharacterCodec;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass("</}EW i");
      TypeUtils.getCollectionItemClass((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("</}EW i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : </}EW i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getParserFeatures(class0);
      Class<?> class1 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", (ClassLoader) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      TypeUtils.getGenericParamType(genericArrayType0);
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Mv", "Mv");
      sQLTimeoutException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Mv", "Mv", "Mv", (-762));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListSet", "Mv", "mr", (-762));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLTimeoutException0);
      TypeUtils.isHibernateInitialized(mockIllegalStateException0);
      TypeUtils.fnv1a_64_lower("g(iQ84|lfaiS;<v9D}");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("OsOIB$cw,{H-ywa");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("OsOIB$cw,{H-ywa");
      outOfMemoryError0.getSuppressed();
      // Undeclared exception!
      try { 
        outOfMemoryError0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Collection<String> collection0 = hashMap0.values();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(collection0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThread mockThread0 = new MockThread("can not get javaBeanDeserializer. ");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("org.springframework.security.web.authentication.WebAuthenticationDetails", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long((-910L));
      TypeUtils.castToFloat(long0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "Ljava.awt.Color";
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.awt.Color");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Color
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Dyycl?l\"E-K1+jW6\"", "toJdbc");
      hashMap0.values();
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.loadClass("()I");
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.getClass((Type) class0);
      TypeUtils typeUtils0 = new TypeUtils();
      int int0 = Opcodes.RET;
      TypeUtils typeUtils1 = new TypeUtils();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      Class<DecimalFormat> class1 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) typeUtils0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put(".000000000", "j(a+r ZY<Uj`.F");
      Class<Date> class0 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      Class<UUID> class1 = UUID.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.toLocale("?O{z[?@k");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = Calendar.LONG;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.toLocale("?O{z[?@k");
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.loadClass("syntax error, unexpect token ':'");
      Class<Locale> class1 = Locale.class;
      TypeUtils.isProxy(class1);
      ThreadGroup threadGroup0 = new ThreadGroup("syntax error, unexpect token ':'");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      mockThread0.setUncaughtExceptionHandler(threadGroup0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("?O{z[?@k", classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.loadClass("getLocalizedMessage");
      TypeUtils.getCollectionItemClass((Type) null);
      Character character0 = Character.valueOf('D');
      Character.lowSurrogate(2100);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.isNumber("5kG,HcM1m;YUoeyD8-p");
      TypeUtils.castToBytes("5kG,HcM1m;YUoeyD8-p");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(".000000000", (Throwable) null);
      MockThread mockThread0 = new MockThread();
      mockThread0.getContextClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread.currentThread();
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[4];
      threadGroupArray0[0] = null;
      threadGroupArray0[3] = null;
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.fnv1a_64("Ljava.util.concurrent.ConcurrentSkipListSet");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      MockThread.currentThread();
      MockThread.dumpStack();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("kl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : kl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLException sQLException0 = new SQLException("Ljava.awt.Rectangle", "=xWu=c_L");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@f13e9a5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.getCollectionItemClass(class0);
      ThreadGroup threadGroup0 = new ThreadGroup("false");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      Double double0 = new Double(563.8597);
      Double double1 = TypeUtils.castToDouble(double0);
      assertEquals(563.8597, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = Character.MIN_CODE_POINT;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.putIfAbsent("|:&]@HWCf", "-.(6''f/4V*98 !Z");
      TypeUtils.castToBoolean((Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".zi>");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToString((Object) null);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<DataTruncation> class0 = DataTruncation.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<java.sql.Date> class0 = java.sql.Date.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "dd/MM/yyyy HH:mm:ss";
      TypeUtils.isNumber("dd/MM/yyyy HH:mm:ss");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("dd/MM/yyyy HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : dd/MM/yyyy HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "LI$m";
      TypeUtils.toLocale("LI$m");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.isKotlin(class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      Float float0 = new Float((-1757.80229263524));
      Date date0 = TypeUtils.castToDate(float0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("NULL", (Throwable) null);
      sQLDataException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLDataException: NULL
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig.getGlobalInstance();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<Annotation> class1 = Annotation.class;
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      String string0 = TypeUtils.castToString(class1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "";
      TypeUtils.loadClass("", (ClassLoader) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.isPath(class0);
      Class<Boolean> class1 = Boolean.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.getDeserializer((Type) class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      int int1 = Character.MIN_CODE_POINT;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(".0000000T00", (Throwable) null);
      boolean boolean0 = TypeUtils.isNumber(".0000000T00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.loadClass("(dx-/Rj/s>e:U0");
      Class<JSONObject> class0 = JSONObject.class;
      TypeUtils.isProxy(class0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      MockUUID.fromString("(dx-/Rj/s>e:U0");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<MockCalendar> class1 = MockCalendar.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      LinkedHashMap<SQLClientInfoException, Properties> linkedHashMap1 = new LinkedHashMap<SQLClientInfoException, Properties>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      int int0 = Character.MIN_CODE_POINT;
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isNumber("getClass");
      Double double0 = Double.valueOf((-4441.469));
      Short short0 = TypeUtils.castToShort(double0);
      assertEquals((short) (-4441), (short)short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.isTransient((Method) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(".000000000", (Throwable) null);
      TypeUtils.isNumber("val");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("val");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"val\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<SecurityException> class0 = SecurityException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.putIfAbsent("Ljava.util.concurrent.ConcurrentSkipListMap", "-.(6''f/4V*98 !Z");
      weakHashMap0.put((String) null, "KJ");
      weakHashMap0.getOrDefault((Object) null, (String) null);
      weakHashMap0.containsKey(class0);
      Locale locale0 = JSON.defaultLocale;
      Collator collator0 = Collator.getInstance(locale0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(collator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<NumberFormat> class1 = NumberFormat.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      TypeUtils.fnv1a_64("L");
      TypeUtils.fnv1a_64_lower("Eu5`[arDBOd7");
      WeakHashMap<RenderingHints.Key, MapDeserializer> weakHashMap1 = new WeakHashMap<RenderingHints.Key, MapDeserializer>();
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap1);
      Class<Short> class2 = Short.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("NotWriteRootClassName");
      SQLDataException sQLDataException0 = new SQLDataException("KJ", stackOverflowError0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLDataException0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLDataException: KJ
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.getParserFeatures(class0);
      int int0 = Character.MIN_CODE_POINT;
      TypeUtils typeUtils0 = new TypeUtils();
      LinkageError linkageError0 = new LinkageError("org.springframework.security.web.authentication.WebAuthenticationDetails", (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(linkageError0);
      MockException mockException0 = new MockException(sQLTransientException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(mockException0);
      TypeUtils.isNumber("j");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(linkageError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.LinkageError: org.springframework.security.web.authentication.WebAuthenticationDetails
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = Character.MIN_CODE_POINT;
      assertEquals(0, int0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)44, (byte)44}, byteArray0);
      
      java.sql.Date date0 = new java.sql.Date((byte)44);
      assertNotNull(date0);
      
      LinkedHashMap<SimpleDateFormat, java.sql.Date> linkedHashMap0 = new LinkedHashMap<SimpleDateFormat, java.sql.Date>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setDefaultAssertionStatus(true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, null, public com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer(com.alibaba.fastjson.parser.ParserConfig,java.lang.Class<?>)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<Float> class1 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      String string0 = identityHashMap0.put("java.awt.Rectangle", "T<b$Nd7>T");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("([C)J", weakHashMap0);
      assertNull(field0);
      
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(biFunction0).apply(any() , any());
      Field field1 = weakHashMap0.compute("java.awt.Rectangle", biFunction0);
      assertNull(field1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType1).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType1);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "([C)J", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertNotNull(class0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      String string0 = linkedHashMap0.put((String) null, (String) null);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(string0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("\"wz7go6");
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "\"wz7go6");
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertEquals("\"wz7go6", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "S");
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertEquals("\"wz7go6", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      LinkedHashMap<SimpleDateFormat, java.sql.Date> linkedHashMap1 = new LinkedHashMap<SimpleDateFormat, java.sql.Date>();
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertNotNull(linkedHashMap1);
      
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Class<String> class2 = String.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      int int1 = Character.MIN_CODE_POINT;
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, (JSONType) null);
      assertNull(class2);
      
      Class<Float> class3 = Float.TYPE;
      assertFalse(class3.isAnnotation());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("float", class3.toString());
      assertFalse(class3.isInterface());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class3;
      typeArray0[2] = (Type) class3;
      typeArray0[3] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeAccept", "D>zAarJ", (Throwable) null);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.autoTypeAccept", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", sQLTransactionRollbackException0.getMessage());
      assertEquals("D>zAarJ", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(serializeBeanInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class1 = TypeUtils.loadClass((String) null, (ClassLoader) null, true);
      assertNull(class1);
      
      Class<PageAttributes> class2 = PageAttributes.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("false");
      assertEquals("false", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("^DuTRBv8iYdIz");
      assertEquals("^DuTRBv8iYdIz", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      CharacterCodec characterCodec0 = CharacterCodec.instance;
      assertEquals(4, characterCodec0.getFastMatchToken());
      assertNotNull(characterCodec0);
      
      parserConfig0.putDeserializer((Type) null, characterCodec0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(4, characterCodec0.getFastMatchToken());
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "{[!=2*4{iJ(VMj", fieldArray0);
      assertNull(field0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".000000000");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("FQbus$G", (Throwable) null);
      assertNotNull(mockIllegalArgumentException0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("(dx-/Rj/s>e:U0");
      assertNull(class0);
      
      Class<JSONObject> class1 = JSONObject.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      UUID uUID0 = MockUUID.fromString("(dx-/Rj/s>e:U0");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<MockCalendar> class2 = MockCalendar.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      ChronoLocalDate chronoLocalDate0 = TypeUtils.cast((Object) linkedHashMap0, (Type) class2, (ParserConfig) null);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("syntax error, unexpect token ':'");
      assertNull(class0);
      
      Class<Locale> class1 = Locale.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("syntax error, unexpect token ':'");
      assertEquals("syntax error, unexpect token ':'", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("syntax error, unexpect token ':'", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      Class<?> class2 = JavaBeanInfo.getBuilderClass((Class<?>) null, (JSONType) null);
      assertNull(class2);
      
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Point point0 = new Point(641, 641);
      assertEquals(641, point0.x);
      assertEquals(641, point0.y);
      assertEquals(641.0, point0.getX(), 0.01);
      assertEquals(641.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertEquals(641, point0.x);
      assertEquals(641, point0.y);
      assertEquals(641, point1.x);
      assertEquals(641, point1.y);
      assertEquals(641.0, point0.getX(), 0.01);
      assertEquals(641.0, point0.getY(), 0.01);
      assertEquals(641.0, point1.getX(), 0.01);
      assertEquals(641.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<SQLWarning> class0 = SQLWarning.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class<Annotation> class1 = Annotation.class;
      Class<Long> class2 = Long.class;
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class3.isArray());
      assertEquals("interface java.lang.annotation.Annotation", class3.toString());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1537, class3.getModifiers());
      assertNotNull(class3);
      
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<InternalError> class4 = InternalError.class;
      InternalError internalError0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class4, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNotNull(internalError0);
      
      JobAttributes jobAttributes0 = TypeUtils.cast((Object) null, (Type) class2, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(jobAttributes0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "{[!=2*4{iJ(VMj", fieldArray0);
      assertNull(field0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Class<SQLException> class1 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<NoSuchFieldError> class2 = NoSuchFieldError.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType1).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, jSONType1);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.NoSuchFieldError", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.castToString(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(string0);
      
      Locale locale0 = TypeUtils.toLocale("java.util.IdentityHashMap@0000000001");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("{[!=2*4{iJ(VMj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Type type0 = null;
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("xH]`].6UKfqf]6");
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("j(a+r ZY<Uj`.F", "xH]`].6UKfqf]6");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setDefaultAssertionStatus(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("false");
      assertEquals("false", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      CharacterCodec characterCodec0 = CharacterCodec.instance;
      assertEquals(4, characterCodec0.getFastMatchToken());
      assertNotNull(characterCodec0);
      
      parserConfig0.putDeserializer(class0, characterCodec0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(4, characterCodec0.getFastMatchToken());
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "false", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("getMetaClass", "&");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("JO GA48a", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      String string2 = ParserConfig.AUTOTYPE_ACCEPT;
      assertEquals("fastjson.parser.autoTypeAccept", string2);
      assertNotNull(string2);
      
      String string3 = hashMap0.put(".fWAYq[i/ZJZo[-02\"", "&");
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string3);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ClassLoader classLoader3 = classLoader0.getParent();
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader3, classLoader1);
      assertNotNull(classLoader3);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader2));
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class1 = TypeUtils.loadClass((String) null, classLoader2, true);
      assertSame(classLoader2, classLoader0);
      assertNull(class1);
      assertFalse(classLoader2.equals((Object)classLoader3));
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ClassLoader classLoader4 = classLoader0.getParent();
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader4, classLoader3);
      assertSame(classLoader4, classLoader1);
      assertNotNull(classLoader4);
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader4.equals((Object)classLoader2));
      assertFalse(classLoader4.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader4));
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader4);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertFalse(classLoader0.equals((Object)classLoader4));
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader4.equals((Object)classLoader2));
      assertFalse(classLoader4.equals((Object)classLoader0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "JO GA48a", (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<Short> class0 = Short.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = Character.MIN_CODE_POINT;
      assertEquals(0, int0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("F%g5.5fB", (Throwable) null);
      assertNotNull(mockIllegalArgumentException0);
      
      boolean boolean0 = TypeUtils.isNumber(".0000000T00");
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNotNull(timeDeserializer0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<SecurityException> class0 = SecurityException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.putIfAbsent("Ljava.util.concurrent.ConcurrentSkipListMap", "-.(6''f/4V*98 !Z");
      assertNull(string0);
      
      String string1 = weakHashMap0.put((String) null, "KJ");
      assertNull(string1);
      
      String string2 = weakHashMap0.getOrDefault((Object) null, (String) null);
      assertEquals("KJ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = weakHashMap0.containsKey(class0);
      assertFalse(boolean0);
      
      Locale locale0 = JSON.defaultLocale;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertNotNull(ruleBasedCollator0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(ruleBasedCollator0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      
      long long0 = TypeUtils.fnv1a_64("L");
      assertEquals((-5808516191223665813L), long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("Eu5`[arDBOd7");
      assertEquals((-3899572475606613994L), long1);
      assertFalse(long1 == long0);
      
      WeakHashMap<RenderingHints.Key, MapDeserializer> weakHashMap1 = new WeakHashMap<RenderingHints.Key, MapDeserializer>();
      assertNotNull(weakHashMap1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[O(\"", classLoader0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Class<?> class0 = TypeUtils.loadClass("char");
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<InternalError> class1 = InternalError.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(mockGregorianCalendar0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Integer", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<SQLException> class2 = SQLException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      NavigableMap<String, String> navigableMap0 = treeMap0.headMap(".000000000", false);
      assertEquals(0, treeMap0.size());
      assertEquals(0, navigableMap0.size());
      assertTrue(navigableMap0.isEmpty());
      assertNotNull(navigableMap0);
      
      String string0 = treeMap0.put("NonStringKeyAsString", "NonStringKeyAsString");
      assertEquals(1, treeMap0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      assertEquals(1, treeMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      String string1 = TypeUtils.decapitalize("W#<Y1M");
      assertEquals("w#<Y1M", string1);
      assertNotNull(string1);
      
      Locale locale0 = TypeUtils.toLocale("syntax error, unexpect token ");
      assertEquals("syntax error, unexpect token ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("syntax error, unexpect token ", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = Character.compare('N', 'G');
      assertEquals(7, int0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      TypeUtils typeUtils1 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils1);
      assertFalse(typeUtils1.equals((Object)typeUtils0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<SQLWarning> class0 = SQLWarning.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Class<Annotation> class1 = Annotation.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) class0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      
      Class<Long> class2 = Long.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class1);
      assertNull(annotation0);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals("interface java.lang.annotation.Annotation", class3.toString());
      assertTrue(class3.isInterface());
      assertEquals(1537, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertNotNull(class3);
      
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<InternalError> class4 = InternalError.class;
      InternalError internalError0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class4, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = Calendar.LONG;
      assertEquals(2, int0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field[] fieldArray0 = new Field[1];
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Field field0 = weakHashMap0.compute("", biFunction0);
      assertNull(field0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, (JSONType) null);
      assertNull(class2);
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) null;
      Class<Float> class3 = Float.TYPE;
      assertFalse(class3.isInterface());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("float", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      typeArray0[1] = (Type) class3;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class4 = TypeUtils.loadClass("", classLoader1, false);
      assertNull(class4);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ChronoLocalDate chronoLocalDate0 = TypeUtils.cast((Object) null, typeArray0[0], parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(chronoLocalDate0);
      
      BigDecimal bigDecimal0 = new BigDecimal(203.0);
      assertEquals((short)203, bigDecimal0.shortValue());
      assertEquals((byte) (-53), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(bigDecimal0);
      assertEquals((short)203, bigDecimal0.shortValue());
      assertEquals((byte) (-53), bigDecimal0.byteValue());
      assertEquals("1970-01-01 00:00:00.203", timestamp0.toString());
      assertEquals(203000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "{[!=2*4{iJ(VMj", fieldArray0);
      assertNull(field0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Class<SQLException> class1 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<NoSuchFieldError> class2 = NoSuchFieldError.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType1).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, jSONType1);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.NoSuchFieldError", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[0]);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      CharacterCodec characterCodec0 = CharacterCodec.instance;
      assertEquals(4, characterCodec0.getFastMatchToken());
      assertNotNull(characterCodec0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      parserConfig0.putDeserializer(class1, characterCodec0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(4, characterCodec0.getFastMatchToken());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.ParserConfig@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.putIfAbsent("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = Calendar.LONG;
      assertEquals(2, int0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "gt");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertEquals("gt", threadGroup2.getName());
      assertNotNull(threadGroup2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[4];
      threadGroupArray0[0] = threadGroup1;
      threadGroupArray0[1] = threadGroup1;
      threadGroupArray0[2] = threadGroup1;
      threadGroupArray0[3] = threadGroup2;
      int int1 = threadGroup1.enumerate(threadGroupArray0, false);
      assertEquals(1, int1);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(threadGroup1, threadGroup0);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(int1 == int0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      
      Class<?> class0 = TypeUtils.loadClass("org.springframework.remoting.support.RemoteInvocation", classLoader0, false);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNull(class0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertSame(classLoader1, classLoader0);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.util.TypeUtils", classLoader1, false);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertSame(classLoader1, classLoader0);
      assertEquals("class com.alibaba.fastjson.util.TypeUtils", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(class1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.util\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = new Long((-910L));
      assertEquals((-910L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-910.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long1 = TypeUtils.castToLong(long0);
      assertEquals((-910L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      classLoader0.setDefaultAssertionStatus(true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader0.clearAssertionStatus();
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader1.clearAssertionStatus();
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      classLoader1.setPackageAssertionStatus("CustomMapDeserializer", true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus("CustomMapDeserializer", true);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      classLoader0.clearAssertionStatus();
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class0 = TypeUtils.loadClass("CustomMapDeserializer", classLoader1, false);
      assertSame(classLoader0, classLoader2);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader2.clearAssertionStatus();
      assertSame(classLoader2, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader3, classLoader0);
      assertSame(classLoader3, classLoader2);
      assertNotNull(classLoader3);
      assertFalse(classLoader3.equals((Object)classLoader1));
      
      Class<?> class2 = TypeUtils.loadClass((String) null);
      assertNull(class2);
      
      Class<BigInteger> class3 = BigInteger.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader2);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNull(field0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, class3, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sun.mis\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertSame(class2, class1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      Time time0 = TypeUtils.castToSqlTime(calendar0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertNotNull(time0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Class<Annotation> class3 = Annotation.class;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class4, class3);
      assertNull(annotation0);
      
      Class class5 = (Class)TypeUtils.unwrapOptional(class3);
      assertTrue(class5.isInterface());
      assertEquals(1537, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isArray());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertEquals("interface java.lang.annotation.Annotation", class5.toString());
      assertNotNull(class5);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class<Byte> class1 = Byte.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache(", fastjson-version ", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo(", fastjson-version ", class0, class1, class0, (Field) null, (-271), 953, 953);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(953, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(953, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(", fastjson-version ", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      
      Field field1 = hashMap0.put(", fastjson-version ", (Field) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(field1);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(953, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(953, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(", fastjson-version ", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(", fastjson-version ", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(953, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertNotNull(beanContext0);
      
      Class<?> class2 = beanContext0.getBeanClass();
      assertFalse(fieldInfo0.getOnly);
      assertEquals(953, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(953, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(", fastjson-version ", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(", fastjson-version ", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(953, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.NoSuchMethodException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class2);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(953, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(953, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertNotSame(class2, class3);
      assertNotSame(class3, class2);
      assertEquals(", fastjson-version ", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(", fastjson-version ", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(953, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.NoSuchMethodException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class2));
      
      Field field2 = hashMap0.put("gethashCode", (Field) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(field2);
      
      Integer integer0 = new Integer(953);
      assertEquals(953, (int)integer0);
      assertNotNull(integer0);
      
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      Class<Currency> class5 = Currency.class;
      Class class6 = (Class)FieldInfo.getFieldType(class5, class2, class0);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(953, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(953, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertNotSame(class2, class3);
      assertEquals(", fastjson-version ", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(", fastjson-version ", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(953, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.NoSuchMethodException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isInterface());
      assertFalse(class6.isPrimitive());
      assertEquals(1, class6.getModifiers());
      assertFalse(class6.isArray());
      assertEquals("class java.lang.NoSuchMethodException", class6.toString());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertNotNull(class6);
      assertFalse(class2.equals((Object)class3));
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) integer0, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      int int0 = Opcodes.RET;
      assertEquals(169, int0);
      
      TypeUtils typeUtils1 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils1);
      assertFalse(typeUtils1.equals((Object)typeUtils0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<Short> class2 = Short.TYPE;
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("short", class2.toString());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getClassFromMapping("org.springframework.security.web.authentication.WebAuthenticationDetails");
      assertNull(class3);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Constructor<BreakIterator>[] constructorArray0 = (Constructor<BreakIterator>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r");
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("java.java.lang.Integer");
      assertEquals("java.java.lang.Integer", string0);
      assertNotNull(string0);
      
      Class<Float> class0 = Float.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string1 = "9z0]";
      String string2 = hashMap0.put("java.java.lang.Integer", "9z0]");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      HttpCookie httpCookie0 = new HttpCookie("9e7#ae!eFvdG3p^rHDF", "encodeUTF8 error");
      assertNull(httpCookie0.getCommentURL());
      assertEquals(1, httpCookie0.getVersion());
      assertFalse(httpCookie0.hasExpired());
      assertFalse(httpCookie0.getSecure());
      assertEquals("9e7#ae!eFvdG3p^rHDF", httpCookie0.getName());
      assertNull(httpCookie0.getPortlist());
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertFalse(httpCookie0.isHttpOnly());
      assertEquals("encodeUTF8 error", httpCookie0.getValue());
      assertEquals("9e7#ae!eFvdG3p^rHDF=\"encodeUTF8 error\"", httpCookie0.toString());
      assertNull(httpCookie0.getPath());
      assertFalse(httpCookie0.getDiscard());
      assertNull(httpCookie0.getComment());
      assertNull(httpCookie0.getDomain());
      assertNotNull(httpCookie0);
      
      HttpCookie httpCookie1 = (HttpCookie)httpCookie0.clone();
      assertNotSame(httpCookie0, httpCookie1);
      assertNotSame(httpCookie1, httpCookie0);
      assertNull(httpCookie0.getCommentURL());
      assertEquals(1, httpCookie0.getVersion());
      assertFalse(httpCookie0.hasExpired());
      assertFalse(httpCookie0.getSecure());
      assertEquals("9e7#ae!eFvdG3p^rHDF", httpCookie0.getName());
      assertNull(httpCookie0.getPortlist());
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertFalse(httpCookie0.isHttpOnly());
      assertEquals("encodeUTF8 error", httpCookie0.getValue());
      assertEquals("9e7#ae!eFvdG3p^rHDF=\"encodeUTF8 error\"", httpCookie0.toString());
      assertNull(httpCookie0.getPath());
      assertFalse(httpCookie0.getDiscard());
      assertNull(httpCookie0.getComment());
      assertNull(httpCookie0.getDomain());
      assertNull(httpCookie1.getCommentURL());
      assertFalse(httpCookie1.getDiscard());
      assertEquals(1, httpCookie1.getVersion());
      assertFalse(httpCookie1.hasExpired());
      assertEquals("encodeUTF8 error", httpCookie1.getValue());
      assertNull(httpCookie1.getPath());
      assertNull(httpCookie1.getComment());
      assertFalse(httpCookie1.isHttpOnly());
      assertNull(httpCookie1.getDomain());
      assertNull(httpCookie1.getPortlist());
      assertEquals((-1L), httpCookie1.getMaxAge());
      assertEquals("9e7#ae!eFvdG3p^rHDF=\"encodeUTF8 error\"", httpCookie1.toString());
      assertFalse(httpCookie1.getSecure());
      assertEquals("9e7#ae!eFvdG3p^rHDF", httpCookie1.getName());
      assertNotNull(httpCookie1);
      assertTrue(httpCookie1.equals((Object)httpCookie0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : 9e7#ae!eFvdG3p^rHDF=\"encodeUTF8 error\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class<DecimalFormat> class0 = DecimalFormat.class;
      DecimalFormat decimalFormat0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(decimalFormat0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Collection<String> collection0 = hashMap0.values();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(collection0);
      
      boolean boolean1 = TypeUtils.isNumber("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      assertNotNull(imageCapabilities0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("kotlin.ranges.CharRange", "kotlin.ranges.CharRange");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<Float> class1 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
      
      Throwable[] throwableArray0 = noSuchMethodException0.getSuppressed();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(throwableArray0);
      
      LinkageError linkageError0 = new LinkageError("org.springframework.security.web.authentication.WebAuthenticationDetails", noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.LinkageError: org.springframework.security.web.authentication.WebAuthenticationDetails", linkageError0.toString());
      assertEquals("org.springframework.security.web.authentication.WebAuthenticationDetails", linkageError0.getMessage());
      assertNotNull(linkageError0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(linkageError0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.LinkageError: org.springframework.security.web.authentication.WebAuthenticationDetails", linkageError0.toString());
      assertEquals("org.springframework.security.web.authentication.WebAuthenticationDetails", linkageError0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.lang.LinkageError: org.springframework.security.web.authentication.WebAuthenticationDetails", sQLTransientException0.toString());
      assertEquals("java.lang.LinkageError: org.springframework.security.web.authentication.WebAuthenticationDetails", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("getAvailableCalendarTypes", "org.springframework.security.web.authentication.WebAuthenticationDetails");
      assertNull(string0);
      
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<NoClassDefFoundError> class4 = NoClassDefFoundError.class;
      Class<Double> class5 = Double.class;
      FieldInfo fieldInfo0 = new FieldInfo("getAvailableCalendarTypes", class4, class5, class0, (Field) null, 53, (-1795113739), (-3665));
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-3665), fieldInfo0.parserFeatures);
      assertEquals((-1795113739), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getAvailableCalendarTypes", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-3665), fieldInfo0.parserFeatures);
      assertEquals((-1795113739), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getAvailableCalendarTypes", fieldInfo0.toString());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("getAvailableCalendarTypes", beanContext0.getName());
      assertEquals((-1795113739), beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-3665), fieldInfo0.parserFeatures);
      assertEquals((-1795113739), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getAvailableCalendarTypes", fieldInfo0.toString());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("getAvailableCalendarTypes", beanContext0.getName());
      assertEquals((-1795113739), beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertNull(method0);
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("scanFieldIntBArray", "height");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("height", "aVIM'mGc6Dk.O#K]LeJ");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      String string2 = ParserConfig.AUTOTYPE_ACCEPT;
      assertEquals("fastjson.parser.autoTypeAccept", string2);
      assertNotNull(string2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = hashMap0.put("3M Gw0%'", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string3);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "scanFieldIntBArray", class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"scanFieldIntBArray\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      int int1 = Character.MIN_CODE_POINT;
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("java.util.concurrent.ConcurrentSkipListMap", "F%g5.5fB");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) stackTraceElementDeserializer0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Float.isFinite(0.0F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float float1 = Float.max(0.0F, 1125.2183F);
      assertEquals(1125.2183F, float1, 0.01F);
      
      float float2 = Float.sum(1254.0F, 1254.0F);
      assertEquals(2508.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = Float.max(0.0F, 1085.4491F);
      assertEquals(1085.4491F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      float float4 = Float.sum(1254.0F, 0.0F);
      assertEquals(1254.0F, float4, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      int int1 = Character.MIN_CODE_POINT;
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("F%g5.5fB", (Throwable) null);
      assertNotNull(mockIllegalArgumentException0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte byte0 = TypeUtils.castToByte(float0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("getgetPortlist");
      assertEquals("getgetPortlist", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "<H5+/t(9^L0y_-5S6e6");
      assertEquals("getgetPortlist", threadGroup0.getName());
      assertEquals("<H5+/t(9^L0y_-5S6e6", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "get");
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals("getgetPortlist", threadGroup0.getName());
      assertEquals("<H5+/t(9^L0y_-5S6e6", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread[] threadArray0 = new Thread[1];
      threadArray0[0] = thread0;
      int int0 = threadGroup0.enumerate(threadArray0, true);
      assertEquals(0, int0);
      assertNotSame(threadGroup0, threadGroup1);
      assertEquals("getgetPortlist", threadGroup0.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[2];
      ThreadGroup threadGroup2 = new ThreadGroup("{[!=2*4{iJ(VMj");
      assertEquals("{[!=2*4{iJ(VMj", threadGroup2.getName());
      assertNotNull(threadGroup2);
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      
      threadGroupArray0[0] = threadGroup2;
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "<H5+/t(9^L0y_-5S6e6", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap1);
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      
      String string0 = weakHashMap1.putIfAbsent("java.util.conurrent.ConcurrentSki,ListMap", "-.(6''f/4V*98 !Z");
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNull(string0);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      
      String string1 = weakHashMap1.put(")/", "KJ");
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNull(string1);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      
      String string2 = weakHashMap1.getOrDefault("-.(6''f/4V*98 !Z", "Um;");
      assertEquals("Um;", string2);
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNotNull(string2);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      
      boolean boolean0 = weakHashMap0.containsKey((Object) null);
      assertFalse(boolean0);
      assertNotSame(weakHashMap0, weakHashMap1);
      assertFalse(weakHashMap0.equals((Object)weakHashMap1));
      
      Locale locale0 = JSON.defaultLocale;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("Um;");
      assertEquals("Um;", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "Um;");
      assertEquals("Um;", threadGroup0.getName());
      assertEquals("Um;", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0, "");
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, ")/", 118L);
      assertEquals("Um;", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1);
      assertEquals("Um;", threadGroup0.getName());
      assertEquals("Um;", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertNotNull(mockThread2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      MockThread mockThread3 = new MockThread(threadGroup1, mockThread2, "KJ");
      assertEquals("Um;", threadGroup0.getName());
      assertEquals("Um;", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertNotNull(mockThread3);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      
      MockThread mockThread4 = new MockThread(threadGroup0, mockThread3, "");
      assertEquals("Um;", threadGroup0.getName());
      assertEquals("Um;", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(mockThread4.isDaemon());
      assertFalse(mockThread4.isInterrupted());
      assertNotNull(mockThread4);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread1));
      
      MockThread mockThread5 = new MockThread(threadGroup1, thread0, "org.springframework.remoting.support.RemoteInvocation", 0L);
      assertEquals("Um;", threadGroup0.getName());
      assertEquals("Um;", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread5.isInterrupted());
      assertFalse(mockThread5.isDaemon());
      assertEquals(0, mockThread5.countStackFrames());
      assertNotNull(mockThread5);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread5.equals((Object)mockThread2));
      assertFalse(mockThread5.equals((Object)mockThread4));
      assertFalse(mockThread5.equals((Object)mockThread1));
      assertFalse(mockThread5.equals((Object)mockThread3));
      assertFalse(mockThread5.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread5);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread5);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread4);
      assertEquals("Um;", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread5));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread5));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread5);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread5);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread4);
      assertEquals("Um;", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread5));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread5));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      MockThread.dumpStack();
      Class<?> class0 = TypeUtils.loadClass("he|5", classLoader1, false);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread5);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread5);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread4);
      assertEquals("Um;", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread5));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread5));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      Timestamp timestamp0 = new Timestamp(203L);
      assertEquals("1970-01-01 00:00:00.203", timestamp0.toString());
      assertEquals(203000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate(timestamp0);
      assertEquals("1970-01-01 00:00:00.203", timestamp0.toString());
      assertEquals(203000000, timestamp0.getNanos());
      assertNotNull(date0);
      
      String string3 = TypeUtils.castToString(weakHashMap0);
      assertNotSame(weakHashMap0, weakHashMap1);
      assertNotNull(string3);
      assertFalse(weakHashMap0.equals((Object)weakHashMap1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Character.MIN_CODE_POINT;
      assertEquals(0, int0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      java.sql.Date date0 = new java.sql.Date(1416L);
      assertNotNull(date0);
      
      LinkedHashMap<SimpleDateFormat, java.sql.Date> linkedHashMap0 = new LinkedHashMap<SimpleDateFormat, java.sql.Date>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(".0000000T00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class<DecimalFormat> class0 = DecimalFormat.class;
      DecimalFormat decimalFormat0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(decimalFormat0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0, "g");
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?> class1 = TypeUtils.loadClass("BJ2}DqR7NQ", classLoader0, true);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNull(class1);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      ChronoLocalDate chronoLocalDate0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(chronoLocalDate0);
      
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.putIfAbsent("Ljava.util.concurrent.ConcurrentSkipListMap", "-.(6''f/4V*98 !Z");
      assertNull(string0);
      
      String string1 = null;
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap1);
      
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Field field0 = weakHashMap1.compute((String) null, biFunction0);
      assertNull(field0);
      
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) weakHashMap1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType1).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType1);
      assertNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("xH]`].6UKfqf]6");
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "j(a+r ZY<Uj`.F");
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      MockThread mockThread3 = new MockThread(mockThread2, "getgetTimeZone");
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertNotNull(mockThread3);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      
      MockThread mockThread4 = new MockThread(mockThread2);
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(mockThread4.isInterrupted());
      assertFalse(mockThread4.isDaemon());
      assertNotNull(mockThread4);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(mockThread4.equals((Object)mockThread2));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread4);
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread4);
      assertSame(classLoader1, classLoader0);
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      classLoader1.setDefaultAssertionStatus(false);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread4);
      assertSame(classLoader1, classLoader0);
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      MockThread.dumpStack();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("xH]`].6UKfqf]6", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(parserConfig0);
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      
      AtomicLong atomicLong0 = new AtomicLong((-3576L));
      assertEquals((short) (-3576), atomicLong0.shortValue());
      assertEquals((-3576L), atomicLong0.longValue());
      assertEquals((-3576.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)8, atomicLong0.byteValue());
      assertEquals((-3576L), atomicLong0.get());
      assertEquals("-3576", atomicLong0.toString());
      assertEquals((-3576.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-3576), atomicLong0.intValue());
      assertNotNull(atomicLong0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicLong0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"andDecrement\":-3576,\"andIncrement\":-3577}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("getgetPortlist");
      assertEquals("getgetPortlist", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "EOF error");
      assertEquals("getgetPortlist", threadGroup0.getName());
      assertEquals("EOF error", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "get");
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals("getgetPortlist", threadGroup0.getName());
      assertEquals("EOF error", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread[] threadArray0 = new Thread[1];
      threadArray0[0] = thread0;
      Short short0 = new Short((short)450);
      assertEquals((short)450, (short)short0);
      assertNotNull(short0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(short0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "get");
      assertFalse(boolean1);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.putIfAbsent("Ljava.util.concurrent.ConcurrentSkipListMap", "-.(6''f/4V*98 !Z");
      assertNull(string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-.(6''f/4V*98 !Z", (String) null, 10);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -.(6''f/4V*98 !Z", sQLTransactionRollbackException0.toString());
      assertEquals(10, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("-.(6''f/4V*98 !Z", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -.(6''f/4V*98 !Z", sQLTransactionRollbackException0.toString());
      assertEquals(10, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("-.(6''f/4V*98 !Z", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: -.(6''f/4V*98 !Z", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTransactionRollbackException: -.(6''f/4V*98 !Z", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("lo", sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -.(6''f/4V*98 !Z", sQLTransactionRollbackException0.toString());
      assertEquals(10, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("-.(6''f/4V*98 !Z", sQLTransactionRollbackException0.getMessage());
      assertNotNull(mockIllegalArgumentException0);
      
      boolean boolean0 = TypeUtils.isNumber("-.(6''f/4V*98 !Z");
      assertFalse(boolean0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      boolean boolean1 = TypeUtils.isNumber("-.(6''f/4V*98 !Z");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertNotNull(class0);
      
      Class<Float> class1 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      String string0 = identityHashMap0.put("java.awt.Rectangle", "T<b$Nd7>T");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("([C)J", weakHashMap0);
      assertNull(field0);
      
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(biFunction0).apply(any() , any());
      Field field1 = weakHashMap0.compute("java.awt.Rectangle", biFunction0);
      assertNull(field1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType1).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class0, jSONType1);
      assertNotSame(class0, class3);
      assertNotSame(class3, class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.awt.BufferCapabilities", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class0));
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class3, typeArray0[1]);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.awt.BufferCapabilities", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.equals((Object)class3));
      assertFalse(class3.equals((Object)class0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, typeArray0[2], (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("LW", "G");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      String string1 = identityHashMap0.put("r6H2A._aO^NwD", "can not cast to short, value : ");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(2, identityHashMap0.size());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = Calendar.LONG;
      assertEquals(2, int0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "get");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertEquals("get", threadGroup2.getName());
      assertNotNull(threadGroup2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[4];
      threadGroupArray0[0] = threadGroup1;
      threadGroupArray0[1] = threadGroup1;
      threadGroupArray0[2] = threadGroup1;
      threadGroupArray0[3] = threadGroup2;
      int int1 = threadGroup1.enumerate(threadGroupArray0, false);
      assertEquals(1, int1);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(threadGroup1, threadGroup0);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(int1 == int0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      aSMClassLoader0.setDefaultAssertionStatus(false);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, false);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNull(class0);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "get", (Type) genericArrayType0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = Calendar.LONG;
      assertEquals(2, int0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "get");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertEquals("get", threadGroup2.getName());
      assertNotNull(threadGroup2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "com.alibaba.fastjson.util.TypeUtils");
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[4];
      threadGroupArray0[0] = threadGroup1;
      threadGroupArray0[1] = threadGroup1;
      threadGroupArray0[2] = threadGroup1;
      threadGroupArray0[3] = threadGroup2;
      int int1 = threadGroup1.enumerate(threadGroupArray0, false);
      assertEquals(1, int1);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup1.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(int1 == int0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("com.alibaba.fastjson.util.TypeUtils", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      int int0 = Opcodes.RET;
      assertEquals(169, int0);
      
      TypeUtils typeUtils1 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils1);
      assertFalse(typeUtils1.equals((Object)typeUtils0));
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      Throwable[] throwableArray0 = noSuchMethodException0.getSuppressed();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(throwableArray0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.lang.NoSuchMethodException", sQLTransientException0.toString());
      assertEquals("java.lang.NoSuchMethodException", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ConcurrentHashMap.KeySetView<HttpCookie, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(51);
      assertNotNull(concurrentHashMap_KeySetView0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("org.springframework.security.web.authentication.WebAuthenticationDetails", (ClassLoader) aSMClassLoader0, true);
      assertNull(class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientException: java.lang.NoSuchMethodException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.lang.NoSuchMethodException", sQLFeatureNotSupportedException0.getMessage());
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.lang.NoSuchMethodException", sQLTransientException0.toString());
      assertEquals("java.lang.NoSuchMethodException", sQLTransientException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Class<Double> class3 = Double.TYPE;
      assertFalse(class3.isEnum());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals("double", class3.toString());
      assertTrue(class3.isPrimitive());
      assertNotNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashSet0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      assertFalse(locale1.equals((Object)locale0));
      
      UUID uUID0 = MockUUID.fromString("</}EW i");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<Point> class1 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class2.isPrimitive());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("", "T<b$Nd7>T");
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(string0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("([C)J", weakHashMap0);
      assertNull(field0);
      
      BiFunction<String, Field, Field> biFunction0 = (BiFunction<String, Field, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(biFunction0).apply(anyString() , any(java.lang.reflect.Field.class));
      Field field1 = weakHashMap0.compute("scanFieldIntArray", biFunction0);
      assertNull(field1);
      
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<UUID> class2 = UUID.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType1).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, jSONType1);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertNotNull(class3);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class<?> class4 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertNull(class4);
      
      AtomicLong atomicLong0 = new AtomicLong(1L);
      assertEquals(1L, atomicLong0.get());
      assertEquals((byte)1, atomicLong0.byteValue());
      assertEquals(1L, atomicLong0.longValue());
      assertEquals(1.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(1, atomicLong0.intValue());
      assertEquals((short)1, atomicLong0.shortValue());
      assertEquals(1.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("1", atomicLong0.toString());
      assertNotNull(atomicLong0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate(atomicLong0);
      assertEquals(1L, atomicLong0.get());
      assertEquals((byte)1, atomicLong0.byteValue());
      assertEquals(1L, atomicLong0.longValue());
      assertEquals(1.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(1, atomicLong0.intValue());
      assertEquals((short)1, atomicLong0.shortValue());
      assertEquals(1.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("1", atomicLong0.toString());
      assertNotNull(date0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      String string1 = TypeUtils.castToString((Object) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap1);
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      
      String string0 = weakHashMap1.putIfAbsent("java.util.conurrent.ConcurrentSki,ListMap", "-.(6''f/4V*98 !Z");
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNull(string0);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      
      String string1 = weakHashMap1.put(")/", "KJ");
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNull(string1);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = weakHashMap1.getOrDefault("-.(6''f/4V*98 !Z", "Um;");
      assertEquals("Um;", string2);
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNotNull(string2);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      
      boolean boolean0 = weakHashMap0.containsKey((Object) null);
      assertFalse(boolean0);
      assertNotSame(weakHashMap0, weakHashMap1);
      assertFalse(weakHashMap0.equals((Object)weakHashMap1));
      
      Locale locale0 = JSON.defaultLocale;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertNotNull(ruleBasedCollator0);
      
      boolean boolean1 = TypeUtils.isNumber("isclone");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Um;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Um;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setPackageAssertionStatus("L", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus("L", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("L", linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNull(field0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(biFunction0).apply(any() , any());
      Field field1 = weakHashMap0.compute("Ljava.awt.Color", biFunction0);
      assertNull(field1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      classLoader1.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      assertNotSame(list1, list0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertNotNull(ruleBasedCollator0);
      
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) hashMap0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.putIfAbsent("Ljava.util.concurrent.ConcurrentSkipListMap", "-.(6''f/4V*98 !Z");
      assertNull(string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-.(6''f/4V*98 !Z", (String) null, 10);
      assertEquals("-.(6''f/4V*98 !Z", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(10, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: -.(6''f/4V*98 !Z", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("lo", sQLTransactionRollbackException0);
      assertEquals("-.(6''f/4V*98 !Z", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(10, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: -.(6''f/4V*98 !Z", sQLTransactionRollbackException0.toString());
      assertNotNull(mockIllegalArgumentException0);
      
      boolean boolean0 = TypeUtils.isNumber("-.(6''f/4V*98 !Z");
      assertFalse(boolean0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      BigDecimal bigDecimal0 = new BigDecimal(10);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Byte byte0 = TypeUtils.castToByte(bigDecimal0);
      assertEquals((byte)10, (byte)byte0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(byte0);
      
      TypeUtils.clearClassMapping();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("#8e8");
      assertEquals("java.lang.NoSuchMethodException: #8e8", noSuchMethodException0.toString());
      assertEquals("#8e8", noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
      
      String string1 = TypeUtils.castToString(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException: #8e8", noSuchMethodException0.toString());
      assertEquals("#8e8", noSuchMethodException0.getMessage());
      assertNotNull(string1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      TreeMap<DataTruncation, String> treeMap0 = new TreeMap<DataTruncation, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("getgetCalendar");
      assertEquals("java.lang.NoSuchMethodError: getgetCalendar", noSuchMethodError0.toString());
      assertEquals("getgetCalendar", noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NoSuchMethodError: getgetCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("interface java.util.List", class0.toString());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<Float> class1 = Float.TYPE;
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("([C)J", weakHashMap0);
      assertNull(field0);
      
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Field) null).when(biFunction0).apply(any() , any());
      Field field1 = weakHashMap0.compute("java.awt.Rectangle", biFunction0);
      assertNull(field1);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType1).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class0, jSONType1);
      assertNotSame(class0, class3);
      assertNotSame(class3, class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.awt.BufferCapabilities", class3.toString());
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class0));
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class3, typeArray0[1]);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.awt.Rectangle", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.awt.BufferCapabilities", class3.toString());
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.equals((Object)class3));
      assertFalse(class3.equals((Object)class0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, typeArray0[2], (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      String string0 = linkedHashMap0.put((String) null, "className");
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertNull(string0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("\"wz7go6");
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "Ljava.awt.Color");
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      MockThread mockThread1 = new MockThread(threadGroup0, thread0, "v7$doo.mYLbz+", 1099511628211L);
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread1);
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread1);
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      MockThread.dumpStack();
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.parser.JSONLexerBase", classLoader0, false);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(class1, class0);
      assertEquals("\"wz7go6", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class com.alibaba.fastjson.parser.JSONLexerBase", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(class1.equals((Object)class0));
      
      java.sql.Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
      
      String string1 = TypeUtils.castToString((Object) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      assertEquals("fastjson.parser.autoTypeAccept", string0);
      assertNotNull(string0);
      
      String string1 = hashMap0.put("3M Gw0%'", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertNotNull(class3);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class3);
      assertEquals("class com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertNotNull(parameterizedTypeImpl0);
      
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class3;
      typeArray0[4] = (Type) class0;
      Class<Date> class4 = Date.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class4, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      Class<TimeUnit> class5 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class5, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("RQk%S2YD");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("rqk%s2yd", locale0.toString());
      assertEquals("rqk%s2yd", locale0.getLanguage());
      assertNotNull(locale0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) locale0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
