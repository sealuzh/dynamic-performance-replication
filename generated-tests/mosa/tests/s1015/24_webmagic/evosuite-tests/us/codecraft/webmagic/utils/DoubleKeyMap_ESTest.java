/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:48:49 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Map<String, Object>, Map<Object, String>> hashMap0 = new HashMap<Map<String, Object>, Map<Object, String>>();
      DoubleKeyMap<Map<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Object, String>(hashMap0);
      HashMap<Integer, Map<Integer, Integer>> hashMap1 = new HashMap<Integer, Map<Integer, Integer>>();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Integer>(hashMap1);
      Integer integer0 = new Integer(5);
      Map<Integer, Integer> map0 = doubleKeyMap1.remove(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Integer>();
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.get((Object) null, map0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(375);
      assertEquals(375, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Map<Map<String, Object>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, Object>, Object>>();
      DoubleKeyMap<Object, Map<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Object>(hashMap0);
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap1);
      Map<String, Object> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, map0, (Object) map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(1);
      doubleKeyMap0.remove(integer0, "wrong proto type map ");
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put(integer1, "e", integer1);
      doubleKeyMap0.newMap();
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put(integer2, "I<6}q|U:Wt:{]Wl@", integer2);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Integer) null, (Map<Object, String>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      BiFunction<Object, Object, Map<String, Object>> biFunction0 = (BiFunction<Object, Object, Map<String, Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(class0);
      HashMap<Object, Map<String, String>> hashMap1 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(hashMap1, class0);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.put("", hashMap2);
      doubleKeyMap2.remove((Object) "", (String) null);
      DoubleKeyMap<String, Map<String, Object>, Object> doubleKeyMap3 = new DoubleKeyMap<String, Map<String, Object>, Object>(class0);
      doubleKeyMap3.remove((String) null);
      HashMap<String, Map<String, Integer>> hashMap3 = new HashMap<String, Map<String, Integer>>();
      hashMap3.clone();
      Object object0 = new Object();
      hashMap1.put(object0, (Map<String, String>) null);
      DoubleKeyMap<String, String, Integer> doubleKeyMap4 = new DoubleKeyMap<String, String, Integer>(hashMap3, class0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap5 = new DoubleKeyMap<Integer, Object, String>();
      HashMap<Object, String> hashMap4 = new HashMap<Object, String>();
      Integer integer0 = new Integer(2973);
      // Undeclared exception!
      try { 
        doubleKeyMap5.put(integer0, (Map<Object, String>) hashMap4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer((-629));
      Object object0 = new Object();
      doubleKeyMap0.remove(integer0, object0);
      Integer integer1 = new Integer((-629));
      doubleKeyMap0.remove(integer1, (Object) integer1);
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      hashMap0.put(hashMap1, hashMap2);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(hashMap0, class0);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      doubleKeyMap1.get((Object) hashMap3, integer0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<String, Map<String, Object>>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, String, Map<String, Object>> doubleKeyMap3 = new DoubleKeyMap<Object, String, Map<String, Object>>(map0, class0);
      HashMap<String, Object> hashMap4 = new HashMap<String, Object>();
      Map<String, Map<String, Object>> map1 = doubleKeyMap3.remove((Object) hashMap4);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      BiFunction<Object, Object, Map<String, Object>> biFunction0 = (BiFunction<Object, Object, Map<String, Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(class0);
      HashMap<Object, Map<String, String>> hashMap1 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(hashMap1, class0);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("us.codecraft.webmagic.utils.MultiKeyMapBase", "z(P_(0K");
      hashMap1.put("", hashMap2);
      doubleKeyMap2.remove((Object) "", (String) null);
      DoubleKeyMap<String, Map<String, Object>, Object> doubleKeyMap3 = new DoubleKeyMap<String, Map<String, Object>, Object>(class0);
      doubleKeyMap3.remove((String) null);
      HashMap<String, Map<String, Integer>> hashMap3 = new HashMap<String, Map<String, Integer>>();
      hashMap3.clone();
      Object object0 = new Object();
      hashMap1.put(object0, (Map<String, String>) null);
      DoubleKeyMap<String, String, Integer> doubleKeyMap4 = new DoubleKeyMap<String, String, Integer>(hashMap3, class0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap5 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(1918);
      HashMap<Object, String> hashMap4 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap5.put(integer0, (Map<Object, String>) hashMap4);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
