/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:21:34 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.StreamTokenizer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      jSPlan0.add(object0);
      JSState jSState1 = jSState0.apply(jSPlan0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSState1.addElementsToState(jSPlan0);
      jSState1.addElementsToState(jSPlan0);
      assertFalse(jSState1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSListAxioms0.add((Object) jSTerm0);
      JSState jSState1 = new JSState();
      jSTerm0.add((Object) "MU)%!0'N{X~;.-.[Q5&");
      jSTerm0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSState1.remove((Object) jSSubstitution1);
      jSState0.addAll((Collection) jSListAxioms0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution1);
      System.setCurrentTimeMillis(7);
      JSOperator jSOperator0 = new JSOperator();
      assertEquals(1.0, jSOperator0.cost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("<STATE>.apply(<JSPlan>) not implemented yet");
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      jSState0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution1 = jSState0.satisfies(jSPlan0, jSSubstitution0, jSListAxioms0);
      JSSubstitution jSSubstitution2 = jSState0.satisfies(jSPlan0, jSSubstitution1, jSListAxioms0);
      JSTerm jSTerm0 = new JSTerm();
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution1);
      jSTerm0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSListAxioms0.add((Object) jSTerm0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSState jSState1 = new JSState();
      jSTerm0.add((Object) "MU)%!0'N{X~;.-.[Q5&");
      jSTerm0.parallelStream();
      JSState jSState2 = jSState0.apply(jSPlan0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSState1.remove((Object) jSSubstitution3);
      jSState0.addAll((Collection) jSListAxioms0);
      jSState0.satisfiesAll(jSPlan0, jSSubstitution2, jSListAxioms0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSState2.retainAll(jSSubstitution4);
      jSTerm0.spliterator();
      jSState2.satisfiesTAm(jSTerm0, jSSubstitution0);
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution3);
      System.setCurrentTimeMillis(7);
      JSOperator jSOperator0 = new JSOperator();
      JSState jSState3 = new JSState();
      // Undeclared exception!
      try { 
        jSState0.applyOp(jSOperator0, jSSubstitution0, jSState1, jSState2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      SystemInUtil.addInputLine("<STATE>.apply(<JSPlan>) not implemented yet");
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      jSState0.replaceAll(unaryOperator0);
      Consumer<PushbackInputStream> consumer0 = (Consumer<PushbackInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSListAxioms0.add(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSState jSState1 = new JSState();
      jSTerm0.add((Object) "MU)%!0'N{X~;.-.[Q5&");
      jSPlan0.addElements(jSState0);
      jSTerm0.parallelStream();
      JSState jSState2 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSState1.remove((Object) jSSubstitution0);
      jSState0.addAll((Collection) jSListAxioms0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.spliterator();
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(10);
      JSOperator jSOperator0 = new JSOperator();
      JSState jSState3 = new JSState();
      assertEquals("", jSState3.Name());
  }
}
