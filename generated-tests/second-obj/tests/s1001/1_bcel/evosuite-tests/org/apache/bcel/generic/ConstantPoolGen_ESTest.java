/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:19:24 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Array;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantFloat constantFloat0 = new ConstantFloat((-225.96497F));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((-1999));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantInteger constantInteger0 = new ConstantInteger((-515));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2019, (-515));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1938, 1938);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1938, (-117));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-117), (-2109808491));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(173);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(146);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2804);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("w~%14Jmo%#");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((-227.9F));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupUtf8("w~%14Jmo%#");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addDouble((-1.0));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = Float.MAX_EXPONENT;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(127);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addDouble(127);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "^U8]Cw&.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      long long0 = (-915L);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 223;
      ArrayType arrayType0 = new ArrayType("T.@,\"", 47);
      arrayType0.toString();
      Class<ConstantUtf8>[] classArray0 = (Class<ConstantUtf8>[]) Array.newInstance(Class.class, 0);
      arrayType0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Type.getTypes(classArray0);
      constantPoolGen0.addArrayClass(arrayType0);
      constantPoolGen0.lookupLong(3105L);
      constantPoolGen0.addArrayClass(arrayType0);
      String string0 = null;
      constantPoolGen0.lookupInterfaceMethodref("", (String) null, "");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      constantPoolGen0.adjustSize();
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-3285L));
      Constant.getComparator();
      ConstantString constantString0 = new ConstantString((-177));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-3285L));
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = Byte.BYTES;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(208.3F);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1);
      int int0 = Pattern.UNIX_LINES;
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[2], constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = 1)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1938, 1938);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass((-117));
      BCELComparator bCELComparator0 = Constant.getComparator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("!!");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Constant.setComparator(bCELComparator0);
      ConstantString constantString0 = new ConstantString(64);
      ConstantString constantString1 = new ConstantString((-117));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1938, 1938);
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantLong constantLong0 = new ConstantLong(2315);
      constantLong0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = Long.BYTES;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addClass("!!");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantLong0, constantPoolGen2);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("!!", 2315);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 2315
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-4616189618054758372L));
      ConstantInteger constantInteger0 = new ConstantInteger((-2578));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.lookupFloat((-1098.0F));
      int int0 = constantPoolGen0.lookupDouble((-1));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-170), 91);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFieldref("LNhX", "?>..D", "?>..D");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addLong(1L);
      constantPoolGen0.getSize();
      int int0 = constantPoolGen0.lookupInteger((-396));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(246, 246);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((-2348.5272));
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantString constantString0 = new ConstantString((-1492));
      int int0 = 1515;
      ConstantString constantString1 = new ConstantString(246);
      ConstantString constantString2 = new ConstantString(constantString0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1492
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[12];
      int int0 = Byte.BYTES;
      int int1 = Pattern.DOTALL;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupLong(32);
      int int2 = Byte.SIZE;
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(208.3F);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1274));
      constantPoolGen0.lookupFloat((-1274));
      int int0 = constantPoolGen0.lookupDouble((-1764.069));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(2);
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      ConstantInteger constantInteger1 = new ConstantInteger(2);
      constantPoolGen0.getConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat((-7));
      constantPoolGen0.lookupFloat((-7));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2141, 172);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Method method0 = new Method();
      constantPoolGen0.lookupMethodref("", "//px09;NFssK7|", "`&");
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2028178999), 2670);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger((-2910));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(64, 0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.constants = constantArray0;
      constantPoolGen1.getConstantPool();
      int int0 = constantPoolGen0.addConstant(constantArray0[1], constantPoolGen1);
      assertEquals(1, int0);
      
      constantUtf8_0.clone();
      constantPoolGen0.adjustSize();
      constantPoolGen1.setConstant(6, constantUtf8_0);
      assertEquals(1, constantPoolGen1.getSize());
      
      int int1 = constantPoolGen0.lookupLong(1);
      assertEquals((-1), int1);
      assertEquals(9, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      constantPoolGen0.addDouble(1);
      constantPoolGen0.addFloat(0.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mJ`");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Pattern.CANON_EQ;
      int int1 = Float.MIN_EXPONENT;
      constantPoolGen0.addDouble(1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1, 253);
      assertEquals(1, constantFieldref0.getClassIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MIN_RADIX;
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      constantInteger0.toString();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPool0.getConstant(94);
      Character.getName(2);
      int int1 = Pattern.UNICODE_CASE;
      constantPoolGen0.lookupNameAndType("CONSTANT_Integer[3](bytes = 2)", "CONSTANT_Integer[3](bytes = 2)");
      constantPoolGen0.addInteger(222);
      Constant[] constantArray0 = new Constant[4];
      constantPool0.copy();
      constantPoolGen0.lookupMethodref("START OF TEXT", "`.Yo|k?E/@K:MG>u", "START OF TEXT");
      int int2 = constantPoolGen0.lookupFieldref("", "iP6?S7J]", "START OF TEXT");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MIN_RADIX;
      int int1 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/?>.../?>...");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-4555), 117);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool1);
      constantPoolGen2.getConstantPool();
      String string0 = "";
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Double.SIZE;
      constantPoolGen0.addString("?>..D");
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      int int1 = Member.PUBLIC;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 2);
      constantMethodHandle0.clone();
      constantPool0.copy();
      constantMethodHandle0.clone();
      int int2 = Double.MAX_EXPONENT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      try { 
        constantPool0.getConstant(3, (byte)38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 3 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "CodeException(start_pc = ";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CodeException(start_pc = ");
      ConstantClass constantClass0 = new ConstantClass(4);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4, 240);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[24];
      constantArray0[0] = (Constant) constantNameAndType1;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[9] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantClass1;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = new Boolean("B+&,9x'");
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupLong((-930L));
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 548;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(548, 548);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(548, 276);
      constantFieldref0.setNameAndTypeIndex(548);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(548);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantDouble constantDouble0 = new ConstantDouble((-4967.703633));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "rI6o~i,xB";
      constantPoolGen0.addString("rI6o~i,xB");
      ConstantString constantString0 = new ConstantString(3803);
      ConstantString constantString1 = new ConstantString((-1492));
      ConstantString constantString2 = new ConstantString(16);
      ConstantString constantString3 = new ConstantString(16);
      constantPoolGen0.addFloat(0.0F);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 548
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble((-2348.5272));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("4zeN?VyEQ,81", "4zeN?VyEQ,81", "&");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals((-1), int0);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3434), 495);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("'#:%, npairs = #=L^B]^TApXp8A?");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("'#:%, npairs = #=L^B]^TApXp8A?");
      constantArray0[2] = (Constant) constantUtf8_2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(548, 548);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(548);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "\\{}6I'g+aH=,|\\";
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantFieldref0.toString();
      constantPoolGen0.addFloat(248);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 548
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1492));
      ConstantString constantString1 = new ConstantString((-1492));
      ConstantString constantString2 = new ConstantString(1510);
      ConstantString constantString3 = new ConstantString(constantString0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(276);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble((-2348.5272));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantFloat constantFloat0 = new ConstantFloat((-1.9324764F));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addConstant(constantDouble0, constantPoolGen0);
      assertEquals(3, constantPoolGen2.getSize());
      
      int int0 = constantPoolGen1.getSize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.size = (-2274);
      constantPoolGen0.size = (-572);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFloat(0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-170), 91);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1866), 235);
      constantFieldref0.copy();
      constantMethodHandle0.clone();
      ConstantFieldref constantFieldref1 = new ConstantFieldref(64, (-828));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oS`gD1tK=f9]<P");
      constantFieldref1.copy();
      ConstantFieldref constantFieldref2 = new ConstantFieldref((-170), 111);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.lookupMethodref("If stack top's size is 1, then stack next-to-top's size must also be 1. But it is '", "oS`gD1tK=f9]<P", "):\n");
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("fstore_0", "fstore_0", "fstore_0");
      int int0 = Byte.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.getConstantPool();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("D9}m~sdOIs}{");
      constantPoolGen0.lookupMethodref("D9}m~sdOIs}{", "D9}m~sdOIs}{", "D9}m~sdOIs}{");
      BasicType basicType0 = Type.LONG;
      String[] stringArray0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D9}m~sdOIs}{");
      GETFIELD gETFIELD0 = new GETFIELD();
      InstructionList instructionList0 = new InstructionList(gETFIELD0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "D9}m~sdOIs}{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D9}m~sdOIs}{");
      InstructionList instructionList1 = new InstructionList(gETFIELD0);
      InstructionList instructionList2 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList2.getEnd();
      instructionList2.insert(instructionHandle0, (Instruction) gETFIELD0);
      // Undeclared exception!
      try { 
        instructionList2.insert((InstructionHandle) null, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupDouble(0.0);
      constantPoolGen0.addLong((-1));
      int int0 = constantPoolGen0.lookupLong((-1));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(1L);
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupDouble((-4927.074718436));
      constantPoolGen0.addLong(0L);
      constantPoolGen0.getConstantPool();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("fstore_0", "fstore_0", "fstore_0");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.toString();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(5, constantPoolGen2.getSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong((-986L));
      constantPoolGen0.addLong((-986L));
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFloat(325.65F);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "M5 Wd.h()aS=;", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupLong((-915L));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(61, 61);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantInterfaceMethodref1.setClassIndex((-1));
      constantPoolGen0.addInteger(256);
      constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(276);
      ConstantString constantString1 = new ConstantString(276);
      ConstantString constantString2 = new ConstantString(constantString0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[3] = (Constant) constantString2;
      constantArray0[4] = (Constant) constantString0;
      constantPoolGen1.addFloat(276);
      ConstantFloat constantFloat0 = new ConstantFloat(276);
      Constant[] constantArray1 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      constantPoolGen1.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen0.getSize();
      constantPoolGen1.toString();
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      int int0 = Character.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble(2);
      int int1 = Character.MAX_RADIX;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int2 = Double.MAX_EXPONENT;
      constantPoolGen0.addMethodref("?>...:oS`gD1K=f9]<P:?>...", "W>b&4P?LQoXJ>%h9:", "[[I");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getConstantPool();
      int int3 = Double.BYTES;
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.getFinalConstantPool();
      int int4 = constantPoolGen0.lookupFloat(36);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("?>...", "?>...", "?>...");
      constantPoolGen0.addString("?>...");
      int int0 = Pattern.LITERAL;
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 16);
      Character.getName(16);
      ConstantDouble constantDouble0 = new ConstantDouble(16);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int1 = Character.MAX_RADIX;
      int int2 = Character.BYTES;
      constantPoolGen1.addInterfaceMethodref(",{@l1k7Q;fxFlB", "4E'C(S8(L Xz;+pNB^", "4E'C(S8(L Xz;+pNB^");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger1 = new ConstantInteger(5);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantFieldref constantFieldref0 = (ConstantFieldref)constantPool0.getConstant(5);
      constantFieldref0.getClass(constantPool0);
      constantPoolGen2.addConstant(constantFieldref0, constantPoolGen1);
      constantPoolGen0.lookupDouble(5);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble(2);
      int int1 = Character.MAX_RADIX;
      constantPoolGen0.addInterfaceMethodref("?>...", "?>...", "?>...");
      MockFile mockFile0 = new MockFile("?>...", "?>...");
      MockFile mockFile1 = new MockFile(mockFile0, "?>...");
      constantPoolGen0.addDouble(36);
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      constantInteger0.setBytes(261);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      Constant constant0 = constantPool0.getConstant(5);
      constantPoolGen1.addConstant(constant0, constantPoolGen0);
      ConstantClass constantClass0 = new ConstantClass(5);
      constantPoolGen1.lookupFieldref("7h#} M", "?>...", "7h#} M");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.toString();
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("?>..D", "?>..D", "?>..D");
      constantPoolGen0.addFieldref("?>..D", "?>..D", "?>..D");
      constantPoolGen0.addString("?>..D");
      int int0 = Member.PUBLIC;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 0);
      constantMethodHandle0.clone();
      constantPoolGen0.addClass("?>..D");
      constantPoolGen0.addInterfaceMethodref("?>..D", "?>..D", "?>..D");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fsub");
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int1 = constantPoolGen0.index;
      constantPoolGen1.adjustSize();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addLong(4603091683616448110L);
      constantPoolGen2.addMethodref("?>..D", "?>..D", "?>..D");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int2 = Pattern.CANON_EQ;
      constantPoolGen1.lookupClass("fsub");
      Character character0 = new Character('M');
      PUSH pUSH0 = new PUSH(constantPoolGen2, character0);
      pUSH0.getInstructionList();
      BasicType basicType0 = Type.CHAR;
      constantPoolGen0.lookupMethodref("Referenced field '", "fsub", "org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.adjustSize();
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType(basicType0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 0
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("?>..D", "?>..D", "?>..D");
      constantPoolGen0.addString("?>..D");
      int int0 = Character.SIZE;
      ConstantInteger constantInteger0 = new ConstantInteger(5);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 16);
      constantMethodHandle0.clone();
      int int1 = Pattern.DOTALL;
      Boolean boolean0 = new Boolean("?>..D");
      constantPoolGen0.addInterfaceMethodref("?>..D", "?>..D", "?>..D");
      assertEquals(9, constantPoolGen0.getSize());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int2 = constantPoolGen0.index;
      constantPoolGen1.adjustSize();
      constantPoolGen1.addMethodref("?>..D", "?>..D", "T.@,\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T.@,\"");
      int int3 = Pattern.CANON_EQ;
      constantPoolGen1.addFloat(688.9351F);
      constantPoolGen1.lookupMethodref("?>..D", "?>..D", "T.@,\"");
      Method method0 = new Method();
      int int4 = constantPoolGen1.getSize();
      assertEquals(14, int4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("?>..D", "?>..D", "?>..D");
      constantPoolGen0.addString("?>..D");
      int int0 = Member.PUBLIC;
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      int int1 = Float.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 0);
      Object object0 = constantMethodHandle0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      constantPoolGen0.lookupNameAndType("?>..D", "?>..D");
      constantPoolGen0.addInterfaceMethodref("?>..D", "?>..D", "?>..D");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[2] = (Constant) object0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int2 = Member.PUBLIC;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = (ConstantInterfaceMethodref)constantPool0.getConstant(7);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantPoolGen1.addConstant(constantInterfaceMethodref0, constantPoolGen0);
      assertEquals(8, constantPoolGen0.getSize());
      
      ConstantClass constantClass0 = new ConstantClass(9);
      constantPoolGen1.constants = constantArray0;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen1.addNameAndType("?>..D", "?>..D");
      constantPoolGen2.addMethodref("?>..D", "?>..D", "?>..D");
      constantPoolGen2.lookupClass(".kCj8[Te");
      int int3 = constantPoolGen2.addMethodref("?>..D", "?>..D", "?>..D");
      assertEquals(5, int3);
  }
}
