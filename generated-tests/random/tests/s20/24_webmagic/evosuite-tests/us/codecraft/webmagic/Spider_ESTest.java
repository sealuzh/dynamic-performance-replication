/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:17:13 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P{Av@4iw=,.9S8d{|XM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("P{Av@4iw=,.9S8d{|XM", "m:+g?{;9ziNVV)QDU,");
      spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P{Av@4iw=,.9S8d{|XM";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.checkIfRunning();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      spider0.thread(5);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      spider0.thread(5);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("upe,6zT+Tl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider0.startUrls(linkedList0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", sleepTime=");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      spider0.setUUID("");
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.setSpawnUrl(false);
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setScheduler(priorityScheduler0);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setScheduler(priorityScheduler0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.setPipelines((List<Pipeline>) null);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", sleepTime=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.setExitWhenComplete(false);
      assertFalse(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", sleepTime=");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.scheduler((Scheduler) null);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\";`FHtiqrpR/P1$Ga[");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("aQfq <Cpb+$I", "aQfq <Cpb+$I");
      spider1.downloader(phantomJSDownloader0);
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("upe,6zT+Tl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("j8", "upe,6zT+Tl");
      spider0.downloader(phantomJSDownloader0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      spider0.clearPipeline();
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 1891);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":\t");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", sleepTime=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rNb.C");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("99");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "99";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.LinksSelector");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P{Av@4iw=,.9S8d{|XM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("P{Av@4iw=,.9S8d{|XM", "m:+g?{;9ziNVV)QDU,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider0.getAll((Collection<String>) set0);
      spider1.getAll((Collection<String>) set0);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.uuid = "";
      String string0 = spider1.getUUID();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=f,U[i");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, int0);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = new Spider(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(605);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-1703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rNb.C");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("d6,NsiD9swCh");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "UyfvBc'Rv%-U";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UyfvBc'Rv%-U");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      Spider spider3 = spider2.clearPipeline();
      spider2.runAsync();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider3.addPipeline(collectorPipeline0);
      ForkJoinPool.commonPool();
      int int0 = 2546;
      // Undeclared exception!
      try { 
        spider3.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{9");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ZJ4f`}<e\"e T+Kr-@");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Init", "");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("N");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("B|\"]`E");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("B|\"]`E", " ");
      Spider spider5 = spider4.setDownloader(phantomJSDownloader0);
      spider3.scheduler(queueScheduler0);
      phantomJSDownloader0.setThread(5000);
      spider5.runAsync();
      FilePipeline filePipeline0 = new FilePipeline("B|\"]`E");
      spider1.run();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P{Av@4iw=,.9S8d{|XM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("P{Av@4iw=,.9S8d{|XM", "m:+g?{;9ziNVV)QDU,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.thread(1404);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider1.start();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P{Av@4iw=,.9S8d{|XM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("P{Av@4iw=,.9S8d{|XM", "m:+g?{;9ziNVV)QDU,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      Page page0 = new Page();
      ResultItems resultItems0 = page0.getResultItems();
      resultItemsCollectorPipeline0.process(resultItems0, spider1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider0.getAll((Collection<String>) set0);
      spider0.start();
      spider3.getSite();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", sleepTime=");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("upe,6zT+Tl");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("j8", "upe,6zT+Tl");
      spider1.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getScheduler();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      spider0.setExitWhenComplete(false);
      spider0.clearPipeline();
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      boolean boolean0 = spider0.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = Spider.create(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f=LHb}LS+9LO");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setEmptySleepTime(1034);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P`w:h FFEC");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P{Av@4iw=,.9S8d{|XM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("P{Av@4iw=,.9S8d{|XM", "m:+g?{;9ziNVV)QDU,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(4882);
      spider0.thread((ExecutorService) forkJoinPool0, 1404);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      spider1.getAll((Collection<String>) set0);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f=LHb}LS+9LO");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStartTime();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.Status spider_Status0 = spider0.getStatus();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("N");
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(563);
      assertEquals(Spider.Status.Init, spider_Status0);
  }
}
