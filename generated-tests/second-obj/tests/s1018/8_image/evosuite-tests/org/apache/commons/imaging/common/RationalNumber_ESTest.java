/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:46:28 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-1));
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      assertEquals((-1), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1099.6666666666667);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-1099.6666666666667), rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2161.4);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(10807, rationalNumber0.numerator);
      assertEquals(2161.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-4166.2));
      assertEquals((-4166.2F), rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), (-2147483648L));
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1136), (-1136));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.8664999263128266E-9);
      String string0 = rationalNumber0.toString();
      assertEquals("1/348857501 (0)", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertEquals(2.8664999237038046E-9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-4179.002215021398));
      String string0 = rationalNumber0.toString();
      assertEquals("-4,179", string0);
      assertEquals((-4179.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1136), 2248);
      float float0 = rationalNumber0.floatValue();
      assertEquals((-0.5053381F), float0, 0.01F);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-1136/2248 (-0.505)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1136), 2248);
      float float0 = rationalNumber0.floatValue();
      assertEquals((-0.5053381F), float0, 0.01F);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-0.505", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 1470L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2147483648L));
      assertEquals((-2147483647), rationalNumber1.numerator);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-1460873.2299319727), double0, 0.01);
      assertEquals((-735), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(291L, 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, 2147483669L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals((-4.656612918613884E-10), rationalNumber0.doubleValue(), 0.01);
      assertEquals("-0", string0);
      assertEquals((-2147483627), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483669L, 2147483669L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("1", string1);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 2147483669L;
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483669L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483669, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483680L), (-2147483680L));
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483680L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1L, (-2147483680L));
      RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber2 = new RationalNumber(1, 2147483616);
      String string0 = rationalNumber1.toString();
      assertEquals("1/2147483616 (0)", string0);
      assertEquals(1, rationalNumber1.numerator);
      
      rationalNumber0.negate();
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      assertEquals(2.14748365E9F, rationalNumber3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836464955778E9));
      assertEquals((-2147483646L), rationalNumber0.longValue());
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0E-8);
      rationalNumber1.toDisplayString();
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("0", string0);
      
      rationalNumber2.longValue();
      assertEquals(1.0E-8, rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1.0));
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
  }
}
