/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:22:56 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110);
      jSONReaderScanner0.eofPos = 192;
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      
      jSONReaderScanner0.scanDouble('w');
      assertEquals((-1), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#p 9y2,r");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat('\\');
      jSONScanner0.scanDate('\\');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@Bu+WX?!");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanString('m');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONLexerBase.isWhitespace('Y');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",liv`:3O", 4088);
      Locale locale0 = Locale.GERMAN;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 429);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.matchField2(charArray0);
      assertEquals(429, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      char[] charArray0 = new char[6];
      jSONReaderScanner0.np = 11;
      charArray0[0] = 'r';
      charArray0[1] = ']';
      charArray0[2] = 'C';
      charArray0[3] = 'n';
      charArray0[4] = '%';
      jSONReaderScanner0.scanIdent();
      charArray0[5] = '8';
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 11);
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'A';
      charArray0[2] = '';
      charArray0[3] = '$';
      charArray0[4] = 'o';
      charArray0[5] = 'n';
      charArray0[6] = '=';
      charArray0[7] = 'm';
      charArray0[8] = 'F';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.nextToken(11);
      assertEquals(22, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONLexerBase.isWhitespace(']');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I", 47);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\u0019');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0019';
      charArray0[1] = '\u0019';
      charArray0[2] = '\u0019';
      charArray0[3] = '\u0019';
      charArray0[4] = '\u0019';
      charArray0[5] = '\u0019';
      charArray0[6] = '\u0019';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 346);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.charAt(31);
      char[] charArray1 = new char[3];
      charArray1[0] = '\u0019';
      charArray1[1] = '\u0019';
      charArray1[2] = '\u0000';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 346);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+{kb", (-719));
      jSONReaderScanner0.scanUUID('>');
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.forLanguageTag("+{kb");
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.setToken(120);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", (-2443));
      jSONReaderScanner0.scanLong('|');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.putChar('w');
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" c_jpwW");
      Feature feature0 = Feature.UseObjectArray;
      char char0 = '0';
      jSONReaderScanner0.scanBoolean('0');
      jSONReaderScanner0.scanUUID('0');
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      char char1 = 'P';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@FI*@/ZV7h,");
      jSONReaderScanner0.scanInt('m');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '+';
      charArray0[2] = '~';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'k';
      charArray0[6] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2813);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.matchStat = 2813;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.sp = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanType("OrderedField");
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONLexerBase.isWhitespace('s');
      JSONScanner jSONScanner0 = new JSONScanner("2&m0#*WjvC_+1,", (-1658));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.stringVal();
      jSONScanner0.scanStringArray(linkedHashSet0, '(');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONLexerBase.isWhitespace('6');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 104, 171);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanBoolean('h');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, '_');
      float float0 = jSONReaderScanner0.scanFloat('_');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('A');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken();
      assertEquals(22, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+$=RRcH", 123);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.scanFloat('t');
      jSONScanner0.config(feature0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '3';
      charArray0[2] = '2';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(123, charArray0, (-2970), 41);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0010');
      JSONScanner jSONScanner0 = new JSONScanner("java.util.OptionalLong");
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '_';
      charArray0[2] = '@';
      charArray0[3] = 'o';
      charArray0[4] = 'D';
      charArray0[5] = 'T';
      charArray0[6] = 'v';
      charArray0[7] = '@';
      charArray0[8] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 963, 963);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      jSONReaderScanner0.scanStringArray(set0, '8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("scan null error");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'q';
      charArray0[2] = 'i';
      charArray0[3] = 'r';
      charArray0[4] = '`';
      charArray0[5] = 'i';
      charArray0[6] = '\\';
      charArray0[7] = 'P';
      charArray0[8] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24180, (-139));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("itj5KV?bA4D");
      jSONReaderScanner0.scanDate('B');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(47J)<pVe#AU~");
      jSONReaderScanner0.scanBoolean('L');
      jSONReaderScanner0.close();
      jSONReaderScanner0.scanNumber();
      Locale locale0 = Locale.GERMANY;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 829);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal(']');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c");
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(4862);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 4, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(142);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "illegal state. ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'R';
      charArray0[2] = '(';
      charArray0[3] = ';';
      charArray0[4] = 'I';
      int int0 = 93;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qWoB{2;");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('\\');
      jSONReaderScanner0.getLocale();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'e';
      charArray0[2] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 859, 78);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals('R', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@u+XX?!");
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '3';
      jSONReaderScanner0.scanNumber();
      charArray0[2] = 'Z';
      charArray0[3] = '}';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.subString(1778, 114);
      jSONReaderScanner0.doubleValue();
      SymbolTable symbolTable0 = new SymbolTable(341);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flot overolow : ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      int int0 = (-969);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^/h,");
      jSONReaderScanner0.scanString('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9]Y](^");
      jSONReaderScanner0.nextToken();
      float float0 = jSONReaderScanner0.floatValue();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("itj5KV?bA4D");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9#(pOLfo5E(r");
      StringReader stringReader0 = new StringReader("SupportNonPublicField");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 13);
      jSONReaderScanner1.nextToken();
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.tokenName();
      jSONScanner0.pos();
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 38);
      char[] charArray1 = new char[6];
      charArray1[0] = 'T';
      charArray1[1] = 'P';
      charArray1[2] = 'T';
      charArray1[3] = 'T';
      charArray1[4] = 'P';
      charArray1[5] = 'P';
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosedTstrin:g : ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isEOF();
      assertEquals(':', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed jsonArray");
      JSONLexerBase.isWhitespace('N');
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = ' ';
      charArray0[3] = '!';
      charArray0[4] = 'N';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONLexerBase.isWhitespace('7');
      JSONScanner jSONScanner0 = new JSONScanner("setter not found, class ", (-911));
      Feature feature0 = Feature.UseBigDecimal;
      jSONScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@Bu+WX?!");
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kMoz", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("can");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isRef();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0019');
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0019';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3772, 18);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONLexerBase.isWhitespace('l');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      JSONScanner jSONScanner0 = new JSONScanner("false", 0);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONLexerBase.isWhitespace('s');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scH");
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble(' ');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6 0Iu+X$9q4#QFp0|");
      jSONReaderScanner0.scanDate('b');
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'n';
      charArray0[2] = 'L';
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('l');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = 'u';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1595, (-1721919487));
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6 0Iu+X$9q4#QFp0|");
      jSONReaderScanner0.putChar('1');
      jSONReaderScanner0.token = 12;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0010');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      int int0 = 116;
      SymbolTable symbolTable0 = new SymbolTable(116);
      jSONReaderScanner0.lexError("tf~aW|Q?,T=Euj/T", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '6';
      charArray0[2] = ';';
      charArray0[3] = ']';
      charArray0[4] = ')';
      char char0 = '3';
      charArray0[5] = '3';
      int int0 = 24;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24, 24);
      SymbolTable symbolTable0 = new SymbolTable(1628);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'X');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c`'T[a@u+X^mX?!");
      SymbolTable symbolTable0 = new SymbolTable(433);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":keraKSPh[r9");
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'k';
      charArray0[2] = 'q';
      charArray0[3] = '!';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanType(":keraKSPh[r9");
      jSONReaderScanner0.nextToken();
      char[] charArray1 = new char[8];
      charArray1[0] = 'k';
      charArray1[1] = 'k';
      charArray1[2] = 'q';
      charArray1[3] = '7';
      charArray1[4] = 'q';
      charArray1[5] = 'M';
      charArray1[6] = 'M';
      charArray1[7] = 'M';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      assertEquals('k', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffetDateTime");
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6\"rtkcy|2u7{FGcgzi", 2606);
      jSONScanner0.info();
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U}s\"'.Y7Kl");
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      jSONScanner0.scanFieldBigInteger(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U}s\"'.Y7Kl", (-2));
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0$M(`", 3962);
      jSONReaderScanner0.charAt(1183);
      jSONReaderScanner0.calendar = null;
      jSONReaderScanner0.nextToken();
      float float0 = jSONReaderScanner0.floatValue();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      jSONReaderScanner0.scanDecimal('w');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775754L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dBlm>W/%_Z");
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = '-';
      charArray0[2] = '[';
      charArray0[3] = '^';
      charArray0[4] = 'o';
      charArray0[5] = '+';
      charArray0[6] = '7';
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      jSONReaderScanner0.scanUUID('|');
      jSONReaderScanner0.scanDecimal('w');
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("illegal state. ", (-1), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z", 63);
      jSONScanner0.scanUUID(',');
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.tokenName();
      jSONScanner0.pos();
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'v';
      charArray0[3] = 'F';
      charArray0[4] = '%';
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'+2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.parser.SymbolTable";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", (-2443));
      jSONReaderScanner0.hasSpecial = false;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 32, (-139));
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('Z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match Z - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar(';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ; - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '1';
      charArray0[2] = '3';
      charArray0[3] = 'H';
      charArray0[4] = 't';
      charArray0[5] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 7);
      jSONReaderScanner0.scanDouble('1');
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONLexerBase.isWhitespace('l');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.hasSpecial = false;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.matchStat = 58;
      jSONReaderScanner0.putChar('t');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals((-48L), long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0018');
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0018';
      charArray0[1] = '\u0018';
      charArray0[2] = '\u0018';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1551, 1551);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextTokenWithChar('\u0018');
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F-Wpv7b0$!Fjmo!B");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char char0 = 's';
      JSONLexerBase.isWhitespace('s');
      JSONScanner jSONScanner0 = new JSONScanner("CP=p5,)HFx<^7jHFy", 26);
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1000));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffsetDateTime");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - j, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(47J)<pVe#AU~");
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'R';
      charArray0[2] = '[';
      charArray0[3] = 'u';
      charArray0[4] = '\"';
      charArray0[5] = 'a';
      charArray0[6] = ';';
      charArray0[7] = 'o';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.isEnabled(0, (-969));
      jSONScanner0.indexOf('|', 846);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=}~kq14z");
      jSONReaderScanner0.scanLong('g');
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4s");
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'E');
      jSONReaderScanner0.scanFloat(';');
      jSONReaderScanner0.subString(21, 21);
      JSONScanner jSONScanner0 = new JSONScanner("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(47J)<pVe#AU~");
      jSONReaderScanner0.scanBoolean('L');
      jSONReaderScanner0.scanDecimal('L');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9]0pzvT;{Q");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDecimal('t');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDouble('i');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char char0 = 'S';
      JSONLexerBase.isWhitespace('S');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("X", (-2));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "}FRN~vSV:pBQsl";
      JSONScanner jSONScanner0 = new JSONScanner("}FRN~vSV:pBQsl");
      char[] charArray0 = new char[3];
      jSONScanner0.matchField(charArray0);
      charArray0[0] = 'x';
      charArray0[1] = 'T';
      charArray0[2] = '6';
      jSONScanner0.ch = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFloat('x');
      SymbolTable symbolTable0 = new SymbolTable(7);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'x');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SupportAutoType");
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.scanInt('%');
      JSONScanner jSONScanner0 = new JSONScanner("6<n[^", 50);
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '~';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      charArray0[8] = 'd';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-1), 50, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".A");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('\u0010');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '0';
      charArray0[2] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1119, (-3030));
      SymbolTable symbolTable0 = new SymbolTable(3057);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 13, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?jaiz4vm");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("m)#6qR:1T`Bf\"H[}");
      jSONReaderScanner1.scanString();
      assertEquals('H', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":keraKSPh[r9");
      jSONReaderScanner0.nextTokenWithColon(67);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iXytj5KC?bA}D", (-1657));
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertEquals((-1657), jSONReaderScanner0.getFeatures());
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set");
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '1';
      charArray0[2] = '.';
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('\\');
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.info();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@u+XX?!");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("4c]`'T[a@u+XX?!", 33);
      jSONScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.putChar(',');
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'E';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@u+XX?!");
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanIdent();
      assertEquals(22, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '!';
      charArray0[2] = 'n';
      charArray0[3] = ';';
      charArray0[4] = '-';
      charArray0[5] = 's';
      charArray0[6] = 'f';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.np = 72;
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('l', 's', 'X', 'l', 'Q', ']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!m`f%U7vmlOs[3>,", (-2199));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ' - !, info : pos 0, json : !m`f%U7vmlOs[3>,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/eUr#");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONLexerBase.isWhitespace('a');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2441));
      jSONReaderScanner0.scanNullOrNew();
      assertEquals(8, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "_b-_@^I*@/Zc,V7^/h,";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^/h,");
      jSONReaderScanner0.scanDate('');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = ';';
      charArray0[0] = ';';
      charArray0[1] = '^';
      charArray0[2] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 63);
      jSONReaderScanner0.stringDefaultValue();
      char[] charArray1 = new char[9];
      charArray1[0] = ';';
      charArray1[1] = 'E';
      charArray1[2] = 'K';
      charArray1[3] = '^';
      charArray1[4] = 'E';
      charArray1[5] = ';';
      charArray1[6] = 'Q';
      charArray1[7] = '^';
      charArray1[8] = '^';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONLexerBase.isWhitespace('\'');
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1632);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1632);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = ',';
      charArray0[2] = 'w';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = 'w';
      charArray0[6] = ',';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('*');
      jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", (-2443));
      jSONReaderScanner0.hasSpecial = false;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 32, (-139));
      jSONReaderScanner1.lexError("com.alibaba.fastjson.parser.SymbolTable", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e|La76hz@Txl>Wb{^XS");
      jSONReaderScanner0.scanInt('Z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffsetDateTime");
      SymbolTable symbolTable0 = new SymbolTable(35);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - j, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uncoOsdstr.lit", 73);
      jSONScanner0.scanIdent();
      jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c`'T[a@u+X^mX?!");
      char char0 = '+';
      jSONReaderScanner0.scanInt('+');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("net.sf.json.JSONNull");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('\\');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sICRom=8%sECOD6Y");
      jSONReaderScanner0.nextToken();
      assertEquals('I', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JE$w2", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '0';
      charArray0[2] = 'i';
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(88, "2Md$+2[tD-~.w?");
      TimeZone.setDefault(simpleTimeZone0);
      jSONScanner0.setTimeZone(simpleTimeZone0);
      jSONScanner0.matchField2(charArray0);
      JSONLexerBase.readString((char[]) null, 0);
      JSONLexerBase.isWhitespace('4');
      jSONScanner0.pos();
      JSONScanner.checkDate('4', 'F', '0', '3', 'L', '#', 108, 108);
      jSONScanner0.charAt(0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-212), 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char char0 = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("57^+h@qo|!#'");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('R');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?).y-2t4R15]|");
      jSONReaderScanner0.setToken((-1419));
      jSONReaderScanner0.scanDecimal('{');
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-1419), jSONReaderScanner0.token());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";ZlVm1ULUY.zZ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken(8);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(903, "!1&,p@?wU}!t-n3G");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|");
      JSONLexerBase.isWhitespace('4');
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.resetStringPosition();
      int int0 = jSONReaderScanner0.scanType("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONLexerBase.isWhitespace('O');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wQt", Integer.MAX_VALUE);
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'f');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanIdent();
      System.setCurrentTimeMillis(1847L);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=}~kq14z");
      jSONReaderScanner0.ch = 'M';
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanDouble('p');
      jSONReaderScanner0.scanLong('g');
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wqt");
      jSONReaderScanner0.scanBoolean('Z');
      jSONReaderScanner0.scanDecimal('s');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("itj5KV?bA4D");
      jSONReaderScanner0.scanBoolean('h');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffsetDateTime");
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - j, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-[Aa2M$ZA]_");
      boolean boolean0 = jSONReaderScanner0.scanBoolean('-');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", (-2443));
      jSONReaderScanner0.scanLong('|');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.putChar('-');
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 118;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*.q'MwGS_FZU{ahH{M", 118);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6 0Iu+X$9q4#QFp0|");
      jSONReaderScanner0.nextToken(4);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4c]`'T[a@u+XX?!");
      jSONScanner0.next();
      int int0 = jSONScanner0.token();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6 0Iu+X$9q4#QFp0|");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-140));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '}';
      charArray0[2] = 'h';
      charArray0[3] = '@';
      charArray0[4] = 'u';
      charArray0[5] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[ PGG|eta,M&Vz:");
      jSONReaderScanner0.nextToken();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONLexerBase.isWhitespace('h');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jMI8;jbTu3JUNyr", 94);
      TimeZone timeZone0 = TimeZone.getTimeZone("jMI8;jbTu3JUNyr");
      jSONReaderScanner0.timeZone = timeZone0;
      TimeZone.getDefault();
      jSONReaderScanner0.scanLong(':');
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(94, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(47J)<pVe#AU~");
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      charArray0[5] = 'B';
      charArray0[6] = 'L';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner0.putChar('y');
      jSONReaderScanner1.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",mj.Wo]Gx@G0AL{p{", 9999);
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = '`';
      charArray0[2] = '\"';
      charArray0[3] = '`';
      charArray0[4] = '_';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'g');
      int int0 = (-1122);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1122), 440);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/Mdk4.RWKi]#");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(563);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDecimal('v');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDecimal('1');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",raNXw;X1");
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("\"", 2205);
      SymbolTable symbolTable0 = new SymbolTable(19);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(0, (-2499), 109, symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@Bu+WX?!");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanBoolean('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0013');
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0013';
      charArray0[1] = '\u0013';
      charArray0[2] = '\u0013';
      charArray0[3] = '\u0013';
      charArray0[4] = '\u0013';
      charArray0[5] = '\u0013';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 385, 6);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e:.06JYZg&$\u0006~{O1!E");
      SymbolTable symbolTable0 = new SymbolTable(51);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.resetStringPosition();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "new";
      objectArray0[1] = (Object) jSONReaderScanner0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "new";
      objectArray0[4] = (Object) "new";
      objectArray0[5] = (Object) jSONReaderScanner0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("new", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('?');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      charArray0[3] = 'k';
      charArray0[4] = '$';
      charArray0[5] = 'K';
      charArray0[6] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65, (-3160));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. L
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zotjem");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.resetStringPosition();
      jSONScanner0.isEOF();
      jSONScanner0.info();
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[3];
      int int0 = (-874);
      int int1 = 0;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JE$w2", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '0';
      charArray0[2] = 'i';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanDecimal('i');
      charArray0[3] = '';
      jSONScanner0.scanFieldStringArray(charArray0, 438, (SymbolTable) null);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken(115);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.charAt(0);
      jSONScanner0.isEnabled(256, 256);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '');
      jSONScanner0.getTimeZone();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str");
      String string0 = jSONReaderScanner0.scanString('');
      assertNull(string0);
      
      jSONReaderScanner0.scanDecimal('T');
      double double0 = jSONReaderScanner0.scanDouble('T');
      assertEquals(0.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONLexerBase.isWhitespace('>');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PI.G}r*!lc*7T", 4110);
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '>';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString(':');
      assertEquals(4110, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      SymbolTable symbolTable0 = new SymbolTable(43);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0013';
      charArray0[1] = '\u0013';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1489, 1306);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('\u0013');
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanDate('j');
      assertEquals(1306, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '\"';
      charArray0[2] = '<';
      charArray0[3] = 'k';
      charArray0[4] = '$';
      charArray0[5] = 'K';
      charArray0[6] = '>';
      JSONScanner jSONScanner0 = new JSONScanner("|MCi;XOy}", (-3160));
      jSONScanner0.setToken(52);
      MockDate mockDate0 = new MockDate();
      jSONScanner0.isEOF();
      assertEquals(52, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(cc~Ug");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">l-NZyosn6 2@Y.h'e");
      jSONReaderScanner0.scanDecimal('I');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      jSONReaderScanner0.scanIdent();
      JSONLexerBase.isWhitespace('6');
      jSONReaderScanner0.isEnabled((-1992), (-1992));
      double double0 = jSONReaderScanner0.scanDouble('6');
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("can not cast to JSONObject.");
      jSONReaderScanner0.scanFloat('\'');
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".$6");
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'Y';
      charArray0[2] = 'c';
      charArray0[3] = 'K';
      charArray0[4] = '';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONReaderScanner0.putChar('Z');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONLexerBase.isWhitespace('M');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ");
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'v';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONLexerBase.isWhitespace('O');
      JSONScanner jSONScanner0 = new JSONScanner("P;Aegy_g\"lw>L^");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("itj5KV?bA4D");
      jSONReaderScanner0.scanDate('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = 'z';
      charArray0[2] = 'F';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('w');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":keraKSPh[r9");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('i');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match i - :, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 123, (-915), (-915), 1544);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getCalendar();
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'W';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2363));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("htqa.P)ToNBJ|?t");
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) jSONReaderScanner0;
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "";
      jSONReaderScanner0.lexError("", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1-[Aa2M$ZA]_");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('D');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~]2vh= m62n%A");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      assertEquals('2', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("~]2vh= m62n%A", 0);
      jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      char[] charArray0 = new char[5];
      char char0 = '4';
      charArray0[0] = '4';
      charArray0[1] = 'g';
      charArray0[3] = 'R';
      charArray0[4] = ' ';
      jSONScanner0.scanFieldStringArray(charArray0, 69, (SymbolTable) null);
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-969));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = '2';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = 'x';
      charArray0[5] = 'w';
      charArray0[6] = 'q';
      charArray0[7] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9#(pOLfo5E(r");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('l');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@u+XX?!");
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '3';
      charArray0[2] = 'Z';
      charArray0[3] = '}';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_J-_X^I*@/Zc,V7^h,");
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = '\"';
      charArray0[2] = '%';
      charArray0[3] = ';';
      charArray0[4] = 'L';
      charArray0[5] = 'V';
      charArray0[6] = '.';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4700, 4700);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('*');
      assertEquals(4700, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("net.sf.json.JSONNull");
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, 't');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('\\');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(cc~Ug");
      jSONReaderScanner0.nextToken();
      JSONLexerBase.isWhitespace('\"');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3667);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('Z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x\"d-+7Vc98+BZ#/.9");
      char[] charArray0 = new char[6];
      charArray0[0] = '\u0085';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '\u0085';
      charArray0[4] = '`';
      charArray0[5] = '`';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanString('=');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NonStringKeyAsString");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = 'J';
      charArray0[4] = '-';
      charArray0[5] = 'S';
      charArray0[6] = ';';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONReaderScanner0.stringDefaultValue = null;
      jSONScanner0.scanISO8601DateIfMatch();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime(';', 'c', ';', ',', ')', '7');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      jSONReaderScanner0.scanType((String) null);
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(cc~Ug");
      jSONReaderScanner0.scanDecimal('l');
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      charArray0[8] = 'l';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanDate('l');
      jSONReaderScanner0.scanUUID('l');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 122, 122);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "e&L huQMG";
      JSONScanner jSONScanner0 = new JSONScanner("e&L huQMG");
      jSONScanner0.longValue();
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      char char0 = '<';
      char char1 = 'q';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("itj5KV?bA4D");
      int int0 = (-253);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      jSONReaderScanner0.scanIdent();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, '\'');
      jSONReaderScanner0.scanUUID('_');
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e|La76hz@Txl>Wb{^XS");
      jSONReaderScanner0.indexOf('+', 42);
      jSONReaderScanner0.scanInt('Z');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e|La76hz@Txl>Wb{^XS");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon(88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - e, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("writenullstringasempty");
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '1');
      jSONReaderScanner0.scanString('1');
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '}';
      charArray0[2] = 'h';
      charArray0[3] = '1';
      charArray0[4] = 'e';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      charArray0[8] = '1';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 58);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONLexerBase.isWhitespace('G');
      String string0 = "F\\uBQDV";
      JSONScanner jSONScanner0 = new JSONScanner(string0, 57);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'q';
      jSONScanner0.matchField2(charArray0);
      assertEquals(57, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'i';
      charArray0[7] = 'l';
      charArray0[8] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('i');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@Bu+WX?!");
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '+';
      charArray0[2] = '~';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'k';
      charArray0[6] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2813);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.matchStat = 2813;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.sp = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'+2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny", 82);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = 'L';
      jSONScanner0.scanLong('L');
      jSONScanner0.scanInt('L');
      jSONScanner0.scanType("create asm deserializer error, ");
      int int0 = (-1785);
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'N';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 54, 54);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('`');
      assertEquals(54, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'l';
      charArray0[2] = 'O';
      jSONReaderScanner0.tokenName();
      charArray0[3] = '6';
      charArray0[4] = 'b';
      charArray0[5] = '9';
      charArray0[6] = 'x';
      charArray0[7] = ']';
      charArray0[8] = '%';
      jSONReaderScanner0.scanFieldString(charArray0);
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONLexerBase.isWhitespace('\'');
      JSONScanner jSONScanner0 = new JSONScanner("7{))0*f,M~ AAa-qe=");
      jSONScanner0.scanDecimal('\'');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\u0016');
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("\"A_/$Ty[k&q>*HrHE", 31);
      jSONScanner0.putChar('\u0016');
      String string0 = jSONScanner0.numberString();
      assertEquals(31, jSONScanner0.getFeatures());
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 102;
      JSONScanner jSONScanner0 = new JSONScanner("create asm deserializer error, ", 102);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONLexerBase.isWhitespace('s');
      JSONScanner jSONScanner0 = new JSONScanner("x1jwF8O", (-1896));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_\"m:vkC1NVT|oLaP.z,");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%t8\u0000", 66);
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = 'x';
      charArray0[2] = '+';
      jSONScanner0.matchField2(charArray0);
      charArray0[3] = '&';
      charArray0[4] = '\\';
      charArray0[5] = 'H';
      charArray0[6] = 'A';
      jSONScanner0.scanIdent();
      charArray0[7] = '\'';
      charArray0[8] = '!';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.close();
      TimeZone timeZone0 = TimeZone.getTimeZone("%t8\u0000");
      jSONScanner0.timeZone = timeZone0;
      jSONScanner0.intValue();
      jSONScanner0.scanNumber();
      jSONScanner0.charAt(66);
      jSONScanner0.scanType("q");
      jSONScanner0.indexOf('A', 2899);
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONLexerBase.isWhitespace('K');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str", (-261));
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1148));
      assertEquals((-261), jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ll|0 O|t5qAF");
      jSONReaderScanner0.scanDate('y');
      jSONReaderScanner0.scanDouble('M');
      jSONReaderScanner0.scanIdent();
      System.setCurrentTimeMillis((-1));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zD{gzO_");
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
      
      Feature feature0 = Feature.IgnoreNotMatch;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 110;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 110);
      Locale locale0 = Locale.CANADA;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFloat('a');
      jSONReaderScanner0.lexError("_b-_@^I*@/Zc,V7^h,", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5Rq?$LN#Y(w=s5~{wAr");
      char char0 = 'Q';
      jSONReaderScanner0.scanBoolean('Q');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]qW!;3VR[X");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 124);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110);
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.eofPos = 192;
      jSONReaderScanner0.scanFloat('f');
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.scanDouble('w');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) 'w';
      objectArray0[3] = (Object) 'w';
      objectArray0[4] = (Object) 'w';
      objectArray0[5] = (Object) 'w';
      objectArray0[6] = (Object) 'w';
      objectArray0[7] = (Object) 'w';
      objectArray0[8] = (Object) 'w';
      jSONReaderScanner0.lexError("GFptU", objectArray0);
      jSONReaderScanner0.subString(192, 64);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a");
      jSONReaderScanner0.scanBoolean('h');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OfsetDateTime");
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'M');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - j, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '*';
      charArray0[2] = '_';
      charArray0[3] = '=';
      charArray0[4] = ';';
      charArray0[5] = '=';
      charArray0[6] = 'F';
      charArray0[7] = 'Z';
      charArray0[8] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '\u0013';
      charArray0[2] = '\u0013';
      charArray0[3] = '\u0013';
      charArray0[4] = '\u0013';
      charArray0[5] = '\u0013';
      charArray0[6] = '_';
      charArray0[7] = '\u0013';
      charArray0[8] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1611);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '+';
      charArray0[2] = '~';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'k';
      charArray0[6] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2813);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.sp = 0;
      JSONScanner.charArrayCompare("", 0, charArray0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.skipWhitespace();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanType("create asm deserializer error, ");
      int int0 = (-1785);
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JE$w2", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '0';
      charArray0[2] = 'i';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanDecimal('i');
      charArray0[3] = '';
      TimeZone.getAvailableIDs();
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken(115);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 438, 9);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. L
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = 'i';
      charArray0[3] = 'r';
      charArray0[4] = '`';
      charArray0[5] = 'i';
      charArray0[7] = 'P';
      charArray0[8] = 'r';
      int int0 = 24180;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24180, (-139));
      jSONReaderScanner0.scanDouble('$');
      jSONReaderScanner0.scanIdent();
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c");
      jSONReaderScanner0.scanIdent();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1544));
      assertTrue(jSONReaderScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,Vm^hR");
      SymbolTable symbolTable0 = new SymbolTable(8);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.isBlankInput();
      assertEquals('-', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'q';
      charArray0[2] = 'i';
      charArray0[3] = 'r';
      charArray0[4] = '`';
      charArray0[5] = 'i';
      charArray0[6] = '\\';
      charArray0[7] = 'P';
      charArray0[8] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24180, (-139));
      jSONReaderScanner0.scanIdent();
      assertEquals('`', jSONReaderScanner0.getCurrent());
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals((-7136), number0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-370));
      char[] charArray0 = new char[5];
      jSONScanner0.stringDefaultValue = "";
      charArray0[0] = '}';
      charArray0[1] = '}';
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      jSONReaderScanner0.scanDouble('n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'g';
      charArray0[2] = 'r';
      charArray0[3] = 'q';
      charArray0[4] = 's';
      charArray0[5] = 'G';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('a');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONLexerBase.isWhitespace('^');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.lookup(linkedList0, hashSet0);
      jSONReaderScanner0.setLocale((Locale) null);
      jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONLexerBase.isWhitespace(',');
      JSONScanner jSONScanner0 = new JSONScanner(" DUR_&4W$[|Y3<q}", 1509);
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(1509, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", (-2443));
      jSONReaderScanner0.scanLong('|');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.putChar('-');
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffsetDateTime");
      jSONReaderScanner0.scanString('\u0085');
      jSONReaderScanner0.scanDecimal('G');
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = '\u0085';
      charArray0[2] = '\u0085';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONLexerBase.isWhitespace('Q');
      JSONScanner jSONScanner0 = new JSONScanner("UseISO8601DateFormat", 114);
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('Q');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONLexerBase.isWhitespace('\b');
      char[] charArray0 = new char[3];
      charArray0[0] = '\b';
      charArray0[1] = '\b';
      charArray0[2] = '\b';
      int int0 = (-515);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-515));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'm';
      charArray0[2] = 'J';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      char[] charArray0 = new char[8];
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[0] = '!';
      charArray0[1] = '\'';
      charArray0[2] = 'M';
      charArray0[3] = '\\';
      charArray0[4] = 'W';
      charArray0[5] = 'o';
      charArray0[6] = '}';
      charArray0[7] = 'D';
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@Bu+WX?!");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('l');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("writenullstringasempty");
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '1');
      String string0 = jSONReaderScanner0.scanString('\u0085');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6,l h", 447);
      jSONReaderScanner0.scanDate('B');
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "4c]`'T[a@Bu+WX?!";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@Bu+WX?!");
      SymbolTable symbolTable0 = new SymbolTable(114);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ", 73);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('\"');
      assertEquals(73, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*(x=Tk)h:2^$", 0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanLong('S');
      jSONReaderScanner0.indexOf('i', 0);
      jSONReaderScanner0.indexOf('S', 2650);
      JSONScanner jSONScanner0 = new JSONScanner("-1j[VC", 0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1652, "-1j[VC");
      TimeZone.setDefault(simpleTimeZone0);
      jSONScanner0.setTimeZone(simpleTimeZone0);
      char char0 = ')';
      charArray0[1] = ')';
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2650);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      char char0 = '\u0019';
      JSONLexerBase.isWhitespace('\u0019');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^/UzdD?f/Q%T", (-4108));
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str");
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.scanUUID('4');
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = 'c';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2551, 2551);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffsetDateTime");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('\u0085');
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?).y-2t4R15]|");
      jSONReaderScanner0.setToken(0);
      int int0 = JSONLexer.NOT_MATCH_NAME;
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OfsetDateTime");
      boolean boolean0 = jSONReaderScanner0.scanBoolean('z');
      jSONReaderScanner0.close();
      boolean boolean1 = JSONLexerBase.isWhitespace('u');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '5';
      charArray0[0] = '5';
      charArray0[1] = 'L';
      int int0 = 16;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('5');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 5 - T, info : pos 0, json : TreeSet
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OrderedField");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4c]`'T[a@Bu+WX?!");
      jSONReaderScanner0.scanDouble('s');
      jSONReaderScanner0.skipWhitespace();
      JSONLexerBase.isWhitespace(']');
      JSONScanner jSONScanner0 = new JSONScanner("qpS", 0);
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = ']';
      charArray0[2] = ']';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-1), 0, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("XBx*E~");
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'd';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U,!4*.:4Icb");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken((-4534));
      assertEquals('!', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      jSONReaderScanner0.scanIdent();
      int int0 = jSONReaderScanner0.token();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4s");
      jSONReaderScanner0.scanDate('D');
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      char[] charArray0 = new char[8];
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[0] = '!';
      charArray0[1] = '\'';
      charArray0[2] = 'M';
      charArray0[3] = '\\';
      charArray0[4] = 'W';
      charArray0[5] = 'o';
      charArray0[6] = '}';
      charArray0[7] = 'D';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = '_';
      charArray0[2] = 't';
      charArray0[3] = '{';
      charArray0[4] = 'A';
      charArray0[5] = '';
      charArray0[6] = 'u';
      charArray0[7] = 'G';
      charArray0[8] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3035, 3035);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      char char0 = '<';
      jSONReaderScanner0.ch = '<';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) jSONReaderScanner0;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("G)D92hdRdl}n\"k_\"", 0);
      jSONScanner0.stringVal();
      char[] charArray0 = new char[4];
      char char0 = 'i';
      charArray0[0] = 'i';
      charArray0[1] = 'A';
      charArray0[2] = 'U';
      charArray0[3] = 'd';
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JE$w2", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '0';
      charArray0[2] = 'i';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanDecimal('i');
      charArray0[3] = '';
      SymbolTable symbolTable0 = new SymbolTable(2);
      boolean boolean0 = jSONScanner0.isEnabled(631, (-2955));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'x';
      charArray0[2] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. v
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tS~");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.tokenName();
      jSONScanner0.pos();
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'v';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[10] = 'o';
      JSONScanner jSONScanner0 = new JSONScanner("wS[AcO8ics9nZ^C7", (-719));
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_b-_@^I*@/Zc,V7^h,");
      SymbolTable symbolTable0 = new SymbolTable(47);
      jSONReaderScanner0.scanSymbol(symbolTable0, '*');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" c_jpwW");
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.scanBoolean('0');
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = 'P';
      charArray0[5] = '0';
      charArray0[6] = '0';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'F';
      charArray0[2] = '%';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1997, 31);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.OffetDateTime");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }
}
