/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:04:11 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(3955, 3955);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int[] intArray0 = charClass0.toArray();
      charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 243;
      intArray0[3] = 0;
      intArray0[4] = 671;
      intArray0[5] = 0;
      intArray0[6] = 1319;
      intArray0[7] = 145;
      intArray0[8] = 65793;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 549;
      intArray0[2] = 66639;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2741;
      intArray0[7] = 8169;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      CharClass charClass2 = charClass1.appendRange(32, 2741);
      CharClass charClass3 = charClass2.cleanClass();
      charClass3.appendRange(1386, (-1245));
      assertArrayEquals(new int[] {0, 8169, 66639, 0, 1386, (-1245), 66639, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-18144563);
      intArray0[1] = (-2265);
      intArray0[2] = (-3756);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.appendLiteral((-2265), 0);
      assertArrayEquals(new int[] {(-18144563), 0, (-3756), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      int[][] intArray0 = new int[0][0];
      charClass0.appendNegatedTable(intArray0);
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = (-1320);
      int int1 = (-219);
      CharClass charClass1 = charClass0.appendRange((-1320), (-219));
      charClass1.toString();
      int[] intArray0 = new int[0];
      int int2 = 245;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 245);
      charClass2.appendClassWithSign(intArray0, (-1320));
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][5];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      String string0 = charClass1.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.appendNegatedClass(intArray0);
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 128594);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 1507;
      intArray1[1] = 1432;
      intArray1[2] = 18;
      intArray1[3] = 12;
      intArray0[0] = intArray1;
      charClass0.appendTableWithSign(intArray0, 12);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 357;
      intArray0[1] = (-1701);
      int int0 = (-79);
      intArray0[2] = (-79);
      int int1 = 0;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[3][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      charClass0.toString();
      CharClass charClass1 = charClass0.appendTable(intArray1);
      CharClass charClass2 = charClass0.appendLiteral(intArray0[1], int1);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      charClass3.appendFoldedClass(intArray0);
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass0.appendNegatedTable(intArray1);
      charClass4.cleanClass();
      charClass0.appendTableWithSign(intArray1, int0);
      CharClass charClass5 = charClass3.appendNegatedTable(intArray1);
      CharClass charClass6 = charClass3.appendRange(intArray0[3], intArray0[1]);
      charClass6.negateClass();
      int int2 = 0;
      int int3 = 2496;
      CharClass charClass7 = charClass1.appendRange(int2, int3);
      int int4 = (-1);
      CharClass.charClassToString(intArray1[2], int4);
      charClass4.negateClass();
      int[] intArray2 = new int[5];
      intArray2[0] = int3;
      intArray2[1] = int4;
      intArray2[2] = int2;
      intArray2[3] = int0;
      intArray2[4] = int4;
      charClass5.appendClassWithSign(intArray2, int4);
      charClass7.appendFoldedClass(intArray1[0]);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-8);
      intArray0[1] = (-740);
      intArray0[2] = 670;
      intArray0[3] = 12880;
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      charClass0.appendTable(intArray1);
      intArray0[4] = 4018;
      intArray0[5] = (-2381);
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(1, 1006);
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      int int0 = (-3460);
      int int1 = (-2184);
      CharClass charClass3 = charClass2.appendLiteral((-3460), (-2184));
      int[][] intArray1 = new int[2][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][9];
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 11710;
      charClass0.appendRange(11710, 11710);
      charClass0.negateClass();
      // Undeclared exception!
      charClass0.appendFoldedRange(0, 11710);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass2, charClass3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(1974, 1974);
      CharClass charClass2 = charClass1.appendLiteral(1974, (-3387));
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[9];
      intArray1[0] = (-3387);
      intArray1[1] = (-3387);
      intArray1[2] = 510;
      intArray1[3] = (-3387);
      intArray1[4] = (-3387);
      intArray1[5] = 1974;
      intArray1[6] = 4025;
      intArray1[7] = 1974;
      intArray1[8] = 1974;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 510;
      intArray2[1] = 2946;
      intArray2[2] = 1974;
      intArray0[1] = intArray2;
      charClass0.appendNegatedTable(intArray0);
      CharClass charClass3 = charClass2.appendRange((-3387), 0);
      int[] intArray3 = charClass3.toArray();
      assertArrayEquals(new int[] {511, 2483, (-3387), 509, 2485, 1114111}, intArray3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-8173582);
      intArray0[1] = 2;
      charClass0.appendNegatedClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2407;
      int int0 = 193;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
      // Undeclared exception!
      charClass1.appendFoldedRange(15, 1795);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[1] = 6102;
      intArray0[2] = 1;
      intArray0[3] = 2377;
      intArray0[4] = (-3487907);
      intArray0[5] = 2683;
      intArray0[6] = (-40);
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      int[] intArray2 = charClass0.toArray();
      assertArrayEquals(new int[] {6103, 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendLiteral(1, 1);
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[6] = 1;
      intArray1[7] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 650;
      intArray0[1] = intArray1;
      int[] intArray3 = new int[9];
      intArray3[0] = 650;
      intArray3[1] = 1;
      intArray3[2] = 650;
      intArray3[3] = 1;
      intArray3[4] = 1;
      intArray3[5] = 1;
      intArray3[6] = 1;
      intArray3[7] = 650;
      intArray3[8] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 1;
      intArray4[1] = 1374;
      intArray4[2] = 1;
      intArray4[3] = 650;
      intArray4[4] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 1;
      intArray5[1] = 1094;
      intArray0[4] = intArray1;
      int[] intArray6 = new int[6];
      intArray6[0] = 1;
      intArray6[1] = 1;
      intArray6[2] = 650;
      intArray6[3] = 1;
      intArray6[4] = 1;
      intArray6[5] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[17];
      intArray7[0] = 1;
      intArray7[1] = 1094;
      intArray7[2] = 1094;
      intArray7[3] = 1094;
      intArray7[4] = 1;
      intArray7[5] = 1;
      intArray7[6] = 1;
      intArray7[7] = 1;
      intArray7[8] = 105;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      intArray8[0] = 1;
      intArray8[1] = 1094;
      intArray8[2] = 1374;
      intArray8[3] = 1;
      intArray8[4] = 1374;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[5];
      intArray9[0] = 1;
      intArray9[1] = 1;
      intArray9[2] = 1374;
      intArray9[3] = 105;
      intArray9[4] = 650;
      intArray0[8] = intArray9;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[8];
      intArray1[1] = 20865;
      intArray1[0] = 20865;
      intArray0[0] = intArray1;
      CharClass charClass0 = new CharClass(intArray1);
      charClass0.toString();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      charClass1.appendLiteral(55203, 55203);
      charClass2.cleanClass();
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      charClass3.appendFoldedRange((-501), (-501));
      charClass3.toArray();
      assertArrayEquals(new int[] {0, 1114111, (-501), (-501), 0, 0, 0, 0}, intArray1);
  }
}
