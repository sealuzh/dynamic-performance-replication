/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:13:39 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 93);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Parser.parse("s(?S", 3788);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?S`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$l", 12);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "?|!)WR";
      int int0 = 8473;
      try { 
        Parser.parse("?|!)WR", 8473);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1339);
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = "}**s8F-e }1)2x#r$";
      try { 
        Parser.parse("}**s8F-e }1)2x#r$", (-435));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `**`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      Parser parser0 = new Parser(", 5f6s\"Rs ", (-3701));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("", 0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "+V-BEXTJ+C.u2FQ8";
      int int0 = 8297;
      try { 
        Parser.parse("+V-BEXTJ+C.u2FQ8", 8297);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "*";
      int int0 = (-1579);
      try { 
        Parser.parse("*", (-1579));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pha:]", (-1487));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 98;
      String string0 = "K(";
      try { 
        Parser.parse("K(", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `K(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "L(?P<";
      try { 
        Parser.parse("L(?P<", (-3259));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-6799);
      Regexp regexp0 = Parser.parse("f", (-6799));
      assertNotNull(regexp0);
      
      String string0 = null;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 83;
      Regexp regexp0 = Parser.parse("r.9", 64041);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 80, 2262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "q$";
      Regexp regexp0 = Parser.parse("q$", 80);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string1 = regexp1.toString();
      assertNotSame(regexp1, regexp0);
      assertNotNull(string1);
      assertEquals("\\A", string1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexp1.flags = 80;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 80, (-3148));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = 65;
      Regexp regexp1 = Parser.parse(".9", 65);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("ps$Gd:uo", 65);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      int int1 = 0;
      String string0 = "P)(&8-V`7M)*+";
      int int2 = 126;
      Regexp regexp3 = Parser.parse(string0, int2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      String string1 = "y8+";
      Regexp regexp4 = Parser.parse(string1, int1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotNull(regexp4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      
      String string2 = "D-";
      Regexp regexp5 = Parser.parse(string2, int2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotNull(regexp5);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      
      int int3 = 124;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        Parser.parse("(?S?", 3800);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?S`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        Parser.parse("(#", 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("dEu{", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "{`|H)?R";
      try { 
        Parser.parse("{`|H)?R", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "\\d";
      try { 
        Parser.parse("[:-P", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-16);
      Regexp regexp0 = Parser.parse("C", (-16));
      assertNotNull(regexp0);
      
      regexp0.reinit();
      int int1 = 50;
      String string0 = "9yB[s~Z@+`4>A>>pKZ";
      String string1 = "[?'GL>jB";
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string2 = "y`IGx";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[s~Z@+`4>A>>pKZ`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Qc0Df@", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 8473;
      try { 
        Parser.parse("|H)?R", 8473);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp regexp0 = Parser.parse("!|=R", 8);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp regexp0 = Parser.parse("!|@?R", 8424);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{+g_L#", 52);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("ypy\u0002YIc']d", 935);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 55, 52);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-2100);
      String string0 = "<[";
      try { 
        Parser.parse("<[", (-735));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      try { 
        Parser.parse("[", (-2176));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "[:";
      try { 
        Parser.parse("[:", 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "\\PBf2:R~`,/MJKnR;";
      int int0 = 4744;
      String string1 = ")J3,*NJiSlW,R";
      try { 
        Parser.parse(")J3,*NJiSlW,R", 4744);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-176);
      try { 
        Parser.parse("r^)%,2>;$", (-176));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "^(<";
      int int0 = 128064;
      try { 
        Parser.parse("^(<", 128064);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `^(<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", (-3259));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-3259);
      Regexp regexp0 = Parser.parse("(-m:$)", (-3259));
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 3661, (-199));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      String string0 = regexp2.toString();
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(string0);
      assertEquals("\\z", string0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      Regexp regexp3 = new Regexp(regexp_Op2);
      assertNotNull(regexp3);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      
      Regexp regexp5 = new Regexp(regexp1);
      assertNotNull(regexp5);
      assertFalse(regexp_Op0.equals((Object)regexp_Op2));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      
      regexp5.cap = 44;
      Regexp regexp6 = new Regexp(regexp5);
      assertNotNull(regexp6);
      assertFalse(regexp_Op0.equals((Object)regexp_Op2));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertTrue(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp0));
      
      Regexp regexp7 = new Regexp(regexp2);
      assertNotNull(regexp7);
      assertFalse(regexp_Op0.equals((Object)regexp_Op2));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp6));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp2.equals((Object)regexp6));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp1));
      
      Regexp regexp8 = Parser.parse("z", 69825);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp0);
      assertNotNull(regexp8);
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp0));
      
      Regexp regexp9 = Parser.parse("z", 44);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp5);
      assertNotNull(regexp9);
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp5));
      
      String string1 = "Any";
      int int0 = (-117);
      Regexp regexp10 = Parser.parse(string1, int0);
      assertNotSame(regexp10, regexp5);
      assertNotSame(regexp10, regexp6);
      assertNotSame(regexp10, regexp0);
      assertNotSame(regexp10, regexp2);
      assertNotSame(regexp10, regexp7);
      assertNotSame(regexp10, regexp4);
      assertNotSame(regexp10, regexp9);
      assertNotSame(regexp10, regexp3);
      assertNotSame(regexp10, regexp8);
      assertNotSame(regexp10, regexp1);
      assertNotNull(regexp10);
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(regexp10.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp2));
      assertFalse(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp8));
      assertFalse(regexp10.equals((Object)regexp1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      try { 
        Parser.parse("u;1}0[g+l-[iYscZRb@", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `l-[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PB/2:R~`,/MJinR;", (-5184));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("(?-m", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int0 = 108;
      String string0 = "(?i:";
      try { 
        Parser.parse("(?i:", 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 2285;
      try { 
        Parser.parse("Z(?-m:+$)", 2285);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("q%\"XnzOIDc*dz@", (-2055));
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("_ i{6oA", (-2055));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 4250, 4250);
      assertNotNull(regexpArray0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-2055), 65077);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?P<", (-1181));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("&.ai;Gq<mdGF9{5", (-2175));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = Parser.parse("(?P<", 1370);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotNull(regexp4);
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp5 = Parser.parse("(?P<", (-3177));
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotNull(regexp5);
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      
      regexpArray0[0] = regexp5;
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp4;
      Regexp regexp6 = Parser.parse("&.ai;Gq<mdGF9{5", 1370);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      
      regexpArray0[5] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-792), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -792
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-2079);
      try { 
        Parser.parse("dsg[--P", (-2079));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[--P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 6169;
      try { 
        Parser.parse("(XSC>v:[-<Oc)fwLi", 6169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-<Oc)fwLi`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 8473;
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser$Stack", 66662);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("[:wLi", 8473);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:wLi`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "[:f\\wLi";
      try { 
        Parser.parse("[:fwLi", 352);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:fwLi`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp regexp0 = Parser.parse("W", 65);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("p::x00-x{10FFFF}]", (-2618));
      assertNotNull(parser0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("p::x00-x{10FFFF}]", 46);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = Parser.parse("[^x00-x{10FFFF}]", (-2618));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      
      Regexp regexp5 = Parser.parse("[^x00-x{10FFFF}]", 128317);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1013;
      Regexp regexp0 = Parser.parse("D", 1013);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp0.equals((Object)regexp1));
      
      String string0 = regexp1.toString();
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotNull(string0);
      assertEquals("(?i:D)", string0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      regexp0.max = 1013;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("[^0-9]", 64);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:}]", (-1724));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = null;
      int int0 = (-54);
      Parser parser0 = new Parser((String) null, (-54));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("x", 5);
      assertNotNull(regexp0);
      
      String string1 = "}eSF.'Xx'(RTsP'\\K\\";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0001", 53);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 94;
      String string0 = "\\P\\x00-\\x{10FFFF}]";
      String string1 = "\\x{";
      Regexp regexp0 = Parser.parse("x{", 4);
      assertNotNull(regexp0);
      
      int int1 = 1333;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = ":x0-\\xQ10FFFF}]";
      int int0 = (-2175);
      Regexp regexp0 = Parser.parse(":x0-xQ10FFFF}]", (-2175));
      assertNotNull(regexp0);
      
      String string1 = "g5SC>v:[-i/c){f\\wLi";
      int int1 = 4257;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\w`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "[::\\x00-\\x{W0FFFF}]";
      int int0 = 127488;
      Regexp regexp0 = Parser.parse("[::x00-x{W0FFFF}]", 127488);
      assertNotNull(regexp0);
      
      int int1 = 41;
      Parser parser0 = new Parser(string0, int1);
      assertNotNull(parser0);
      assertFalse(int1 == int0);
      
      String string1 = "invalid character class";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string2 = "Jg=O~Gkq7udZ";
      Regexp regexp2 = Parser.parse(string2, int0);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      int int2 = 3240;
      Regexp regexp4 = Parser.parse(string2, int2);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotNull(regexp4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[1] = regexp4;
      int int3 = 654;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 654
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-16);
      Regexp regexp0 = Parser.parse("P{/2aR~,+T'JinR", (-16));
      assertNotNull(regexp0);
      
      String string0 = "&rQPCFia*VIdV";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::x00-x{10FFFF}]", 127488);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("[::x00-x{10FFFF}]", 41);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 86, 86);
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("/c", 0);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("\t", 0);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("\t", 31);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      try { 
        Parser.parse("~98DmA)x%", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-1931);
      Regexp regexp0 = Parser.parse("[:]z", (-205));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("_&", (-384));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("[:]z", 93);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("Nd", 11568);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp4 = new Regexp(regexp1);
      assertNotNull(regexp4);
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      
      regexpArray0[0] = regexp4;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1096, (-1931));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp regexp0 = Parser.parse("!iIj_;Po6-J[<]T`a", (-2175));
      assertNotNull(regexp0);
      
      int int0 = 94;
      Regexp regexp1 = Parser.parse("!iIj_;Po6-J[<]T`a", 94);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 109, 94);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]z", 212);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("-<", 212);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      int int0 = (-900);
      regexp0.subs = null;
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op0;
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-900), (-900));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      try { 
        Parser.parse("(?P<(?P<(?P<(?(?P<", (-900));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?P<(?P<(?(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "\\pZI6M\\p-%?n'";
      Regexp regexp0 = Parser.parse("pZI6Mp-%?n'", (-2072));
      assertNotNull(regexp0);
      
      String string1 = "7ZOPg";
      int int0 = 49;
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string2 = "Pi";
      int int1 = 214;
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse(string0, int1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp regexp4 = Parser.parse(string2, int1);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotNull(regexp4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Parser parser0 = new Parser(", 5f6s\"Rs ", 57);
      assertNotNull(parser0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "KSJGuWZL$U";
      String string1 = "\\.+*?()|[]{}^$";
      regexp0.flags = 57;
      try { 
        Parser.parse(".+*?()|[]{}^$", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]{}^$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      try { 
        Parser.parse(".+*?()|[]{}^$", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "\\5+0tL3nO}][C'";
      int int0 = 109;
      Parser parser0 = new Parser("\u0005+0tL3nO}][C'", 109);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("\u0005+0tL3nO}][C'", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[C'`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 296;
      Regexp regexp0 = Parser.parse(" \u0007P8SQ&a |b!", 296);
      assertNotNull(regexp0);
      
      int int1 = 48;
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 12;
      Regexp regexp0 = Parser.parse("/0t3n}]C'", 12);
      assertNotNull(regexp0);
      
      regexp0.min = 12;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      
      boolean boolean1 = regexp3.equals("pc){fwLi");
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertFalse(boolean1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(boolean1 == boolean0);
      
      String string0 = regexp2.toString();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(string0);
      assertEquals("/0t3n\\}\\]C'", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      
      String string1 = regexp3.toString();
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(string1);
      assertEquals("/0t3n\\}\\]C'", string1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(string1.equals((Object)string0));
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1844), 1272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1844
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 2073;
      Regexp regexp0 = Parser.parse("\u0000>S", 2073);
      assertNotNull(regexp0);
      
      int int1 = 45;
      Parser parser0 = new Parser("\u0000>S", 45);
      assertNotNull(parser0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 42787);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\b", 84);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(";ayL2j`)3%{:vH]gt)", 66);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("hCl3&L}i2@n ", 42510);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertFalse(boolean0);
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 192);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.flags = 4748;
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      
      boolean boolean0 = regexp1.equals("D");
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp2);
      assertFalse(boolean0);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp3));
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 192, 122);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      try { 
        Parser.parse("a|H)?R", 2968);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[7];
      Regexp regexp0 = Parser.parse("s$Yf{73\f4`", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ENh_LINE", 98);
      assertNotNull(regexp0);
      
      regexp0.flags = 45;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("\f", 45);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals("(?P<");
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp3);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Parser parser0 = new Parser((String) null, (-519));
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B/2R~,+/MJinR", 120);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "\\P\\]";
      int int0 = (-1766);
      Regexp regexp0 = Parser.parse("P]", (-1766));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      
      Regexp.Op regexp_Op2 = Regexp.Op.LITERAL;
      Regexp regexp5 = new Regexp(regexp_Op2);
      assertNotNull(regexp5);
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      
      Regexp.Op regexp_Op3 = Regexp.Op.CHAR_CLASS;
      Regexp regexp6 = new Regexp(regexp_Op3);
      assertNotNull(regexp6);
      assertFalse(regexp_Op3.equals((Object)regexp_Op2));
      assertFalse(regexp_Op3.equals((Object)regexp_Op1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      
      Regexp.Op regexp_Op4 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp7 = new Regexp(regexp_Op4);
      assertNotNull(regexp7);
      assertFalse(regexp_Op4.equals((Object)regexp_Op1));
      assertFalse(regexp_Op4.equals((Object)regexp_Op2));
      assertFalse(regexp_Op4.equals((Object)regexp_Op3));
      assertFalse(regexp_Op4.equals((Object)regexp_Op0));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp5));
      
      int int1 = 1636;
      Regexp regexp8 = Parser.parse("(?-s:.)", 1636);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      assertNotNull(regexp8);
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      
      Regexp regexp9 = Parser.parse("P:", (-1766));
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp4);
      assertNotNull(regexp9);
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp4));
      
      try { 
        Parser.parse("(?-s:.)", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 1039;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 1039, 1039);
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "]>IxL*B\\r7F4-AU";
      int int1 = (-1103);
      Regexp regexp1 = Parser.parse("]>IxL*B\r7F4-AU", (-1103));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      int int2 = 961;
      Parser parser0 = new Parser("gA^.", 961);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("(?(?", (-207));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = (-519);
      Regexp regexp0 = Parser.parse("L3||c7", 65);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("~DrYTp7_?J", 43);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("L3||c7", 43);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      
      Regexp regexp5 = new Regexp(regexp4);
      assertNotNull(regexp5);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      
      Regexp regexp6 = new Regexp(regexp3);
      assertNotNull(regexp6);
      assertFalse(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertTrue(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "\\v$'";
      int int0 = 92;
      Parser parser0 = new Parser("v$'", 92);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("v$'", 64);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("v$'", (-2138));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("invalid character class", (-1537));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = regexp1.subs;
      assertNull(regexpArray0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 115, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "\\3E<9;N3";
      Regexp regexp0 = Parser.parse("\u0003E<9;N3", (-16));
      assertNotNull(regexp0);
      
      String string1 = ",_2>\\8";
      int int0 = 47;
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string2 = "Buhid";
      int int1 = (-1699);
      Regexp regexp2 = Parser.parse(string2, int1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      int int2 = 590;
      int int3 = 10;
      Regexp regexp3 = Parser.parse(string0, int3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      int int4 = 66639;
      Regexp[] regexpArray0 = null;
      int int5 = 46;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int5, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "\"]0vC";
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("\"]0vC", 110);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp regexp4 = new Regexp(regexp1);
      assertNotNull(regexp4);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      
      Regexp regexp5 = new Regexp(regexp2);
      assertNotNull(regexp5);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp2));
      
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
      
      regexp5.reinit();
      assertNotSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertTrue(regexp2.equals((Object)regexp5));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp2));
      
      String string1 = "[:\\";
      int int0 = 92;
      try { 
        Parser.parse("[:", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pPm", (-2079));
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = Parser.parse("\uD802\uDE50", (-2079));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 3644, 109);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 1013;
      Regexp regexp0 = Parser.parse("A", 1013);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      String string0 = "[6zl^M;*\"EGhWy#ik";
      Regexp regexp1 = Parser.parse("pfwLi", 1013);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp0.equals((Object)regexp1));
      
      String string1 = "9S";
      Regexp regexp2 = Parser.parse(string1, int0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      int int1 = 987;
      Parser parser0 = new Parser(string0, int1);
      assertNotNull(parser0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      int int2 = 12;
      Regexp[] regexpArray0 = new Regexp[0];
      int int3 = 94;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      try { 
        Parser.parse("kqpfD'w!c\u0004[F?Ea [", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[F?Ea [`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w~Zw|wKM", (-3164));
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals("[:}]");
      assertFalse(boolean0);
      
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vrR@M](#})po|vi8=", (-608));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "\\d";
      int int0 = (-392);
      Regexp regexp0 = Parser.parse("d", (-392));
      assertNotNull(regexp0);
      
      String string1 = "LprU1sP}{W{\\6h";
      Regexp regexp1 = Parser.parse("LprU1sP}{W{\u0006h", (-392));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
      assertFalse(regexp0.equals((Object)regexp1));
      
      int int1 = 65279;
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      regexp2.reinit();
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp5 = new Regexp(regexp_Op1);
      assertNotNull(regexp5);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = regexp5.subs;
      assertNull(regexpArray0);
      
      Regexp regexp6 = new Regexp(regexp4);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp3.equals((Object)regexp5));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      
      Regexp regexp7 = Parser.parse(string0, int0);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp1);
      assertNotNull(regexp7);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(int0 == int1);
      
      int int2 = (-1082);
      Regexp regexp8 = Parser.parse(string0, int2);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp1);
      assertNotNull(regexp8);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "[::\\x00-\\x{1F0FFFF}]";
      int int0 = 80;
      Regexp regexp0 = Parser.parse("[::x00-x{1F0FFFF}]", 80);
      assertNotNull(regexp0);
      
      int int1 = 3892;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      assertFalse(int0 == int1);
      
      String string1 = "(?(?(?S<";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "a|H)?R";
      int int0 = 8473;
      try { 
        Parser.parse("a|H)?R", 8473);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 2736;
      Regexp regexp0 = Parser.parse("\n", 2736);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("PKS34ff&7?y2WK", (-1585));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = Parser.parse("Avestan", 9);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      
      try { 
        Parser.parse("[:)f\u0003Li", 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:)f\u0003Li`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = "\\pPm";
      int int0 = 1013;
      Regexp regexp0 = Parser.parse("pPm", 1013);
      assertNotNull(regexp0);
      
      String string1 = "B1RV$'([M-";
      Regexp regexp1 = Parser.parse("D", 48);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      try { 
        Parser.parse("B1RV$'([M-", (-1967));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[M-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "{04.$3:xB|R'";
      Regexp regexp0 = Parser.parse("{04.$3:xB|R'", (-2528));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      String string1 = regexp0.toString();
      assertNotNull(string1);
      assertEquals("\\{04(?-s:.)$3:xB|R'", string1);
      assertFalse(string1.equals((Object)string0));
      
      regexpArray0[1] = regexp0;
      int int0 = (-308);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 178, (-308));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Parser parser0 = new Parser("|@K6|'JQ|D!D", 5);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      try { 
        Parser.parse("[wBdo;a|ySbl,bmglW", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[wBdo;a|ySbl,bmglW`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Regexp regexp0 = Parser.parse("g(5SC>v:[-i/c){fwLi", (-3013));
      assertNotNull(regexp0);
      
      regexp0.reinit();
      regexp0.name = "g(5SC>v:[-i/c){fwLi";
      Regexp regexp1 = Parser.parse("p\u0002{fwLi", 9);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string0 = "\\D";
      int int0 = 616;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "Braille";
      int int1 = (-905);
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp2;
      regexpArray0[7] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "[::\\x0#0\\x10FFF}]";
      int int0 = 127477;
      Regexp regexp0 = Parser.parse("[::x0#0x10FFF}]", 127477);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      int int1 = 420;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x0#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Parser parser0 = new Parser("[::\u0000#0x10FFF}]", 8115);
      assertNotNull(parser0);
      
      String string0 = "(?(?(?S<";
      Regexp regexp0 = Parser.parse("[::\u0000#0x10FFF}]", 2561);
      assertNotNull(regexp0);
      
      Parser parser1 = new Parser("missing closing ]", 8115);
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
      
      regexp0.reinit();
      Regexp[] regexpArray0 = regexp0.subs;
      assertNotNull(regexpArray0);
      
      int int0 = (-208);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 54, (-1631));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vrL^OR@M](#})po|vi8=", 197);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = regexp0.subs;
      assertNotNull(regexpArray0);
      
      String string0 = null;
      Regexp regexp2 = Parser.parse("", 197);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("|4{#IFV*F?", 32);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      
      Regexp regexp5 = Parser.parse("\u0000", 197);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp6 = new Regexp(regexp_Op0);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      
      Regexp regexp7 = new Regexp(regexp2);
      assertNotNull(regexp7);
      assertFalse(regexp2.equals((Object)regexp6));
      assertFalse(regexp2.equals((Object)regexp5));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp0));
      assertTrue(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      
      String string1 = "8'uM`{v2j";
      Regexp regexp8 = Parser.parse("\u0000", 67);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp7);
      assertNotNull(regexp8);
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp3));
      assertTrue(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp7));
      
      int int0 = 43215;
      int int1 = 105;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 92, 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Regexp regexp0 = Parser.parse("V>MQ0P^?0", 3647);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("A|.", 41);
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
  }
}
