/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:15:53 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.StringCharacterIterator;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.decapitalize("scanFieldUUID");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("scanFieldUUID");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : scanFieldUUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(type0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      
      Class<DataTruncation> class2 = DataTruncation.class;
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<JobAttributes> class0 = JobAttributes.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Short short0 = new Short((short) (-19));
      TypeUtils.castToFloat(short0);
      // Undeclared exception!
      try { 
        JSON.parseObject("r$4mndXa?{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : r$4mndXa?{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "";
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToSqlDate("");
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      ClassLoader.getSystemClassLoader();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      parameterizedTypeImpl0.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.getClassFromMapping("L");
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("(I)V", classLoader0, true);
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeUtils.isNumber("cg_IYC");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.isPath(class0);
      TypeUtils.loadClass("javax.xml.datatype.XMLGregorianCalendar");
      ClassLoader.getSystemClassLoader();
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<RenderingHints> class0 = RenderingHints.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rn{KC@awX(E\",\"&>", "rn{KC@awX(E\",\"&>", (-590));
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLNonTransientConnectionException: rn{KC@awX(E\",\"&>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.toLocale("SeX&");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.getClassFromMapping(",4");
      TypeUtils.isNumber("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("euaYx55LipCLA/;Y8QD");
      TypeUtils.castToString((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("euaYx55LipCLA/;Y8QD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : euaYx55LipCLA/;Y8QD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Boolean boolean0 = new Boolean((String) null);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError((String) null);
      noClassDefFoundError0.getStackTrace();
      noClassDefFoundError0.getStackTrace();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Short> class0 = Short.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass("Ljava.awt.Point");
      TypeUtils.castToDate((Object) null);
      TypeUtils.toLocale("Ljava.awt.Point");
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, "&]$Z06P57H");
      String string0 = ParserConfig.DENY_PROPERTY;
      DecimalFormatSymbols.getInstance();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Character> class0 = Character.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      HttpCookie httpCookie0 = new HttpCookie("P5>on?(r#>-", "fastjson.parser.deny");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<FieldInfo> class1 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.castToString((Object) null);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<Date, SQLTransientException> treeMap0 = new TreeMap<Date, SQLTransientException>();
      Properties properties0 = new Properties();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.castToJavaBean((Object) properties0, class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("min@O5k[.d", "", "BrowserCompatible", (byte) (-125));
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : min@O5k[.d.(BrowserCompatible)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "can not cast to byte, value : ";
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      TypeUtils.unwrapOptional((Type) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) treeMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.loadClass("+");
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getClassFromMapping("+");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("+");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(noClassDefFoundError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.loadClass("+");
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getClassFromMapping("+");
      Object object0 = null;
      TypeUtils.castToSqlTime((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.loadClass(".f`v_\"S<FOO,.dYdOE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      NoSuchFieldError noSuchFieldError0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(noSuchFieldError0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(0);
      Field[] fieldArray0 = new Field[0];
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.Object@141ef3ae
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<Short> class0 = Short.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader1.clearAssertionStatus();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMClassLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.util.ASMClassLoader@5654129d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("j");
      outOfMemoryError0.printStackTrace();
      outOfMemoryError0.getStackTrace();
      outOfMemoryError0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ljava.lang.AutoCloseable", "j");
      sQLTimeoutException0.spliterator();
      outOfMemoryError0.initCause(sQLTimeoutException0);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) outOfMemoryError0, class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getClassFromMapping("trim");
      Class<Boolean> class2 = Boolean.class;
      Class<InterruptedException> class3 = InterruptedException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.lang.AutoCloseable", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.lang.AutoCloseable", class2, class3, class2, (Field) null, 2151, 3, 3);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      assertEquals("class java.lang.String", class1.toString());
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      hashMap0.remove((Object) sQLSyntaxErrorException0);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      hashMap0.put("fastjson.parser.autoTypeAccept", "fastjson.parser.deny");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>(hashMap0);
      ParserConfig parserConfig1 = new ParserConfig();
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      identityHashMap0.putAll(hashtable0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass((String) null);
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToBigInteger((Object) null);
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)22;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("t*<`*G}v8}a.O");
      String string0 = "&]$Z06P57H";
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.isProxy(class0);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(renderingHints_Key0).toString();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, "&]$Z06P57H");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {null=&]$Z06P57H}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      TypeUtils.isNumber("com.google.common.collect.TreeMultimap");
      LinkedHashSet<TypeNotPresentException> linkedHashSet0 = new LinkedHashSet<TypeNotPresentException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.createCollection(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError((String) null);
      noSuchMethodError0.getStackTrace();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.ImageCapabilities@60b94ad3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeUtils.castToString(class0);
      Boolean boolean0 = new Boolean("java.lang.Class@0000000001");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      TypeUtils.isHibernateInitialized(mockIllegalAccessException0);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "'nH*p|5!p6UL", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class [D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("h7|}UCHXa\"+");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache(":j", weakHashMap0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus(":j", false);
      MockThread mockThread0 = new MockThread("h7|}UCHXa\"+");
      MockThread.reset();
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("h7|}UCHXa\"+", classLoader1, false);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(":j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : :j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.getCollectionItemClass((Type) null);
      SerializeWriter serializeWriter0 = new SerializeWriter(86);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      simplePropertyPreFilter0.apply(jSONSerializer0, breakIterator0, "java.lang.Comparable");
      simplePropertyPreFilter0.setMaxLevel(86);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getGenericParamType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      String string0 = File.pathSeparator;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, (PropertyNamingStrategy) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(0);
      ParserConfig.getFieldFromCache("timeZone", linkedHashMap0);
      String string0 = "currency";
      Field[] fieldArray0 = new Field[0];
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.getField(class1, "currency", fieldArray0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      TreeMap<SQLException, SQLDataException> treeMap0 = new TreeMap<SQLException, SQLDataException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(S)Ljava/lang/Short;");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      BatchUpdateException batchUpdateException0 = TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
      assertEquals(0, batchUpdateException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = File.pathSeparator;
      identityHashMap0.clear();
      String string1 = File.separator;
      Class<Point> class0 = Point.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      Hashtable<JSONObject, MockSimpleDateFormat> hashtable0 = new Hashtable<JSONObject, MockSimpleDateFormat>();
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("null:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      HashSet<MockJapaneseDate> hashSet0 = new HashSet<MockJapaneseDate>();
      hashMap0.remove((Object) hashSet0, (Object) hashSet0);
      hashMap0.put("gettoString", "'a{(");
      hashMap0.put("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", "gettoString");
      hashMap0.put((String) null, "");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToDouble((Object) null);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getClass((Type) class0);
      ParserConfig.getGlobalInstance();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("fastjson.parser.deny");
      Class<Time> class1 = Time.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.util.concurrent.ConcurrentSkipListMap", treeMap0);
      Class<Double> class2 = Double.TYPE;
      TypeUtils.getGenericParamType(class2);
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setPackageAssertionStatus((String) null, true);
      ThreadGroup threadGroup0 = new ThreadGroup("javassist.util.proxy.ProxyObject");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "+ZB B");
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null);
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("javassist.util.proxy.ProxyObject", classLoader1, true);
      Collection collection0 = TypeUtils.createCollection(type0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      long long0 = TypeUtils.fnv1a_64_lower("U5w4<");
      assertEquals(8447364861517506344L, long0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, class0);
      Class<Object> class1 = Object.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null, false);
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Object object0 = new Object();
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig.getGlobalInstance();
      Class<MockCalendar> class1 = MockCalendar.class;
      TypeUtils.isKotlin(class1);
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31, 31);
      jSONReaderScanner0.scanUUID('d');
      TypeUtils.castToInt((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<RenderingHints> class2 = RenderingHints.class;
      boolean boolean1 = TypeUtils.isKotlin(class2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      AtomicLong atomicLong0 = new AtomicLong((-32L));
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("K;)/WnQs[\"01jeY");
      SQLWarning sQLWarning0 = new SQLWarning("K;)/WnQs[\"01jeY", "", 39, mockIllegalStateException0);
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(2, list0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "K;)/WnQs[\"01jeY", (-1383), (Map<String, ClientInfoStatus>) null);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError(";*Q1i7,!DW\u0006a-");
      boolean boolean1 = TypeUtils.isHibernateInitialized(noSuchFieldError0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      TypeUtils.getGenericParamType(class0);
      ParserConfig.getGlobalInstance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = new LinkedList<FieldInfo>();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte((Object) null);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 30, 9);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockGregorianCalendar0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Float> class0 = Float.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      int int0 = Calendar.DATE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.getClass((Type) class0);
      String string0 = ParserConfig.DENY_PROPERTY;
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("[Z");
      threadGroup0.list();
      ParserConfig.getGlobalInstance();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("fastjson.parser.deny", sQLTransientConnectionException0);
      LinkedHashSet<TypeNotPresentException> linkedHashSet0 = new LinkedHashSet<TypeNotPresentException>();
      LinkedHashSet<TypeNotPresentException> linkedHashSet1 = new LinkedHashSet<TypeNotPresentException>();
      linkedHashSet1.add(typeNotPresentException0);
      Class<Properties> class0 = Properties.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      ConcurrentHashMap<RenderingHints, ThrowableDeserializer> concurrentHashMap0 = new ConcurrentHashMap<RenderingHints, ThrowableDeserializer>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("getgetSigners", "getgetSigners");
      hashMap0.put("java.", "j");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThread.currentThread();
      Class<Method> class0 = Method.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      int int0 = Calendar.DATE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      hashMap0.put((String) null, "");
      String string0 = TypeUtils.decapitalize("qB|EQ{)!2vJy0~Z#k{");
      assertEquals("qB|EQ{)!2vJy0~Z#k{", string0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.getCollectionItemClass((Type) null);
      SerializeWriter serializeWriter0 = new SerializeWriter(86);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      BreakIterator.getWordInstance();
      MockThrowable mockThrowable0 = new MockThrowable("Qx88i<!I-HrOkV(rG");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("Qx88i<!I-HrOkV(rG");
      noClassDefFoundError0.getSuppressed();
      mockThrowable0.getSuppressed();
      MockThrowable mockThrowable1 = new MockThrowable("|!-'/<k!AS[X%h9P");
      MockThrowable.getDefaultStackTrace();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Qx88i<!I-HrOkV(rG", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockThrowable0.printStackTrace((PrintWriter) mockPrintWriter0);
      mockThrowable0.printStackTrace();
      noClassDefFoundError0.getStackTrace();
      noClassDefFoundError0.getStackTrace();
      noClassDefFoundError0.initCause(mockThrowable1);
      String string0 = TypeUtils.decapitalize("IQqruKzmmtvK[_(/O&L");
      assertEquals("IQqruKzmmtvK[_(/O&L", string0);
      
      Float float0 = new Float(41.369400511);
      java.util.Date date0 = TypeUtils.castToDate(float0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Object object0 = new Object();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters(class0, jSONType0, map0, (Map<String, Field>) null, false, propertyNamingStrategy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("fil", "I#B}JHmtse)I");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>((byte)0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("getCause", (ClassLoader) aSMClassLoader0, false);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) pageAttributes0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Object object0 = new Object();
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      HttpCookie httpCookie0 = new HttpCookie("_=_J!u", "gettoString");
      hashMap0.put("gettoString", "com.alibaba.fastjson.util.ASMUtils");
      hashMap0.replace("_=_J!u", "_=_J!u");
      String string0 = "Cg[\\$ng]=";
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {gettoString=com.alibaba.fastjson.util.ASMUtils}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("1\"oy5oJk7D=@,H");
      threadGroup0.list();
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "1\"oy5oJk7D=@,H");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("1\"oy5oJk7D=@,H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1\"oy5oJk7D=@,H
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      String string0 = ParserConfig.DENY_PROPERTY;
      hashMap0.replace("wovD'/", (String) null);
      hashMap0.put((String) null, "<E?");
      hashMap0.put((String) null, "-Zs~ fR");
      hashMap0.put("query", "ge@tConstructors");
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      noClassDefFoundError0.getStackTrace();
      noClassDefFoundError0.getStackTrace();
      NoClassDefFoundError noClassDefFoundError1 = new NoClassDefFoundError("sho");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("sho");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)107;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UNN??| N \"5'.l8:p-e");
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("MM?NS/m_!.", "UNN??| N \"5'.l8:p-e");
      identityHashMap0.put("UNN??| N \"5'.l8:p-e", "(S)Ljava/lang/Short;");
      identityHashMap0.put("(S)Ljava/lang/Short;", (String) null);
      List<FieldInfo> list0 = new Stack<FieldInfo>();
      TypeUtils.fnv1a_64("LfpUP{neLdNlZ wl");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus((String) null, true);
      TypeUtils.loadClass("LfpUP{neLdNlZ wl", classLoader0);
      boolean boolean0 = TypeUtils.isProxy(class0);
      long long0 = TypeUtils.fnv1a_64("xW_mJAsN");
      assertEquals((-7828291208779002516L), long0);
      
      Locale locale0 = TypeUtils.toLocale("xW_mJAsN");
      assertEquals("xw_MJASN", locale0.toString());
      
      TypeUtils typeUtils0 = new TypeUtils();
      AtomicLong atomicLong0 = new AtomicLong((-7104878316530358954L));
      TypeUtils.castToInt(atomicLong0);
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ThreadGroup threadGroup0 = new ThreadGroup("[Z");
      threadGroup0.checkAccess();
      threadGroup0.list();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.isKotlin(class0);
      Class<Boolean> class1 = Boolean.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isGenericParamType(class1);
      String string0 = "Y";
      TypeUtils.decapitalize("Y");
      StackOverflowError stackOverflowError0 = new StackOverflowError("8");
      String string1 = "fillInStackTrace";
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.autoTypeSupport", "fillInStackTrace", "w=]`%lF4HM<Zlu23_Y", 2636);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : y
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("getgetSigners", "getgetSigners");
      hashMap0.put("java.", "j");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThread.currentThread();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache(":j", weakHashMap0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      TypeUtils.loadClass("java.util]ollections$Emptyap", classLoader0, false);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("+");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create deserializeUsing ObjectDeserializer error");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = File.pathSeparator;
      Hashtable<JSONObject, MockSimpleDateFormat> hashtable0 = new Hashtable<JSONObject, MockSimpleDateFormat>();
      TypeUtils.castToBigDecimal((Object) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.fnv1a_64_lower("create deserializeUsing ObjectDeserializer error");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("5s/S,u(:!o65-", ":", 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("x:x\n>uw:ToDm&v]oGs", (Map<String, ClientInfoStatus>) null, sQLSyntaxErrorException0);
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "ge";
      TypeUtils.fnv1a_64("ge");
      TreeSet<JavaBeanDeserializer> treeSet0 = new TreeSet<JavaBeanDeserializer>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      JavaBeanDeserializer javaBeanDeserializer0 = null;
      try {
        javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, "&]$Z06P57H");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "com.alibaba.fastjson.util.ParameterizedTypeImpl@745f", (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-71);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      noClassDefFoundError0.getStackTrace();
      String string0 = null;
      NoClassDefFoundError noClassDefFoundError1 = new NoClassDefFoundError((String) null);
      TypeUtils.castToFloat((Object) null);
      JobAttributes jobAttributes0 = new JobAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(jobAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=null,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "+";
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("+");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.loadClass("kotlin.jvm.internal.DefaultConstructorMarker");
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte((Object) null);
      TypeUtils.toLocale("7C0N@^%$ujK");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.", "j");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("java.");
      noClassDefFoundError0.getStackTrace();
      noClassDefFoundError0.getStackTrace();
      InterruptedException interruptedException0 = new InterruptedException(">J%jvG$X");
      TypeUtils.loadClass("8N^I,]K~?\"&_");
      HttpCookie httpCookie0 = new HttpCookie("java.", "java.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpCookie0.setMaxAge((-11L));
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashtable0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      Integer integer0 = new Integer(569);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(integer0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      MockNullPointerException mockNullPointerException1 = new MockNullPointerException("/(7Frmkdw19");
      mockNullPointerException1.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(timestamp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : 1970-01-01 00:00:00.569
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = File.separator;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : /
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("java.", "j");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, thread0, "f@2)`0J&6]D{s^.6", 7442624256860549330L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      classLoader1.getParent();
      InstantiationException instantiationException0 = new InstantiationException();
      Time time0 = new Time((-1478L));
      TypeUtils.castToSqlTime(time0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = new Stack<FieldInfo>();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Float> class0 = Float.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[1] = (byte) (-32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      HttpCookie httpCookie0 = new HttpCookie("_=_J!u", "gettoString");
      hashMap0.put("_=_J!u", "_=_J!u");
      hashMap0.put("gettoString", "com.alibaba.fastjson.util.ASMUtils");
      hashMap0.replace("_=_J!u", "_=_J!u");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      String string0 = "Cg[\\$ng]=";
      DecimalFormat decimalFormat0 = new DecimalFormat("Cg[$ng]=");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {gettoString=com.alibaba.fastjson.util.ASMUtils, _=_J!u=_=_J!u}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("U");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : U
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ParserConfig.getGlobalInstance();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Constructor<MockCalendar>[] constructorArray0 = (Constructor<MockCalendar>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("'a{(", "l_p4>-m($_x;|r|-");
      hashMap0.replace("q", (String) null);
      hashMap0.put("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", ";idoA+2nF");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
      imageCapabilities1.clone();
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities1, imageCapabilities1, bufferCapabilities_FlipContents0);
      bufferCapabilities0.clone();
      bufferCapabilities0.clone();
      Class<Float> class1 = Float.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      parameterizedTypeImpl1.getTypeName();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl1, class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "l_p4>-m($_x;|r|-", (ParameterizedType) parameterizedTypeImpl2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("org.springframework.security.core.authority.SimpleGrantedAuthority");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.springframework.security.core.authority.SimpleGrantedAuthority\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Type[] typeArray0 = new Type[2];
      Class<?> class0 = TypeUtils.loadClass("java.nio.file.Path");
      typeArray0[0] = (Type) class0;
      typeArray0[1] = null;
      ThreadGroup threadGroup0 = new ThreadGroup("can not cast to byte, value : ");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "can not cast to byte, value : ", 8838294710098435315L);
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      MockThread mockThread1 = new MockThread(mockThread0, "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      mockThread1.getContextClassLoader();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, type0);
      parameterizedTypeImpl0.getTypeName();
      String string0 = File.pathSeparator;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("_asm_flag_");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalMonitorStateException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@471d4d62
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      Object object0 = new Object();
      TypeUtils.cast(object0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      Class<Long> class1 = Long.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      InstantiationException instantiationException0 = new InstantiationException();
      Throwable throwable0 = mockIllegalAccessException0.initCause(instantiationException0);
      TypeUtils.isHibernateInitialized(mockIllegalAccessException0);
      TypeUtils typeUtils0 = new TypeUtils();
      throwable0.getLocalizedMessage();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.getClassFromMapping("j[\u0007[");
      TypeUtils.decapitalize("j[\u0007[");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(throwable0);
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isKotlin(class0);
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "j[\u0007[", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("isfillInStackTrace", mockIllegalAccessException0);
      mockIllegalAccessException0.initCause(sQLFeatureNotSupportedException0);
      TypeUtils.isHibernateInitialized("isfillInStackTrace");
      TypeUtils typeUtils0 = new TypeUtils();
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.getLocalizedMessage();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.getClassFromMapping("className");
      TypeUtils.decapitalize((String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockIllegalAccessException0);
      TypeUtils.isKotlin((Class) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockIllegalAccessException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.isNumber("cg_IYC");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[4]);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      Long long0 = new Long((-4985L));
      Byte byte0 = TypeUtils.castToByte(long0);
      assertEquals((byte) (-121), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("{(", "l_p4>-m($_x;|r|-");
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      String string1 = File.pathSeparator;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("'a{(", "l_p4>-m($_x;|r|-");
      hashMap0.replace("q", (String) null);
      hashMap0.put("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", ";idoA+2nF");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
      imageCapabilities1.clone();
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities1, imageCapabilities1, bufferCapabilities_FlipContents0);
      bufferCapabilities0.clone();
      bufferCapabilities0.clone();
      Class<Float> class1 = Float.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      DataTruncation dataTruncation0 = new DataTruncation((-3924), false, false, (byte) (-53), (-3924));
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("q", dataTruncation0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeNotPresentException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.TypeNotPresentException -> java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      noClassDefFoundError0.getStackTrace();
      InterruptedException interruptedException0 = new InterruptedException(">J%jvG$X");
      TypeUtils.loadClass("");
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie("&z:P3=;bu#", ">J%jvG$X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal cookie name
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("euaYx55LipCLA/;Y8QD");
      TypeUtils.castToString((Object) null);
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isKotlin(class0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("h7}UCHXa\"+");
      NoClassDefFoundError noClassDefFoundError1 = new NoClassDefFoundError();
      MockThrowable mockThrowable0 = new MockThrowable("&-T4j");
      noClassDefFoundError1.getSuppressed();
      MockThrowable mockThrowable1 = new MockThrowable("org.springframework.security.core.userdetails.User");
      noClassDefFoundError1.getSuppressed();
      mockThrowable1.getSuppressed();
      MockThrowable mockThrowable2 = new MockThrowable("$}4w[9MJV?LjR2W~)-h");
      mockThrowable2.printStackTrace();
      MockThrowable.getDefaultStackTrace();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.springframework.security.core.userdetails.User", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockThrowable1.printStackTrace((PrintWriter) mockPrintWriter0);
      mockThrowable2.printStackTrace();
      noClassDefFoundError1.getStackTrace();
      MockThrowable.getDefaultStackTrace();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "&-T4j", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("euaYx55LipCLA/;Y8QD");
      TypeUtils.castToString((Object) null);
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isKotlin(class0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("h7|}UCHXa\"+");
      NoClassDefFoundError noClassDefFoundError1 = new NoClassDefFoundError();
      MockThrowable mockThrowable0 = new MockThrowable("&-T4j");
      noClassDefFoundError1.getSuppressed();
      Class<InstantiationException> class1 = InstantiationException.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&-T4j";
      stringArray0[1] = "I";
      stringArray0[2] = "java.lang.Comparable";
      stringArray0[3] = "&-T4j";
      stringArray0[4] = "org.springframework.security.core.userdetails.User";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      AtomicLong atomicLong0 = new AtomicLong((-1763L));
      simplePropertyPreFilter0.apply(jSONSerializer0, atomicLong0, "org.springframework.security.core.userdetails.User");
      assertEquals(4610, serializeWriter0.getBufferLength());
      
      simplePropertyPreFilter0.setMaxLevel(26);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getGenericParamType(class0);
      long long0 = TypeUtils.fnv1a_64_lower("8RKSoLrT>");
      assertEquals(5452080065930240906L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("t*<`*G}v8}a.O");
      assertEquals(6577833807046231781L, long0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, "&]$Z06P57H");
      List<FieldInfo> list0 = new Stack<FieldInfo>();
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      assertNotNull(type0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.castToString("euaYx55LipCLA/;Y8QD");
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isKotlin(class0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      String string0 = "[C";
      MockThrowable mockThrowable0 = new MockThrowable("[C");
      noClassDefFoundError0.getStackTrace();
      noClassDefFoundError0.getSuppressed();
      MockThrowable mockThrowable1 = new MockThrowable("java.lang.String@0000000001");
      noClassDefFoundError0.getSuppressed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "euaYx55LipCLA/;Y8QD", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      TypeUtils.castToSqlDate("");
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      ClassLoader.getSystemClassLoader();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@40
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, "&]$Z06P57H");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("kotlin.ranges.ClosedDoubleRange", "kotlin.ranges.ClosedDoubleRange");
      identityHashMap0.put("gettoString", "WtKJ");
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      AtomicInteger atomicInteger0 = new AtomicInteger(13);
      TypeUtils.castToInt(atomicInteger0);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Point point0 = new Point();
      Point point1 = new Point();
      Point point2 = new Point(point1);
      InterruptedException interruptedException0 = new InterruptedException("");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.InterruptedException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "dl5EX?^ .xV_jfI;0/+";
      TypeUtils.toLocale("dl5EX?^ .xV_jfI;0/+");
      TypeUtils.getClassFromMapping("dl5EX?^ .xV_jfI;0/+");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.createCollection(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError((String) null);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      TypeUtils.castToSqlDate((Object) null);
      Long long0 = new Long(3660L);
      TypeUtils.castToSqlDate(long0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)6;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader2 = aSMClassLoader0.getParent();
      classLoader2.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet", classLoader2);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("");
      TypeUtils.castToBytes("Ljava.util.concurrent.ConcurrentSkipListSet");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) identityHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Object object0 = new Object();
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig.getGlobalInstance();
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      timeUnit0.toMicros((-414L));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : DAYS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      TypeUtils.unwrapOptional(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1052), "nXMp1", (-1052), (-1052), (-26), 10, 32, 33, (-322), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1052
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "UNN??| N \"5'.l8:p-e";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UNN??| N \"5'.l8:p-e");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string1 = File.pathSeparator;
      Hashtable<JSONObject, MockSimpleDateFormat> hashtable0 = new Hashtable<JSONObject, MockSimpleDateFormat>();
      TypeUtils.castToBigDecimal(hashtable0);
      Hashtable<BatchUpdateException, MockDateFormat> hashtable1 = new Hashtable<BatchUpdateException, MockDateFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(":");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)107;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UNN??| N \"5'.l8:p-e");
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((byte) (-6), (byte)103, (byte) (-62));
      InstantiationError instantiationError0 = new InstantiationError("UNN??| N \"5'.l8:p-e");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z");
      TreeMap<SQLIntegrityConstraintViolationException, EnumDeserializer> treeMap0 = new TreeMap<SQLIntegrityConstraintViolationException, EnumDeserializer>();
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      TypeUtils.castToJavaBean((Object) treeMap0, class1);
      TypeUtils.loadClass("MM?JS/m_!.");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(identityHashMap0);
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy0);
      TypeUtils.castToByte((Object) null);
      Class<Integer> class2 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      Class class3 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [I", class3.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToByte((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Object object0 = new Object();
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig.getGlobalInstance();
      TypeUtils.loadClass("[Z");
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.deny", "fastjson.parser.deny");
      HttpCookie httpCookie1 = new HttpCookie("ge", "fastjson.parser.autoTypeAccept");
      httpCookie1.setMaxAge(0L);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      String string0 = "";
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("");
      MockThrowable mockThrowable0 = new MockThrowable("[zIBM]hUBI6Dd.=5");
      noClassDefFoundError0.getSuppressed();
      noClassDefFoundError0.getSuppressed();
      MockThrowable mockThrowable1 = new MockThrowable("getDeclaringClass");
      MockThrowable.getDefaultStackTrace();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Lorg.springframework.util.LinkedMultiValueMap", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.print(Double.NaN);
      mockThrowable1.printStackTrace((PrintWriter) mockPrintWriter0);
      String string1 = ParserConfig.AUTOTYPE_ACCEPT;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("&-T4j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : &-T4j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("org.springframework.security.core.authority.simplegrantedauthority");
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.getSuppressed();
      MockFile mockFile0 = new MockFile((File) null, "org.springframework.security.core.authority.simplegrantedauthority");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "org.springframework.security.core.authority.simplegrantedauthority");
      mockThrowable0.printStackTrace(printWriter0);
      MockThrowable mockThrowable1 = new MockThrowable();
      mockThrowable0.printStackTrace();
      NoClassDefFoundError noClassDefFoundError1 = new NoClassDefFoundError();
      noClassDefFoundError1.getStackTrace();
      noClassDefFoundError0.getStackTrace();
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$}4w[9MJV?LjR2W~)-h", "Ljava.util.concurrent.ConcurrentSkipListSet");
      noClassDefFoundError1.initCause(mockThrowable1);
      ArrayList<NoSuchMethodException> arrayList0 = new ArrayList<NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("$}4w[9MJV?LjR2W~)-h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : $}4w[9MJV?LjR2W~)-h
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      String string0 = File.pathSeparator;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, ":", fieldArray0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("9~_W9O6m0!],O.", "TK4-J");
      ParserConfig parserConfig0 = ParserConfig.global;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class0, (PropertyNamingStrategy) null);
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class3, class1, (Type) null, (Field) null, 17, 97, 0);
      parserConfig0.createFieldDeserializer(parserConfig1, javaBeanInfo0, fieldInfo0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("fastjson.parser.autoTypeAccept", biFunction0);
      BreakIterator.getWordInstance();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(fieldInfo0.declaringClass);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      String string0 = ParserConfig.DENY_PROPERTY;
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1994575292));
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : -1994575292
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.isPath(class0);
      Class<Float> class1 = Float.TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      String string0 = ParserConfig.DENY_PROPERTY;
      DecimalFormatSymbols.getInstance();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<ClassLoader> class2 = ClassLoader.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) treeMap0, true);
      Boolean boolean0 = new Boolean(true);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.deny", "TT7a2N\"zhY$nkIK");
      Class<FieldInfo> class3 = FieldInfo.class;
      ParserConfig parserConfig0 = new ParserConfig();
      FieldInfo fieldInfo0 = TypeUtils.cast((Object) null, class3, parserConfig0);
      assertNull(fieldInfo0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)107;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UNN??| N \"5'.l8:p-e");
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Method> class0 = Method.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities1, imageCapabilities1, bufferCapabilities_FlipContents0);
      bufferCapabilities0.clone();
      imageCapabilities0.clone();
      Class<InterruptedException> class1 = InterruptedException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "UNN??| N \"5'.l8:p-e", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      AtomicLong atomicLong0 = new AtomicLong(0);
      atomicLong0.set(3660L);
      TypeUtils.castToBoolean(atomicLong0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<NegativeArraySizeException> class1 = NegativeArraySizeException.class;
      TypeUtils.isProxy(class1);
      TypeUtils.fnv1a_64("fastjson.parser.autoTypeSupport");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("mb/_'M");
      TypeUtils.decapitalize("mb/_'M");
      ThreadGroup threadGroup0 = new ThreadGroup("{");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "d]CipCG+S_B_CjF| `");
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup0, "mb/_'M");
      MockThread mockThread0 = new MockThread();
      mockThread0.run();
      MockThread mockThread1 = new MockThread("mb/_'M");
      String string0 = "java.util.concurrent.ConcurrentSkipListSet";
      threadGroup0.interrupt();
      MockThread mockThread2 = null;
      try {
        mockThread2 = new MockThread(threadGroup2, mockThread0, (String) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.unwrapOptional(type0);
      TypeUtils.unwrapOptional(class0);
      Class<StackOverflowError> class1 = StackOverflowError.class;
      TypeUtils.getSerializeFeatures(class1);
      Class<Point> class2 = Point.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r]U");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      String string0 = File.pathSeparator;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      hashMap0.put("fastjson.parser.autoTypeAccept", "fastjson.parser.deny");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>(hashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Class<MockCalendar> class0 = MockCalendar.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy1);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToByte((Object) null);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(5221L);
      Time time0 = Time.valueOf(localTime0);
      TypeUtils.castToSqlDate(time0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, "&]$Z06P57H");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, (-1934176825), (Map<String, ClientInfoStatus>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("&]$Z06P57H", (String) null, (-1934176825), sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLNonTransientConnectionException0);
      TypeUtils.isHibernateInitialized(sQLClientInfoException0);
      MockThread mockThread0 = new MockThread("+");
      MockThread mockThread1 = new MockThread(mockThread0, "d-?&\"czLm&FRC10");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.BigIntegerCodec", (ClassLoader) aSMClassLoader0, true);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      TypeUtils.decapitalize("+");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException: &]$Z06P57H
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.isNumber("cg_IYC");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type[] typeArray0 = new Type[9];
      String string0 = "_4anz&";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("cg_IYC", "_4anz&", (-1934176825), (Map<String, ClientInfoStatus>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("_4anz&", "YWv2b;E.i`}8`C{!", (-1934176825), sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLNonTransientConnectionException0);
      MockThread mockThread0 = new MockThread("Ljava.awt.Font");
      MockThread mockThread1 = new MockThread(mockThread0, "ymc6<}\"bi@=|");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("can not cast to double, value : ", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("&85pXoCl?-tZQ");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noClassDefFoundError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TypeUtils.getClassFromMapping("&\"4VrwD6rLWNEe8");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "&\"4VrwD6rLWNEe8", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = File.separator;
      hashMap0.replace("q", "/");
      hashMap0.put("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", ";idoA+2nF");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setClassAssertionStatus((String) null, true);
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", classLoader1);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.isNumber("5+");
      TypeUtils.castToBytes("l_p4>-m($_x;|r|-");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Locale> class2 = Locale.class;
      TypeUtils.computeGetters((Class<?>) class2, (JSONType) null, (Map<String, String>) identityHashMap0, (Map<String, Field>) identityHashMap1, true, propertyNamingStrategy0);
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UNN??| N \"5'.l8:p-e");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = File.pathSeparator;
      identityHashMap0.put("UNN??| N \"5'.l8:p-e", "S)LjUvalangShort;");
      identityHashMap0.put("S)LjUvalangShort;", (String) null);
      Class<Integer> class1 = Integer.TYPE;
      Class<HttpCookie> class2 = HttpCookie.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("qC~|L", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("j", class1, class2, class0, (Field) null, (-1602), (-705), 1973);
      Class<SQLDataException> class3 = SQLDataException.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      beanContext0.getMethod();
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      TypeUtils.getSuperMethodAnnotation(class5, (Method) null);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.fnv1a_64_lower("UNN??| N \"5'.l8:p-e");
      TypeUtils.loadClass("j", (ClassLoader) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      TypeUtils.unwrapOptional((Type) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Type[] typeArray0 = new Type[2];
      Class<?> class0 = TypeUtils.loadClass("java.nio.file.Path");
      typeArray0[0] = (Type) class0;
      typeArray0[1] = null;
      ThreadGroup threadGroup0 = new ThreadGroup("can not cast to byte, value : ");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "can not cast to byte, value : ", 8838294710098435315L);
      MockThread mockThread1 = new MockThread(mockThread0, "com.alibaba.fastjson.parser.deserializer.JSONPDeserializer");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class1 = classLoader1.loadClass("java.nio.file.Path");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.evosuite.runtime.mock.java.lang.MockNullPointerException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("euaYx55LipCLA/;Y8QD");
      TypeUtils.castToString("euaYx55LipCLA/;Y8QD");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      noClassDefFoundError0.getSuppressed();
      MockThrowable mockThrowable0 = new MockThrowable("org.springframework.security.core.userdetails.User");
      noClassDefFoundError0.getSuppressed();
      mockThrowable0.getSuppressed();
      MockThrowable mockThrowable1 = new MockThrowable("$}4w[9MJV?LjR2W~)-h");
      noClassDefFoundError0.getLocalizedMessage();
      mockThrowable0.addSuppressed(noClassDefFoundError0);
      MockThrowable.getDefaultStackTrace();
      noClassDefFoundError0.printStackTrace();
      mockThrowable0.initCause(mockThrowable1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.springframework.security.core.userdetails.User", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      Double double0 = new Double(6207719946442745314L);
      Class<Calendar> class1 = Calendar.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) double0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r]xU");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      String string0 = File.pathSeparator;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      boolean boolean0 = true;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      hashMap0.put("fastjson.parser.autoTypeAccept", "fastjson.parser.deny");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>(hashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ParserConfig.global = parserConfig0;
      Class<MockCalendar> class0 = MockCalendar.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLTimeoutException -> org.evosuite.runtime.mock.java.util.MockCalendar
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TypeUtils.loadClass((String) null);
      JSONObject jSONObject0 = new JSONObject(16, true);
      jSONObject0.fluentClear();
      Class<Float> class0 = Float.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[0]);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getCollectionItemClass(class0);
      java.util.IdentityHashMap<ThrowableDeserializer, PropertyNamingStrategy> identityHashMap0 = new java.util.IdentityHashMap<ThrowableDeserializer, PropertyNamingStrategy>();
      AtomicInteger atomicInteger0 = new AtomicInteger(3089);
      TypeUtils.castToLong(atomicInteger0);
      TypeUtils.isNumber("#");
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<Rectangle> class2 = Rectangle.class;
      TypeUtils.isPath(class2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TypeUtils.getClassFromMapping("null");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.cast((Object) "null", (Type) null, parserConfig0);
      TypeUtils.fnv1a_64("-%\" A)7c`64|");
      parserConfig0.compatibleWithJavaBean = false;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}=y|y~xm$,)IWSpLb]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultJSONParser0.parseObject();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie((String) null, "{\"$ref\":\"@\"}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) propertyProcessableDeserializer0.type;
      typeArray0[1] = (Type) class0;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      typeArray0[2] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyProcessableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "l_p4>-m($_x;|r|-";
      hashMap0.put("'a{(", "l_p4>-m($_x;|r|-");
      hashMap0.replace("q", (String) null);
      hashMap0.put("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", ";idoA+2nF");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
      imageCapabilities1.clone();
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities1, imageCapabilities1, bufferCapabilities_FlipContents0);
      Object object0 = bufferCapabilities0.clone();
      bufferCapabilities0.clone();
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Point point0 = new Point();
      imageCapabilities1.clone();
      Point point1 = new Point();
      Point point2 = new Point(point0);
      InterruptedException interruptedException0 = new InterruptedException("l_p4>-m($_x;|r|-");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.awt.BufferCapabilities@7900bb9d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
