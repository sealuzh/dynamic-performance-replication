/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:55:09 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Label;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.beans.EventSetDescriptor;
import java.beans.VetoableChangeListener;
import java.beans.beancontext.BeanContextServicesSupport;
import java.util.Locale;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.AbstractAssociator;
import weka.associations.Apriori;
import weka.associations.FilteredAssociator;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.meta.FilteredClassifier;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckGOE;
import weka.core.CheckOptionHandler;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVisibleRect();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      filter0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.addDataSourceListener(attributeSummarizer0);
      filter0.removeTestSetListener(attributeSummarizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      classifier0.addFocusListener(basicComboBoxEditor_UIResource0);
      filter0.addTestSetListener(classifier0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      boolean boolean0 = filter0.connectionAllowed("b\"4pp^q");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      CheckGOE checkGOE0 = new CheckGOE();
      checkGOE0.setSilent(false);
      filter0.connectionNotification("gYWji;<mc", checkGOE0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.connectionNotification("gYWji;<mc", multiFilter0);
      filter0.eventGeneratable("gYWji;<mc");
      filter0.getCustomName();
      Saver saver0 = new Saver();
      // Undeclared exception!
      try { 
        saver0.applyComponentOrientation((ComponentOrientation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesNoClass();
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      filter0.eventGeneratable(".arff");
      filter0.addDataSourceListener(sorter0);
      filter0.addTestSetListener(sorter0);
      filter0.setCustomName("/Naw0'^[(e4'yn~");
      filter0.removeTrainingSetListener(sorter0);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.connectionNotification(".bsi", classOrder0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      SysErrLog sysErrLog0 = new SysErrLog();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      beanVisual0.getToolkit();
      filter0.setVisual(beanVisual0);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.removeTrainingSetListener(dataVisualizer0);
      assertEquals("ModelPerformanceChart", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      checkOptionHandler0.doTests();
      filter0.disconnectionNotification("weka.gui.beans.Filter", checkOptionHandler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setWrappedAlgorithm(attributeSelection0);
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesNoClass();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable(">B4)5u`/Q>5~b(");
      assertFalse(boolean0);
      
      JComponent.isLightweightComponent(filter0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addInstanceListener(flowByExpression0);
      JComponent.isLightweightComponent(flowByExpression0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.add((MouseMotionListener) null, (MouseMotionListener) null);
      filter0.removeMouseMotionListener(defaultCaret0);
      TestInstances testInstances0 = new TestInstances();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTestSetListener(trainTestSplitMaker0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.connectionNotification("Cr;5qQUi3Z6|a", serializedModelSaver0);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(filter0, (-1268), 390L, 0, 0, 2288, 1797, (-2151), (-1910910292), false, 1, 107, 1797, 390L);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-1268);
      intArray0[3] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, (-218));
      InstanceEvent instanceEvent0 = new InstanceEvent("Cr;5qQUi3Z6|a", binarySparseInstance0, 10000);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.getCustomName();
      filter0.contains((-1913361608), (-1268));
      filter0.acceptInstance(instanceEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.ISMISSING;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      filter0.connectionNotification(" LGN<|5--mFT~An#o", fileSystemHandling0);
      filter0.eventGeneratable(" LGN<|5--mFT~An#o");
      filter0.getCustomName();
      Saver saver0 = new Saver();
      Sorter sorter0 = new Sorter();
      filter0.removeTrainingSetListener(saver0);
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(saver0);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(" LGN<|5--mFT~An#o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      GraphViewer graphViewer0 = new GraphViewer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockJapaneseDate0, instances0, (-1983936387), (-1983936387));
      filter0.acceptTrainingSet(trainingSetEvent0);
      boolean boolean0 = graphViewer0.m_design;
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      Appender appender0 = new Appender();
      appender0.createToolTip();
      Appender appender1 = new Appender();
      filter0.getForeground();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.enumerateRequests();
      filter0.addTrainingSetListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      CheckGOE checkGOE0 = new CheckGOE();
      filter0.connectionNotification("h?UPe7WH*,CGNXt", "gYWji;<mc");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[9];
      stringArray0[4] = "\tUse cross validation to evaluate fea+ures.\n\tUse number of folds = 1 for leave one out CV.\n\t(Default = leave one out CV)";
      stringArray0[5] = "gYWji;<mc";
      stringArray0[6] = "gYWji;<mc";
      stringArray0[7] = "dataSet";
      weka.filters.Filter.runFilter(multiFilter0, stringArray0);
      filter0.setFilter(multiFilter0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instances0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.addTrainingSetListener(substringLabeler0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      filter0.getAutoscrolls();
      filter0.setCustomName("y{r.rt-)4D,k'r'");
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.firePropertyChange("y{r.rt-)4D,k'r'", (byte) (-1), (byte)0);
      filter0.useDefaultVisual();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.getPreferredSize();
      graphViewer0.setFocusable(false);
      Locale locale0 = Locale.CHINESE;
      JComponent.setDefaultLocale(locale0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(graphViewer0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.setVisual(beanVisual0);
      filter0.eventGeneratable("configuration");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(graphViewer0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("y{r.rt-)4D,k'r'", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      GraphViewer graphViewer0 = new GraphViewer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockJapaneseDate0, instances0, (-1983936387), (-1983936387));
      filter0.acceptTrainingSet(trainingSetEvent0);
      boolean boolean0 = graphViewer0.m_design;
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filter0.requestFocus();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      filter0.setCustomName("Cannot handle unknown attribute type '");
      assertEquals("Cannot handle unknown attribute type '", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      add0.toString();
      filter0.setFilter(add0);
      String string0 = "ko3`{nwnt64`9ZYs";
      // Undeclared exception!
      try { 
        filter0.performRequest("ko3`{nwnt64`9ZYs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ko3`{nwnt64`9ZYs not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      serializedModelSaver0.addAncestorListener(ancestorListener0);
      filter0.enumerateRequests();
      BeanVisual beanVisual0 = filter0.getVisual();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.setFocusable(true);
      Locale locale0 = Locale.CHINESE;
      JComponent.setDefaultLocale(locale0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainTestSplitMaker0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.setVisual(beanVisual0);
      filter0.eventGeneratable("model");
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      BeanContextServicesSupport beanContextServicesSupport1 = new BeanContextServicesSupport(beanContextServicesSupport0);
      beanContextServicesSupport1.add(beanContextServicesSupport0);
      graphViewer0.removeVetoableChangeListener("6?KTL9", (VetoableChangeListener) beanContextServicesSupport1);
      ListOptions listOptions0 = new ListOptions();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(listOptions0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      weka.filters.Filter filter1 = weka.filters.Filter.makeCopy(nominalToBinary0);
      filter0.setFilter(filter1);
      Appender appender0 = new Appender();
      Appender appender1 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.getFilter();
      assertEquals("NominalToBinary", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      filter0.getAncestorListeners();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      SerializedModelSaver serializedModelSaver1 = new SerializedModelSaver();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      serializedModelSaver1.addAncestorListener(ancestorListener0);
      filter0.enumerateRequests();
      filter0.getVisual();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "model";
      stringArray0[3] = "weka/gui/beans/icons/";
      stringArray0[4] = "model";
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      weka.filters.Filter filter1 = filteredClassifier0.getFilter();
      filter0.setFilter(filter1);
      Appender appender0 = new Appender();
      Appender appender1 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Discretize", filter0.getCustomName());
      
      Filter filter2 = new Filter();
      assertEquals("AllFilter", filter2.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.validate();
      MetaBean metaBean0 = new MetaBean();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Add add0 = new Add();
      filter0.setFilter(add0);
      Appender appender0 = new Appender();
      appender0.createToolTip();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.enumerateRequests();
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      SerializedModelSaver serializedModelSaver1 = new SerializedModelSaver();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      serializedModelSaver0.setDoubleBuffered(true);
      filter0.connectionNotification("model", instanceStreamToBatchMaker0);
      serializedModelSaver0.getName();
      filter0.eventGeneratable("model");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Logger logger0 = flowByExpression0.m_log;
      filter0.setLog((Logger) null);
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      AbstractAssociator.makeCopies(filteredAssociator0, 0);
      filteredAssociator0.getFilter();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filter0.getWrappedAlgorithm();
      filter0.removeMouseMotionListener((MouseMotionListener) null);
      filter0.enumerateRequests();
      filter0.isBusy();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      GraphViewer graphViewer0 = new GraphViewer();
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      boolean boolean0 = graphViewer0.m_design;
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      Appender appender0 = new Appender();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Appender appender1 = new Appender();
      Appender appender2 = new Appender();
      Appender appender3 = new Appender();
      InstanceEvent instanceEvent0 = appender3.m_ie;
      instanceEvent0.setStatus(1590);
      filter0.acceptInstance(instanceEvent0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Random.setNextRandom(0);
      filter0.getCustomName();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      SerializedModelSaver serializedModelSaver1 = new SerializedModelSaver();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      MouseEvent mouseEvent0 = new MouseEvent(serializedModelSaver0, 46, (-1185L), 46, 46, 0, 46, false);
      String[] stringArray0 = null;
      MultiFilter.main((String[]) null);
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      Appender appender0 = new Appender();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Appender appender1 = new Appender();
      Appender appender2 = new Appender();
      InstanceEvent instanceEvent0 = appender1.m_ie;
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DefaultTableModel defaultTableModel0 = null;
      try {
        defaultTableModel0 = new DefaultTableModel(4773, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.eventGeneratable("configuration");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      Capabilities capabilities0 = filteredAssociator0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0);
      Locale.getISOCountries();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      DataSetEvent dataSetEvent0 = new DataSetEvent(capabilities0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.validate();
      BeanVisual beanVisual0 = filter0.m_visual;
      filter0.useDefaultVisual();
      beanVisual0.setLocation(336, 1);
      GraphViewer graphViewer0 = new GraphViewer();
      filter0.getPreferredSize();
      MouseEvent mouseEvent0 = new MouseEvent(filter0, 68, 5365L, 45, (-1), 68, 356, false);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      instanceStreamToBatchMaker0.getPopupLocation(mouseEvent0);
      instanceStreamToBatchMaker0.getInputMap();
      Associator associator0 = new Associator();
      filter0.connectionNotification("weka/gui/beans/icons/", associator0);
      filter0.eventGeneratable("weka/gui/beans/icons/");
      Filter filter1 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      instanceStreamToBatchMaker0.firePropertyChange("weka/gui/beans/icons/", 19L, (long) 1);
      Filter filter2 = new Filter();
      filter2.removeDataSourceListener(filter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Add add0 = new Add();
      filter0.setFilter(add0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      Sorter sorter0 = new Sorter();
      instanceEvent0.setStatus(1);
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instanceEvent1.setStructure(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      filter0.acceptInstance(instanceEvent1);
      filter0.acceptInstance(instanceEvent0);
      SysErrLog sysErrLog0 = new SysErrLog();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.removeDataSourceListener(classAssigner0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      CheckGOE checkGOE0 = new CheckGOE();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filteredAssociator0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[9];
      stringArray0[7] = "dataSet";
      weka.filters.Filter.runFilter(multiFilter0, stringArray0);
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(133);
      filter0.isBusy();
      Sorter sorter0 = new Sorter();
      SparseInstance sparseInstance0 = new SparseInstance(2727);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instanceEvent0.setInstance(binarySparseInstance0);
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent1);
      filter0.eventGeneratable("h?Pe7WH*,CNXt");
      filter0.acceptInstance(instanceEvent0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      Class<Container> class0 = Container.class;
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, ".arff", class0, stringArray0, (String) null, "lusi*)V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.validate();
      filter0.useDefaultVisual();
      GraphViewer graphViewer0 = new GraphViewer();
      Dimension dimension0 = filter0.getMaximumSize();
      boolean boolean0 = graphViewer0.m_design;
      filter0.eventGeneratable("configuration");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockJapaneseDate.now();
      TestSetEvent testSetEvent0 = new TestSetEvent(dimension0, instances0, Integer.MAX_VALUE, 10000, 1589, (-1909488883));
      filter0.acceptTestSet(testSetEvent0);
      TextViewer textViewer0 = new TextViewer();
      filter0.addTrainingSetListener(textViewer0);
      TextViewer textViewer1 = new TextViewer();
      DataSetEvent dataSetEvent0 = new DataSetEvent(textViewer0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetEvent0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Label label0 = null;
      try {
        label0 = new Label("@relation");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filteredAssociator0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(93);
      filter0.eventGeneratable("configuration");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockJapaneseDate.now();
      TestSetEvent testSetEvent0 = new TestSetEvent("configuration", instances0, 0, 93, (-1909488883), 93);
      filter0.acceptTestSet(testSetEvent0);
      TextViewer textViewer0 = new TextViewer();
      filter0.eventGeneratable("configuration");
      instanceEvent0.setStructure(instances0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.eventGeneratable("@relation");
      filter0.acceptInstance(instanceEvent0);
      filter0.removeInstanceListener(substringLabeler0);
      filter0.removeInstanceListener(substringReplacer0);
      filter0.removeTestSetListener(textViewer0);
      System.setCurrentTimeMillis(1);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent1 = appender0.m_ie;
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      JFrame jFrame0 = modelPerformanceChart0.m_popupFrame;
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog((Frame) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
