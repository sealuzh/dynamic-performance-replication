/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:41:34 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        Parser.parse(")kh", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.parse("\n", (-964));
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 90, 1632);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        Parser.parse("+2@(q", 1749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "(?P<(?(?(**";
      try { 
        Parser.parse("(?P<(?(?(**", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(?(**`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 125);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 1233;
      try { 
        Parser.parse("(?i:", 1233);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 960;
      String string0 = "(?:(";
      try { 
        Parser.parse("(?:(", (-392));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ppx{0FFFF}", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "(!";
      int int0 = (-2447);
      try { 
        Parser.parse("(!", (-2447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-2447);
      try { 
        Parser.parse("(P*", (-2447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(P*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%", (-2447));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:%)", string0);
      assertNotNull(string0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-2447), (-2447));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp regexp0 = Parser.parse("r*", (-968));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-447);
      String string0 = "$?+5d|@ba";
      try { 
        Parser.parse("$?+5d|@ba", (-447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `?+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-752);
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, (-752), (-752));
      assertNotNull(regexpArray0);
      
      try { 
        Parser.parse("*{:uEYP3x==5Y", (-752));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-447);
      String string0 = "$?+5d|@ba";
      int int1 = 6905;
      try { 
        Parser.parse("$?+5d|@ba", 6905);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `?+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 53;
      String string0 = "?P<(?(*";
      try { 
        Parser.parse("?P<(?(*", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|R", (-447));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = null;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-3815), (-1736));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-440);
      try { 
        Parser.parse("|+", (-440));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-2564);
      Regexp regexp0 = Parser.parse("|Sf", 804);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexpArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-2564);
      Regexp regexp0 = Parser.parse("l|Sf", 804);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp(regexpArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 43712;
      try { 
        Parser.parse("p54(<", 43712);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `p54(<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1434;
      String string0 = "[:";
      try { 
        Parser.parse("[:", (-2640));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", (-2447));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:D)", string0);
      assertNotNull(string0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-2447), (-2447));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        Parser.parse("d)0", 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        Parser.parse("[:", 43009);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", (-460));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      String string0 = regexp0.toString();
      assertEquals(":", string0);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
      
      int[] intArray0 = new int[20];
      intArray0[0] = 105;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 1585, (-3351));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = new Parser((String) null, (-1571));
      assertNotNull(parser0);
      
      try { 
        Parser.parse("[:-", 917760);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("[kU-PWJ^Tx5C>W7:)%U", 1832);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `U-P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 744;
      int int1 = 393214;
      try { 
        Parser.parse("[:", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 109;
      String string0 = "\\";
      Regexp regexp0 = Parser.parse("", 109);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 109;
      String string0 = "\\pD";
      Regexp regexp0 = Parser.parse("pD", 109);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p:]", 2527);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("p:]", 2527);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      int[] intArray0 = new int[5];
      intArray0[1] = 2527;
      intArray0[2] = 2527;
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Parser parser0 = new Parser("", 0);
      assertNotNull(parser0);
      
      Regexp regexp3 = Parser.parse("o+b|", 0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 109;
      String string0 = "7{?X!iN)&fbDW";
      try { 
        Parser.parse("7{?X!iN)&fbDW", 4977);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "s{%";
      Regexp regexp0 = Parser.parse("s{%", 117);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[4] = regexp1;
      int int0 = 92;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 92, (-1290));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "(*";
      try { 
        Parser.parse("(*", (-2447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      regexp0.name = "^x0-x10FFFF}";
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      String string0 = "V:+QicQf49<qjXnY^";
      Regexp regexp2 = Parser.parse("V:+QicQf49<qjXnY^", 3510);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("^x0-x10FFFF}", (-1363));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotNull(regexp5);
      
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp6 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotNull(regexp6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 146;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 316;
      try { 
        Parser.parse("(Mir{9<~Iw", 316);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(Mir{9<~Iw`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 53;
      String string0 = "END_TEXT";
      String string1 = "\\5";
      Regexp regexp0 = Parser.parse("\u0005", 53);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "\\2";
      int int0 = (-748);
      Regexp regexp0 = Parser.parse("\u0002", (-748));
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Parser parser0 = new Parser(string0, intArray0[0]);
      assertArrayEquals(new int[] {(-748), 0, 0}, intArray0);
      assertNotNull(parser0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007hpK`\"}J]", (-848));
      assertNotNull(regexp0);
      
      String string0 = ":";
      String string1 = "KL";
      int int0 = (-1822);
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp3);
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp5));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotNull(regexp6);
      
      String string2 = "\\pL<";
      int int1 = (-315);
      Regexp regexp7 = Parser.parse(string2, int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp0));
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp0);
      assertNotNull(regexp7);
      
      String string3 = "xWjyO";
      int int2 = 2691;
      Regexp regexp8 = Parser.parse(string3, int2);
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp1);
      assertNotNull(regexp8);
      
      String string4 = "com.google.re2j.Parser$1";
      int int3 = 49;
      Regexp regexp9 = Parser.parse(string4, int3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp1));
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp4);
      assertNotNull(regexp9);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-88);
      try { 
        Parser.parse("ph60x,(<", (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `ph60x,(<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-2447);
      try { 
        Parser.parse("(?P*", (-2447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "<|6";
      Regexp regexp0 = Parser.parse("<|6", 53);
      assertNotNull(regexp0);
      
      String string1 = null;
      int int0 = 11;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 11, 118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", (-2452));
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp regexp0 = Parser.parse("7|", 440);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("7|", 440);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp1.equals("upvO.7");
      assertFalse(boolean0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Vx|2A><", (-43));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      Regexp regexp2 = Parser.parse("Vx|2A><", 903);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 903, (-43));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 65;
      Regexp regexp0 = Parser.parse("Ta{4YUd1", 65);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[2];
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      intArray0[0] = 65;
      intArray0[1] = 65;
      regexp0.runes = intArray0;
      String string0 = "Bugin.Jese";
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 930, 65);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 724;
      try { 
        Parser.parse("|yz[", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "\\6d)0";
      int int0 = (-1319);
      try { 
        Parser.parse("\u0006d)0", (-1319));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "ph6x\\5(<";
      int int0 = 112;
      try { 
        Parser.parse("ph6x\u0005(<", 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `ph6x\u0005(<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        Parser.parse("[]-z~#Dmj", 1885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]-z~#Dmj`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-850);
      int int1 = 53;
      int int2 = 125;
      String string0 = "$g|EE|w";
      String string1 = "|";
      Regexp regexp0 = Parser.parse("|", 125);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("$g|EE|w", (-850));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      try { 
        Parser.parse("(?", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.max = 1734;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("JX2rrz` %<h='XgON", (-46));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      String string0 = "2nnNrfClQ<y{#";
      Parser parser0 = new Parser("2nnNrfClQ<y{#", 120);
      assertNotNull(parser0);
      
      Regexp regexp3 = Parser.parse("Z5k\u0004b]X}]k/", 120);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotNull(regexp3);
      
      int int0 = 2622;
      Parser parser1 = new Parser(string0, int0);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      String string1 = "gr2':lmo/";
      int int1 = 91;
      Regexp regexp4 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotNull(regexp4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "%}.|F7OB)0%]A>2 +";
      try { 
        Parser.parse("%}.|F7OB)0%]A>2 +", (-964));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("(?s:.)", 69);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      regexp0.name = "?\\B";
      regexpArray0[2] = regexpArray0[1];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-313), 2409);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -313
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("()>w;3", (-532));
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[1] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-532), 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -532
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-2452);
      String string0 = "\\fD";
      Regexp regexp0 = Parser.parse("\fD", (-2452));
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("[wX", (-2452));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[wX`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        Parser.parse("(?-s", 5108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 16;
      Regexp regexp0 = Parser.parse("x", 16);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = (-1);
      int int2 = 154;
      String string0 = "Q](rM@a]^iknhfGJ";
      Regexp regexp2 = Parser.parse(string0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      String string1 = "\\C";
      Regexp regexp3 = Parser.parse(string1, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      String string2 = "*2";
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 404;
      Regexp regexp0 = Parser.parse("^x0-{FFF}", 404);
      assertNotNull(regexp0);
      
      String string0 = "[::\\x00-\\x{10FFFF}]";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      int int1 = 2;
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      int int2 = 42;
      String string1 = regexp0.toString();
      assertEquals("\\Ax0-\\{FFF\\}", string1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotNull(string1);
      
      String string2 = "\\p\\pz&|m";
      Parser parser0 = new Parser(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(parser0);
      
      Regexp regexp3 = Parser.parse(string0, int2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      Regexp[] regexpArray0 = regexp0.subs;
      assertNotNull(regexpArray0);
      
      int int3 = 40;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "^\\x00-\\FF";
      Regexp regexp0 = Parser.parse("^x00-FF", 404);
      assertNotNull(regexp0);
      
      int int0 = (-1093552557);
      int int1 = 1421;
      Regexp[] regexpArray0 = regexp0.subs;
      assertNotNull(regexpArray0);
      
      int int2 = 12549;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "\\PP";
      Regexp regexp0 = Parser.parse("PP", 4585);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp1.reinit();
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 4585, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 116;
      Regexp regexp0 = Parser.parse("ks]G+@Cvy#Yw`9v+", 116);
      assertNotNull(regexp0);
      
      String string0 = "(?-m:$)";
      Regexp regexp1 = Parser.parse("(?-m:$)", 6212);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("$g|EE|w", (-270));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("$g|EE|w", (-270));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      String string1 = "^s+OP{";
      Regexp regexp4 = Parser.parse("^s+OP{", 116);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotNull(regexp4);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      Regexp regexp5 = Parser.parse("#,rYwUvK_", (-3585));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotNull(regexp5);
      
      regexpArray0[1] = regexp5;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp4;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp4;
      regexpArray0[7] = regexp4;
      regexpArray0[8] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 6212, 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "[\\r";
      int int0 = 85;
      int int1 = 17;
      try { 
        Parser.parse("[\r", 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[\r`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "(`+?P ";
      int int0 = (-2447);
      try { 
        Parser.parse("(`+?P ", (-2447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`+?P `
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("H6l1]i<eF~{|.", (-2447));
      assertNotNull(regexp0);
      
      int int0 = 55;
      Regexp regexp1 = Parser.parse("H6l1]i<eF~{|.", 55);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 55;
      regexp1.runes = intArray0;
      regexp1.name = "H6l1]i<eF~{|.";
      int int1 = 730;
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("Other_Lowercase", 91);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 97, 730);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Regexp regexp0 = Parser.parse("eAEPyI", (-450));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("eAEPyI", 1114111);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("[^x00-x{10FFFF}]", 408);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 3251, (-2185));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Y&[^", 382);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      try { 
        Parser.parse("Y&[^", 42537);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-951);
      try { 
        Parser.parse("xi-t%:p<[U-'4bnH", (-951));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `U-'`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\uD809\uDC70-\uD809\uDC73]", 2752);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("c-Other_ID_Start", (-866));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string0 = regexp0.toString();
      assertEquals("[:\uD809\uDC70-\uD809\uDC73]", string0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2752;
      intArray0[1] = (-866);
      intArray0[2] = 2752;
      intArray0[3] = (-281);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp2;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      regexpArray0[2] = regexp4;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-281), (-281));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotNull(regexpArray1);
      
      intArray0[4] = 912;
      regexp2.runes = intArray0;
      Regexp regexp5 = Parser.parse("[:\uD809\uDC70-\uD809\uDC73]", 912);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotNull(regexp5);
      
      Regexp[] regexpArray2 = new Regexp[2];
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      
      regexpArray2[0] = regexp1;
      regexpArray2[1] = regexp2;
      Regexp[] regexpArray3 = Parser.subarray(regexpArray2, 3006, 3006);
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray3.equals((Object)regexpArray2));
      assertFalse(regexpArray3.equals((Object)regexpArray0));
      assertFalse(regexpArray3.equals((Object)regexpArray1));
      assertNotSame(regexpArray2, regexpArray0);
      assertNotSame(regexpArray2, regexpArray1);
      assertNotSame(regexpArray2, regexpArray3);
      assertNotSame(regexpArray3, regexpArray2);
      assertNotSame(regexpArray3, regexpArray0);
      assertNotSame(regexpArray3, regexpArray1);
      assertNotNull(regexpArray3);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1637), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1637
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = (-2104);
      Regexp regexp0 = Parser.parse("F[B=DjcyodZ", (-554));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("II\bQMks.!XDi2Ct*6", 1000);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexpArray0[0] = regexp2;
      int int1 = (-2327);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 960;
      try { 
        Parser.parse("PPd)0", 960);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Regexp regexp0 = Parser.parse("KL", (-1822));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("pL<", (-315));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotNull(regexp3);
      
      Regexp[] regexpArray0 = new Regexp[2];
      String string0 = regexp3.toString();
      assertEquals("(?i:PL<)", string0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotNull(string0);
      
      regexp3.subs = regexpArray0;
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2211, (-763));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      regexp0.name = "^x00-x{10FFFF}";
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp2 = Parser.parse("V:+QicQf49<qjXnY^", 3510);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("^x00-x{10FFFF}", (-1363));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotNull(regexp5);
      
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp6 = new Regexp(regexp_Op2);
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotNull(regexp6);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "(?P<";
      Regexp regexp0 = Parser.parse("D", (-2447));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = (-1763);
      Parser parser0 = new Parser("D", (-961));
      assertNotNull(parser0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string1 = regexp2.toString();
      assertEquals("$", string1);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(string1);
      
      String string2 = regexp0.toString();
      assertEquals("(?i:D)", string2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotNull(string2);
      
      Regexp regexp3 = Parser.parse("[^0-9]", (-1763));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      
      int int1 = 948;
      int int2 = 125;
      Regexp regexp4 = Parser.parse("]", 125);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotNull(regexp5);
      
      Regexp regexp6 = Parser.parse("D", (-1763));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotNull(regexp6);
      
      Regexp regexp7 = new Regexp(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp6));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp0));
      assertNotNull(regexp7);
      
      int int3 = 186;
      Regexp[] regexpArray0 = new Regexp[3];
      String string3 = "\\D";
      int int4 = (-1665);
      Regexp regexp8 = Parser.parse(string3, int4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp3));
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp3);
      assertNotNull(regexp8);
      
      regexpArray0[0] = regexp8;
      regexpArray0[1] = regexp6;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "^\\x00-\\x{FF}";
      Regexp regexp0 = Parser.parse("^x00-x{FF}", 404);
      assertNotNull(regexp0);
      
      int int0 = (-1093552557);
      int int1 = 1421;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 1421, (-1093552557));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 4565;
      int[] intArray0 = new int[3];
      intArray0[0] = 4565;
      int int1 = (-870);
      Regexp regexp0 = Parser.parse("P^0N+F", 4565);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:P)\\A(?i:0)(?i:N)+(?i:F)", string0);
      assertNotNull(string0);
      
      String string1 = ";u+&>";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      int int2 = 114;
      Regexp regexp3 = Parser.parse(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      String string2 = "bW65O|";
      Regexp regexp4 = Parser.parse(string2, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotNull(regexp4);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      
      boolean boolean0 = regexp4.equals(string2);
      assertFalse(boolean0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp3);
      
      int int3 = (-841);
      Regexp regexp6 = Parser.parse(string0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp3);
      assertNotNull(regexp6);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{34tpt:NB-P6lq", 53);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = regexp1.subs;
      assertNotNull(regexpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 53, (-2181));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "1F>JZ<6J";
      Regexp regexp0 = Parser.parse("1F>JZ<6J", (-845));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = "@";
      Regexp regexp2 = Parser.parse("@", 43);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      int int0 = 3055;
      Regexp regexp3 = Parser.parse("B", 109);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      int int1 = 43;
      Regexp regexp5 = Parser.parse("1F>JZ<6J", 43);
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotNull(regexp5);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      Regexp regexp6 = Parser.parse("1F>JZ<6J", 54);
      assertTrue(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp4));
      assertTrue(regexp6.equals((Object)regexp0));
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp5);
      assertNotNull(regexp6);
      
      regexpArray0[2] = regexp6;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp3;
      int int2 = (-2120);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3055, (-2120));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "[::\\x00-\\x{10FFFF]";
      int int0 = 12;
      int int1 = 1132;
      Regexp regexp0 = Parser.parse("[::x00-x{10FFFF]", 12);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      regexp1.op = regexp_Op0;
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{10FFFF]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$g|EE|w", 53);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Parser parser0 = new Parser("p@&|D", 74850);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("x", 74850);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Mongolian", 74850);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      String string0 = regexp0.toString();
      assertEquals("x", string0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      assertNotNull(string0);
      
      Regexp regexp2 = Parser.parse("Mongolian", (-400));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      regexp2.reinit();
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse("t:U0\u0000", 1841);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      
      regexp0.cap = 116;
      Regexp regexp4 = Parser.parse("\\x", 74850);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "g/\"7`e|Gqb.{C";
      Regexp regexp0 = Parser.parse("g/\"7`e|Gqb.{C", 53);
      assertNotNull(regexp0);
      
      regexp0.max = 53;
      Regexp regexp1 = Parser.parse("\t", 12);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("g/\"7`e|Gqb.{C", 12);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      String string1 = "invalid character class";
      Regexp regexp3 = Parser.parse("invalid character class", 53);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      try { 
        Parser.parse("(?(<(?Q*", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "g[-";
      int int0 = 33;
      Parser parser0 = new Parser("g[-", 33);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("g[-", 1073);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = 69;
      String string0 = "3G4hgb[-";
      try { 
        Parser.parse("3G4hgb[-", 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "[::\\x00-\\x{10FFFF}]";
      Regexp regexp0 = Parser.parse("[::x00-x{10FFFF}]", 12);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      regexp1.op = regexp_Op0;
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      int int0 = 693;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 46, 693);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "H6l1]i<eF~{|.";
      int int0 = 76;
      Regexp regexp0 = Parser.parse("H6l1]i<eF~{|.", 76);
      assertNotNull(regexp0);
      
      regexp0.name = "H6l1]i<eF~{|.";
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      regexp0.runes = intArray0;
      regexp0.name = "H6l1]i<eF~{|.";
      int int1 = 730;
      Regexp[] regexpArray0 = new Regexp[8];
      int int2 = 91;
      Regexp regexp1 = Parser.parse("Other_Lowercase", 91);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 97, 730);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[0] = regexp1;
      int int0 = 7;
      regexp1.min = 7;
      boolean boolean0 = regexp0.equals("Pw");
      assertFalse(boolean0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      int int1 = (-664);
      try { 
        Parser.parse("A8[I0QUL$XS6s_7}", (-664));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[I0QUL$XS6s_7}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z&m", 1768);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("z&m", 1768);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("p{C))", 6974);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Parser parser0 = new Parser("QUEST", 6974);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("p{C))", 2046);
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotNull(regexp4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = regexp3.equals(object1);
      assertFalse(boolean0);
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(object1, object0);
      
      Regexp regexp5 = Parser.parse("QUEST", 6974);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotNull(regexp5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Regexp regexp0 = Parser.parse("g\"7`e|Gb.{C", 33);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:G)(?:(?i:\"7`E)|(?i:B)(?-s:.)(?i:\\{C))", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = Parser.parse("(?i:G)(?:(?i:\"7`E)|(?i:B)(?-s:.)(?i:{C))", (-448));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Parser parser0 = new Parser("g\"7`e|Gb.{C", 2067);
      assertNotNull(parser0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("Ag9k:Jku", 63);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("P%'@Z", 606);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotNull(regexp5);
      
      Regexp regexp6 = Parser.parse("1R", 99);
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      assertNotNull(regexp6);
      
      Regexp regexp7 = Parser.parse("g3&.{069niTFJ", 33);
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp4));
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp1);
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp4);
      assertNotNull(regexp7);
      
      Regexp regexp8 = Parser.parse("Any", 2067);
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp3));
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp3);
      assertNotNull(regexp8);
      
      Regexp regexp9 = Parser.parse("NO_WORD_BOUNDARY", (-2351));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp0));
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp0);
      assertNotNull(regexp9);
  }
}
