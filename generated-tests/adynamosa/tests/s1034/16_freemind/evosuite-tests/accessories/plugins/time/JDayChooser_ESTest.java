/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 07:41:30 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.MindIcon;
import freemind.modes.MindMapNode;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import freemind.modes.schememode.SchemeMode;
import java.awt.Button;
import java.awt.CardLayout;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Point;
import java.awt.ScrollPane;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import javax.help.ForwardAction;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLayer;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.synth.SynthMenuUI;
import javax.swing.plaf.synth.SynthTableHeaderUI;
import javax.swing.text.AbstractDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.PlainDocument;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.SVGUseElementBridge;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.CachedImageHandlerBase64Encoder;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemPI;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.CountersTable;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xerces.parsers.DTDConfiguration;
import org.apache.xml.utils.DefaultErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Locale locale0 = jDayChooser0.locale;
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDay(494);
      jDayChooser0.drawWeeks();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth(39);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, (-513), 39, '*');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setYear(1753);
      jDayChooser0.setEnabled(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getGraphics();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, (-4484), 494, 35, 4, '*');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.keyReleased(keyEvent1);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      Color.getColor("day");
      Color.getColor("code", (Color) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setMonth(13);
      jDayChooser0.setAlignmentY(2286.7786F);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2U,8mR[ZJ");
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3072, 2175L, 3072, 134184959, '\'', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = true;
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      int int0 = 494;
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(494);
      int int1 = (-513);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), true);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMonth(889);
      jDayChooser0.setFocus();
      int int2 = 35;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 889, 1L, 494, 35, 'M');
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.getFocusListeners();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setDoubleBuffered(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte) (-70), (byte)31, (byte)31, (byte)31, 'T');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.updateUI();
      jDayChooser0.updateUI();
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte) (-70);
      byte byte0 = (byte)31;
      byteArray0[2] = (byte)31;
      jDayChooser0.dayBordersVisible = false;
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setMonth((-4378));
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte) (-70), 2484L, (byte) (-1), (-1792), 'd');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isDayBordersVisible();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", (byte)31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      jDayChooser0.getFocusListeners();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      jDayChooser0.setEnabled(true);
      JLayer<JButton> jLayer0 = new JLayer<JButton>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JPanel jPanel0 = jLayer0.createGlassPane();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (byte)31, 4, 0, 344, 'M');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.isDayBordersVisible();
      jDayChooser0.drawWeeks();
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser1.addListeners(0);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay((-4344));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (byte)104, true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.getLocale();
      jDayChooser0.setMonth(46);
      jDayChooser0.getSelectedDay();
      JPanel jPanel0 = jDayChooser0.weekPanel;
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-77), 46, 14, 2959, '8', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[16];
      jDayChooser0.getFocusListeners();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 0, 0, 36, 'd');
      keyEvent0.getExtendedKeyCode();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.getWeekdayForeground();
      jDayChooser0.getLocale();
      jDayChooser0.setMonth(228);
      jDayChooser0.getSelectedDay();
      jDayChooser1.keyTyped(keyEvent0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = new Locale("day");
      byte byte0 = (byte)121;
      Locale locale1 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      Color.getColor("day");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMonth(179);
      jDayChooser1.setMonth((-40));
      jDayChooser1.setAlignmentY((-40));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (byte)121, (byte)121, (-40), 21, 'q');
      keyEvent0.getExtendedKeyCode();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.getWeekdayForeground();
      jDayChooser2.getLocale();
      jDayChooser0.setMonth((-1033));
      jDayChooser0.getSelectedDay();
      jDayChooser2.keyTyped(keyEvent0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.getSpinner();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getFocusListeners();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 0, 449L, 911, (-2525), 'l');
      keyEvent0.getExtendedKeyCode();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.getWeekdayForeground();
      jDayChooser0.getLocale();
      jDayChooser2.setMonth((int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      jDayChooser0.getSelectedDay();
      jDayChooser2.keyTyped(keyEvent0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      byte byte0 = (byte)31;
      jDayChooser0.getFocusListeners();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 733, (byte)31, 0, (byte)31, 'T');
      keyEvent0.getExtendedKeyCode();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getLocale();
      jDayChooser0.setMonth((byte)10);
      jDayChooser1.getSelectedDay();
      jDayChooser1.keyTyped(keyEvent0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(494);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 228, true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 1780, 10139, 1334, 37, '!');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setMaxSelectableDate(date1);
      assertEquals(27, jDayChooser0.getDay());
      
      jDayChooser0.setDay(494);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Locale locale1 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      Color.getColor("day");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      jDayChooser1.setMonth((byte)121);
      jDayChooser0.setMonth(11);
      jDayChooser0.setAlignmentY(900.0F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setYear(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 0L, 28, (-90), 'd');
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      keyEvent0.setSource(jDayChooser1);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.keyPressed(keyEvent0);
      jDayChooser2.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)48;
      jDayChooser0.setAlignmentY((byte)48);
      byteArray0[7] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 0L, 36, 36, 'T');
      keyEvent0.consume();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      keyEvent0.setSource(dialog_ModalExclusionType0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, (-451L), 6, (-1342), 'K');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(494);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, (-513), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth(39);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, (-2771), 39, '*');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(30, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setOpaque(false);
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.ITALY;
      jDayChooser0.setLocale(locale1);
      jDayChooser0.setSize((int) (byte)31, (int) (byte)31);
      jDayChooser0.setMonth((-3341));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Color color0 = jDayChooser1.sundayForeground;
      Color.getColor("6");
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser1.setMonth((byte)31);
      jDayChooser0.setMonth(128);
      jDayChooser2.setYear((-786));
      Date date0 = jDayChooser2.getMaxSelectableDate();
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertSame(date1, date0);
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      dateFormatSymbols0.setEras(stringArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1128, (byte) (-45), 5, 38, '\'');
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(494);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setEnabled(true);
      assertEquals(28, jDayChooser0.getDay());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 1960, 1851, (-679), (-4428), 'v');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      dateFormatSymbols0.setMonths(stringArray0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(494);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-92);
      JLayer<JButton> jLayer0 = new JLayer<JButton>();
      JPanel jPanel0 = jLayer0.getGlassPane();
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, (byte)1, true);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (byte)38, (byte)38, (byte)1, (byte)38, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      MockPrintStream mockPrintStream0 = new MockPrintStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, mockPrintStream0, 1, 1);
      Font font0 = new Font("day", 1, (-4257));
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 0L, 36, 36, 'T');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.getX();
      jMonthChooser0.getSpinner();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.KERNING;
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING);
      jDayChooser0.setYear(1601);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 8, (long) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, 1771, 'i', (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "24");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      Font font0 = new Font("day", (-456), (-456));
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JToggleButton jToggleButton0 = new JToggleButton("month");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      jMonthChooser0.setAlignmentY((float) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3431;
      int int1 = 6;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(20, "d(:CB~Pr;-#/H!*", 210, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (-1003), 31, 210, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, 3431, (-1065), (-1009), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 210
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxSelectableDate((Date) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0");
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser1.drawDays();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      JToggleButton jToggleButton0 = new JToggleButton("month");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "month");
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JToggleButton jToggleButton0 = new JToggleButton("month");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      jMonthChooser0.setAlignmentY((float) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "month");
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      jDayChooser0.getInheritsPopupMenu();
      Locale locale0 = new Locale("month");
      locale0.getDisplayVariant((Locale) null);
      jDayChooser0.setLocale(locale0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getWeekdayForeground();
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getMaxDayCharacters();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setSundayForeground((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.monthChooser = null;
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusBackward();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 0, 0, '(', 0);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.remove((Component) jDayChooser0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      Frame frame0 = null;
      try {
        frame0 = new Frame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1109), false);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser0.getFont();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      jDayChooser0.setYear((-1109));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(11);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.isDecorationBackgroundVisible();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser_DecoratorButton0, (-1273), 3862L, 38, 38, (-2684), 164, (-966), (-2684), false, (-2684), (-1273), 38, (-705.667));
      menuSelectionManager0.processMouseEvent(mouseWheelEvent0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, (-1273), 11, 210, (-2191), 'G', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(11, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.getSpinner();
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_LINE_BREAK;
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "month");
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateFormatSymbols.getInstance();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.GERMANY;
      locale0.stripExtensions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.cyan;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Color color1 = jDayChooser1.getBackground();
      jDayChooser1.setSundayForeground(color1);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser2.new DecoratorButton();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isDecorationBordersVisible();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.setSundayForeground((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      jDayChooser0.removeFocusListener(metalComboBoxEditor_UIResource0);
      Class<SynthTableHeaderUI> class0 = SynthTableHeaderUI.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 627L, 11, 684, '<', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 122);
      metalComboBoxEditor_UIResource0.focusLost(focusEvent0);
      jDayChooser0.removeFocusListener(metalComboBoxEditor_UIResource0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.keyReleased((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Sj(~@Tai=qVVBT(XA|";
      DTDConfiguration dTDConfiguration0 = new DTDConfiguration();
      Locale locale0 = dTDConfiguration0.getLocale();
      Locale.setDefault(locale0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser1.defaultMinSelectableDate;
      jDayChooser1.setSelectableDateRange((Date) null, date0);
      jDayChooser1.getDayPanel();
      boolean boolean0 = jDayChooser1.isDecorationBordersVisible();
      System.setCurrentTimeMillis((-1925L));
      boolean boolean1 = jDayChooser1.isDayBordersVisible();
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(false);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      CountersTable countersTable0 = transformerImpl0.getCountersTable();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) countersTable0);
      jDayChooser0.setFont(font0);
      jDayChooser0.setMaxDayCharacters(1771);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".lxc");
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1109), true);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getActionMap();
      Font.getFont("23");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setFont((Font) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMonth((-1109));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(494);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 1851, (-513), 3, 40, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.createToolTip();
      jDayChooser0.setYearChooser((JYearChooser) null);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.setSelectableDateRange(date0, date0);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.UNDERLINE_ON;
      SystemColor systemColor0 = SystemColor.menuText;
      float[] floatArray0 = new float[3];
      jDayChooser0.setForeground(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDoubleBuffered();
      byte byte0 = (byte)58;
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte) (-22);
      byteArray0[0] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (byte) (-60), (byte) (-60), (byte) (-54), (-1963), 'j', (MenuElement[]) null, (MenuSelectionManager) null);
      menuKeyEvent0.setKeyChar('W');
      jDayChooser0.keyPressed(menuKeyEvent0);
      SVGUseElementBridge sVGUseElementBridge0 = new SVGUseElementBridge();
      // Undeclared exception!
      try { 
        sVGUseElementBridge0.getViewportWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.bridge.AbstractGraphicsNodeBridge", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      System.setCurrentTimeMillis(50L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDoubleBuffered();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)58;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1390), false);
      jDayChooser0.focusLost(focusEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      JTextField jTextField0 = new JTextField("day");
      FocusEvent focusEvent1 = new FocusEvent(jTextField0, (byte)65, true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent1);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMonth((-1390));
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateFormatSymbols.getInstance();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getY();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDay((-4982));
      jDayChooser0.getSelectedDay();
      ActionEvent actionEvent0 = null;
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      Class<SynthTableHeaderUI> class0 = SynthTableHeaderUI.class;
      jDayChooser0.getListeners(class0);
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      SynthTableHeaderUI synthTableHeaderUI0 = new SynthTableHeaderUI();
      ActionEvent actionEvent0 = new ActionEvent(synthTableHeaderUI0, (-1185), "(+ZC", 400L, 1898);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 3220, "30", (-1185));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(100);
      jDayChooser0.minSelectableDate = date0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(date0, (-513), "day", 100, 8212);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.print((Graphics) null);
      jDayChooser0.setYear(1434);
      jDayChooser0.getMaxDayCharacters();
      ElemPI elemPI0 = new ElemPI();
      Instant instant0 = MockInstant.now();
      Timestamp timestamp0 = Timestamp.from(instant0);
      timestamp0.getTime();
      MockDate mockDate0 = new MockDate();
      mockDate0.after(timestamp0);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate(0, (-620), 0, 0, (-620));
      mockDate1.setTime(1146L);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      jDayChooser0.focusLost(focusEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser1.getGraphicsConfiguration();
      Frame frame0 = null;
      try {
        frame0 = new Frame("day", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Time time0 = new Time(100L);
      jDayChooser0.setSelectableDateRange(date1, time0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 100L;
      AffineTransform affineTransform0 = null;
      try {
        affineTransform0 = new AffineTransform(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.print((Graphics) null);
      jDayChooser0.setYear(1434);
      jDayChooser0.getMaxDayCharacters();
      ElemPI elemPI0 = new ElemPI();
      Instant instant0 = MockInstant.now();
      Timestamp timestamp0 = Timestamp.from(instant0);
      timestamp0.getTime();
      MockDate mockDate0 = new MockDate();
      mockDate0.after(timestamp0);
      Instant instant1 = mockDate0.toInstant();
      MockDate mockDate1 = new MockDate(0, (-620), 0, 0, (-620));
      mockDate1.setTime(1146L);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      Locale locale0 = jDayChooser0.getLocale();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSundayForeground();
      JTextField jTextField0 = new JTextField("Z");
      ActionEvent actionEvent0 = new ActionEvent(instant1, (-3112), "Z");
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.DX;
      actionEvent0.setSource(mockDate0);
      SynthTableHeaderUI synthTableHeaderUI0 = new SynthTableHeaderUI();
      ActionEvent actionEvent1 = new ActionEvent(synthTableHeaderUI0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (String) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.plaf.synth.SynthTableHeaderUI cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.print((Graphics) null);
      jDayChooser0.setYear(1434);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      
      Instant instant0 = MockInstant.now();
      Timestamp timestamp0 = Timestamp.from(instant0);
      timestamp0.getTime();
      MockDate mockDate0 = new MockDate();
      mockDate0.after(timestamp0);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate(0, (-620), 0, 0, (-620));
      jDayChooser0.setDay(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-620), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth((-1601));
      jDayChooser0.setFocus();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDay(494);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getGraphicsConfiguration();
      Frame frame0 = null;
      try {
        frame0 = new Frame("~Lvco%DKX", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "+F^bQ)yBM%";
      dateFormatSymbols0.setAmPmStrings(stringArray0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDay(494);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, (-513), "accessories/plugins/ClonePlugin.properties", 38);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      Color color0 = Color.BLACK;
      Color.getColor("eSzd;3p");
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getWidth();
      int int0 = (-1394);
      jDayChooser0.setDay((-1394));
      HsqlProperties hsqlProperties0 = new HsqlProperties("   [-DIAG (Print overall milliseconds transform took.)]");
      String string0 = "99r0";
      MockFile mockFile0 = new MockFile("99r0");
      MockFile mockFile1 = new MockFile(mockFile0, "#BUQo[*rBqT?h;");
      File file0 = MockFile.createTempFile("99r0", "   [-DIAG (Print overall milliseconds transform took.)]", (File) mockFile1);
      String string1 = "West";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "West");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // West
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusBackward();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 2482, 0, '(', 0);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.remove((Component) jDayChooser0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      Frame frame0 = null;
      try {
        frame0 = new Frame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1109), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.CANADA;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "25";
      stringArray0[1] = "25";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(20);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(31, 31);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser1, 200, (String) null, (-2548L), 200);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      Class<SynthTableHeaderUI> class0 = SynthTableHeaderUI.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.setDayBordersVisible(false);
      ActionEvent actionEvent0 = new ActionEvent(locale0, (-826), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<SynthTableHeaderUI> class0 = SynthTableHeaderUI.class;
      jDayChooser0.getListeners(class0);
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.initDecorations();
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(22);
      jDayChooser0.drawDays();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(439);
      jDayChooser0.setMaxDayCharacters(26);
      GapContent gapContent0 = new GapContent();
      PlainDocument plainDocument0 = new PlainDocument(gapContent0);
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      styledEditorKit0.getCharacterAttributeRun();
      styledEditorKit0.getInputAttributes();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDayBordersVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)0;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MindIcon mindIcon0 = MindIcon.factory("30", imageIcon0);
      mindIcon0.getKeyStroke();
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser1.setEnabled(false);
      jDayChooser1.setSundayForeground(color0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(164, color0.getBlue());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<SynthTableHeaderUI> class0 = SynthTableHeaderUI.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.setDayBordersVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      String[] stringArray0 = new String[5];
      int int0 = 9991;
      BufferedImage bufferedImage0 = new BufferedImage(9991, 7, 7);
      jDayChooser0.getDaysInMonth();
      int int1 = 3361;
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane(3361);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      String[] stringArray0 = new String[2];
      jDayChooser0.transferFocus();
      stringArray0[0] = "30";
      jDayChooser0.focusLost((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Color color0 = Color.darkGray;
      String[] stringArray0 = new String[1];
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getAlignmentX();
      jDayChooser0.setYearChooser(jYearChooser0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getBackground();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "year");
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 2908, 90L, 2908, 12303, ')');
      jYearChooser0.setYear(1763);
      InputEvent.getMaskForButton(3);
      jYearChooser0.requestFocus(true);
      keyEvent0.consume();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setMaxDayCharacters(2908);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(494);
      jDayChooser0.setMaxDayCharacters(26);
      GapContent gapContent0 = new GapContent();
      PlainDocument plainDocument0 = new PlainDocument(gapContent0);
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      styledEditorKit0.getCharacterAttributeRun();
      MutableAttributeSet mutableAttributeSet0 = styledEditorKit0.getInputAttributes();
      int int0 = 320;
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = null;
      try {
        abstractDocument_LeafElement0 = plainDocument0.new LeafElement((Element) null, mutableAttributeSet0, 160, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Illegal cast to MutableAttributeSet
         //
         verifyException("javax.swing.text.AbstractDocument$AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(481);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.drawWeeks();
      jDayChooser0.getDayPanel();
      Color color0 = Color.GREEN;
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getWeekdayForeground();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      locale0.getDisplayName();
      locale0.getDisplayName();
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate((-1874L));
      Instant instant0 = mockDate0.toInstant();
      Timestamp.from(instant0);
      JDayChooser jDayChooser2 = new JDayChooser();
      Date date0 = jDayChooser2.maxSelectableDate;
      jDayChooser1.setMinSelectableDate(date0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      Locale locale2 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale2);
      jDayChooser2.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser2.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-63), 10L, (-1571), 14, '}');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.remove((Component) jDayChooser0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      Frame frame0 = null;
      try {
        frame0 = new Frame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(1);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser1.setMonth(1);
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      jDayChooser0.setForeground(systemColor0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(494);
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isDecorationBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(0);
      GapContent gapContent0 = new GapContent();
      PlainDocument plainDocument0 = new PlainDocument(gapContent0);
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      styledEditorKit0.getCharacterAttributeRun();
      MutableAttributeSet mutableAttributeSet0 = styledEditorKit0.getInputAttributes();
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = null;
      try {
        abstractDocument_LeafElement0 = plainDocument0.new LeafElement((Element) null, mutableAttributeSet0, 0, (-619));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Illegal cast to MutableAttributeSet
         //
         verifyException("javax.swing.text.AbstractDocument$AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      Locale.setDefault(locale0);
      jDayChooser0.setLocale(locale0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.isDecorationBordersVisible();
      System.setCurrentTimeMillis((-1925L));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.print((Graphics) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Color color0 = Color.green;
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      jDayChooser1.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      System.setCurrentTimeMillis(50L);
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 3785;
      int int1 = 9999;
      jDayChooser0.isDoubleBuffered();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3785, 3785, 3785, 9999, 'j', menuElementArray0, (MenuSelectionManager) null);
      menuKeyEvent0.setKeyChar('x');
      jDayChooser0.keyPressed(menuKeyEvent0);
      SVGUseElementBridge sVGUseElementBridge0 = new SVGUseElementBridge();
      // Undeclared exception!
      try { 
        sVGUseElementBridge0.getViewportWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.bridge.AbstractGraphicsNodeBridge", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      Time time0 = new Time((-1L));
      Date date0 = jDayChooser0.setMinSelectableDate(time0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setMinSelectableDate(time0);
      JYearChooser jYearChooser1 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      jDayChooser0.setLocale(locale0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "document";
      stringArray0[1] = "document";
      stringArray0[2] = "document";
      stringArray0[3] = "document";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols.getInstance();
      jDayChooser0.setMonth((-4982));
      jDayChooser0.setWeekOfYearVisible(false);
      String string0 = "UIEvents";
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      sVG12DOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.getX();
      jDayChooser0.setFocus();
      jDayChooser0.doLayout();
      jDayChooser0.focusGained((FocusEvent) null);
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jDayChooser0.imageUpdate(bufferedImage0, 1170, (-1622), 1170, (-6797), 47);
      jDayChooser0.setMaximumSize((Dimension) null);
      System.setCurrentTimeMillis(0);
      jDayChooser0.getLocale();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">Ni1G) &7";
      stringArray0[1] = "";
      stringArray0[2] = "}jaOs`cVNb7j2?*m";
      stringArray0[3] = "K}";
      stringArray0[4] = "teHky";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-197));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5005, false);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 2943, false);
      jDayChooser0.focusLost(focusEvent1);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.drawWeeks();
      Color color0 = Color.darkGray;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("p.");
      Locale locale0 = Locale.FRANCE;
      Locale.getISOCountries();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) jDayChooser0;
      objectArray0[4] = (Object) jDayChooser0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      jDayChooser0.list(printStream0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 35, (-442L), 35, 8913, 'U', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = false;
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menu;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.25F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (-1);
      Color.RGBtoHSB(0, (-1), 0, floatArray0);
      jDayChooser0.setBackground(systemColor0);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.print((Graphics) null);
      int int0 = 1434;
      jDayChooser0.setYear(1434);
      jDayChooser0.getMaxDayCharacters();
      ElemPI elemPI0 = new ElemPI();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (-362L));
      Timestamp timestamp0 = Timestamp.from(instant0);
      timestamp0.getTime();
      MockDate mockDate0 = new MockDate();
      mockDate0.after(timestamp0);
      mockDate0.toInstant();
      int int1 = (-620);
      MockDate mockDate1 = new MockDate(0, (-620), 0, 0, (-620));
      mockDate1.setTime(1146L);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      Locale locale0 = jDayChooser0.getLocale();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSundayForeground();
      String string0 = "Z";
      JTextField jTextField0 = new JTextField("Z");
      FocusEvent focusEvent0 = new FocusEvent(jTextField0, (-620), true, jDayChooser_DecoratorButton0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getGraphicsConfiguration();
      Frame frame0 = null;
      try {
        frame0 = new Frame("~Lvco%DKX", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser1.revalidate();
      Clock clock0 = MockClock.systemUTC();
      Duration duration0 = Duration.ofHours((-4681L));
      // Undeclared exception!
      try { 
        MockClock.tick(clock0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tick duration must not be negative
         //
         verifyException("java.time.Clock", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Class<SynthTableHeaderUI> class0 = SynthTableHeaderUI.class;
      jDayChooser0.getListeners(class0);
      Color color0 = Color.PINK;
      Color.getColor("", 0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.weeks = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setEnabled(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      jDayChooser0.setLocale(locale0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      InterpreterPool interpreterPool0 = new InterpreterPool();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      String[] stringArray0 = new String[5];
      int int0 = 9999;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(9999, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      CachedImageHandlerBase64Encoder cachedImageHandlerBase64Encoder0 = new CachedImageHandlerBase64Encoder();
      CardLayout cardLayout0 = new CardLayout(2025, 2331);
      Dimension dimension0 = cardLayout0.minimumLayoutSize(jDayChooser0);
      BufferedImage bufferedImage0 = cachedImageHandlerBase64Encoder0.buildBufferedImage(dimension0);
      Image image0 = bufferedImage0.getScaledInstance(2025, 1493, 2025);
      Component component0 = Box.createHorizontalStrut(4253);
      jDayChooser0.checkImage(image0, (-2370), 2830, (ImageObserver) component0);
      assertEquals(4253, dimension0.width);
      
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBackgroundVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("p.");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) jDayChooser0;
      objectArray0[4] = (Object) jDayChooser0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      jDayChooser0.list(printStream0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      Class<SynthTableHeaderUI> class0 = SynthTableHeaderUI.class;
      jDayChooser0.getListeners(class0);
      Color color0 = Color.PINK;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        color0.getComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(494);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setAlignmentX((-1550.069F));
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.focusGained((FocusEvent) null);
      int int0 = (-3629);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "day", (-3629));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusBackward();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setFocus();
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(0);
      jDayChooser0.setWeekOfYearVisible(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "UIEvents";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      jDayChooser0.setMonth(0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDay(494);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-513), false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth((-513));
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = false;
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.update((Graphics) null);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      SynthMenuUI synthMenuUI0 = new SynthMenuUI();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      int int0 = 10074;
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(10074);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isFocusOwner();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.getCursor();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.KOREAN;
      Locale.setDefault(locale1);
      jDayChooser0.setLocale(locale0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getDayPanel();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.contains(2139, 2139);
      jDayChooser0.list();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getComponents();
      jDayChooser0.list();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      jDayChooser_DecoratorButton0.getRolloverSelectedIcon();
      jDayChooser_DecoratorButton0.setInheritsPopupMenu(false);
      JMapViewer jMapViewer0 = new JMapViewer();
      Point point0 = jMapViewer0.getMapPosition((double) 12315, (double) 0, false);
      jDayChooser0.setLocation(point0);
      jDayChooser_DecoratorButton0.setFocusTraversalKeysEnabled(false);
      // Undeclared exception!
      try { 
        debugGraphics0.create(12315, 1059, 0, 12315);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay(494);
      jDayChooser0.setMaxDayCharacters(26);
      GapContent gapContent0 = new GapContent();
      PlainDocument plainDocument0 = new PlainDocument(gapContent0);
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      styledEditorKit0.getCharacterAttributeRun();
      MutableAttributeSet mutableAttributeSet0 = styledEditorKit0.getInputAttributes();
      int int0 = 320;
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = null;
      try {
        abstractDocument_LeafElement0 = plainDocument0.new LeafElement((Element) null, mutableAttributeSet0, 160, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Illegal cast to MutableAttributeSet
         //
         verifyException("javax.swing.text.AbstractDocument$AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setMaxDayCharacters(2284);
      jDayChooser0.setDay(2284);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setOpaque(false);
      jDayChooser0.setFocus();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters((-619));
      MindMapNode mindMapNode0 = null;
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x";
      stringArray0[1] = "4Nv9@?[gu%@=";
      stringArray0[2] = "POdD_iOd?nkB12vXGc";
      stringArray0[3] = "H&tb*! Mtq&";
      stringArray0[4] = "Pbr)E";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-2583));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2583), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.CANADA;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAlignmentY();
      jDayChooser0.getConditionForKeyStroke((KeyStroke) null);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(869);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDayBordersVisible(false);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "day");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("day", "day", 869, "0{}pM{pXWD~18TeGR|z", uRLStreamHandler0);
      HelpSet helpSet0 = null;
      try {
        helpSet0 = new HelpSet(classLoader0, uRL0);
        fail("Expecting exception: HelpSetException");
      
      } catch(Throwable e) {
         //
         // Could not parse
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (Mock call to openConnection which was not presented when the test was generated)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         //
         verifyException("javax.help.HelpSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.print((Graphics) null);
      int int0 = 1434;
      jDayChooser0.setYear(1434);
      jDayChooser0.getMaxDayCharacters();
      ElemPI elemPI0 = new ElemPI();
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder("day", "qpEj~x=:@C1.DM8jY7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      Object object0 = new Object();
      SchemeMode schemeMode0 = new SchemeMode();
      // Undeclared exception!
      try { 
        schemeMode0.getFrame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.schememode.SchemeMode", e);
      }
  }
}
