/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:47:01 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.sql.compile.CompilerContext;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.store.replication.master.MasterFactory;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = File.pathSeparator;
      SQLUtil.removeComments(">]\"O\"B-MeYY_ga\"8");
      SQLUtil.parseColumnTypeAndSize("select into");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(": = ':'", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = new Boolean("|~VMv!^Kj|`R{EoyC;");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("getNClob(String)");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      SQLUtil.addOptionalCondition("getNClob(String)", stringBuilder1);
      assertEquals("getNClob(String)CONSTRAINT |~VMv!^Kj|`R{EoyC;  or getNClob(String)", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("|~VMv!^Kj|`R{EoyC;");
      assertNull(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT |~VMv!^Kj|`R{EoyC; ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = new Boolean("|~VMv!^Kj|`R{EoyC;");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "consta", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\"[A` 'J}", true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      TableContainer tableContainer0 = new TableContainer("DD ");
      defaultDBTable0.getColumns();
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2686), "NI;c");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DD ", defaultDBTable0, dBDataType0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = LogToFile.TEST_LOG_FULL;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.append((CharSequence) "NI;c");
      SQLUtil.addRequiredCondition("NI;c", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("rename");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("MCp,U!]OisZU", true);
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("XSAS1.S", true);
      assertEquals("XSAS1.S", string0);
      
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "n}w+-+v,<";
      stringArray0[1] = "XSAS1.S";
      stringArray0[2] = "";
      stringArray0[3] = "n}w+-+v,<";
      stringArray0[4] = "";
      String string1 = SQLUtil.renderColumnListWithTableName("n}w+-+v,<", stringArray0);
      assertEquals("n}w+-+v,<.n}w+-+v,<, n}w+-+v,<.XSAS1.S, n}w+-+v,<., n}w+-+v,<.n}w+-+v,<, n}w+-+v,<.", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "'oIzH.ZUOn_";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE  = '' AND 'oIzH.ZUOn_ = ''oIzH.ZUOn_' AND  = '' AND  = ''", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom((-1781));
      DBSchema dBSchema0 = new DBSchema("*)E]");
      dBSchema0.getTable("truncate4)zz");
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("close: ");
      dBSchema0.getTable("close: ");
      DBSchema dBSchema1 = new DBSchema("close: ", (DBCatalog) null);
      DBTrigger dBTrigger0 = new DBTrigger(" (", dBSchema1);
      dBSchema0.addTrigger(dBTrigger0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, " (");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("close: ", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" ((2,2)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.leftJoin("_Z}NXDE@Otxb:~", stringArray0, (String) null, "WK oL*^K", stringArray0);
      assertEquals("left join null as WK oL*^K on ", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("select", stringArray0, "insert|~vmv!^kj|`r{eoyc;", "(", stringArray0);
      assertEquals("insert|~vmv!^kj|`r{eoyc; as ( on ", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("'-5[iw|1g*r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "'";
      String string0 = SQLUtil.join("0\"KRCZYRU;1KsO", "'", stringArray0, "s@]<", "c01380", stringArray0);
      assertEquals("0\"KRCZYRU;1KsO join s@]< as c01380 on '.null = c01380.null and '.' = c01380.'", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1540);
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      StringBuilder stringBuilder2 = stringBuilder1.append("43X99.U");
      SQLUtil.addRequiredCondition((String) null, stringBuilder2);
      assertEquals("0.043X99.U and null", stringBuilder2.toString());
      assertEquals("0.043X99.U and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.isProcedureCall("\">BH");
      SQLUtil.normalize("RDp?ML 7)?L>v^", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RDp?ML 7)?L>v^");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\">BH";
      stringArray0[1] = "RDp?ML 7)?L>v^";
      stringArray0[3] = "R  Dp ?  ML  7) ? L > v ^";
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FBBlob.SEGMENTED;
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = RawStoreFactory.DATA_ENCRYPT_ALGORITHM_VERSION;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("rename- 14.132309406706");
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("XR#DaGrA_VHBnH");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = stringArray0[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("-9223372036854775808", false);
      assertEquals("- 9223372036854775808", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index/", defaultDBTable0, (-2143), "delee|~vtv!^kj|`r{eoyc;");
      defaultDBColumn0.equals((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer.max((-2143), (-2143));
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop index/ DELEE|~VTV!^KJ|`R{EOYC; NULL", string0);
      
      SQLUtil.removeComments("delee|~vtv!^kj|`r{eoyc;");
      String string1 = SQLUtil.normalize("delee|~vtv!^kj|`r{eoyc;", false);
      assertEquals("delee | ~ vtv ! ^ kj | ` r { eoyc ;", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column drop index/", string2);
      
      boolean boolean0 = SQLUtil.isDML("delee | ~ vtv ! ^ kj | ` r { eoyc ;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "select";
      String string1 = "insert|~vmv!^kj|`r{eoyc;";
      String string2 = "(";
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder(4066);
      SQLUtil.addRequiredCondition("insert|~vmv!^kj|`r{eoyc;", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      boolean boolean0 = SQLUtil.isDDL("O!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" 7_.C8ia#1?G8", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "|~vmv!^kj|`r{";
      stringArray0[2] = "$oTO`Em";
      stringArray0[3] = "insert";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, |~vmv!^kj|`r{, $oTO`Em, insert)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = new Boolean("|~VMv!^Kj|`R{EoyC;");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("|~VMv!^Kj|`R{EoyC;", false, "|~VMv!^Kj|`R{EoyC;", "getNClob(String)");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("|~VMv!^Kj|`R{EoyC;");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      SQLUtil.addOptionalCondition("execdelete", stringBuilder0);
      assertEquals("execdelete", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FBBlob.SEGMENTED;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getUniqueConstraints(false);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("drop indexpngcyrwk=&p=*(e", false);
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oV1M!|WN5$M'w+:QPZ0");
      String string0 = TypeId.BIT_NAME;
      String string1 = SQLUtil.normalize("oV1M!|WN5$M'w+:QPZ0", false);
      assertEquals("oV1M ! | WN5 $ M 'w+:QPZ0'", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("YE4\"w", "\nConsidering join strategy ", (VersionNumber) null);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase("call", "\nConsidering join strategy ", (VersionNumber) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "YE4\"w";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[3] = "\nConsidering join strategy ";
      stringArray0[4] = "";
      stringArray0[6] = " WHERE ";
      stringArray0[7] = "w/sSrp>@W";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      SQLUtil.removeComments("YE4\"w");
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.mutatesDataOrStructure("execwhere not(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getUniqueConstraints(true);
      VersionNumber.valueOf("alter materialized viewselect");
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = SQLUtil.isProcedureCall("Qua\"Fr\"Ew#6");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1581, "Qua\"Fr\"Ew#6");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.COMMIT;
      Integer.divideUnsigned(335544324, 1998);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONVERT", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("QUA\"FR\"EW#6(0)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Random.setNextRandom(447);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("*_QPg}AyzjO0x(Wo|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: *_QPg}AyzjO0x(Wo|
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("pif");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "pif";
      SQLUtil.renderColumnNames(stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("pif");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("pif", stringBuilder1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index/", defaultDBTable0, (-2143), "delee|~vtv!^kj|`r{eoyc;");
      defaultDBColumn0.equals((Object) null);
      String string0 = SQLUtil.normalize("drop index/", false);
      assertEquals("drop index /", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column drop index/", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("column drop index/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Unknown constraint type: ", defaultDBTable0, (DBDataType) null);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf(" on ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" on ", " on ", versionNumber0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-2143), "insert");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index|~vmv!^kj|`r{eoyc;", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDoc("drop tableleft join {qn7}eow_q{2c|6\"g as conside on mt'5~xt5`kycm.<j.c013800d-00fb-2641-07ec-000000134f30 = conside.{qn7}eow_q{2c|6\"g");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOB", string0);
      
      TableContainer tableContainer0 = new TableContainer("update,`uim/s2|q>x^nyqh1");
      String string1 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A.IY2f&H=O9:^:A";
      stringArray0[1] = "A.IY2f&H=O9:^:A";
      stringArray0[2] = "A.IY2f&H=O9:^:A";
      stringArray0[3] = "A.IY2f&H=O9:^:A";
      stringArray0[4] = "A.IY2f&H=O9:^:A";
      stringArray0[5] = "A.IY2f&H=O9:^:A";
      SQLUtil.join("", "A.IY2f&H=O9:^:A", stringArray0, "R?-}%", "", stringArray0);
      TableContainer tableContainer0 = new TableContainer("A.IY2f&H=O9:^:A");
      DBSchema dBSchema0 = tableContainer0.getSchema();
      assertNull(dBSchema0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.mutatesDataOrStructure("select");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getUniqueConstraints(false);
      VersionNumber.valueOf("select");
      SQLUtil.normalize("i74O\"{fjT", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("CLOB", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("crate materialized view");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("crate materialized view");
      dBCatalog0.getTables();
      SQLUtil.mutatesDataOrStructure("alter session");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Not a supported protocol: ", defaultDBTable0, (DBDataType) null, (Integer) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("XzT{T|p(45<6(I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'XzT{T|p(45<6(I' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.isQuery("insertalter session");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCatalog dBCatalog0 = new DBCatalog();
      VersionNumber versionNumber0 = VersionNumber.valueOf("h2.socketConnectTimeout");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" (", ")i+es", versionNumber0);
      DBCatalog dBCatalog1 = new DBCatalog(" (");
      DBSchema dBSchema0 = new DBSchema("h2.socketConnectTimeout", dBCatalog1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDatabase0.setTableInclusionPattern(" (");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`;CUT*6Gys{RK5C", defaultDBTable0, 272, "`;CUT*6Gys{RK5C");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("selectpngcyrwk=&p=*(e(0)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e(0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      String string0 = null;
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      dBPackage0.equals("");
      dBSchema0.addPackage(dBPackage0);
      dBSchema0.setCatalog((DBCatalog) null);
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.typeAndName(dBPackage0);
      SQLUtil.isQuery(".;jUc^<>`X$G$)O}");
      StringBuilder stringBuilder0 = new StringBuilder(90132);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".;jUc^<>`X$G$)O}", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("null null", defaultDBTable0, 134217728, "setClob(String, Clob)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      dBSchema0.setCatalog((DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      dBSchema0.addPackage(dBPackage0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null", dBSchema0);
      dBSchema0.setCatalog((DBCatalog) null);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[2] = "KTBKoKZ4Swwd,O<6";
      String string1 = SQLUtil.normalize(" on ", true);
      assertEquals("on", string1);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("#w]9", dBSchema0);
      String string2 = SQLUtil.normalize("2)Ri`z", true);
      assertEquals("2) Ri ` z", string2);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[1] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'Y';
      charArray1[3] = 'Y';
      charArrayReader0.read(charArray1);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.commentChar(41);
      streamTokenizer0.nval = (-14.132309406706);
      streamTokenizer0.parseNumbers();
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isDDL("- 14.132309406706");
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 41);
      assertEquals(0, lineNumberReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[34];
      stringArray0[7] = stringArray0[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[12];
      stringArray1[0] = stringArray0[7];
      stringArray1[1] = stringArray0[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[7], true, stringArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",ou");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      TableContainer tableContainer0 = new TableContainer(stringArray1[0]);
      defaultDBTable0.getColumns();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setName(stringArray1[0]);
      dBPrimaryKeyConstraint1.setOwner(defaultDBTable0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.mutatesStructure("\nConsidering join strategy ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("\nConsidering join strategy ", "\nConsidering join strategy ", (VersionNumber) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBDataType.getInstance(47, "");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer(10);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder2 = new StringBuilder(">0]%[e)cZ[p,mZu");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.addOptionalCondition("create materialized view", stringBuilder1);
      Random.setNextRandom(405);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("NkZIU/k;>K6mh", false);
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null, 3332);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FBBlob.SEGMENTED;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getUniqueConstraints(false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("alter index", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("select", dBSchema0);
      String string0 = SQLUtil.normalize("select", true);
      assertEquals("select", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("alter index");
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "select";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "select", true, stringArray0);
      String string1 = PermDescriptor.USAGE_PRIV;
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("_KU9CNeJvei", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'", true, defaultDBTable0, stringArray0, defaultDBTable2, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ' FOREIGN KEY ( , select) REFERENCES _KU9CNeJvei( , select)", string2);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT select ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lq&:<");
      DBDataType dBDataType0 = DBDataType.getInstance(35, "lq&:<");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":7", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("lq&:<", defaultDBTable0, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("lq&:<", defaultDBTable0, dBDataType0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      defaultDBColumn2.setOwner(defaultDBTable0);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("lq&:<", defaultDBTable0, dBDataType0, integer2);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("lq&:<", defaultDBTable0, dBDataType0, integer2, integer2);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Character character0 = Character.valueOf('e');
      SQLUtil.renderValue(character0);
      System.setCurrentTimeMillis(35);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DBSchema dBSchema0 = new DBSchema(stringArray0[4]);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[2];
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("4M*/BD4n8Un6luxqs", true);
      assertEquals("4M */ BD4n8Un6luxqs", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[7] = stringArray0[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[12];
      stringArray1[0] = "NkZIU/k;>K6mh";
      stringArray1[1] = "NkZIU/k;>K6mh";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NkZIU/k;>K6mh", true, stringArray1);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(defaultDBTable0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        Charset.forName("NkZIU/k;>K6mh");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // NkZIU/k;>K6mh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[1] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'T';
      charArray1[3] = 'T';
      int int0 = CompilerContext.HAVING_CLAUSE_RESTRICTION;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.commentChar(41);
      streamTokenizer0.nval = (double) 'T';
      streamTokenizer0.parseNumbers();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isDDL("alter materialized viewj;frus;y");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(lineNumberReader0);
      SQLUtil.renderNumber(streamTokenizer1);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[1] = 'T';
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, (-584), "exec");
      defaultDBColumn0.equals("exec");
      String string0 = TypeId.FLOAT_NAME;
      Integer.max((-584), (-584));
      SQLUtil.removeComments("drop index/");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop index/";
      stringArray0[1] = "Unknown constraint type: ";
      stringArray0[2] = "drop index/";
      stringArray0[3] = "delee|~vtv!^kj|`r{eoyc;";
      stringArray0[4] = "qW/_gTQg2Yhab$";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("CHDwQ_(6N*P", true, defaultDBTable0, "exec");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT CHDwQ_(6N*P CHECK exec", string1);
      
      String string2 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint CHDwQ_(6N*P", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[7] = stringArray0[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.isIdentical(defaultDBTable1);
      defaultDBTable1.getIndexes();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable1.addUniqueConstraint(dBPrimaryKeyConstraint0);
      String string0 = SchemaDescriptor.SYSIBM_SCHEMA_UUID;
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Vw", "update/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete*s8y#2");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("update/", true);
      assertEquals("update /", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-2119), "delete*s8y#2");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update/", defaultDBTable0, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "insert", true, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      dBPrimaryKeyConstraint0.equals("update/");
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT insert PRIMARY KEY ()", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertFalse(string2.equals((Object)string0));
  }
}
