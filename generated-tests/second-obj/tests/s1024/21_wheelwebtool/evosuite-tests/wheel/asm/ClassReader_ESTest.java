/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:11:00 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(148);
      classReader0.accept((ClassVisitor) classWriter0, 709);
      int int0 = classReader0.readUnsignedShort(148);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(710);
      ClassWriter classWriter1 = new ClassWriter(964);
      MethodWriter methodWriter0 = classWriter1.firstMethod;
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      classReader0.copyPool(classWriter1);
      classReader0.getInterfaces();
      classWriter0.visitInnerClass((String) null, "org.apache.commons.io.filefilter.TrueFileFilter", (String) null, (-131));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Label label0 = new Label();
      Label label1 = label0.next;
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = 'O';
      charArray0[4] = 'M';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.readLong(1010);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.ClassReader");
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("InnerClasses");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.readLong(1004);
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '6';
      char char0 = '3';
      charArray0[2] = '3';
      charArray0[3] = 'G';
      char char1 = '_';
      charArray0[4] = '_';
      charArray0[5] = '.';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(700, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      
      long long0 = classReader0.readLong(1004);
      assertEquals(33, classReader0.getAccess());
      assertEquals(7023455378485112423L, long0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(31354, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      
      ClassReader classReader1 = new ClassReader(byteArrayInputStream0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotNull(classReader1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      // Undeclared exception!
      try { 
        classReader1.getItem(1585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1585
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(156);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.accept((ClassVisitor) classWriter0, 986);
      ClassWriter classWriter1 = new ClassWriter(classReader0, classReader0.SKIP_DEBUG);
      classReader0.copyPool(classWriter1);
      classReader0.getInterfaces();
      ClassWriter classWriter2 = new ClassWriter(classReader0.SKIP_CODE);
      MethodWriter methodWriter0 = classWriter2.firstMethod;
      MethodWriter methodWriter1 = classWriter1.firstMethod;
      classReader0.copyPool(classWriter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
          assertEquals(33, classReader0.getAccess());
          assertNotNull(classReader0);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          
          long long0 = classReader0.readLong(1010);
          assertEquals(33, classReader0.getAccess());
          assertEquals(7955411265300952168L, long0);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          
          String string0 = classReader0.getSuperName();
          assertEquals(33, classReader0.getAccess());
          assertNotNull(string0);
          assertEquals("java/lang/Object", string0);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          
          ClassWriter classWriter0 = new ClassWriter(690);
          assertNotNull(classWriter0);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          
          classReader0.accept((ClassVisitor) classWriter0, 1);
          assertEquals(33, classReader0.getAccess());
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(1088);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 156);
      classWriter0.getCommonSuperClass("RuntimeInvisibleParameterAnnotations", "Exceptions");
      int int0 = 457;
      ClassWriter classWriter1 = new ClassWriter(int0);
      int int1 = 128;
      ClassWriter classWriter2 = new ClassWriter(int1);
      MethodWriter methodWriter0 = classWriter1.firstMethod;
      classReader0.copyPool(classWriter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      classReader0.copyPool(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label[] labelArray0 = new Label[5];
      label0.outputStackMax = 2;
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      labelArray0[3] = label0;
      labelArray0[4] = label0;
      Label label1 = classReader0.readLabel(1, labelArray0);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(label1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertSame(label1, label0);
      
      Label label2 = classReader0.readLabel(2, labelArray0);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(label2);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertSame(label2, label0);
      assertSame(label2, label1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassWriter classWriter0 = new ClassWriter(171);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3933, "_UC/uKB:%Jyfp $", "XQ*Q:F|:L6X;$v ,'rj", "_UC/uKB:%Jyfp $", "<init>");
      assertNotNull(fieldWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.lastField = fieldWriter0;
      classReader0.accept((ClassVisitor) classWriter0, 194);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classReader0.readUnsignedShort(171);
      assertEquals(33, classReader0.getAccess());
      assertEquals(29800, int0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      long long0 = classReader0.readLong(1010);
      assertEquals(33, classReader0.getAccess());
      assertEquals(7955411265300952168L, long0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String string0 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.ClassReader");
      assertFalse(boolean0);
      
      String string1 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals("java/lang/Object", string1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassWriter classWriter0 = new ClassWriter(3);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.accept((ClassVisitor) classAdapter0, 541);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classReader0.readLabel(280, (Label[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
          assertEquals(33, classReader0.getAccess());
          assertNotNull(classReader0);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          
          String string0 = classReader0.getSuperName();
          assertEquals(33, classReader0.getAccess());
          assertNotNull(string0);
          assertEquals("java/lang/Object", string0);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          
          long long0 = classReader0.readLong(1004);
          assertEquals(33, classReader0.getAccess());
          assertEquals(7023455378485112423L, long0);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          
          long long1 = classReader0.readLong(251);
          assertEquals(33, classReader0.getAccess());
          assertFalse(long1 == long0);
          assertEquals(133990893010551262L, long1);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          
          boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Object");
          assertFalse(boolean0);
          
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
          assertEquals(33, classReader0.getAccess());
          assertEquals(31354, byteArrayInputStream0.available());
          assertNotNull(byteArrayInputStream0);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          
          ClassReader classReader1 = new ClassReader(byteArrayInputStream0);
          assertEquals(33, classReader0.getAccess());
          assertEquals(0, byteArrayInputStream0.available());
          assertEquals(33, classReader1.getAccess());
          assertFalse(classReader1.equals((Object)classReader0));
          assertNotNull(classReader1);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8070, classReader1.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          
          String string1 = classReader1.getClassName();
          assertEquals(33, classReader0.getAccess());
          assertEquals(0, byteArrayInputStream0.available());
          assertEquals(33, classReader1.getAccess());
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classReader1.equals((Object)classReader0));
          assertFalse(string1.equals((Object)string0));
          assertNotNull(string1);
          assertEquals("wheel/asm/ClassReader", string1);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8070, classReader1.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classReader1, classReader0);
          
          String string2 = classReader0.getSuperName();
          assertEquals(33, classReader0.getAccess());
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(string2.equals((Object)string1));
          assertNotNull(string2);
          assertEquals("java/lang/Object", string2);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotSame(classReader0, classReader1);
          
          int int0 = classReader1.readByte(1004);
          assertEquals(33, classReader0.getAccess());
          assertEquals(0, byteArrayInputStream0.available());
          assertEquals(33, classReader1.getAccess());
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classReader1.equals((Object)classReader0));
          assertEquals(97, int0);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8070, classReader1.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classReader1, classReader0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(251);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 1668, (-150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52168
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classWriter0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Class not found");
      assertFalse(boolean0);
      
      classReader0.accept((ClassVisitor) classWriter0, 185);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = 1935;
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNotNull(methodWriter0);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, (-577), (-577));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      long long0 = classReader0.readLong(1004);
      assertEquals(33, classReader0.getAccess());
      assertEquals(7023455378485112423L, long0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string0 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(688);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.copyPool(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray1 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals("java/lang/Object", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      int int0 = classReader0.getAccess();
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.readLong(1010);
      classReader0.getSuperName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.ClassReader");
      classReader0.getInterfaces();
      int int0 = 156;
      ClassWriter classWriter0 = new ClassWriter(8070);
      classReader0.accept((ClassVisitor) classWriter0, (-1806));
      ClassWriter classWriter1 = new ClassWriter(int0);
      ClassWriter classWriter2 = new ClassWriter(classReader0.SKIP_DEBUG);
      int int1 = 131072;
      ClassWriter classWriter3 = new ClassWriter(int1);
      MethodWriter methodWriter0 = classWriter3.firstMethod;
      classReader0.copyPool(classWriter1);
  }
}
