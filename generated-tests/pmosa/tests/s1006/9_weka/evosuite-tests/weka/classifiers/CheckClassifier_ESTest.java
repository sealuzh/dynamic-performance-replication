/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:12:24 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.SimpleKMeans;
import weka.core.CheckScheme;
import weka.core.Instances;
import weka.core.Utils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = false;
      int int0 = 87;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "%i/G>s[Ex%:`<6,O";
      stringArray0[2] = "SFap";
      stringArray0[3] = "";
      stringArray0[4] = "}KQ~q*k";
      stringArray0[5] = "<TNL;{O";
      stringArray0[6] = "\nFirst buildClassifier()";
      stringArray0[7] = "5`/NBQ&bL7J{GElqrN";
      stringArray0[8] = "";
      CheckClassifier.main(stringArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, false, false, true, true, false, 87, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '87' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.updateableClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, true, true, true, false, 200);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '200' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "JLS`KjmN\"=h|j09f";
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, true, false, false, true, false, 2839, 2839);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2839' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Utils.SMALL = 2408.479658930723;
      int int0 = (-883);
      checkClassifier0.setNumString((-883));
      checkClassifier0.getRevision();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.testToString();
      checkClassifier0.listOptions();
      int int1 = 710;
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Illegal Capacity: -882
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.multiInstanceHandler();
      checkClassifier0.canTakeOptions();
      boolean[] booleanArray1 = checkClassifier0.canHandleOnlyClass(false, true, false, false, false, 0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.declaresSerialVersionUID();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, false, false, true, 6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '6' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      checkClassifier0.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, true, true, true, true, 155);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '155' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, true, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, true, false, true, (-1935));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1935' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, true, true, true, true, false, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: weka.classifiers.rules.ZeroR: Cannot handle string class!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      checkClassifier0.setClassifier(naiveBayesUpdateable0);
      boolean[] booleanArray0 = checkClassifier0.canHandleOnlyClass(false, true, false, true, true, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, false, false, false, 87, false, false, 87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '87' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.instanceWeights(false, false, false, false, false, false, 0);
      boolean[] booleanArray0 = checkClassifier0.updateableClassifier();
      boolean[] booleanArray1 = checkClassifier0.canTakeOptions();
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.testToString();
      RandomTree randomTree0 = new RandomTree();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, true, true, true, false, true, 3146, true, true, 3146);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '3146' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, true, false, true, false, 20);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '20' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, false, true, false, (-1205));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1205' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getWords();
      checkClassifier0.canHandleNClasses(false, true, false, true, false, true, 10);
      int int0 = 116;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, true, false, false, true, 116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '116' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = false;
      int int0 = (-2691);
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, true, true, false, (-2691));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2691' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, true, false, 2075, false, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2075' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.declaresSerialVersionUID();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, true, false, true, false, (-2202));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2202' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getClassifier();
      boolean boolean0 = false;
      checkClassifier0.getWords();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "o.";
      stringArray0[1] = "The,quick,brown,fox,jumps,over,the,lazy,dog";
      stringArray0[2] = "The,quick,brown,fox,jumps,over,the,lazy,dog";
      stringArray0[3] = "The,quick,brown,fox,jumps,over,the,lazy,dog";
      stringArray0[4] = "The,quick,brown,fox,jumps,over,the,lazy,dog";
      stringArray0[5] = "The,quick,brown,fox,jumps,over,the,lazy,dog";
      stringArray0[6] = "The,quick,brown,fox,jumps,over,the,lazy,dog";
      stringArray0[7] = "cS";
      CheckClassifier.main(stringArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, true, true, true, false, 20);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '20' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.datasetIntegrity(true, true, true, false, true, false, 1, true, true);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      String[] stringArray0 = checkClassifier1.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.multiInstanceHandler();
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier0.updatingEquality(true, true, false, true, false, false, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updatingEquality(true, false, true, false, false, false, 1);
      checkClassifier0.getWords();
      boolean[] booleanArray0 = checkClassifier0.testToString();
      checkClassifier0.canHandleZeroTraining(true, false, false, true, false, false, 1);
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.instanceWeights(false, true, true, true, false, false, 1);
      checkClassifier0.updateableClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      boolean[] booleanArray1 = checkClassifier1.canTakeOptions();
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, false, false, false, true, false, 2635);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2635' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-157);
      checkClassifier0.listOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(0, false, false, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "L^@rHTFTw/[K";
      CheckClassifier.main(stringArray0);
      int int0 = 0;
      checkClassifier0.listOptions();
      checkClassifier0.updatingEquality(false, true, true, false, true, true, 0);
      checkClassifier0.declaresSerialVersionUID();
      System.setCurrentTimeMillis(int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cS";
      CheckClassifier.main(stringArray0);
      checkClassifier0.getWords();
      int int0 = 250007;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, true, false, false, true, 250007);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '250007' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier0.printAttributeSummary(false, false, false, false, true, false, 17);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(1793, false, false, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1793' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getClassifier();
      checkClassifier0.getWords();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "cS";
      stringArray0[1] = "cS";
      stringArray0[2] = "cS";
      stringArray0[3] = "o.";
      stringArray0[4] = "o.";
      stringArray0[5] = "o.";
      CheckClassifier.main(stringArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, false, true, true, true, 20);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '20' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.multiInstanceHandler();
      String[] stringArray0 = checkClassifier0.getOptions();
      checkClassifier0.setNumString(21);
      checkClassifier0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(true, true, true, false, false, true, 21);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '21' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updatingEquality(true, false, false, true, false, false, 0);
      checkClassifier0.getWords();
      checkClassifier0.testToString();
      checkClassifier0.testToString();
      Enumeration enumeration0 = checkClassifier0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.doTests();
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkClassifier0.setPostProcessor(checkScheme_PostProcessor0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int0 = 1545;
      checkClassifier0.canPredict(boolean0, boolean0, boolean1, boolean2, boolean2, boolean1, int0);
      checkClassifier0.canTakeOptions();
      boolean boolean3 = false;
      Utils.SMALL = (double) int0;
      checkClassifier0.setNumInstancesRelational(int0);
      boolean boolean4 = true;
      boolean boolean5 = false;
      checkClassifier0.printAttributeSummary(boolean1, boolean1, boolean2, boolean3, boolean4, boolean5, int0);
      boolean boolean6 = false;
      boolean boolean7 = true;
      boolean boolean8 = false;
      checkClassifier0.datasetIntegrity(boolean6, boolean0, boolean1, boolean3, boolean6, boolean7, int0, boolean8, boolean8);
      String[] stringArray0 = new String[2];
      String string0 = "classifier uses instance weights";
      stringArray0[0] = string0;
      String string1 = "0162-8828";
      stringArray0[1] = string1;
      CheckClassifier.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.printAttributeSummary(false, true, true, true, false, false, 4);
      assertEquals(2, checkClassifier0.getNumNominal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.canTakeOptions();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.setNumInstancesRelational(1);
      checkClassifier0.printAttributeSummary(false, false, false, false, false, false, 1);
      checkClassifier1.datasetIntegrity(false, false, false, false, false, false, 1, false, false);
      String[] stringArray0 = new String[0];
      CheckClassifier.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(true);
      checkClassifier0.updateableClassifier();
      checkClassifier0.canTakeOptions();
      RandomTree randomTree0 = new RandomTree();
      assertFalse(randomTree0.getAllowUnclassifiedInstances());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.multiInstanceHandler();
      boolean[] booleanArray0 = checkClassifier0.updatingEquality(false, false, false, false, false, false, 3);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.instanceWeights(false, false, false, false, false, false, 0);
      checkClassifier0.updateableClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "\tTurns off all checks - use with caution!\n\tTurning them off assumes that data is purely numeric, doesn't\n\tcontain any missing values, and has a nominal class. Turning them\n\toff also means that no header information will be stored if the\n\tmachine is linear. Finally, it also assumes that no instance has\n\ta weight equal to 0.\n\t(default: checks on)";
      stringArray0[2] = "\tMust handle multi-instance data.";
      CheckClassifier.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.instanceWeights(false, true, false, false, false, false, 0);
      checkClassifier0.updateableClassifier();
      checkClassifier0.testToString();
      RandomTree randomTree0 = new RandomTree();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
