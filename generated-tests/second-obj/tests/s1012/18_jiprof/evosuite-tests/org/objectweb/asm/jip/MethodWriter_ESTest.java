/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:43:07 GMT 2018
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.SequenceInputStream;
import java.net.URISyntaxException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.AnnotationWriter;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Edge;
import org.objectweb.asm.jip.FieldVisitor;
import org.objectweb.asm.jip.Frame;
import org.objectweb.asm.jip.Item;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodVisitor;
import org.objectweb.asm.jip.MethodWriter;
import org.objectweb.asm.jip.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(20);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RuntimeInvisibleParameterAnnotations";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 186, "fWP.8+v{o(ux}\"#.]g'", "fWP.8+v{o(ux}\"#.]g'", "M", stringArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 4096;
      intArray0[1] = 63;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 63, Integer.MAX_VALUE);
      assertEquals((-2147479616), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[0] = "JSR/RET are not supported with computeFrames option";
      stringArray0[1] = "bR{]iT||k>fy";
      stringArray0[2] = "JSR/RET are not supported with computeFrames option";
      Label label0 = new Label();
      int[] intArray0 = new int[9];
      intArray0[4] = 185;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, (-1723052625), 0);
      assertEquals(1723052625, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2506);
      intArray0[1] = (-377);
      intArray0[2] = 2;
      intArray0[3] = (-367);
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 2, (-2506));
      assertEquals((-1766), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-378));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "OtnaturT", "OtnaturT", "OtnaturT", (String[]) null, false, false);
      ByteVector byteVector0 = new ByteVector();
      int int0 = Type.INT;
      methodWriter0.visitIntInsn(5, 2);
      methodWriter0.put(byteVector0);
      methodWriter0.visitEnd();
      boolean boolean0 = ClassReader.ANNOTATIONS;
      Attribute attribute0 = new Attribute("OtnaturT");
      classWriter0.visitAttribute(attribute0);
      methodWriter0.visitFrame(5, 5, (Object[]) null, 5, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2771);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "GS&@FEey<Zip";
      stringArray0[1] = "GS&@FEey<Zip";
      stringArray0[2] = "Synthetic";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "GS&@FEey<Zip", "GS&@FEey<Zip", "GS&@FEey<Zip", stringArray0, false, false);
      methodWriter0.visitEnd();
      methodWriter0.visitTypeInsn(19, "GS&@FEey<Zip");
      methodWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.put(byteVector0);
      methodWriter0.visitIntInsn(131072, (-2666));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3714));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Code";
      stringArray0[1] = "\"T(YgG|dSb";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 2, "Code", "Code", "\"T(YgG|dSb", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      classWriter0.newDouble(7);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Signature", "w:Q le'C-g 0;[Y.%", "w:Q le'C-g 0;[Y.%", (String[]) null, false, false);
      methodWriter0.visitEnd();
      Label label0 = new Label();
      Label label1 = new Label();
      Edge edge0 = label1.successors;
      label1.inputStackTop = 1;
      label0.info = (Object) null;
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label1;
      methodWriter0.visitTableSwitchInsn(7, 850, label1, labelArray0);
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label1, (int[]) null, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4R^D)m}YfC&S+K";
      stringArray0[1] = "}4R^D)m}YfC&S+K";
      stringArray0[2] = "Synthetic";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", stringArray0, false, true);
      methodWriter0.visitIincInsn(2808, 24);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212673);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(285212673, "LocalVariablTale", "}9^D)m}YfC&S+K", "}9^D)m}YfC&S+K", stringArray0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "RuntimeInvisibleParameterAnnotations", ".\"f{I", "RuntimeInvisibleParameterAnnotations", stringArray0, false, false);
      Item item0 = classWriter0.key3;
      methodWriter0.visitMethodInsn((-2593), "java/lang/Throwable", "}9^D)m}YfC&S+K", "RuntimeInvisibleParameterAnnotations");
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 285212674, "w:Q le'C-g 0;[Y.%", "w:Q le'C-g 0;[Y.%", "\"T(YgG|dSb", (String[]) null, false, false);
      methodWriter0.visitEnd();
      Label label0 = new Label();
      Label label1 = new Label();
      Edge edge0 = label1.successors;
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label1;
      methodWriter0.visitTableSwitchInsn(1, (-1158), label1, labelArray0);
      methodWriter0.visitMaxs((-1158), (-5391));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter0.visitMethod((-227), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      classWriter0.newNameTypeItem("LocalVariableTable", "}R^D)m}YfC&S+K");
      Label label0 = new Label();
      methodWriter0.getSize();
      methodWriter0.visitJumpInsn(1, label0);
      classWriter0.newUTF8("}R^D)m}YfC&S+K");
      Frame frame0 = label0.frame;
      methodWriter0.visitLocalVariable("l", "LocalVariableTable", "", label0, label0, 28);
      try { 
        MockURI.URI(",2crUfQ'mM!LwC(n", (String) null, "}R^D)m}YfC&S+K", (String) null, "l");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ,2crUfQ'mM!LwC(n:%7DR%5ED)m%7DYfC&S+K#l
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4R^D)m}YfC&S+K";
      stringArray0[1] = "}4R^D)m}YfC&S+K";
      stringArray0[2] = "Synthetic";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 29, "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", stringArray0, false, true);
      methodWriter0.visitIincInsn(2808, 24);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-476));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleAnnotations", "#:abJ mKqJ*1", "#:abJ mKqJ*1", (String[]) null, false, false);
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(1, "bhq,#MY`nOcc1", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65548);
      classWriter0.newFieldItem("", "kZH^S?yAP", "5gY#");
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 65548, "xiOH{EqXzO4/`VyL_", "}R^D)m}YfC&S+K", "xiOH{EqXzO4/`VyL_", stringArray0, true, false);
      classWriter0.newConst("xiOH{EqXzO4/`VyL_");
      Label label0 = new Label();
      methodWriter0.visitFrame(9, 54, stringArray0, 9, stringArray0);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTableSwitchInsn(7, 9, label0, labelArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = label0.info;
      methodWriter0.visitMaxs(1, 2);
      int[] intArray0 = new int[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-198));
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-198), "}R^D)YfC&S+K", "}R^D)YfC&S+K", "}R^D)YfC&S+K", stringArray0);
      classWriter0.lastMethod = (MethodWriter) methodVisitor0;
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 1);
      methodVisitor0.visitAnnotationDefault();
      methodVisitor0.visitVarInsn(166, 2);
      // Undeclared exception!
      try { 
        methodVisitor0.visitJumpInsn((-198), (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4R^D)m}YfC&S+K";
      stringArray0[1] = "}4R^D)m}YfC&S+K";
      stringArray0[2] = "Synthetic";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4, "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", stringArray0, false, true);
      methodWriter0.visitEnd();
      methodWriter0.visitTypeInsn(19, "}4R^D)m}YfC&S+K");
      int int0 = methodWriter0.getSize();
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`mKrK";
      stringArray0[1] = "}R^D)m}YfC&S+K";
      classWriter0.version = (-3730);
      stringArray0[2] = "`mKrK";
      stringArray0[3] = "";
      stringArray0[4] = "\"T(YgG|dSb";
      stringArray0[5] = "}R^D)m}YfC&S+K";
      stringArray0[6] = "z@h jNO[7pZv|eP";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-732), "Code", "`mKrK", "}R^D)m}YfC&S+K", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitJumpInsn(2072, label0);
      int int0 = methodWriter0.getSize();
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212673);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(285212673, "LocalVariablTale", "}9^D)m}YfC&S+K", "}9^D)m}YfC&S+K", stringArray0);
      byte[] byteArray0 = new byte[14];
      classWriter0.newFieldItem("}9^D)m}YfC&S+K", "LocalVariablTale", "LocalVariablTale");
      byteArray0[11] = (byte)60;
      classWriter0.visitInnerClass("LocalVariablTale", "}9^D)m}YfC&S+K", "}9^D)m}YfC&S+K", (byte)60);
      methodVisitor0.visitMethodInsn((byte)60, "}9^D)m}YfC&S+K", "/mTxSG_", "}9^D)m}YfC&S+K");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      ClassWriter classWriter1 = new ClassWriter(1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ocalVaGriableTable";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1, "]GMT ", "}9^D)m}YfC&S+K", "}9^D)m}YfC&S+K", stringArray0);
      classWriter1.newFieldItem("ll,# ", "ocalVaGriableTable", "}9^D)m}YfC&S+K");
      classWriter0.visitInnerClass("ocalVaGriableTable", "ll,# ", "3t^D)m}YfC&S+K", (-229));
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      methodWriter0.visitVarInsn(1, 1);
      methodWriter0.visitMethodInsn(1, "LocalVariableTypeTable", "3t^D)m}YfC&S+K", "/mTxSG_");
      assertSame(methodWriter0, methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String string0 = "w:Q le'C-g 0;[Y.%";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Signature", "w:Q le'C-g 0;[Y.%", "w:Q le'C-g 0;[Y.%", (String[]) null, false, false);
      methodWriter0.visitEnd();
      methodWriter0.visitIntInsn(7, 7);
      int int0 = 268435455;
      methodWriter0.visitFrame((-565), 268435455, (Object[]) null, (-248), (Object[]) null);
      Label label0 = new Label();
      methodWriter0.visitMultiANewArrayInsn("RuntimeVisibleParameterAnnotations", 268435455);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(2, "w:Q le'C-g 0;[Y.%", (String) null, "Deprecated");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(457);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X<n$";
      stringArray0[1] = "@?Qif";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "X<n$", "}t,?Az7[)x J9", "@?Qif", stringArray0, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "@?Qif");
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(539, "X<n$", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-219));
      String[] stringArray0 = new String[0];
      classWriter0.invalidFrames = false;
      boolean boolean0 = ClassReader.FRAMES;
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-219), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)60;
      methodVisitor0.visitVarInsn((byte)60, (byte)60);
      methodVisitor0.visitTypeInsn(1, "LocalVariableTable");
      methodVisitor0.visitAnnotation("}R^D)m}YfC&S+K", false);
      methodVisitor0.visitAnnotationDefault();
      methodVisitor0.visitCode();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 251;
      intArray0[1] = (-4);
      intArray0[2] = (-4);
      intArray0[3] = 8;
      intArray0[4] = 7;
      intArray0[5] = 4434;
      intArray0[6] = 2080;
      Label label0 = new Label();
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {251, (-4), (-4), 8, 7, 4434, 2080}, intArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-196));
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-196), "LocalVariableTable", "}b^D)m}YfC&S+K", "}b^D)m}YfC&S+K", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      Attribute attribute0 = new Attribute("}b^D)m}YfC&S+K");
      methodVisitor0.visitVarInsn(25, (-196));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3416));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UQyv!a9|)0~yEu2NQ";
      stringArray0[1] = "UQyv!a9|)0~yEu2NQ";
      stringArray0[2] = "Na)4";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1969), "UQyv!a9|)0~yEu2NQ", "UQyv!a9|)0~yEu2NQ", "Na)4", stringArray0, true, false);
      methodWriter0.visitVarInsn(1, (-1923));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 285212674, "", "", "\"T(YgG|dSb", (String[]) null, false, false);
      methodWriter0.visitEnd();
      Label label0 = new Label();
      Label label1 = new Label();
      Edge edge0 = label1.successors;
      label1.toString();
      Attribute attribute0 = new Attribute("L10");
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitMaxs(285212674, 74);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ntbr>#T}\"";
      stringArray0[1] = "ntbr>#T}\"";
      stringArray0[2] = "ntbr>#T}\"";
      stringArray0[3] = "ntbr>#T}\"";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "<init>", "LocalVariableTable", "LocalVariableTypeTable", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitJumpInsn(8388607, label0);
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitFrame(1, 7, stringArray0, 2659, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 285212674, "", "", "\"T(YgG|dSb", (String[]) null, false, false);
      methodWriter0.visitEnd();
      Label label0 = new Label();
      Label label1 = new Label();
      Edge edge0 = label1.successors;
      label1.toString();
      Attribute attribute0 = new Attribute("L10");
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitAnnotationDefault();
      methodWriter0.visitInsn((-363));
      methodWriter0.visitJumpInsn(1, label1);
      assertFalse(label1.equals((Object)label0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter((-245));
      String string0 = "<init>";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<init>";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-255), "<init>", ".JAR", ".JAR", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-217));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter0.visitMethod((-217), "LocalVariableTable", "}b^D)m}YfC&S+K", "}b^D)m}YfC&S+K", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      methodWriter0.visitFrame(22, (byte)0, stringArray0, 1037, stringArray0);
      methodWriter0.exceptionCount = 2;
      Attribute attribute0 = new Attribute("~1YA?WWVb`-^yvve!");
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-217), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-229), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.newNameType("}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K");
      boolean boolean0 = ClassReader.FRAMES;
      classWriter1.visitField((-229), "LocalVariableTable", "AnnotationDefault", "}R^D)m}YfC&S+K", "AnnotationDefault");
      methodVisitor0.visitInsn(188);
      Label label0 = new Label();
      methodVisitor0.visitVarInsn(2, (-229));
      // Undeclared exception!
      try { 
        methodVisitor0.visitMaxs(188, (-229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-532));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Signature", "Signature", "Signature", (String[]) null, false, false);
      methodWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = new ByteVector();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&S;x(A_FEiq38M");
      methodWriter0.visitLdcInsn("Signature");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-478));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleAnnotations", "#:abJ mKqJ1", "#:abJ mKqJ1", (String[]) null, false, false);
      methodWriter0.exceptionCount = 196;
      methodWriter0.visitFieldInsn(1, "#:abJ mKqJ1", "Ljava/lang/Synthetic;", "(X!^I]p.{SX[");
      Label label0 = new Label();
      Label[] labelArray0 = new Label[1];
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 2, labelArray0, 0, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2267);
      intArray0[1] = (-244);
      intArray0[2] = 0;
      ClassWriter classWriter0 = new ClassWriter(65535);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 285212676, "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", (String[]) null, true, true);
      methodWriter0.visitMultiANewArrayInsn("}R^D)m}YfC&S+K", 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.newFieldItem("org.objectweb.asm.jip.Frame", "", "JJ");
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      ClassWriter classWriter2 = new ClassWriter(1);
      methodVisitor0.visitEnd();
      Label label0 = new Label();
      Label label1 = label0.next;
      methodVisitor0.visitMultiANewArrayInsn("]", 1);
      methodVisitor0.visitMethodInsn(2, "/j@)", "/j@)", "}R^D)m}YfC&S+K");
      methodVisitor0.visitJumpInsn(1, label0);
      // Undeclared exception!
      try { 
        methodVisitor0.visitFrame(1, 2, stringArray0, 2, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2045);
      String[] stringArray0 = new String[0];
      ClassWriter classWriter1 = new ClassWriter(8388607);
      classWriter0.newInteger(2045);
      MethodWriter methodWriter0 = new MethodWriter(classWriter1, 4, ">Zn`;L?>uM-X&|NE.8", ">Zn`;L?>uM-X&|NE.8", ">Zn`;L?>uM-X&|NE.8", stringArray0, false, false);
      methodWriter0.visitVarInsn(8388607, 4096);
      methodWriter0.visitIincInsn(4096, 2);
      methodWriter0.visitMethodInsn(2045, "java/langThrowable", "", "{|~{t");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ntbr>#T}\"");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f@U)@LC\"t|0[CmNrM";
      stringArray0[1] = "ntbr>#T}\"";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 186, "ntbr>#T}\"", "f@U)@LC\"t|0[CmNrM", "f@U)@LC\"t|0[CmNrM", stringArray0, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      methodWriter0.visitVarInsn(186, 259);
      methodWriter0.visitMultiANewArrayInsn("ntbr>#T}\"", (-1));
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(186, "f@U)@LC\"t|0[CmNrM", "Kg4!", "Zej");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f@U)@LC\"t|0[CmNrM";
      stringArray0[1] = "ntbr>#T}\"";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 186, "ntbr>#T}\"", "f@U)@LC\"t|0[CmNrM", "f@U)@LC\"t|0[CmNrM", stringArray0, false, false);
      methodWriter0.visitVarInsn(186, 259);
      methodWriter0.visitMultiANewArrayInsn("ntbr>#T}\"", (-1));
      classWriter0.toByteArray();
      methodWriter0.visitMethodInsn(186, "f@U)@LC\"t|0[CmNrM", "Kg4!", "Zej");
      methodWriter0.visitTypeInsn((-244), "ntbr>#T}\"");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~1YA?WWVb`-^yvve!";
      stringArray0[1] = "ZVfK|qb/')wrDfvY7";
      stringArray0[2] = "~1YA?WWVb`-^yvve!";
      stringArray0[3] = "~1YA?WWVb`-^yvve!";
      stringArray0[4] = "wX]7l";
      stringArray0[5] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 184, "~1YA?WWVb`-^yvve!", "ZVfK|qb/')wrDfvY7", "~1YA?WWVb`-^yvve!", stringArray0, true, true);
      methodWriter0.visitTypeInsn((-457), "GA]!eg2F,.");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(545);
      classWriter0.newMethodItem("QNa)4", "XGom=5M", "XGom=5M", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R^)m}YfC&S+K";
      stringArray0[1] = "R^)m}YfC&S+K";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "XGom=5M";
      stringArray0[3] = "R^)m}YfC&S+K";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-20), "E3c|K*k0*", "QNa)4", "", stringArray0, true, true);
      methodWriter0.visitMethodInsn((-20), "`[!(K=+>b15<", "XGom=5M", "XGom=5M");
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("R^)m}YfC&S+K", "E3c|K*k0*", "XGom=5M", label0, label0, 2);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-229), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.newNameType("}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K");
      boolean boolean0 = ClassReader.FRAMES;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTable");
      methodVisitor0.visitLdcInsn("}R^D)m}YfC&S+K");
      classWriter1.visitField((-229), "LocalVariableTable", "AnnotationDefault", "}R^D)m}YfC&S+K", "AnnotationDefault");
      methodVisitor0.visitInsn(188);
      Label label0 = new Label();
      methodVisitor0.visitFrame(2, 1, stringArray0, (-451), stringArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(545);
      classWriter0.newMethodItem("QNa)4", "", "", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R^)m}YfC&S+K";
      stringArray0[1] = "R^)m}YfC&S+K";
      classWriter0.version = 2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "";
      stringArray0[3] = "R^)m}YfC&S+K";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-27), "E3c|K*k0*", "QNa)4", "", stringArray0, true, true);
      Label label0 = new Label();
      methodWriter0.visitLabel(label0);
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn((-27), label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65548);
      classWriter0.newFieldItem("", "kZH^S?yAP", "5gY#");
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 65548, "xiOH{EqXzO4/`VyL_", "}R^D)m}YfC&S+K", "xiOH{EqXzO4/`VyL_", stringArray0, true, false);
      classWriter0.newConst("xiOH{EqXzO4/`VyL_");
      Label label0 = new Label();
      methodWriter0.visitFrame(9, 54, stringArray0, 9, stringArray0);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      Label[] labelArray0 = new Label[0];
      methodWriter1.visitTableSwitchInsn(7, 9, label0, labelArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = label0.info;
      // Undeclared exception!
      try { 
        methodWriter1.visitLdcInsn((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      ClassWriter classWriter1 = new ClassWriter(1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}R^D)m}YfC&S+K";
      stringArray0[1] = "}R^D)m}YfC&S+K";
      stringArray0[2] = "}R^D)m}YfC&S+K";
      classWriter1.newFieldItem("}R^D)m}YfC&S+K", "B", "}4R^D)m}YfC&S+K");
      stringArray0[3] = "}R^D)m}YfC&S+K";
      stringArray0[4] = "}R^D)m}YfC&S+K";
      stringArray0[5] = "}R^D)m}YfC&S+K";
      stringArray0[6] = "}R^D)m}YfC&S+K";
      MethodWriter methodWriter0 = new MethodWriter(classWriter1, 65535, "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0, true, true);
      classWriter0.newConst("}R^D)m}YfC&S+K");
      Label label0 = new Label();
      Label[] labelArray0 = new Label[2];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      methodWriter0.visitTableSwitchInsn(2, 65535, label0, labelArray0);
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(65535, 1114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-219));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      classWriter0.invalidFrames = false;
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-219), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray0 = new byte[15];
      Item item0 = classWriter0.newNameTypeItem("LocalVariableTable", "}R^D)m}YfC&S+K");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      byteArray0[11] = (byte)60;
      methodVisitor0.visitIntInsn(2, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodVisitor0.visitVarInsn((byte)60, (byte)60);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitParameterAnnotation(1, "}R^D)m}YfC&S+K", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-245));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-245), ".JR", "}R^D)m}YfCS#+K", "}R^D)m}YfCS#+K", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      classWriter0.firstMethod.visitFrame((-245), (-245), stringArray0, (-245), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodVisitor0.visitIntInsn(2, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newNameTypeItem("", ".JR");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MethodWriter.readInt((byte[]) null, (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "LocalVariableTable";
      ClassWriter classWriter0 = new ClassWriter((-230));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-230), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      int int0 = 188;
      methodVisitor0.visitInsn(1);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitIntInsn(188, 1);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitVarInsn(1, 2);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitMethodInsn((-230), "}R^D)m}YfC&S+K", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-229), "java/lang/Throwable", "java/lang/Throwable", (String) null, stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame(2, 268435455, stringArray0, 4776, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Attribute attribute0 = new Attribute((String) null);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertNotNull(annotationVisitor1);
      
      methodWriter0.visitInsn(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn((-248), "StackMapTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 65535;
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      classWriter0.threshold = 4;
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}R^D)m}YfC&S+K";
      stringArray0[1] = "}R^D)m}YfC&S+K";
      stringArray0[2] = "}R^D)m}YfC&S+K";
      stringArray0[3] = "}R^D)m}YfC&S+K";
      stringArray0[4] = "}R^D)m}YfC&S+K";
      stringArray0[5] = "}R^D)m}YfC&S+K";
      stringArray0[6] = "}R^D)m}YfC&S+K";
      MethodWriter methodWriter0 = new MethodWriter(classWriter1, 65535, "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0, true, true);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int1 = classWriter0.newConst("}R^D)m}YfC&S+K");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(2, int1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitInsn(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      label0.visitSubroutine((Label) null, 1L, 4);
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(94, label0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.Label", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-229), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      int int0 = classWriter1.newNameType("V%R'", "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(3, int0);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      FieldVisitor fieldVisitor0 = classWriter1.visitField((-229), "LocalVariableTable", "AnnotationDefault", "V%R'", "AnnotationDefault");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(fieldVisitor0);
      
      methodVisitor0.visitInsn(188);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitVarInsn(2, (-229));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      
      methodVisitor0.visitJumpInsn(2, label0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitIntInsn(220, 1834);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(562);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newMethodItem("QNa)4", "XGom=5D,M", "XGom=5D,M", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R^)m}YfC&S+K";
      stringArray0[1] = "R^)m}YfC&S+K";
      classWriter0.version = (-20);
      Item item1 = classWriter0.newFloat(562);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      stringArray0[2] = "R^)m}YfC&S+K";
      stringArray0[3] = "R^)m}YfC&S+K";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-20), "E3c|K*k0*", "QNa)4", "", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMethodInsn((-20), "float", "XGom=5D,M", "R^)m}YfC&S+K");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newConstItem("Z*+iy'v:v&1:+jcsA");
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertNotNull(item2);
      
      classWriter0.lastMethod = methodWriter0;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        MethodWriter.readInt(byteArray0, 562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 562
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-217));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-217), "LocalVariableTable", "}b^D)m}YfqC&S+K", "}b^D)m}YfqC&S+K", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray0 = new byte[9];
      Attribute attribute0 = new Attribute("~1YA?WWVb`-^yvve!");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodVisitor0.visitFieldInsn(2, "~1YA?WWVb`-^yvve!", "~1YA?WWVb`-^yvve!", "~1YA?WWVb`-^yvve!");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = MethodWriter.readInt(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2808);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}4R^D)m}YfC&S+K";
      stringArray0[1] = "}4R^D)m}YfC&S+K";
      stringArray0[2] = "Syn,thetic";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 29, "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", "}4R^D)m}YfC&S+K", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIincInsn(1, (-50));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(2808, 24);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(184);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "bR{]iT||k>fy";
      stringArray0[1] = "bR{]iT||k>fy";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringArray0[2] = "bR{]iT||k>fy";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "JSR/RET are not supported with computeFrames option", "bR{]iT||k>fy", "java/lang/Throwable", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIincInsn(185, 184);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(185, "9>H&xb{`JS,p@(nx", "java/lang/Throwable", "JSR/RET are not supported with computeFrames option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-217));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-217), "LocalVariableTable", "}b^D)m}YfC&S+K", "}b^D)m}YfC&S+K", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodVisitor0);
      
      Item item0 = classWriter0.newConstItem("}b^D)m}YfC&S+K");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      methodVisitor0.visitFrame(1, (-217), stringArray0, 11, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitLocalVariable("LocalVariableTable", "StackMap", "}b^D)m}YfC&S+K", label0, label0, (-62));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 11;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      MethodWriter.getNewOffset(intArray0, intArray1, label0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 11}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-240));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTable");
      assertFalse(boolean0);
      
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-240), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      methodVisitor0.visitIincInsn(357, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      String string0 = "RuntimeInvisibleParameterAnnotations";
      // Undeclared exception!
      try { 
        methodVisitor0.visitMethodInsn((byte)60, ">h", "LocalVariableTable", "6Y#(o-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-219));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-219), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)60;
      methodVisitor0.visitVarInsn((byte)60, (byte)60);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodVisitor0.visitIincInsn(1562, (-219));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodVisitor0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodVisitor0.visitFrame((-219), (byte)60, stringArray0, (byte)60, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodVisitor0.visitIincInsn(1562, (-901));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray1, 1562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1562
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-378));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "OtnaturT", "OtnaturT", "OtnaturT", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitParameterAnnotation(1, "Ljava/lang/Synthetic;", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Item item0 = classWriter0.key;
      assertNotNull(item0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = label0.resolve(methodWriter0, (byte)124, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.objectweb.asm.jip.MethodWriter");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Attribute attribute0 = new Attribute("z[5Q7!Jq#6$");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      attribute0.value = byteArray0;
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      methodWriter0.visitInsn((byte)13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((byte)61, (-2560), (Object[]) null, (-83), (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-198));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}R^D,)YC&SuK");
      assertFalse(boolean0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-198), "}R^D,)YC&SuK", "}R^D,)YC&SuK", "}R^D,)YC&SuK", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      classWriter0.lastMethod = (MethodWriter) methodVisitor0;
      classWriter1.thisName = "}R^D,)YC&SuK";
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      classWriter0.lastMethod.visitFieldInsn(26, "}R^D,)YC&SuK", "}R^D,)YC&SuK", "}R^D,)YC&SuK");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      
      methodVisitor0.visitFrame((-198), (-198), stringArray0, 22, stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "}R^D,)YC&SuK";
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      methodVisitor0.visitLdcInsn("}R^D,)YC&SuK");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        classWriter0.lastMethod.visitFieldInsn(26, "char", ")\"Gpm6gd\"Q", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3730));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 285212670, "w:Q l'C-g 0[Y.%", "w:Q l'C-g 0[Y.%", "\"T(YgG|dSb", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Edge edge0 = label1.successors;
      assertNull(edge0);
      
      String string0 = label1.toString();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      assertEquals("L10", string0);
      assertNotNull(string0);
      
      label1.visitSubroutine(label0, (-3189L), 2);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Attribute attribute0 = new Attribute("w:Q l'C-g 0[Y.%");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitInsn(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label1.status = (-3730);
      methodWriter0.visitTypeInsn((-2235), "LocalVariableTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[0];
      MethodWriter.getNewOffset(intArray0, intArray0, label1);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label1, label0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Label label2 = label1.getFirst();
      assertFalse(label2.equals((Object)label0));
      assertFalse(label1.equals((Object)label0));
      assertSame(label2, label1);
      assertNotSame(label2, label0);
      assertNotSame(label1, label0);
      assertSame(label1, label2);
      assertNotNull(label2);
      
      // Undeclared exception!
      try { 
        label2.addToSubroutine(0L, (-1488));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Label", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ntbr>#T}\"";
      stringArray0[1] = "ntbr>#T}\"";
      stringArray0[2] = "ntbr>#T}\"";
      stringArray0[3] = "ntbr>#T}\"";
      Attribute attribute0 = new Attribute("wSrzOdqBiZ'G");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-542);
      intArray0[1] = 93;
      intArray0[2] = 677;
      intArray0[3] = 54;
      intArray0[4] = (-94);
      intArray0[5] = 68;
      intArray0[6] = 68;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-619), "ntbr>#T}\"", "-VK8 mza}~Co>.#4", "rNjrcC1{-/W#;", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(677, (-580), stringArray0, (-2260), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(17, (-2260));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Item item0 = classWriter0.newInteger((-27));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Signatur}e";
      stringArray0[1] = "Signatur}e";
      stringArray0[2] = "Signatur}e";
      stringArray0[3] = "A@@hY:=1>";
      stringArray0[4] = "<init>";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "S[-WrT@'<F-TBw", "Signatur}e", "Signatur}e", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIincInsn((-558), (-558));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newNameTypeItem("Signatur}e", "LYLF^8YDMKyS~JsI;d");
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      methodWriter0.visitMethodInsn(2, "Signatur}e", "Signatur}e", "LYLF^8YDMKyS~JsI;d");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-243));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-243), "java/lang/Throwable", "java/lang/Throwable", (String) null, stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame(2, 268435455, stringArray0, 974, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.inputStackTop = 268435455;
      methodWriter0.visitLocalVariable("^]QuVRI", "p&", "java/lang/Throwable", label0, label0, 974);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "p&");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitLineNumber(386, label1);
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(label1, label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable("Synthetic", "Synthetic", (String) null, (Label) null, label0, 974);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 606, "c", "c", "w:Q le'C-g 0;[Y.%", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitMethodInsn(1, "l*be$", "c", "<inSAit>");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label2 = frame0.owner;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, (Label) null, label1, (String) null);
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(label1, label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(606, "<inSAit>", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      methodVisitor0.visitInsn(188);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)60;
      methodVisitor0.visitIntInsn(184, (-2199));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitLabel(label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTable");
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      methodVisitor0.visitInsn(188);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      ClassWriter classWriter3 = new ClassWriter(1);
      assertFalse(classWriter3.equals((Object)classWriter2));
      assertFalse(classWriter3.equals((Object)classWriter1));
      assertFalse(classWriter3.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter3);
      
      MethodWriter methodWriter0 = classWriter1.firstMethod;
      assertSame(methodWriter0, methodVisitor0);
      assertNotNull(methodWriter0);
      
      methodVisitor0.visitFrame(3, (-1196), stringArray0, 0, stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter3));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter3);
      assertNotSame(classWriter1, classWriter0);
      assertSame(methodVisitor0, methodWriter0);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitInsn((-4306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4306
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 606, "c", "c", "w:Q le'C-g 0;[Y.%", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitMethodInsn(2, "l*be$", "\"T(YgG|dSb", "\"T(YgG|dSb");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter1, methodWriter0);
      
      methodWriter0.visitLabel(label1);
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter1);
      assertNotSame(label1, label0);
      
      MethodWriter methodWriter2 = classWriter0.firstMethod;
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      assertNotNull(methodWriter2);
      
      Object[] objectArray0 = new Object[0];
      methodWriter2.visitFrame(1, (-2636), (Object[]) null, (-1587), objectArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter2.visitAnnotation("w:Q le'C-g 0;[Y.%", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(methodWriter0, methodWriter2);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-229), "", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      Item item0 = classWriter2.key2;
      assertNotNull(item0);
      
      methodWriter0.visitEnd();
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      methodWriter0.visitMethodInsn(2, "/j@)", "/j@)", "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      label0.info = (Object) (-229);
      label0.line = (-1751);
      methodWriter0.visitMaxs((-1751), (-229));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitIntInsn((-2362), 3130);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(156);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0ava/lang/Throwable";
      stringArray0[1] = ".\"f{I";
      stringArray0[2] = "0ava/lang/Throwable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, ".\"f{I", ".\"f{I", "0ava/lang/Throwable", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String string0 = label0.toString();
      assertEquals("L12", string0);
      assertNotNull(string0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      label0.status = 2;
      label1.position = 1;
      methodWriter0.visitJumpInsn(185, label1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(label0, label1);
      assertSame(label1, label0);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("0ava/lang/Throwable", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(185, "0ava/lang/Throwable", "0ava/lang/Throwable", "0ava/lang/Throwable");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-219));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      classWriter0.invalidFrames = false;
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-219), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)60;
      methodVisitor0.visitVarInsn((byte)60, (byte)60);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodVisitor0.visitTypeInsn(1, "LocalVariableTable");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitParameterAnnotation(1, "}R^D)m}YfC&S+K", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-378));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "_t('t@", "_t('t@", "_t('t@", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      methodWriter0.visitFieldInsn((-2224), "_t('t@", "_t('t@", "U4");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber((byte) (-119), label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-1459));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      methodWriter0.visitLineNumber(1673, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(186, 1, (Object[]) null, 2, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2091));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Qva(GQ~K%e^";
      stringArray0[1] = "Qva(GQ~K%e^";
      stringArray0[2] = "h_!?T1Ri^G1|]H+h";
      classWriter0.firstField = null;
      stringArray0[3] = "R^)m}YfC&S+K";
      stringArray0[4] = "R^)m}YfC&S+K";
      stringArray0[5] = "R^)m}YfC&S+K";
      stringArray0[6] = "R^)m}YfC&S+K";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4096, "Qva(GQ~K%e^", "R^)m}YfC&S+K", "Qva(GQ~K%e^", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFieldInsn(4096, "Qva(GQ~K%e^", "}R^D)m}YfC&pS+K", "R^)m}YfC&S+K");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-229), "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      AnnotationWriter annotationWriter0 = (AnnotationWriter)methodWriter0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationWriter0);
      
      methodWriter0.visitIincInsn(1, (-229));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Edge edge0 = new Edge();
      assertNotNull(edge0);
      
      methodWriter0.visitMultiANewArrayInsn("}R^D)m}YfC&S+K", 68);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      label0.info = (Object) 1;
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn(2, 186, label0, labelArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.classReaderOffset = 17;
      AnnotationWriter annotationWriter1 = (AnnotationWriter)methodWriter0.visitAnnotation("}R^D)m}YfC&S+K", false);
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(annotationWriter1, annotationWriter0);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationWriter1);
      
      methodWriter0.visitIntInsn(2, 2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitLocalVariable("}R^D)m}YfC&S+K", "e3[u;!8#h9N<J1mqEA", "}R^D)m}YfC&S+K", label0, label0, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "C", "}R^D)mk}YfC&S+K", "}R^D)mk}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      Item item0 = classWriter1.newFieldItem("}R^D)mk}YfC&S+K", "}R^D)mk}YfC&S+K", "}R^D)mk}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(item0);
      
      AnnotationVisitor annotationVisitor0 = methodVisitor0.visitAnnotation("C", true);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationVisitor0);
      
      methodVisitor0.visitEnd();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      AnnotationVisitor annotationVisitor1 = methodVisitor0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertNotNull(annotationVisitor1);
      
      methodVisitor0.visitInsn(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitIntInsn(49, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int0 = (-7239);
      methodVisitor0.visitMaxs((-7239), 2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotNull(byteArray0);
      
      classWriter0.version = (-104);
      String string0 = "E3q@k*";
      methodVisitor0.visitFieldInsn(80, "}R^D)mk}YfC&S+K", "}R^D)mk}YfC&S+K", "E3q@k*");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      ByteVector byteVector0 = new ByteVector(1);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = new ByteVector(16777220);
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertNotNull(byteVector1);
      
      Item item1 = classWriter0.newFloat(16777220);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      byte[] byteArray1 = classWriter1.toByteArray();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitInsn((-1229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1229
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-229), "", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      methodWriter0.visitEnd();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      methodWriter0.visitMethodInsn(2, "/j@)", "/j@)", "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      label0.info = (Object) (-229);
      label0.line = (-1751);
      methodWriter0.visitMaxs(2, (-1203));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-532));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Signature", "Signature", "Signature", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame((-1829), 1, (Object[]) null, 49, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt(2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      label0.put(methodWriter0, byteVector1, 1, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      
      Label[] labelArray0 = new Label[2];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Signature");
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute((String) null);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 2, labelArray0, 0, labelArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-532));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Signature", "Signature", "Signature", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = new ByteVector();
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertNotNull(byteVector1);
      
      methodWriter0.visitFrame(5, (-532), (Object[]) null, 472, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      ByteVector byteVector2 = new ByteVector();
      assertFalse(byteVector2.equals((Object)byteVector1));
      assertFalse(byteVector2.equals((Object)byteVector0));
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector0.putInt(1);
      assertFalse(byteVector0.equals((Object)byteVector2));
      assertFalse(byteVector0.equals((Object)byteVector1));
      assertFalse(byteVector3.equals((Object)byteVector1));
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertNotSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector3);
      assertNotSame(byteVector0, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertNotSame(byteVector3, byteVector1);
      assertNotSame(byteVector3, byteVector2);
      assertNotNull(byteVector3);
      
      label0.put(methodWriter0, byteVector1, 538, false);
      assertFalse(label0.equals((Object)label1));
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertFalse(byteVector1.equals((Object)byteVector3));
      assertFalse(byteVector1.equals((Object)byteVector2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(label0, label1);
      assertNotSame(byteVector1, byteVector0);
      assertNotSame(byteVector1, byteVector3);
      assertNotSame(byteVector1, byteVector2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Signature");
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("StackMapTable");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitVarInsn(538, (-532));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame((-2), 5, (Object[]) null, 5, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-229), "java/lang/Throwable", "java/lang/Throwable", (String) null, stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame(2, 268435455, stringArray0, 4776, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("^]QuVRI", "StackMap", "JSR/RET,are not supported w_th computeFrames option", label0, label0, 4776);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      methodWriter0.visitMethodInsn((-229), "JSR/RET,are not supported w_th computeFrames option", "java/lang/Throwable", "JSR/RET,are not supported w_th computeFrames option");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn((-1302), "java/lang/Throwable");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLineNumber((-32768), label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(109, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-198));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}R^D)YfC&S+K");
      assertFalse(boolean0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-198), "}R^D)YfC&S+K", "}R^D)YfC&S+K", "}R^D)YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      classWriter0.lastMethod = (MethodWriter) methodVisitor0;
      classWriter1.thisName = "}R^D)YfC&S+K";
      classWriter1.visitInnerClass("}R^D)YfC&S+K", "}R^D)YfC&S+K", "}R^D)YfC&S+K", 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodVisitor0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationVisitor0);
      
      methodVisitor0.visitVarInsn(166, 2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitJumpInsn((-198), (Label) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -198
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "LocalVariableTable", "}b^D)m}Yf&S+K", "}b^D)m}Yf&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      classWriter0.visitInnerClass("LocalVariableTable", (String) null, "LocalVariableTable", (-167));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      
      methodVisitor0.visitLdcInsn("LocalVariableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      int int0 = classWriter0.addUninitializedType("#'iWU#. ,a&TxHtu>", 1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      assertEquals(1, int0);
      
      Item item0 = classWriter0.newMethodItem("}!@", " P;r~Yxs-7eu+Ts", "#'iWU#. ,a&TxHtu>", false);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFloat((byte)4);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitFrame((byte)4, (-2), stringArray0, (byte)4, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "LocalVariableTable";
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-229), "LocalVariableTable", "}R^D)m}YfCrS+K", "}R^D)m}YfCrS+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      methodWriter0.visitInsn(2);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)70;
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "}R^D)m}YfCrS+K");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      classWriter0.lastMethod = null;
      String string0 = "Signature";
      boolean boolean0 = false;
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 607, "CF[L)J", "", "Signature", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      int int0 = Frame.UNINITIALIZED;
      assertEquals(25165824, int0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter1.visitInsn(54);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.visitIntInsn(25165824, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter1.visitTryCatchBlock(label0, label0, label0, "K_,[@?#NvVg:J#_S");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-59);
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort(68);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      assertNotNull(byteVector1);
      
      methodWriter1.put(byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      
      byteArray0[2] = (byte)13;
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, (-2879));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2879
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(172);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("LocalVariableTable", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter0.visitMethod(172, "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter0.newFloat(172);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newNameTypeItem("LocalVariableTable", "}R^D)m}YfC&S+K");
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.successor;
      assertNull(label1);
      
      label0.next = null;
      int int0 = methodWriter0.getSize();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(16, int0);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.info = (Object) 2;
      Frame frame0 = label0.frame;
      assertNull(frame0);
      
      methodWriter0.visitLocalVariable("l", "LocalVariableTable", "", label0, label0, 16);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(66, (-1028));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable("Sc\"h2Z3PP|ebwGE", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", label0, label0, 458);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(2617);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-240));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-240), "LocalVariableTabl_", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[11] = (byte)37;
      methodWriter0.visitIntInsn(2, (-2199));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      AnnotationWriter annotationWriter0 = (AnnotationWriter)methodWriter0.visitAnnotation("DnT?chv5rz7Z^ X-b", true);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationWriter0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTypeInsn(1, "LocalVariableTabl_");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitMaxs(2, (-1635));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitLdcInsn("LocalVariableTabl_");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      int int0 = methodWriter0.getSize();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(65, int0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitLocalVariable("l", "LocalVariableTabl_", "", label1, label1, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(label1, label0);
      
      Attribute attribute0 = new Attribute("");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      int int1 = classWriter0.newNameType("LocalVariableTabl_", "IYHTILz[7MN");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(3, int1);
      
      // Undeclared exception!
      try { 
        attribute0.getSize(classWriter0, byteArray0, (-1666), 291, (-1729741714));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      boolean boolean1 = ClassReader.SIGNATURES;
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Item item0 = classWriter1.newInteger((-3201));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertNotNull(item0);
      
      FieldVisitor fieldVisitor0 = classWriter2.visitField((-229), "LocalVariableTable", "AnnotationDefault", "O", "AnnotationDefault");
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter2, classWriter0);
      assertNotSame(classWriter2, classWriter1);
      assertNotNull(fieldVisitor0);
      
      methodVisitor0.visitInsn(177);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-23);
      methodVisitor0.visitIntInsn(184, (-2199));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitVarInsn((-1567), (-2036));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      int[] intArray0 = new int[0];
      Label[] labelArray0 = new Label[1];
      // Undeclared exception!
      try { 
        methodVisitor0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "ocalVaGriableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitTryCatchBlock(label0, label0, label0, "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitLdcInsn("ocalVaGriableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      int int0 = classWriter1.newUTF8("}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertEquals(2, int0);
      
      methodVisitor0.visitLabel(label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitIntInsn(223, 223);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      int int1 = Frame.BASE_VALUE;
      assertFalse(int1 == int0);
      assertEquals(1048575, int1);
      
      int int2 = Type.OBJECT;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, int2);
      
      methodVisitor0.visitMaxs(1, 1048575);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitMaxs((-1961), 223);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      String string0 = "<init>";
      // Undeclared exception!
      try { 
        methodVisitor0.visitMethodInsn(1, "7%R,e", "<init>", ",rxU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "ocalVaGriableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitTryCatchBlock(label0, label0, label0, "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitLdcInsn("ocalVaGriableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      label0.frame = frame0;
      int[] intArray0 = new int[0];
      frame0.inputLocals = intArray0;
      label0.line = (-229);
      methodVisitor0.visitVarInsn(1, 63);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitJumpInsn(168, label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Object object0 = label1.info;
      assertNull(object0);
      
      methodVisitor0.visitLineNumber(1, label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(label0.equals((Object)label1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(label0, label1);
      
      methodVisitor0.visitCode();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-231));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTable");
      assertFalse(boolean0);
      
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-231), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray0 = new byte[15];
      Item item0 = classWriter1.newFieldItem("}R^D)m}YfC&S+K", "LocalVariableTable", "LocalVariableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(item0);
      
      byteArray0[11] = (byte)55;
      methodVisitor0.visitIntInsn(2, (-2199));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitVarInsn((byte)55, (byte)55);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitTypeInsn(1, "LocalVariableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodVisitor0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationVisitor0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = MethodWriter.readInt(byteArray0, 2);
      assertEquals(0, int0);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      methodVisitor0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "s<%oT5F:<|cR_nxK");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)55;
      Label[] labelArray0 = new Label[0];
      // Undeclared exception!
      try { 
        methodVisitor0.visitLookupSwitchInsn((Label) null, intArray0, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-229), "", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      methodWriter0.visitEnd();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitInsn(2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      label0.info = (Object) (-229);
      label0.line = (-1751);
      methodWriter0.visitMaxs((-1751), (-229));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitIntInsn((-2362), 3130);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-229), "}R^D)m}YfC&S+K", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Signature", "w:Q le'C-g 0;[Y.%", "w:Q le'C-g 0;[Y.%", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(7, 7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      methodWriter0.visitFrame((-565), 268435455, (Object[]) null, (-248), (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Signature", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitMultiANewArrayInsn("Synthetic", 268435455);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      int int0 = MethodWriter.readUnsignedShort(byteArray0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(47806, int0);
      
      Object object0 = label0.info;
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-227), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      Item item0 = classWriter1.newNameTypeItem("LocalVariableTable", "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(item0);
      
      AnnotationWriter annotationWriter0 = (AnnotationWriter)methodWriter0.visitAnnotation("LocalVariableTable", false);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTypeInsn(1, "LocalVariableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      int int0 = methodWriter0.getSize();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(61, int0);
      
      methodWriter0.visitJumpInsn(1, label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      Frame frame0 = label0.frame;
      assertNull(frame0);
      
      int int1 = 62;
      methodWriter0.visitLocalVariable("l", "LocalVariableTable", "", label0, label0, 62);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      
      Attribute attribute0 = new Attribute("");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(".fDdV*>-");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod(40, "}R^D)YfC&S+K", "}R^D)YfC&S+K", "}R^D)YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      classWriter0.lastMethod = methodWriter0;
      classWriter0.lastMethod.signature = "java/lang/String";
      classWriter1.thisName = "}R^D)YfC&S+K";
      classWriter1.visitInnerClass("}R^D)YfC&S+K", "}R^D)YfC&S+K", "}R^D)YfC&S+K", 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      byte[] byteArray0 = classWriter1.toByteArray();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(byteArray0);
      
      methodWriter0.visitTypeInsn(10, "Class not foun");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      classWriter0.lastMethod.classReaderOffset = 40;
      methodWriter0.exceptionCount = 1;
      classWriter0.lastMethod.visitFieldInsn(10, "6Y#(o-", "long", "}R^D)YfC&S+K");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter1);
      
      AnnotationWriter annotationWriter0 = (AnnotationWriter)methodWriter0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationWriter0);
      
      methodWriter0.visitVarInsn(166, 2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte) (-102);
      MethodWriter methodWriter1 = classWriter1.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      int int0 = methodWriter1.getSize();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(methodWriter1, methodWriter0);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(6, int0);
      
      methodWriter0.visitFrame(10, (-552), stringArray0, 40, stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertSame(methodWriter0, methodWriter1);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-102);
      byteArray2[1] = (byte) (-102);
      // Undeclared exception!
      try { 
        MethodWriter.writeShort(byteArray2, (-1181), (-1181));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1181
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-242));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-242), "LocalVariableTable", "}b^D)m}YfC&S+K", "}b^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)4;
      Item item0 = classWriter1.newNameTypeItem("<init>", "}!@");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertNotNull(item0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}b^D)m}YfC&S+K");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)4;
      int int0 = classWriter0.addUninitializedType("#'iWU#. ,a&TxHtu>", 2522);
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter2);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, int0);
      
      byteArray0[5] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[2] = (byte)35;
      // Undeclared exception!
      try { 
        methodVisitor0.visitFrame((byte)0, (-2), stringArray0, (byte)4, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTable");
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(625);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod(625, "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      classWriter2.visit(2, 1, "LocalVariableTable", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter2, classWriter1);
      assertNotSame(classWriter2, classWriter0);
      
      int int0 = Frame.UNINITIALIZED;
      assertEquals(25165824, int0);
      
      AnnotationWriter annotationWriter0 = (AnnotationWriter)methodWriter0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertNotNull(annotationWriter0);
      
      methodWriter0.visitInsn(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodWriter0.visitIntInsn(448, 2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.addToSubroutine(1L, 2);
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "org.objectweb.asm.jip.Type");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt(57);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector0.putShort((byte) (-59));
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertNotNull(byteVector2);
      
      methodWriter0.put(byteVector0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      
      AnnotationWriter annotationWriter1 = (AnnotationWriter)methodWriter0.visitAnnotation("org.objectweb.asm.jip.Type", false);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(annotationWriter1, annotationWriter0);
      assertNotNull(annotationWriter1);
      
      methodWriter0.visitMultiANewArrayInsn("G?ob6;x_V^lm[~", 423);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "RuntimeInvisibleAnnotations");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      classWriter1.visitSource("ocalVaGriableTable", "MUoZvuTo!<");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "ocalVaGriableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.outputStackMax = 1;
      methodVisitor0.visitTryCatchBlock((Label) null, label0, label0, "ocalVaGriableTable");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      label0.line = 2;
      label0.line = 2;
      methodVisitor0.visitLdcInsn("ocalVaGriableTable");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      int int0 = classWriter1.newUTF8("}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(2, int0);
      
      methodVisitor0.visitIntInsn(2, 2);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      int int1 = Type.VOID;
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Type.OBJECT;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, int2);
      
      methodVisitor0.visitVarInsn(1, 1);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitMaxs(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "ocalVaGriableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitTryCatchBlock(label0, label0, label0, "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitLdcInsn("ocalVaGriableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      int int0 = classWriter1.newUTF8("}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertEquals(2, int0);
      
      methodVisitor0.visitLabel(label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitIntInsn(223, 223);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      int int1 = Frame.BASE_VALUE;
      assertFalse(int1 == int0);
      assertEquals(1048575, int1);
      
      int int2 = Type.OBJECT;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, int2);
      
      methodVisitor0.visitMaxs(1, 1048575);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitMethodInsn(82, "wSrE5", "4mpxtIk?YI(u", ".)UpBa");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-1703));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("}R^D)m-YfC$S+K");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " a)4";
      stringArray0[1] = "}R^D)m-YfC$S+K";
      stringArray0[2] = "}R^D)m-YfC$S+K";
      stringArray0[3] = " a)4";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1703), "}R^D)m-YfC$S+K", " a)4", "}R^D)m-YfC$S+K", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = 168;
      methodWriter0.visitVarInsn(22, (-1703));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn((-2628), label0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2628
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-202));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod((-202), "LocalVarialeTale", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LocalVarialeTale");
      assertFalse(boolean0);
      
      methodWriter0.classReaderOffset = (-843);
      methodWriter0.visitVarInsn(182, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      classWriter1.visitOuterClass("6", "LocalVarialeTale", "LocalVariableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitFieldInsn(182, "}R^D)m}YfC&S+K", "LocalVariableTable", "LocalVariableTable");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitMethodInsn(1, "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      methodWriter0.visitVarInsn(1, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      String string0 = ".)UpBa";
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = new ByteVector();
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertNotNull(byteVector1);
      
      MethodWriter methodWriter1 = classWriter1.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      Item item0 = classWriter0.newDouble(0.0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotNull(item0);
      
      // Undeclared exception!
      try { 
        methodWriter1.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter((-229));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-229), "LocalVariableTable", "}b^D)m}YfC&S+K", "}b^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-20);
      classWriter0.visitInnerClass("LocalVariableTable", (String) null, "LocalVariableTable", (-167));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      
      Item item0 = classWriter1.newNameTypeItem("<init>", "}!@");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(item0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}b^D)m}YfC&S+K");
      assertFalse(boolean0);
      
      methodVisitor0.visitLdcInsn("");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      byteArray0[3] = (byte)15;
      int int0 = classWriter0.addUninitializedType("#'iWU#. ,a&TxHtu>", 1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      assertEquals(1, int0);
      
      byteArray0[5] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[5] = (byte)15;
      int int1 = (-2);
      methodVisitor0.visitFrame((byte)0, (-2), stringArray0, (byte) (-20), stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        methodVisitor0.visitLdcInsn((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "ocalVaGriableTable";
      ClassWriter classWriter0 = new ClassWriter((-279));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-279), "ocalVaGriableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[15];
      int int0 = Type.VOID;
      assertEquals(0, int0);
      
      int int1 = classWriter0.newUTF8("+&nET&mJe;GS");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      assertEquals(1, int1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = 1;
      int int2 = classWriter1.newUTF8(".$OW^_p\r7r7q%8");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertEquals(3, int2);
      
      methodVisitor0.visitLabel(label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      classWriter2.visit((byte)0, (byte)0, "}R^D)m}YfC&S+K", "+q+@j#f8P4eF", "+q+@j#f8P4eF", stringArray0);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter2, classWriter0);
      assertNotSame(classWriter2, classWriter1);
      
      Edge edge0 = label0.successors;
      assertNull(edge0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      label0.successors = null;
      methodVisitor0.visitFrame(1044, 169, stringArray0, 1044, stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      // Undeclared exception!
      try { 
        MethodWriter.getNewOffset((int[]) null, (int[]) null, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-1703));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("}R^D)m-YfC$S+K");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " a)4";
      stringArray0[1] = "}R^D)m-YfC$S+K";
      stringArray0[2] = " a)4";
      stringArray0[3] = " a)4";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1703), "}R^D)m-YfC$S+K", " a)4", "}R^D)m-YfC$S+K", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      boolean boolean1 = ClassReader.SIGNATURES;
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Item item0 = classWriter0.newClassItem("}R^D)m-YfC$S+K");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      methodWriter0.visitFieldInsn(196, "}R^D)m-YfC$S+K", "}R^D)m-YfC$S+K", "Deprecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.key;
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn((-853), "J=*yt", (String) null, "J=*yt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-227), "LocalVariableTable", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      Item item0 = classWriter0.newNameTypeItem("LocalVariableTable", "}R^D)m}YfC&S+K");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodVisitor0.visitMaxs(2, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "Dprecated";
      Frame frame0 = label0.frame;
      assertNull(frame0);
      
      boolean boolean0 = false;
      methodVisitor0.visitFieldInsn(2, ">", "|", "|");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newNameTypeItem("ic!nhYKq3BWp7>y3R[%", "W)rjr8ETN`.@\"ZC4");
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertSame(methodWriter0, methodVisitor0);
      assertNotNull(methodWriter0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Object object0 = label1.info;
      assertNull(object0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        methodVisitor0.visitFrame(0, 2, stringArray0, (-2485), stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-279));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-279), "ocDlVaGriableaaPble", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[15];
      int int0 = Type.VOID;
      assertEquals(0, int0);
      
      classWriter2.visitInnerClass("}R^D)m}YfC&S+K", "ocDlVaGriableaaPble", "}R^D)m}YfC&S+K", 1723);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter2, classWriter0);
      assertNotSame(classWriter2, classWriter1);
      
      int int1 = classWriter0.newUTF8("}R^D)m}YfC&S+K");
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter2);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, int1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = 1;
      int int2 = Frame.BASE_KIND;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(267386880, int2);
      
      methodVisitor0.visitLabel(label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      classWriter2.visit((byte)0, (byte)0, "}R^D)m}YfC&S+K", "+q+@j#f8P4eF", "+q+@j#f8P4eF", stringArray0);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter2, classWriter0);
      assertNotSame(classWriter2, classWriter1);
      
      Edge edge0 = label0.successors;
      assertNull(edge0);
      
      label0.successors = null;
      methodVisitor0.visitIntInsn(1, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitIntInsn((-279), 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitJumpInsn(168, label0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitFrame(2965, 2965, stringArray0, 2, stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitFieldInsn(2, "}R^D)m}YfC&S+K", "+q+@j#f8P4eF", "ocDlVaGriableaaPble");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitTypeInsn(2965, "ocDlVaGriableaaPble");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      methodVisitor0.visitIntInsn(1723, 3433);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      
      AnnotationVisitor annotationVisitor0 = methodVisitor0.visitAnnotation("dOFJ:=yje", false);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertNotNull(annotationVisitor0);
      
      methodVisitor0.visitMaxs(69, 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-279));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classWriter1.visitMethod((-279), "ocDWVaG%iabl>UaaPble", "}R^D)m}YfC&S+K", "}R^D)m}YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodVisitor0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[15];
      int int0 = Type.VOID;
      assertEquals(0, int0);
      
      classWriter2.visitInnerClass("}R^D)m}YfC&S+K", "ocDWVaG%iabl>UaaPble", "}R^D)m}YfC&S+K", 1723);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter2, classWriter1);
      assertNotSame(classWriter2, classWriter0);
      
      int int1 = classWriter0.newUTF8("}R^D)m}YfC&S+K");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter0, classWriter2);
      assertEquals(1, int1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.info = (Object) 1;
      int int2 = Frame.BASE_KIND;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(267386880, int2);
      
      methodVisitor0.visitLabel(label0);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      classWriter2.visit((byte)0, (byte)0, "}R^D)m}YfC&S+K", "+q+@j#f8P4eF", "+q+@j#f8P4eF", stringArray0);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter2, classWriter1);
      assertNotSame(classWriter2, classWriter0);
      
      Edge edge0 = label0.successors;
      assertNull(edge0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      label0.successors = null;
      methodVisitor0.visitIntInsn(1, 1);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitIntInsn((-279), 1);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitJumpInsn(168, label0);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitFrame(2965, 2965, stringArray0, 2, stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitFieldInsn(2, "}R^D)m}YfC&S+K", "+q+@j#f8P4eF", "ocDWVaG%iabl>UaaPble");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitTypeInsn(2965, "ocDWVaG%iabl>UaaPble");
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      methodVisitor0.visitIntInsn(1723, 3433);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodVisitor0.visitAnnotation("dOFJ:=yje", false);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationVisitor0);
      
      methodVisitor0.visitMaxs(69, 1);
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = (MethodWriter)classWriter1.visitMethod(40, "}R^D)YfC&S+K", "}R^D)YfC&S+K", "}R^D)YfC&S+K", stringArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(methodWriter0);
      
      classWriter0.lastMethod = methodWriter0;
      classWriter1.thisName = "}R^D)YfC&S+K";
      classWriter1.visitInnerClass("}R^D)YfC&S+K", "}R^D)YfC&S+K", "}R^D)YfC&S+K", 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      byte[] byteArray0 = classWriter1.toByteArray();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(byteArray0);
      
      methodWriter0.visitTypeInsn(10, "Class not found");
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      classWriter0.lastMethod.classReaderOffset = 40;
      methodWriter0.exceptionCount = 1;
      classWriter0.lastMethod.visitFieldInsn(10, "6Y#(o-", "long", "}R^D)YfC&S+K");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter1);
      
      AnnotationWriter annotationWriter0 = (AnnotationWriter)methodWriter0.visitAnnotationDefault();
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertNotNull(annotationWriter0);
      
      methodWriter0.visitVarInsn(24, 2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte) (-102);
      methodWriter0.visitInsn(31);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn((-32768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(579);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newMethodItem("QNY)4", "XGom=5D,M", "XGom=5D,M", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R^)m}YfC&S+K";
      stringArray0[1] = "R^)m}YfC&S+K";
      classWriter0.version = (-20);
      Item item1 = classWriter0.newFloat(579);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(item1, item0);
      assertNotNull(item1);
      
      stringArray0[2] = "R^)m}YfC&S+K";
      stringArray0[3] = "R^)m}YfC&S+K";
      int int0 = classWriter0.addUninitializedType("^", 579);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R^)m}YfC&S+K");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-20), "E3c2|K*k0*", "QNY)4", "T", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMethodInsn((-20), "float", "XGom=5D,M", "R^)m}YfC&S+K");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.key2;
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      assertNotNull(item2);
      
      methodWriter0.visitIntInsn((-1446), (-130));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), 1, stringArray0, (-20), stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }
}
