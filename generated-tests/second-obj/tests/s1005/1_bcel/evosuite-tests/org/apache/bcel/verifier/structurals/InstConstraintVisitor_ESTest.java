/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:33:31 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InvokeInstruction;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.GenericArray;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(156, 156);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(1);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals(1, dSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setConstantPoolGen((ConstantPoolGen) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      RET rET0 = new RET(2901);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(2901);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitISTORE((ISTORE) null);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      DRETURN dRETURN0 = (DRETURN)InstructionConstants.DRETURN;
      instConstraintVisitor0.visitDCONST((DCONST) null);
      ARETURN aRETURN0 = new ARETURN();
      assertEquals(1, aRETURN0.getLength());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)87);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      L2I l2I0 = new L2I();
      assertEquals("l2i", l2I0.getName());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals(1, nOP0.getLength());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(5);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals((short)22, lLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Float float0 = new Float(0.0F);
      instConstraintVisitor0.visitILOAD((ILOAD) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ICONST iCONST0 = new ICONST(0);
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals(1, iCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(2);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CHECKCAST cHECKCAST0 = new CHECKCAST(2647);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals((short)1, aCONST_NULL0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(218);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals((short)23, fLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP dUP0 = new DUP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitInvokeInstruction((InvokeInstruction) null);
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO(gOTO0);
      assertEquals("goto", gOTO0.getName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(1545, 1545);
      Frame.setThis((UninitializedObjectType) null);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(1545, 664);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("ERxMUiBh$)I");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      instConstraintVisitor0.visitLocalVariableInstruction(iLOAD0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM((DREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1((IMPDEP1) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      fCONST0.getValue();
      Float float0 = new Float(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      L2F l2F0 = new L2F();
      assertEquals("l2f", l2F0.getName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE(2371);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      LCONST lCONST0 = new LCONST(0L);
      lCONST0.toString();
      lCONST0.toString(true);
      instConstraintVisitor0.visitLCONST(lCONST0);
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      JSR jSR0 = new JSR((InstructionHandle) null);
      instConstraintVisitor0.visitJSR(jSR0);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      I2L i2L0 = new I2L();
      SALOAD sALOAD0 = new SALOAD();
      DSUB dSUB0 = new DSUB();
      assertEquals("dsub", dSUB0.getName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR jSR0 = new JSR((InstructionHandle) null);
      instConstraintVisitor0.visitJSR(jSR0);
      AALOAD aALOAD0 = new AALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitAALOAD(aALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(21);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("AxG");
      OperandStack operandStack0 = new OperandStack(1170, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'AxG'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      FASTORE fASTORE0 = new FASTORE();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      assertEquals(0, iF_ACMPNE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      OperandStack operandStack1 = new OperandStack((byte)9);
      DRETURN dRETURN0 = new DRETURN();
      DUP_X2 dUP_X2_0 = new DUP_X2();
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      ISHR iSHR0 = new ISHR();
      assertEquals("ishr", iSHR0.getName());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("ERxMUiBh$)I");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'ERxMUiBh$)I'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(1463);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(1463);
      LocalVariables localVariables1 = new LocalVariables(1463);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(1463);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      NEW nEW0 = new NEW(1463);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(247, objectType0);
      LocalVariables localVariables0 = new LocalVariables(28);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      F2D f2D0 = new F2D();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(2);
      gETSTATIC0.copy();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      LocalVariables localVariables1 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      FADD fADD0 = new FADD();
      FRETURN fRETURN0 = new FRETURN();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("C+nh@c}Y(");
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2264);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      GenericArray genericArray0 = new GenericArray();
      LocalVariables localVariables1 = new LocalVariables((byte)29);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.clone();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'C+nh@c}Y('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      ObjectType objectType1 = new ObjectType("()L;");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1463);
      aNEWARRAY0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 1;
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("ERxMUiBh$)I");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      frame0.equals(instConstraintVisitor0);
      instConstraintVisitor0.setFrame(frame0);
      FASTORE fASTORE0 = new FASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'ERxMUiBh$)I'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = new OperandStack(1463, objectType0);
      operandStack1.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      frame0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF((INSTANCEOF) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(114);
      ObjectType objectType0 = new ObjectType("3LQ*0v$cRa~3|k");
      OperandStack operandStack0 = new OperandStack(114, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[10];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type '3LQ*0v$cRa~3|k'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(224);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("h");
      OperandStack operandStack0 = new OperandStack(224, objectType0);
      objectType0.isCastableTo((Type) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'h'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(1545, 5);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(5, 664);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(34, objectType0);
      LocalVariables localVariables0 = new LocalVariables(34);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FADD fADD0 = new FADD();
      BasicType basicType0 = Type.INT;
      OperandStack operandStack0 = new OperandStack(1988, basicType0.OBJECT);
      LocalVariables localVariables0 = new LocalVariables(1988);
      Boolean boolean0 = new Boolean("");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR((IXOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(163);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(247, objectType0);
      LocalVariables localVariables0 = new LocalVariables(28);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        dRETURN0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("ERxMUiBh$)I");
      ObjectType objectType1 = new ObjectType("ERxMUiBh$)I");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(instConstraintVisitor0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'ERxMUiBh$)I'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FADD fADD0 = new FADD();
      BasicType basicType0 = Type.INT;
      OperandStack operandStack0 = new OperandStack(1988, basicType0.OBJECT);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(1988);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE((IFLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("9P'X`k<oxlAZdbS");
      int int0 = 34;
      OperandStack operandStack0 = new OperandStack(34, objectType0);
      LocalVariables localVariables0 = new LocalVariables(34);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9P'X`k<oxlAZdbS");
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1L);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFNE iFNE0 = new IFNE(instructionHandle0);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(2);
      gETSTATIC0.copy();
      ObjectType objectType0 = ObjectType.getInstance("this");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      FADD fADD0 = new FADD();
      IDIV iDIV0 = new IDIV();
      FREM fREM0 = new FREM();
      InstructionList instructionList0 = new InstructionList(iDIV0);
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFLE0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(branchHandle0);
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iF_ICMPLT0.consumeStack(constantPoolGen0);
      IF_ICMPLT iF_ICMPLT1 = new IF_ICMPLT(branchHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'this'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"Fp-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables0.toString();
      operandStack0.push(objectType0);
      operandStack0.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The 'count' argument should probably read '");
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSHL lSHL0 = new LSHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(1463);
      lSHL0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type '\"Fp-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      OperandStack operandStack0 = new OperandStack(131, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      localVariables0.clone();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Cannot STORE: Stack to read from is empty.");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0.CLASS);
      LocalVariables localVariables0 = new LocalVariables(241);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      LocalVariables localVariables2 = new LocalVariables(241);
      Frame frame1 = new Frame(localVariables2, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      ALOAD aLOAD0 = new ALOAD((byte)29);
      FMUL fMUL0 = new FMUL();
      FMUL fMUL1 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type 'java.lang.Class'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      String string0 = Constants.ILLEGAL_OPCODE;
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.merge(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.merge(localVariables1);
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("\"");
      operandStack0.push(objectType0);
      localVariables0.merge(localVariables1);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      int int0 = 163;
      LocalVariables localVariables0 = new LocalVariables(163);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      FADD fADD0 = new FADD();
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("d2f");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(100);
      OperandStack operandStack0 = new OperandStack(100, objectType0);
      OperandStack operandStack1 = new OperandStack(100, objectType0);
      LocalVariables localVariables1 = new LocalVariables(100);
      operandStack1.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      GenericArray genericArray0 = new GenericArray();
      PUTFIELD pUTFIELD0 = new PUTFIELD(163);
      operandStack0.equals((Object) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(163);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      String string0 = Constants.ILLEGAL_OPCODE;
      LocalVariables localVariables1 = new LocalVariables(1463);
      operandStack0.push(objectType0);
      operandStack0.pop();
      localVariables1.getClone();
      operandStack1.getClone();
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1459, objectType0);
      OperandStack operandStack1 = new OperandStack(1459, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1459);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack1.merge(operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.push(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      OperandStack operandStack2 = new OperandStack(785, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = new LocalVariables(785);
      LocalVariables localVariables2 = new LocalVariables(950);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT((IFGT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("");
      FADD fADD0 = new FADD();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(1463, (short)2537);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '2537' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      F2D f2D0 = new F2D();
      DUP dUP0 = new DUP();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(5);
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      GenericArray genericArray0 = new GenericArray();
      LocalVariables localVariables1 = new LocalVariables(1463);
      LocalVariables localVariables2 = new LocalVariables(59);
      Frame frame1 = new Frame(localVariables2, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      I2L i2L0 = new I2L();
      i2L0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("C+nh8cY(");
      OperandStack operandStack0 = new OperandStack((byte)41, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)41);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      localVariables0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '");
      INEG iNEG0 = new INEG();
      instConstraintVisitor0.visitASTORE((ASTORE) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(114);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("3LQ*0v$cRa~3|k");
      OperandStack operandStack0 = new OperandStack(114, objectType0);
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      FileSystemHandling.shouldAllThrowIOExceptions();
      I2F i2F0 = new I2F();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type '3LQ*0v$cRa~3|k'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1463);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      ConstantClass constantClass0 = new ConstantClass(119);
      LocalVariables localVariables1 = new LocalVariables(1463);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(163);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(163, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("\"");
      FADD fADD0 = new FADD();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = ObjectType.getInstance("ERxMUiBh$)I");
      Class<I2B> class0 = I2B.class;
      Type.getType(class0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DREM dREM0 = null;
      ILOAD iLOAD0 = new ILOAD(1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(iLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1459, objectType0);
      LocalVariables localVariables0 = new LocalVariables(166);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)29);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.equals("");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      GETFIELD gETFIELD0 = new GETFIELD(100);
      DUP dUP0 = new DUP();
      POP2 pOP2_0 = new POP2();
      F2L f2L0 = new F2L();
      f2L0.toString(false);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(192);
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FADD fADD0 = new FADD();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT((IF_ICMPGT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1099, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables0 = new LocalVariables(1099);
      LocalVariables localVariables1 = new LocalVariables(207);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LAND lAND0 = new LAND();
      lAND0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      int int0 = 6;
      OperandStack operandStack0 = new OperandStack(6, objectType0);
      LocalVariables localVariables0 = new LocalVariables(6);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9P'X`k<oxlAZdbS");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables1 = new LocalVariables(6);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      String string0 = Constants.ILLEGAL_OPCODE;
      LocalVariables localVariables1 = new LocalVariables(47);
      operandStack0.push(objectType0);
      LocalVariables localVariables2 = localVariables0.getClone();
      operandStack0.pop();
      localVariables2.getClone();
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("\"");
      Class<I2B> class0 = I2B.class;
      Type type0 = Type.getType(class0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(896, type0.CLASS);
      LocalVariables localVariables0 = new LocalVariables(896);
      operandStack0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.merge(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDC lDC0 = new LDC(896);
      lDC0.toString(false);
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Class'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("9a'pXk<oxlcA^dJS");
      OperandStack operandStack0 = new OperandStack(86, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(86);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9a'pXk<oxlcA^dJS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("9a'Xk<oxlcA^dJS");
      OperandStack operandStack0 = new OperandStack(40, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(11);
      LocalVariables localVariables1 = new LocalVariables(40);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FADD fADD0 = new FADD();
      ALOAD aLOAD0 = new ALOAD(11);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(220);
      localVariables0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      localVariables1.merge(localVariables0);
      LocalVariables localVariables2 = new LocalVariables(220);
      localVariables0.clone();
      ObjectType objectType0 = new ObjectType("h");
      OperandStack operandStack0 = new OperandStack(220, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      operandStack0.getClone();
      LSHL lSHL0 = new LSHL();
      LSHL lSHL1 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE((SASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FADD fADD0 = new FADD();
      BasicType basicType0 = Type.INT;
      OperandStack operandStack0 = new OperandStack(1988, basicType0.OBJECT);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(1988);
      Boolean boolean0 = new Boolean("");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(2200);
      gETSTATIC0.copy();
      ObjectType objectType0 = new ObjectType("*");
      OperandStack operandStack0 = new OperandStack(2200, objectType0);
      LocalVariables localVariables0 = new LocalVariables(31);
      LocalVariables localVariables1 = new LocalVariables(46);
      LocalVariables localVariables2 = new LocalVariables(863);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      instConstraintVisitor0.setFrame(frame0);
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type '*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ATHROW aTHROW0 = new ATHROW();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F*p[6Zn");
      ObjectType objectType0 = new ObjectType("F*p[6Zn");
      ObjectType objectType1 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(28, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)29);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      L2D l2D0 = new L2D();
      LALOAD lALOAD0 = new LALOAD();
      LALOAD lALOAD1 = new LALOAD();
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'F*p[6Zn'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("mA&V(j");
      OperandStack operandStack0 = new OperandStack((byte)37, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)37);
      Class<FRETURN> class0 = FRETURN.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Type.getType(class0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(5011L);
      l2F0.produceStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'mA&V(j'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1463);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1436);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(instConstraintVisitor0);
      String string0 = Constants.ILLEGAL_TYPE;
      Frame frame1 = frame0.getClone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      LADD lADD0 = new LADD();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.pop();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is '\"' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"Fp-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      operandStack0.push(objectType0);
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte) (-93));
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type '\"Fp-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1459, objectType0);
      LocalVariables localVariables0 = new LocalVariables(178);
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("C+nh@c}Y(");
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2264);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      GenericArray genericArray0 = new GenericArray();
      LocalVariables localVariables1 = new LocalVariables((byte)29);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.clone();
      I2B i2B0 = new I2B();
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'C+nh@c}Y('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(2200);
      gETSTATIC0.copy();
      ObjectType objectType0 = new ObjectType("*");
      OperandStack operandStack0 = new OperandStack(2200, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1);
      LocalVariables localVariables1 = new LocalVariables(46);
      LocalVariables localVariables2 = new LocalVariables(863);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DLOAD dLOAD0 = new DLOAD(46);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type '*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("C+nh8cY(");
      OperandStack operandStack0 = new OperandStack((byte)56, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)56);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      localVariables0.getClone();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)56;
      Frame frame1 = new Frame(localVariables0, operandStack0);
      LMUL lMUL0 = new LMUL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      lMUL0.consumeStack(constantPoolGen0);
      frame1.equals(lMUL0);
      instConstraintVisitor0.setFrame(frame0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-5140));
      Instruction.readInstruction(byteSequence0);
      INEG iNEG0 = new INEG();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'C+nh8cY('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables0.getClone();
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(163);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.push(objectType0);
      Type[] typeArray0 = Type.NO_ARGS;
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F((D2F) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("C+nh@c}Y(");
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0);
      LocalVariables localVariables0 = new LocalVariables(196);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      LocalVariables localVariables1 = new LocalVariables((byte)29);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      instConstraintVisitor0.setFrame(frame0);
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'C+nh@c}Y('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(220);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      localVariables1.clone();
      ObjectType objectType0 = new ObjectType("h");
      OperandStack operandStack0 = new OperandStack(220, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      OperandStack operandStack1 = new OperandStack(220, objectType0);
      OperandStack operandStack2 = operandStack1.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack2);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        f2L0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'h'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables0 = new LocalVariables(151);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Frame.getThis();
      instConstraintVisitor0.setFrame(frame0);
      ObjectType objectType1 = new ObjectType("");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE((IFGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("C+nh8cY(");
      OperandStack operandStack0 = new OperandStack((byte)41, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)41);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      localVariables0.getClone();
      frame0.clone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "If stack top's size is 2 and stack-next-to-top's size is 1, then stack next-to-next-to-top's size must also be 1. But it is '");
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'C+nh8cY('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("+oQBYf)+");
      OperandStack operandStack0 = new OperandStack(95, objectType0);
      operandStack0.push(objectType0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-2);
      LocalVariables localVariables0 = new LocalVariables(95);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.ILLEGAL_TYPE;
      frame0.getClone();
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type '+oQBYf)+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("9a'pXk<oxlA^dJS");
      OperandStack operandStack0 = new OperandStack(86, objectType0);
      OperandStack operandStack1 = new OperandStack(86);
      LocalVariables localVariables0 = new LocalVariables(86);
      localVariables0.getClone();
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9a'pXk<oxlA^dJS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Missing class: ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0.CLASS);
      LocalVariables localVariables0 = new LocalVariables(241);
      localVariables0.set(89, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[2] = (byte)29;
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'java.lang.Class'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(1463);
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.getClone();
      OperandStack operandStack1 = new OperandStack(1463, objectType0);
      Frame frame1 = new Frame(localVariables2, operandStack1);
      LSHR lSHR0 = new LSHR();
      FDIV fDIV0 = new FDIV();
      frame1.equals(fDIV0);
      localVariables0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("9a'pXk<oxlA^dJS");
      OperandStack operandStack0 = new OperandStack(86, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(86);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Boolean boolean0 = new Boolean(false);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      L2I l2I0 = new L2I();
      ObjectType objectType1 = new ObjectType(string0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      I2L i2L0 = new I2L();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(1207);
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9a'pXk<oxlA^dJS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(162);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      instConstraintVisitor0.setFrame(frame0);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      L2F l2F0 = new L2F();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-106);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectType objectType0 = new ObjectType("\"");
      ObjectType.getInstance("9mQsx?BZY_pu0'");
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(208);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = new LocalVariables(208);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      localVariables1.toString();
      localVariables0.clone();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      LDC lDC0 = null;
      try {
        lDC0 = new LDC((-364));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -364
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("9a'pXk<oxlA^dJS");
      OperandStack operandStack0 = new OperandStack(86, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(86);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      localVariables0.getClone();
      String string0 = localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      L2I l2I0 = new L2I();
      ObjectType objectType1 = new ObjectType(string0);
      ObjectType objectType2 = new ObjectType(string0);
      Frame.getThis();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL((DMUL) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9a'pXk<oxlA^dJS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      OperandStack operandStack1 = new OperandStack(1463, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("\"");
      FADD fADD0 = new FADD();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(1463);
      constantArray0[0] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      dUP2_X1_0.consumeStack(constantPoolGen0);
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ATHROW aTHROW0 = new ATHROW();
      ObjectType objectType0 = ObjectType.getInstance("mA&7j");
      OperandStack operandStack0 = new OperandStack((byte)31, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)31);
      Class<FRETURN> class0 = FRETURN.class;
      Type.getType(class0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class mA&7j: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: mA&7j.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(95, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(95);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.ILLEGAL_TYPE;
      Frame frame1 = frame0.getClone();
      frame1.toString();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      operandStack0.clear();
      localVariables0.toString();
      I2L i2L0 = new I2L();
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Missing class: ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0.CLASS);
      LocalVariables localVariables0 = new LocalVariables(241);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.set(74, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      L2D l2D0 = new L2D();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack1 = new OperandStack(178, objectType0);
      operandStack0.push(objectType0);
      localVariables1.getClone();
      instConstraintVisitor0.visitDUP((DUP) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(163);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      instConstraintVisitor0.visitIFNULL((IFNULL) null);
      LNEG lNEG0 = new LNEG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1463);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      ConstantClass constantClass0 = new ConstantClass(119);
      LocalVariables localVariables1 = new LocalVariables(1463);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LSHR lSHR0 = new LSHR();
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = new ILOAD(1463);
      LocalVariables localVariables1 = new LocalVariables(1463);
      ConstantClass constantClass0 = new ConstantClass(1463);
      frame1.toString();
      LSTORE lSTORE0 = new LSTORE(1463);
      operandStack0.clone();
      String string0 = Constants.ILLEGAL_OPCODE;
      operandStack0.clone();
      operandStack0.pop();
      localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ISHR iSHR0 = new ISHR();
      ISHR iSHR1 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 220;
      LocalVariables localVariables0 = new LocalVariables(220);
      localVariables0.getClone();
      localVariables0.toString();
      ObjectType objectType0 = ObjectType.getInstance("h");
      OperandStack operandStack0 = new OperandStack(220, objectType0);
      objectType0.isCastableTo((Type) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      byte byte0 = (byte)117;
      FSTORE fSTORE0 = new FSTORE((byte)117);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)117);
      NOP nOP0 = new NOP();
      NOP nOP1 = new NOP();
      InstructionList instructionList0 = new InstructionList(mONITOREXIT0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV((DDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables0.clone();
      operandStack0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("\"");
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      FADD fADD0 = new FADD();
      instConstraintVisitor0.setFrame(frame0);
      SALOAD sALOAD0 = new SALOAD();
      L2F l2F1 = new L2F();
      DUP dUP0 = new DUP();
      LADD lADD0 = new LADD();
      localVariables0.clone();
      instConstraintVisitor0.visitIF_ACMPNE((IF_ACMPNE) null);
      localVariables0.getClone();
      // Undeclared exception!
      try { 
        operandStack0.pop(1463);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("d2f");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(100, objectType0);
      OperandStack operandStack1 = new OperandStack(100, objectType0);
      LocalVariables localVariables0 = new LocalVariables(100);
      OperandStack operandStack2 = new OperandStack(163);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      GenericArray genericArray0 = new GenericArray();
      PUTFIELD pUTFIELD0 = new PUTFIELD(163);
      operandStack0.equals((Object) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(163);
      ISTORE iSTORE0 = new ISTORE(160);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      RET rET0 = new RET(4);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 4.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("C+nh8cY(");
      OperandStack operandStack0 = new OperandStack((byte)56, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)56);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      localVariables0.getClone();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)56;
      Frame frame1 = new Frame(localVariables0, operandStack0);
      LMUL lMUL0 = new LMUL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      lMUL0.consumeStack(constantPoolGen0);
      frame1.equals(lMUL0);
      instConstraintVisitor0.setFrame(frame0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-5140));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!GuU.'g; zu{F");
      Instruction.readInstruction(byteSequence0);
      INEG iNEG0 = new INEG();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FREM fREM0 = new FREM();
      GETFIELD gETFIELD0 = new GETFIELD(170);
      GETFIELD gETFIELD1 = new GETFIELD((byte)56);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(208);
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = new LocalVariables(208);
      GenericArray genericArray0 = new GenericArray();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      GenericArray genericArray1 = new GenericArray();
      localVariables1.toString();
      localVariables0.clone();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1452, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1452);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      SALOAD sALOAD0 = new SALOAD();
      L2F l2F0 = new L2F();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      L2D l2D1 = new L2D();
      ASTORE aSTORE0 = new ASTORE((byte)76);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      assertEquals(76, aSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Missing class: ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0.CLASS);
      LocalVariables localVariables0 = new LocalVariables(241);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.set(89, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      iFLE0.toString();
      frame0.equals(iFLE0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      operandStack0.push(objectType0);
      DSTORE dSTORE0 = new DSTORE(569);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'Missing class: '; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ATHROW aTHROW0 = new ATHROW();
      ObjectType objectType0 = ObjectType.getInstance("mA&7j");
      OperandStack operandStack0 = new OperandStack((byte)31, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)31);
      ObjectType.getInstance("mA&7j");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      LocalVariables localVariables1 = new LocalVariables(192);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(iLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: Read-Access on local variable 0 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      operandStack0.clone();
      localVariables1.merge(localVariables0);
      LocalVariables localVariables2 = new LocalVariables(3079);
      localVariables2.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("");
      FADD fADD0 = new FADD();
      instConstraintVisitor0.setFrame(frame0);
      SALOAD sALOAD0 = new SALOAD();
      L2F l2F1 = new L2F();
      DUP dUP0 = new DUP();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      POP2 pOP2_0 = new POP2();
      DSTORE dSTORE0 = new DSTORE(874);
      ILOAD iLOAD0 = new ILOAD(46);
      instConstraintVisitor0.visitLocalVariableInstruction(dSTORE0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      LocalVariables localVariables2 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables2, operandStack0);
      frame0.equals(localVariables1);
      operandStack0.equals("\"");
      localVariables0.getClone();
      LocalVariables localVariables3 = localVariables1.getClone();
      Frame frame1 = new Frame(localVariables3, operandStack1);
      LMUL lMUL0 = new LMUL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables1.getClone();
      operandStack0.push(objectType0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      instConstraintVisitor0.setFrame(frame0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(1463);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.visitInvokeInstruction(iNVOKESPECIAL0);
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitISHR(iSHR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1452, objectType0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)104;
      byteArray0[4] = (byte)44;
      LocalVariables localVariables0 = new LocalVariables((byte)104);
      localVariables0.getClone();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.push(objectType0);
      LocalVariables localVariables1 = new LocalVariables((byte)104);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, false);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("9P'X`k<oxlAZdbS");
      OperandStack operandStack0 = new OperandStack(241, objectType0);
      LocalVariables localVariables0 = new LocalVariables(28);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ISTORE iSTORE0 = new ISTORE(220);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      mONITORENTER0.toString();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9P'X`k<oxlAZdbS;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type '\"'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.merge(localVariables1);
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("\"");
      operandStack0.push(objectType0);
      LADD lADD0 = new LADD();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2((DUP2_X2) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(1454, objectType0);
      LocalVariables localVariables0 = new LocalVariables(163);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.push(objectType0);
      Type[] typeArray0 = Type.NO_ARGS;
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-[/sWCD");
      LocalVariables localVariables2 = new LocalVariables(163);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      PUTFIELD pUTFIELD0 = new PUTFIELD(1454);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ATHROW aTHROW0 = new ATHROW();
      ObjectType objectType0 = ObjectType.getInstance("If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: '");
      OperandStack operandStack0 = new OperandStack((byte)31, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)31);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      localVariables0.getClone();
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'If stack top's size is 1 and stack next-to-top's size is 1, stack next-to-next-to-top's size must also be 1, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("vB~:2p1VkC");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      Type type0 = Type.UNKNOWN;
      operandStack0.push(type0);
      LocalVariables localVariables0 = new LocalVariables(3);
      Type.getMethodSignature(type0, objectType0.NO_ARGS);
      localVariables0.clone();
      Object object0 = new Object();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Boolean boolean0 = new Boolean("kiCaTo5YgE{by");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("@5");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack1 = new OperandStack(1463, objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ILOAD iLOAD0 = new ILOAD(1463);
      frame1.toString();
      LocalVariables localVariables2 = new LocalVariables(1463);
      ConstantClass constantClass0 = new ConstantClass(192);
      String string0 = frame0.toString();
      LSTORE lSTORE0 = new LSTORE(58);
      LocalVariables localVariables3 = new LocalVariables(1463);
      operandStack1.clone();
      String string1 = Constants.ILLEGAL_OPCODE;
      operandStack0.clone();
      operandStack0.pop();
      localVariables2.getClone();
      Boolean boolean0 = new Boolean(string0);
      InstructionList instructionList0 = new InstructionList(lSTORE0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ((IF_ICMPEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(1463);
      BasicType basicType0 = Type.DOUBLE;
      operandStack0.push(basicType0);
      OperandStack operandStack1 = new OperandStack(1463);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      DNEG dNEG1 = new DNEG();
      DNEG dNEG2 = new DNEG();
      LocalVariables localVariables2 = new LocalVariables(29);
      Boolean boolean0 = new Boolean("");
      FADD fADD0 = new FADD();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      dUP2_X1_0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      String string0 = Constants.ILLEGAL_OPCODE;
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.merge(localVariables1);
      Boolean boolean0 = new Boolean("\"");
      operandStack0.push(objectType0);
      localVariables0.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame0);
      Boolean boolean1 = new Boolean("O0fi");
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(697, (short)124);
      mULTIANEWARRAY0.toString(true);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      instConstraintVisitor1.visitDUP_X2(dUP_X2_0);
      IMUL iMUL0 = new IMUL();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ATHROW aTHROW0 = new ATHROW();
      ObjectType objectType0 = new ObjectType("C+nh8cY(");
      ObjectType objectType1 = new ObjectType("C+nh8cY(");
      OperandStack operandStack0 = new OperandStack(44, objectType0);
      LocalVariables localVariables0 = new LocalVariables(44);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      L2F l2F0 = new L2F();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      LADD lADD0 = new LADD();
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(756);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 44);
      InstructionList instructionList0 = new InstructionList(lADD0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      LADD lADD1 = new LADD();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      IFLT iFLT1 = new IFLT(instructionHandle1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type 'C+nh8cY('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(224);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("h");
      OperandStack operandStack0 = new OperandStack(224, objectType0);
      objectType0.isCastableTo((Type) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type 'h'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("\"");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack1 = new OperandStack(1463, objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.getClone();
      Frame frame1 = frame0.getClone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame1);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      frame1.toString();
      LocalVariables localVariables2 = new LocalVariables(1463);
      operandStack0.clear();
      Boolean boolean0 = new Boolean("");
      operandStack0.push(objectType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType1 = new ObjectType(",m+O`");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE((IF_ICMPNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("d2f");
      OperandStack operandStack0 = new OperandStack(100, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(100);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack1 = new OperandStack(100, objectType0);
      operandStack1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      String string0 = Constants.CONSTRUCTOR_NAME;
      LocalVariables localVariables2 = new LocalVariables(100);
      Frame frame1 = new Frame(localVariables2, operandStack1);
      GenericArray genericArray0 = new GenericArray();
      L2D l2D0 = new L2D();
      L2D l2D1 = new L2D();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      assertEquals("dup2", dUP2_0.getName());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Cannt STORE: Stack to read[from is emty.");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack((byte)29, objectType0.CLASS);
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      iFLE0.negate();
      Frame frame0 = new Frame(1240, 1240);
      FALOAD fALOAD0 = new FALOAD();
      frame0.equals(fALOAD0);
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      L2D l2D1 = new L2D();
      FileSystemHandling.shouldAllThrowIOExceptions();
      L2D l2D2 = new L2D();
      ASTORE aSTORE0 = new ASTORE(1240);
      ISTORE iSTORE0 = new ISTORE((byte)29);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("\"F-_:p-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(1463);
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      GenericArray genericArray0 = new GenericArray();
      PUTFIELD pUTFIELD0 = new PUTFIELD(1924);
      LSTORE lSTORE0 = new LSTORE(1463);
      lSTORE0.setIndex(1924);
      operandStack0.equals(lSTORE0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      AASTORE aASTORE0 = new AASTORE();
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type '\"F-_:p-'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("-eb}QZtfYGFjqxkb>");
      OperandStack operandStack0 = new OperandStack(100, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(100);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      operandStack0.clone();
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack1 = new OperandStack(100, objectType0);
      operandStack1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      LocalVariables localVariables2 = new LocalVariables(100);
      Frame frame1 = new Frame(localVariables2, operandStack1);
      GenericArray genericArray0 = new GenericArray();
      L2D l2D0 = new L2D();
      L2D l2D1 = new L2D();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
      assertEquals(1, dUP_X1_0.getLength());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      OperandStack operandStack0 = new OperandStack(1463);
      LocalVariables localVariables0 = new LocalVariables(1463);
      BasicType basicType0 = Type.DOUBLE;
      operandStack0.push(basicType0);
      OperandStack operandStack1 = new OperandStack(1463);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      DNEG dNEG1 = new DNEG();
      LocalVariables localVariables2 = new LocalVariables(29);
      Boolean boolean0 = new Boolean("");
      FADD fADD0 = new FADD();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)98;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD((DADD) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(1476);
      LocalVariables localVariables0 = new LocalVariables(1476);
      BasicType basicType0 = Type.DOUBLE;
      operandStack0.push(basicType0);
      OperandStack operandStack1 = new OperandStack(1476);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      localVariables1.set(13, basicType0);
      localVariables1.merge(localVariables0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DNEG dNEG0 = new DNEG();
      DNEG dNEG1 = new DNEG();
      LocalVariables localVariables2 = new LocalVariables(21);
      operandStack0.getClone();
      Object object0 = new Object();
      OperandStack operandStack2 = operandStack0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack2);
      localVariables0.toString();
      Frame frame2 = frame1.getClone();
      Frame frame3 = new Frame(localVariables2, operandStack0);
      operandStack2.toString();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame2);
      L2D l2D0 = new L2D();
      D2L d2L0 = new D2L();
      D2L d2L1 = new D2L();
      instConstraintVisitor0.visitD2L(d2L1);
      IXOR iXOR0 = new IXOR();
      BIPUSH bIPUSH0 = new BIPUSH((byte)37);
      BIPUSH bIPUSH1 = new BIPUSH((byte)37);
      instConstraintVisitor0.visitBIPUSH(bIPUSH1);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(1476);
      LocalVariables localVariables0 = new LocalVariables(1476);
      BasicType basicType0 = Type.DOUBLE;
      operandStack0.push(basicType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack2 = new OperandStack(1772, basicType0.CLASS);
      operandStack0.push(basicType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
      I2L i2L0 = new I2L();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      byte byte1 = ObjectStreamConstants.SC_ENUM;
      short short0 = Constants.MAJOR_1_1;
      short short1 = ObjectStreamConstants.STREAM_VERSION;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) (short)5);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      PUSH pUSH1 = new PUSH(constantPoolGen1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionList instructionList1 = instructionList0.copy();
      instructionList1.append(instructionList0);
      instConstraintVisitor0.visitD2F((D2F) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(95, objectType0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-2);
      LocalVariables localVariables0 = new LocalVariables(95);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables1 = new LocalVariables(76);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.ILLEGAL_TYPE;
      Frame frame1 = frame0.getClone();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instConstraintVisitor0.setFrame(frame1);
      frame0.toString();
      I2D i2D0 = new I2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      I2D i2D1 = new I2D();
      i2D1.getType(constantPoolGen0);
      I2D i2D2 = new I2D();
      Boolean boolean0 = Boolean.TRUE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFNE iFNE0 = new IFNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(220);
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("h");
      OperandStack operandStack0 = new OperandStack(220, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      SALOAD sALOAD0 = new SALOAD();
      LocalVariables localVariables1 = new LocalVariables(220);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) objectType0;
      BasicType basicType0 = Type.DOUBLE;
      typeArray0[1] = (Type) basicType0;
      Type.getMethodSignature(objectType0, typeArray0);
      operandStack0.push(basicType0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      operandStack0.equals((Object) null);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      String string0 = Constants.ILLEGAL_TYPE;
      Frame frame2 = frame1.getClone();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame2);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      DUP_X2 dUP_X2_1 = new DUP_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DUP_X2 constraint violated: Stack top type must be of size 1, but is 'double' of size '2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(66, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(2931);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3iiVOikcJ[#eY[");
      String string0 = Constants.ILLEGAL_OPCODE;
      SWAP sWAP0 = new SWAP();
      instConstraintVisitor0.visitSWAP(sWAP0);
      LocalVariables localVariables2 = new LocalVariables(66);
      operandStack1.push(objectType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      operandStack0.pop();
      // Undeclared exception!
      localVariables1.getClone();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1463);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.getClone();
      operandStack0.initializeObject(uninitializedObjectType0);
      Class<I2L> class0 = I2L.class;
      Type type0 = Type.getType(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack1 = new OperandStack(2019, type0.THROWABLE);
      operandStack1.push(type0);
      localVariables0.toString();
      operandStack0.push(uninitializedObjectType0);
      I2L i2L0 = new I2L();
      RETURN rETURN0 = new RETURN();
      InstructionList instructionList0 = new InstructionList(rETURN0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) rETURN0, instructionList1);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle0);
      instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
      localVariables0.getClone();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ATHROW constraint violated: The 'objectref' is not of an (initialized) ObjectType but of type <UNINITIALIZED OBJECT OF TYPE ''>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      L2F l2F0 = new L2F();
      ObjectType objectType0 = new ObjectType("@5");
      OperandStack operandStack0 = new OperandStack(1463, objectType0);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(1463);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack1 = new OperandStack(1463, objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      FCMPG fCMPG0 = new FCMPG();
      FCMPG fCMPG1 = new FCMPG();
      InstructionList instructionList0 = new InstructionList(fCMPG0);
      InstructionList instructionList1 = instructionList0.copy();
      I2L i2L0 = new I2L();
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) i2L0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLE constraint violated: The value at the stack top is not of type 'int', but of type '@5'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
