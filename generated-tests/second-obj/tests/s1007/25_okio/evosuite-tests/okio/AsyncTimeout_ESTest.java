/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:56:47 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("f`F80xxP+c!j09j");
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException("f`F80xxP+c!j09j", iOException0);
      asyncTimeout0.exit((IOException) mockIOException1);
      assertEquals("timeout", iOException0.getMessage());
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.timedOut();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      AsyncTimeout.head.throwIfReached();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      assertSame(mockIOException0, iOException0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Sink sink0 = asyncTimeout0.sink((Sink) null);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      boolean boolean0 = asyncTimeout0.exit();
      assertFalse(boolean0);
      
      asyncTimeout0.clearDeadline();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      AsyncTimeout.head.deadlineNanoTime(1000000L);
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      System.setCurrentTimeMillis(32L);
      AsyncTimeout.head.enter();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      assertNotNull(asyncTimeout2);
      
      AsyncTimeout.head.exit((IOException) mockIOException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      asyncTimeout2.exit(true);
      assertTrue(asyncTimeout2.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.enter();
      AsyncTimeout.head.deadlineNanoTime(1000000L);
      System.setCurrentTimeMillis(1000000L);
      AsyncTimeout.head.enter();
      AsyncTimeout.awaitTimeout();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      AsyncTimeout.head.deadlineNanoTime(1000000L);
      Pipe pipe0 = new Pipe(1000000L);
      Pipe pipe1 = new Pipe(10000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe1.new PipeSource();
      System.setCurrentTimeMillis((-3733L));
      asyncTimeout0.enter();
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout0.deadline(695L, timeUnit0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      asyncTimeout1.enter();
      System.setCurrentTimeMillis(32L);
      // Undeclared exception!
      try { 
        AsyncTimeout.head.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.deadlineNanoTime(145L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getsockname failed");
      Pipe pipe0 = new Pipe(999509000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      System.setCurrentTimeMillis(145L);
      asyncTimeout0.enter();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      asyncTimeout0.exit((IOException) mockIOException0);
      MockThrowable mockThrowable1 = new MockThrowable(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(mockThrowable1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout0.deadlineNanoTime(145L);
      Pipe pipe0 = new Pipe(999509000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      System.setCurrentTimeMillis(145L);
      asyncTimeout0.enter();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      asyncTimeout0.exit((IOException) mockIOException0);
      MockThrowable mockThrowable1 = new MockThrowable(mockIOException0);
      MockIOException mockIOException1 = new MockIOException();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout0.enter();
      asyncTimeout0.deadlineNanoTime(3044L);
      System.setCurrentTimeMillis(3044L);
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("W%");
      Pipe pipe0 = new Pipe(968000L);
      Buffer buffer0 = new Buffer();
      asyncTimeout0.source(buffer0);
      Source source0 = asyncTimeout0.source(buffer0);
      asyncTimeout0.exit(true);
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      asyncTimeout0.exit(true);
      asyncTimeout0.exit(false);
      MockIOException mockIOException1 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable(mockIOException0);
      mockIOException1.getSuppressed();
      MockThrowable mockThrowable1 = new MockThrowable("", mockIOException0);
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(source0, inflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        inflaterSource0.read(buffer1, 999001000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      asyncTimeout1.enter();
      AsyncTimeout.head.deadlineNanoTime(1000000L);
      System.setCurrentTimeMillis(1000000L);
      asyncTimeout1.deadlineNanoTime(1000000L);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      asyncTimeout0.timeout(17L, timeUnit0);
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      System.setCurrentTimeMillis(17L);
      AsyncTimeout.head.enter();
      MockThrowable mockThrowable0 = new MockThrowable("byteString == null");
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }
}
