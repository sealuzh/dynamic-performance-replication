/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:13:19 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.constraint.Constraint;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.removeComments("alter session");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop indexselect valu";
      String string0 = SQLUtil.innerJoin("alter session", stringArray0, "truncate", "drop indexselect valu", stringArray0);
      assertEquals("truncate as drop indexselect valu on alter session.drop indexselect valu = drop indexselect valu.drop indexselect valu", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CONSTRAINT_NAME";
      stringArray0[1] = " NOT NULL";
      String string0 = SQLUtil.innerJoin("CONSTRAINT_NAME", stringArray0, "alter sessionalter indexcall", "j/8`;(sKLc1gH1", stringArray0);
      assertEquals("alter sessionalter indexcall as j/8`;(sKLc1gH1 on CONSTRAINT_NAME.CONSTRAINT_NAME = j/8`;(sKLc1gH1.CONSTRAINT_NAME and CONSTRAINT_NAME. NOT NULL = j/8`;(sKLc1gH1. NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.substituteMarkers("h;}jh=o", "h;}jh=o", "h;}jh=o");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("3Bwe%qeWRDGoD[", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = ''", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Dependable.CONSTRAINT;
      String string1 = RawStoreFactory.PRE_ALLOCATE_PAGE;
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("derby.storage.pagePerAllocate");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Constraint";
      stringArray0[1] = "derby.storage.pagePerAllocate";
      stringArray0[2] = "h9u&rx";
      stringArray0[3] = "Constraint";
      stringArray0[4] = "Constraint";
      stringArray0[5] = "Constraint";
      stringArray0[6] = "derby.storage.pagePerAllocate";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(}=7?";
      stringArray0[1] = "";
      stringArray0[2] = "y";
      stringArray0[3] = "create unique indexalter materialized viewselect value from information_schema.settings where name=?";
      stringArray0[4] = "alter index";
      stringArray0[5] = "%t";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isDDL("drop in9ex");
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean0 = SQLUtil.isDDL("drop in9ex");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      StringBuilder stringBuilder2 = stringBuilder1.append((-49L));
      SQLUtil.addRequiredCondition("CI", stringBuilder2);
      assertEquals("0.0-49 and CI", stringBuilder2.toString());
      assertEquals("0.0-49 and CI", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("]`K6!W!]");
      SQLUtil.addOptionalCondition("[;tE-xE{|LwY", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("]`K6!W!]", true, (DBTable) null, ".readBlobDb\";");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Dependable.CONSTRAINT;
      String string1 = RawStoreFactory.PRE_ALLOCATE_PAGE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("9Sle~i\"52");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("derby.storage.pagePerAllocate");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.substituteMarkers("9mN}R%", "9mN}R%", "9mN}R%");
      assertEquals("'9mN}R%'", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute# h1eva$r sk'qk", (DBTable) null, 32664, "9mN}R%");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("execute# h1eva$r sk'qk 9MN}R% NULL", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("fS:Q-B1");
      dBCatalog0.getSchema("(>6M'gG<uF|jR");
      String string0 = SQLUtil.substituteMarkers("(>6M'gG<uF|jR", "(>6M'gG<uF|jR", (Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = TypeId.NATIONAL_VARCHAR_NAME;
      MockFileWriter mockFileWriter0 = new MockFileWriter("NATIONAL CHAR VARYING");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("NATIONAL CHAR VARYING");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet", "org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet", (VersionNumber) null);
      defaultDatabase0.getTable("org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-s7#Z-^9i?Fd", (DBTable) null, 5, "-s7#Z-^9i?Fd");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("-S7#Z-^9I?FD", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      List<DBIndex> list0 = new LinkedList<DBIndex>();
      SQLUtil.parseColumnTypeAndSize("F=U[<mk");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.removeComments("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "select value ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "select value ";
      stringArray0[7] = "";
      stringArray0[8] = "gE]2G@T7O";
      SQLUtil.renderColumnListWithTableName("select value ", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "select value ";
      stringArray1[1] = "q=75S%9ZuWfGbmXlSe/";
      stringArray1[2] = "";
      stringArray1[3] = "select value ";
      stringArray1[4] = "";
      stringArray1[5] = "select value ";
      stringArray1[6] = "&M(F>sq<e$%$";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "&M(F>sq<e$%$", stringArray0, "q=75S%9ZuWfGbmXlSe/", "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  ", stringBuilder0.toString());
      
      DBDataType dBDataType0 = DBDataType.getInstance(1268, "/*");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TCeYIr!QBDm#Cq@", defaultDBTable0, dBDataType0, integer0, integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DBColumn dBColumn0 = defaultDBTable0.getColumn("TCeYIr!QBDm#Cq@");
      dBColumnArray0[0] = dBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("TCeYIr!QBDm#Cq@, TCeYIr!QBDm#Cq@, TCeYIr!QBDm#Cq@, TCeYIr!QBDm#Cq@", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("9Gl]m#;vrAey3~;}z", false);
      assertEquals("9Gl ] m # ; vrAey3 ~ ; } z", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "9Gl ] m # ; vrAey3 ~ ; } z", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("mszwY}=OIfxU.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mszwY}=OIfxU.", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "mszwY}=OIfxU.");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Heuristic commit/rollback not supported", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Heuristic commit/rollback not supported MSZWY}=OIFXU.(3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      boolean boolean0 = FBBlob.SEGMENTED;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Random.setNextRandom((-254));
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " L9z-9J", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" L9z-9J\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      String string0 = SQLUtil.normalize("-B]iRj04:!1", false);
      assertEquals("- B ] iRj04 : ! 1", string0);
      
      String string1 = SQLUtil.removeComments("- B ] iRj04 : ! 1");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.normalize("", true);
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("delete^pep m6p}l5;jn", stringBuilder0);
      assertEquals("delete^pep m6p}l5;jn", stringBuilder0.toString());
      
      SQLUtil.typeAndName((DBObject) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      boolean boolean0 = SQLUtil.isDML("A9:O%r|s`&.h3(sA4nq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" or ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = " or ";
      stringArray0[1] = " or ";
      stringArray0[2] = "E3UpL![\"C<j0\"@!";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "E3UpL![\"C<j0\"@!", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("E3UpL![\"C<j0\"@!", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[1];
      stringArray1[0] = " or ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" or ", true, dBTable0, stringArray0, dBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" or \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      DBDataType.getInstance(1268, "/*");
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("mszwY}=OIfxU.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mszwY}=OIfxU.", dBSchema0);
      SQLUtil.substituteMarkers("@MvBb9Zh&", "mszwY}=OIfxU.", "mszwY}=OIfxU.");
      SQLUtil.normalize("@MvBb9Zh&", false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("@MvBb9Zh&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9Gl]m#;vrAey3~;}z";
      stringArray0[1] = null;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "(>6M'gG<uF|jR";
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(>6M'gG<uF|jR", defaultDBTable0, (-280990957), "(>6M'gG<uF|jR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (>6M'gG<uF|jR
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.isQuery("]`K6!W!]");
      SQLUtil.addRequiredCondition("]`K6!W!]", stringBuilder0);
      assertEquals("]`K6!W!]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("(>6*'gG<uF|jR");
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCatalog0.setOwner((CompositeDBObject<?>) null);
      dBCatalog0.getSchemas();
      dBCatalog0.getComponents();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fS:Q-B", defaultDBTable0, (-280990957), "fS:Q-B");
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = File.pathSeparator;
      SQLUtil.isQuery("(>6*'gG<uF|jR");
      defaultDBTable0.isIdentical((DBObject) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(":", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.normalize("9Gl]m#;vrAey3~;}z", true);
      String string0 = Dependable.CONSTRAINT;
      DBCatalog dBCatalog0 = new DBCatalog("9Gl ] m # ; vrAey3 ~ ; } z");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 92);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- 0");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E,,&");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBDataType.getInstance(1186, "select value from i");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      SQLUtil sQLUtil0 = new SQLUtil();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "E,,&", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      String string0 = ";";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("cn*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fS:Q-B1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fS:Q-B1", defaultDBTable0, (-280990957), "fS:Q-B1");
      defaultDBColumn0.setDefaultValue("h;jh=o2dy#]r#b4");
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      DBDataType.getInstance(0, "fS:Q-B1");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("calladd");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      MockFileWriter mockFileWriter0 = new MockFileWriter("zbm_klb");
      DBCatalog dBCatalog0 = new DBCatalog("+UYTudVIuMrT.|`@");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "+UYTudVIuMrT.|`@");
      StringBuilder stringBuilder1 = stringBuilder0.append('7');
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("+UYTudVIuMrT.|`@", stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zbm_klb");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+UYTudVIuMrT.|`@", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2);
      assertEquals("+UYTudVIuMrT.|`@7 and +UYTudVIuMrT.|`@CONSTRAINT +UYTudVIuMrT.|`@ ", stringBuilder2.toString());
      
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      boolean boolean0 = FBBlob.SEGMENTED;
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("markTempTableAsModifiedInUnitOfWork");
      Random.setNextRandom((-604230639));
      SQLUtil.ownerDotComponent(defaultDBTable2);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, (String) null, true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("markTempTableAsModifiedInUnitOfWork", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize(",f,qy6fF$t", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",f,qy6fF$t", defaultDBTable0, (DBDataType) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iIUA<H#5[ePFC(\u0000q7_";
      stringArray0[1] = "iIUA<H#5[ePFC(\u0000q7_";
      stringArray0[2] = "iIUA<H#5[ePFC(\u0000q7_";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "iIUA<H#5[ePFC(\u0000q7_", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      TableContainer tableContainer0 = new TableContainer("CONSTRAINT iIUA<H#5[ePFC(\u0000q7_ ", defaultDBTable0);
      tableContainer0.getTable("iIUA<H#5[ePFC(\u0000q7_");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("mszwY}=OIfxU.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mszwY}=OIfxU.", dBSchema0);
      String string0 = Dependable.TRIGGER;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=3kOr9zP8\"";
      stringArray0[2] = "Trigger";
      stringArray0[3] = "CONSTRAINT ";
      MockFileWriter mockFileWriter0 = new MockFileWriter("CONSTRAINT ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=3kOr9zP8\"");
      defaultDBTable0.getColumnNames();
      String[] stringArray1 = new String[7];
      stringArray1[0] = null;
      stringArray1[1] = "Trigger";
      stringArray1[2] = "m0=&xzA6NW~";
      stringArray1[3] = "CONSTRAINT ";
      stringArray1[4] = "=3kOr9zP8\"";
      stringArray1[5] = "=3kOr9zP8\"";
      stringArray1[6] = "=3kOr9zP8\"";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], false, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('T');
      stringBuilder1.chars();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("T", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/*");
      String[] stringArray0 = new String[1];
      defaultDBTable0.setDoc("/*");
      stringArray0[0] = "drop materialized viewselect value from information_schema.settings where name=?";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/*", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '/*' has no foreign key with the columns (drop materialized viewselect value from information_schema.settings where name=?)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "j", true, stringArray0);
      SQLUtil.normalize("j", false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("j");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j");
      PrintWriter printWriter0 = mockPrintWriter0.printf("j", (Object[]) stringArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, printWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      DBDataType.getInstance(1268, "/*");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isDDL("ALTER TABLE ");
      Integer.toUnsignedLong(1268);
      SQLUtil.isDML("deleteselect * from");
      SQLUtil sQLUtil0 = new SQLUtil();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.getConstraintDescriptorList(true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      SQLUtil.normalize("(>6M'gG<uF|j", true);
      String string0 = Dependable.CONSTRAINT;
      String string1 = "select value from info";
      SQLUtil.isDDL("select value from info");
      SQLUtil.removeComments("Constraint");
      String string2 = null;
      Class<Object> class0 = Object.class;
      TypedPropertyMutator typedPropertyMutator0 = null;
      try {
        typedPropertyMutator0 = new TypedPropertyMutator(class0, "select value from info", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No property 'select value from info' found in class java.lang.Object
         //
         verifyException("org.databene.commons.bean.TypedPropertyMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      StringBuilder stringBuilder0 = new StringBuilder("fSi#- ");
      DBDataType dBDataType0 = DBDataType.getInstance(2169, "fSi#- ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zFbNVH<GMT6gKgg(!U4", defaultDBTable0, dBDataType0, integer2, integer1);
      defaultDBColumn0.toString();
      defaultDBTable0.getIndex("zFbNVH<GMT6gKgg(!U4 : FSI#- (2,2)");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("zFbNVH<GMT6gKgg(!U4 : FSI#- (2,2)", false);
      defaultDBTable0.getIndex("callcallalter matrialized viewselect value from information_schema.settings where name=?");
      // Undeclared exception!
      try { 
        defaultDBTable0.removeIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize(",f,qy6fF$t", false);
      assertEquals(", f, qy6fF $ t", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string1 = SQLUtil.removeComments(", f, qy6fF $ t");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("9Gl]m#;vrAey3~;}z", true);
      String string1 = Dependable.CONSTRAINT;
      DBCatalog dBCatalog0 = new DBCatalog("9Gl ] m # ; vrAey3 ~ ; } z");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).toString();
      dBCatalog0.setOwner(compositeDBObject0);
      SQLUtil.ownerDotComponent(dBCatalog0);
      String string2 = Constraint.CHECK;
      SQLUtil.isDDL("9Gl]m#;vrAey3~;}z");
      String string3 = SQLUtil.removeComments("9Sle~i\"52");
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Boolean boolean0 = new Boolean("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String string0 = File.pathSeparator;
      boolean boolean1 = SQLUtil.isQuery("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileWriter mockFileWriter0 = new MockFileWriter("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?");
      String string1 = SQLUtil.normalize("callselect value from information_schema.settings where name=?", true);
      assertEquals("callselect value from information_schema.settings where name = ?", string1);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("callselect value from information_schema.settings where name=?");
      assertFalse(boolean2.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      boolean boolean0 = FBBlob.SEGMENTED;
      JdbcConnectionPool.create((ConnectionPoolDataSource) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "null";
      dBCatalog0.getSchema("null");
      SQLUtil.isDML("l}\"K@6oWhk");
      SQLUtil.mutatesDataOrStructure("select");
      SQLUtil.mutatesDataOrStructure("truncate");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "s", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesStructure("deletecheck");
      SQLUtil.mutatesDataOrStructure("drop materialized view");
      SQLUtil.mutatesDataOrStructure("lyI<Y}RS%!LcQ{");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "deletecheck");
      StringBuilder stringBuilder1 = stringBuilder0.append('4');
      stringBuilder0.append('|');
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("lyI<Y}RS%!LcQ{", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("hO9Nr5!QOS&4Uh@2tX");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      stringBuilder0.append((CharSequence) "");
      DBCatalog dBCatalog0 = new DBCatalog("n/a");
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      dBCatalog0.addSchema(dBSchema0);
      SQLUtil.ownerDotComponent(dBCatalog0);
      String string0 = Constraint.CHECK;
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.listIterator();
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      SQLUtil sQLUtil0 = new SQLUtil();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("Illegal column type format: ");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBDataType dBDataType0 = DBDataType.getInstance(1268, "/*");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = AliasInfo.ALIAS_TYPE_FUNCTION_AS_STRING;
      Integer integer2 = new Integer(1268);
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2200V", (DBTable) null, dBDataType0, integer4, integer5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil sQLUtil0 = new SQLUtil();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[0], false, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("F");
      defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?", true);
      String string0 = SQLUtil.removeComments("-B]iRj04:!1");
      assertEquals("-B]iRj04:!1", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.normalize("Oy/4d;E1~j2-\"*DLS", false);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil sQLUtil0 = new SQLUtil();
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      SQLUtil.typeAndName(defaultDBTable1);
      SQLUtil sQLUtil1 = new SQLUtil();
      DBDataType.getInstance((-1651), "Oy / 4d ; E1 ~ j2 - \"*DLS\"");
      Integer integer0 = new Integer(39);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fS:Q-B1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fS:Q-B1", defaultDBTable0, (-280990988), "fS:Q-B1");
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column fS:Q-B1", string0);
      
      String string1 = FBConnectionProperties.USER_NAME_PROPERTY;
      Integer integer0 = RawTransaction.ABORT;
      defaultDBColumn0.setFractionDigits(integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("fS:Q-B1", string2);
      
      defaultDBColumn0.isIdentical(defaultDBTable0);
      boolean boolean0 = SQLUtil.isProcedureCall("create unique indexnational char varying");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "column fS:Q-B1";
      stringArray0[1] = "(>6M'gG<uF|j";
      stringArray0[2] = " zBm_KlB/0&j^";
      stringArray0[3] = "create unique indexnational char varying";
      stringArray0[4] = "?";
      stringArray0[5] = "create unique indexnational char varying";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "fS:Q-B1", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string3 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (column fS:Q-B1, (>6M'gG<uF|j,  zBm_KlB/0&j^, create unique indexnational char varying, ?, create unique indexnational char varying)", string3);
      
      defaultDBTable0.getPrimaryKeyConstraint();
      String string4 = SQLUtil.renderColumn(dBColumnArray0[0]);
      assertEquals("fS:Q-B1 FS:Q-B1 NULL", string4);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string5 = SQLUtil.normalize(" zBm_KlB/0&j^", false);
      assertEquals("zBm_KlB / 0 & j ^ ", string5);
      
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string6 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pm BD.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(>6M'gG<uF|jR", defaultDBTable0, (-2925), "AK ~0!i_Lln{P'PpHX%");
      DBDataType.getInstance((-2942), "(>6M'gG<uF|jR");
      SQLUtil.renderColumn(defaultDBColumn0);
      DBSequence dBSequence0 = new DBSequence("&mn\"nM= D,4%Wf", (String) null, "(>6M'gG<uF|jR");
      SQLUtil.typeAndName(dBSequence0);
      Character character0 = Character.valueOf('4');
      SQLUtil.substituteMarkers("&mn\"nM= D,4%Wf", "/*", character0);
      System.setCurrentTimeMillis(0L);
      String string0 = FBConnectionProperties.USE_STANDARD_UDF_PROPERTY;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "&mn\"nM= D,4%Wf");
      String string1 = ">K[t][ -FQxV'(";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("lock mode", (String[]) null, "/*", ">K[t][ -FQxV'(", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized viewselect value from information_schema.settings where name=?");
      String[] stringArray0 = new String[0];
      SQLUtil.join("alter materialized viewselect value from information_schema.settings where name=?", "Ya>K<+p?Y]", stringArray0, "KOI8", "create unique index", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      System.setCurrentTimeMillis(578);
      SQLUtil.normalize("_s!*5\b==$BQ}", false);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType.getInstance(2169, "fSi#- ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q?%ewC\"b5q/p}Wb");
      String string0 = SQLUtil.normalize("q?%ewC\"b5q/p}Wb", false);
      assertEquals("q ? % ewC \"b5q/p}Wb\"", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";|Gv*\"";
      DBDataType dBDataType0 = DBDataType.getInstance(1268, "/*");
      SQLUtil.renderValue("/*");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2200V", (DBTable) null, dBDataType0, integer0, integer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger((String) null);
      defaultDBColumn0.toString();
      Integer.sum(380, 380);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("2200V : /*(1,1)", false);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1081, "# H1EvA$r Sk<'k");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer((-2));
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("# H1EvA$r Sk<'k", defaultDBTable0, dBDataType0, integer2, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("# H1EvA$r Sk<'k", defaultDBTable0, dBDataType0, integer1, integer0);
      defaultDBColumn1.getForeignKeyConstraint();
      defaultDBColumn1.equals(dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, 263, "# H1EvA$r Sk<'k # H1EVA$R SK<'K(-2,1) NULL");
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn2.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";|Gv*\"";
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance(3997, ";|Gv*\"");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("from", defaultDBTable0, dBDataType0, integer1, integer1);
      Integer.sum(6, (-87));
      defaultDBColumn0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("fSi#- ", false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(";|Gv*\"", false, " REFERENCES ", "from");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";|Gv*\"";
      DBDataType.getInstance(1268, "/*");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.renderValue("/*");
      Integer integer2 = new Integer(1268);
      DBDataType dBDataType0 = DBDataType.getInstance(1268, "7(9)6exs@n8~[");
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = new Integer(1268);
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("tSi", (DBTable) null, dBDataType0, integer6, integer5);
      Integer integer7 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("xES95FI", (DBTable) null, dBDataType0, integer1, integer7);
      defaultDBColumn0.equals(integer1);
      SQLUtil.renderColumn(defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(";|Gv*\"", (DBTable) null, 1268, "xES95FI 7(9)6EXS@N8~[(2,2) NULL");
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        defaultDBColumn2.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[2] = stringArray0[1];
      String string0 = SQLUtil.leftJoin("]OT`Z>7n", stringArray0, "create table", "]OT`Z>7n", stringArray0);
      assertEquals("left join create table as ]OT`Z>7n on ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null", string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("ec\"<L.Uf6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "left join create table as ]OT`Z>7n on ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null and ]OT`Z>7n.null = ]OT`Z>7n.null");
      String string1 = SQLUtil.normalize("\"", false);
      assertEquals("\"\"", string1);
      
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil sQLUtil0 = new SQLUtil();
      LinkedList<DBColumn> linkedList1 = new LinkedList<DBColumn>();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select into", false, stringArray0);
      String string2 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"select into\" ", string2);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "]OT`Z>7n";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[2], false, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      String string3 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string3);
      
      SQLUtil.removeComments("create table");
      DBSchema dBSchema0 = new DBSchema("nlX,VhA%ld");
      DBPackage dBPackage0 = new DBPackage("renameselect value from information_schema.settings where name=?", dBSchema0);
      dBPackage0.setObjectType((String) null);
      dBSchema0.getTable("\\Wh6b0Zc4jyQ'?zzp");
      SQLUtil.typeAndName(dBUniqueConstraint0);
      SQLUtil.typeAndName(dBSchema0);
      Boolean boolean1 = SQLUtil.mutatesStructure("\"\"");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = DataDictionary.DATABASE_ID;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("derby.databaseID");
      defaultDBTable0.getPrimaryKeyConstraint();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "01500", true, (String[]) null);
      String string1 = Page.DIAG_NUMOVERFLOWED;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(3, "/&5+0:");
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("01500", defaultDBTable0, dBDataType0, integer1, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      String string0 = DataDictionary.DATABASE_ID;
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil sQLUtil0 = new SQLUtil();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(3, "/&58'A+0:");
      Integer integer2 = RawTransaction.ABORT;
      Integer.toUnsignedString((-809));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("01500", defaultDBTable0, dBDataType0, integer2, integer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select value", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("Time.valueOf(\"");
      assertFalse(boolean0);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \"create table\" FOREIGN KEY () REFERENCES null()", string1);
  }
}
