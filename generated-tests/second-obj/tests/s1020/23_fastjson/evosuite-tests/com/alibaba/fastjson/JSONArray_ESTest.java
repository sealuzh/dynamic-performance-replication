/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:02:34 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.ASMClassLoader;
import java.io.ByteArrayInputStream;
import java.io.ObjectStreamConstants;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.Clock;
import java.time.Duration;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("'F99H\"-[@.4c[{zV", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(347, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(347) > toIndex(-1)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Method> class0 = Method.class;
      List<Method> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-2229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(956);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 956, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-625));
      boolean boolean0 = jSONArray0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1919);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1919, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1953);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(959);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(959);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 959, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MockThaiBuddhistDate> linkedList0 = new LinkedList<MockThaiBuddhistDate>();
      jSONArray0.retainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-4307));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1323);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-1462), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1074);
      MinguoDate minguoDate0 = MockMinguoDate.now();
      jSONArray0.add((Object) minguoDate0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockHijrahDate0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(959);
      jSONArray0.clear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate.now();
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.removeAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(965);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 965, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      jSONArray0.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-2128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      jSONArray0.fluentRemoveAll(jSONArray0);
      jSONArray0.lastIndexOf(jSONArray0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(18, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Method> class0 = Method.class;
      List<Method> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(952, (Object) null);
      jSONArray1.getLongValue(952);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.listIterator();
      jSONArray1.toArray();
      assertEquals(953, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.setComponentType(class0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(81);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 81, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      jSONArray0.parallelStream();
      JSONArray jSONArray2 = new JSONArray();
      JSON.DEFFAULT_DATE_FORMAT = "'F99H\"-[@.4c[{zV";
      Object object0 = new Object();
      jSONArray1.size();
      Object object1 = jSONArray2.getRelatedArray();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(673);
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(96, (Object) null);
      jSONArray1.getLongValue(96);
      jSONArray0.getObject(87, (Type) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'F99H\"-[@.4c[{zV");
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(125, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(943, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray0.getObject(1028, (Type) null);
      jSONArray0.getByteValue(1028);
      jSONArray1.hashCode();
      jSONArray2.fluentAddAll(943, (Collection<?>) jSONArray2);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("'F99H\"-[@.4c[{zV", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(474);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 474, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Integer, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      jSONArray0.containsAll(concurrentHashMap_KeySetView0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      jSONArray0.fluentSet(488, mockThaiBuddhistDate1);
      jSONArray0.getJSONObject(89);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      jSONArray0.add((Object) jSONObject1);
      JSONObject jSONObject2 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(488);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(975, (Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      jSONArray0.getShortValue(975);
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      LinkedHashSet<JSONPath.Operator> linkedHashSet1 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.addAll(linkedHashSet1);
      jSONArray0.getBoolean((byte)126);
      jSONArray0.getBooleanValue(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.defaultLocale = jSONArray1.defaultLocale;
      jSONArray1.getBigInteger((short)0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'F99H\"-[@.4c[{zV");
      ParserConfig parserConfig0 = ParserConfig.global;
      jSONArray0.addAll((int) (byte)126, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : RLIKE
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Integer, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      jSONArray0.containsAll(concurrentHashMap_KeySetView0);
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(concurrentHashMap_KeySetView0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.fluentSet(488, mockThaiBuddhistDate0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.toArray();
      jSONArray0.getIntValue(125);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1174536705);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1174536705, Size: 489
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(885);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(885);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 885, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(965, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.getLongValue(1363);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      jSONArray0.getBooleanValue(1114);
      jSONArray0.getDoubleValue(92);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(16384, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16384, Size: 1932
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.retainAll(jSONArray0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONArray0.toJavaList(class0);
      assertTrue(jSONArray0.isEmpty());
      
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      jSONArray0.isEmpty();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray2 = jSONArray1.fluentAdd(object0);
      jSONArray2.clone();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      List<MockJapaneseDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(18, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = new JSONArray(125);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      int int0 = jSONArray1.lastIndexOf(jSONArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(975, (Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray0.getShortValue(975);
      jSONArray1.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Integer, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      jSONArray0.containsAll(concurrentHashMap_KeySetView0);
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      jSONArray0.fluentRetainAll(concurrentHashMap_KeySetView0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(concurrentHashMap_KeySetView0);
      MockThaiBuddhistDate.now();
      jSONArray1.listIterator();
      jSONArray1.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1115, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) propertyNamingStrategy0);
      assertEquals(2, jSONArray0.size());
      
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(jSONArray1);
      jSONArray4.indexOf(jSONArray0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(975, (Object) null);
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      jSONArray0.getShortValue(975);
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-598), (-598));
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'F99H\"-[@.4c[{zV");
      jSONArray0.DEFAULT_PARSER_FEATURE = (int) (byte)125;
      jSONArray0.getBoolean((byte)125);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray0.getJSONObject(969);
      Clock clock0 = MockClock.systemUTC();
      MockThaiBuddhistDate.now(clock0);
      jSONArray2.addAll(963, (Collection<?>) jSONArray0);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray2.toJavaList(class0);
      jSONArray0.getJSONArray((byte)0);
      MockThaiBuddhistDate.now(clock0);
      jSONArray0.addAll(18, (Collection<?>) linkedHashSet0);
      jSONArray2.getObject(491, (Type) class0);
      // Undeclared exception!
      try { 
        jSONArray1.toArray((JSONObject[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(975, (Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/+rl0aPt");
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      linkedHashSet0.add(jSONPath_Operator0);
      jSONArray0.getShortValue(975);
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NE;
      linkedHashSet0.add(jSONPath_Operator1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'F99H\"-[@.4c[{zV");
      byte[] byteArray0 = new byte[7];
      jSONArray0.getBoolean((byte)125);
      jSONArray1.getJSONArray(0);
      jSONArray0.getBooleanValue(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'F99H\"-[@.4c[{zV");
      jSONArray0.remove((Object) byteArray0);
      jSONArray1.getJSONObject(0);
      Clock clock0 = MockClock.systemDefaultZone();
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig.global = parserConfig0;
      MockThaiBuddhistDate.now(clock0);
      jSONArray1.addAll((int) (short)0, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((short)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : RLIKE
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(96, "]^XnBDyF");
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(96);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]^XnBDyF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentHashMap.newKeySet();
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(968);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 968
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(975, (Object) null);
      Object object0 = new Object();
      jSONArray1.remove(object0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.EQ;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray0.getBooleanValue(949);
      jSONArray1.getBoolean(972);
      jSONArray1.setRelatedArray(jSONPath_Operator0);
      jSONArray0.getJSONObject(972);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(955);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 955, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, mockMinguoDate0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray1.lastIndexOf(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-1), (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(965, (Object) null);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.getLongValue(1363);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_IN;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      Integer integer0 = new Integer(125);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(82, (Object) "java.time.chrono.ThaiBuddhistDate");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h");
      jSONArray2.getFloatValue(0);
      jSONArray2.getBigInteger(92);
      jSONArray1.iterator();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      linkedHashSet0.add(jSONPath_Operator0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(974, mockThaiBuddhistDate0);
      int int0 = 452;
      jSONArray0.getJSONObject(452);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(974);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@63aa7b92
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(975, (Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      linkedHashSet0.add(jSONPath_Operator0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray0.getShortValue(975);
      jSONArray1.remove((Object) linkedHashSet0);
      byte byte0 = ObjectStreamConstants.TC_STRING;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.NOT_IN;
      linkedHashSet0.add(jSONPath_Operator1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)18;
      jSONArray0.DEFAULT_GENERATE_FEATURE = (int) (byte) (-79);
      jSONArray0.DEFAULT_GENERATE_FEATURE = (int) (byte)18;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      Integer integer0 = new Integer(125);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      jSONArray0.lastIndexOf(mockThaiBuddhistDate1);
      JSONArray jSONArray3 = jSONArray0.fluentAdd(18, (Object) mockThaiBuddhistDate1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U5mnw*#O#\"r");
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@5210f8fc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(964);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, mockMinguoDate0);
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray0.fluentRetainAll(jSONArray2);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray2.contains(mockHijrahDate0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(96, "]^XnBDyF");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      jSONArray0.fluentRetainAll(jSONArray1);
      int int0 = Opcodes.LCMP;
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.fluentAdd((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 98
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v QHt{{S['3Me");
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.indexOf(linkedList0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(975, (Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.getShortValue(975);
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      linkedHashSet0.add(jSONPath_Operator0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      jSONArray0.getBoolean((byte)125);
      jSONArray1.getJSONArray(0);
      jSONArray1.getBooleanValue(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'F99H\"-[@.4c[{zV");
      jSONArray0.remove((Object) byteArray0);
      JSONArray jSONArray2 = new JSONArray(975);
      jSONArray0.getBoolean((byte)125);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray2.toJavaList(class0);
      JSONArray jSONArray3 = new JSONArray(125);
      jSONArray3.containsAll(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray2 = jSONArray1.fluentSet(18, mockMinguoDate0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'F99H\"-[@.4c[{zV");
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@467f48fd
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(975, "'F99H\"-[@.4c[{zV");
      jSONArray1.setRelatedArray((Object) null);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.RLIKE;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      linkedHashSet0.add(jSONPath_Operator0);
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(975);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 'F99H\"-[@.4c[{zV
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
