/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:34:09 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "RuRVLff(";
      try { 
        Utility.typeOfSignature("RuRVLff(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuRVLff(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (-440), false);
      assertEquals("0:    dup_x1\n1:    lmul\n2:    astore_3\n3:    if_icmpge\t\t#10377\n6:    daload\n7:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 76;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.classOrInterface(76);
      Utility.getSignature("class");
      Utility.compactClassName("XQ/Kg>s#^cu\"?");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byte byte0 = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)126;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("M\"W3*S^H?jKl7(s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M\"W3*S^H?jKl7(s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.fillup("newarray", 55, false, 'z');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), (int) (byte)71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_3
         // 1:    istore_2
         // 2:    <illegal opcode>
         // 3:    lconst_1
         // 4:    bastore
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)10;
      byteArray0[3] = (byte) (-86);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte) (-22);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 186, 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      Utility.getSignature("CONSTANT_InvokeDynamic");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZpjiRlEws2zDHv;&";
      stringArray0[1] = "gS5Ek:{U0Wk)\"_qE";
      stringArray0[2] = ", npairs = ";
      stringArray0[3] = "CONSTANT_InvokeDynamic";
      stringArray0[4] = "newarray";
      stringArray0[5] = "CONSTANT_InvokeDynamic";
      stringArray0[6] = "'";
      stringArray0[7] = "(L[[;T7#6";
      stringArray0[8] = "(L[[;T7#6";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("(L[[;T7#6", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[;T7#6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-97);
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[7] = (byte)19;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-84);
      Constant[] constantArray0 = new Constant[16];
      ConstantInteger constantInteger0 = new ConstantInteger(22);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString(472);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte) (-1), false);
      assertEquals("7:    ldc_w\t\t22\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byte byte0 = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-19);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2204, 2614, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.compactClassName("x%6^oD");
      Utility.convertString("x%6^oD");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x%6^oD");
      Utility.getSignature("impdep1");
      Utility.isSet((-1070), (-1070));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "impdep1";
      objectArray0[1] = (Object) "x%6^o\\D";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("P*lrL2q>[G_(Puhq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P*lrL2q>[G_(Puhq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "CONSTANT_String";
      Utility.searchOpcode("CONSTANT_String");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)94;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_String");
      byteArray0[0] = (byte)94;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1), false);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("CONSTANT_String", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_String
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.searchOpcode("class");
      try { 
        Utility.typeOfSignature("HTl,.a@1I['5:Hc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HTl,.a@1I['5:Hc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.compactClassName("L-B{5*JeAt$e", true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "L-B{5*JeAt$e";
      objectArray0[1] = (Object) "L-B{5*JeAt$e";
      objectArray0[2] = (Object) "L-B{5*JeAt$e";
      objectArray0[3] = (Object) "L-B{5*JeAt$e";
      objectArray0[4] = (Object) "L-B{5*JeAt$e";
      objectArray0[5] = (Object) "L-B{5*JeAt$e";
      objectArray0[6] = (Object) "L-B{5*JeAt$e";
      objectArray0[7] = (Object) "L-B{5*JeAt$e";
      objectArray0[8] = (Object) "L-B{5*JeAt$e";
      Utility.printArray(objectArray0, true);
      Utility.getSignature("L-B{5*JeAt$e");
      Utility.searchOpcode("L-B{5*JeAt$e");
      // Undeclared exception!
      try { 
        Utility.decode("LL-B{5*JeAt$e;", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@360bda94, java.lang.Object@7c28741d, java.lang.Object@4893f571");
      Utility.compactClassName("java.lang.Object@360bda94, java.lang.Object@7c28741d, java.lang.Object@4893f571");
      Utility.clearBit((-230), 494);
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 101
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isSet((-2), (-2));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      Utility.format(16, (-2), true, '<');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)98, (-1921));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.printArray((Object[]) null);
      int int0 = new Integer(2108);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-22);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-949), 74);
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("0:    pop\n1:    dload_3\n2:    sipush\t\t12195\n5:    <illegal opcode>\n");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0:    pop\n1:    dload_3\n2:    sipush\t\t12195\n5:    <illegal opcode>\n";
      stringArray0[1] = ", npairs = ";
      stringArray0[2] = "W$v$R$_$a3$ea";
      stringArray0[3] = ", npairs = ";
      stringArray0[4] = null;
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(", npairs = ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.compactClassName(")sijEPpY%R/d");
      boolean boolean0 = Utility.isJavaIdentifierPart('Y');
      assertTrue(boolean0);
      
      String string1 = Utility.replace(")sijEPpY%R/d", ")sijEPpY%R/d", ")sijEPpY%R.d");
      assertTrue(string1.equals((Object)string0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ")sijEPpY%R/d";
      objectArray0[2] = (Object) ")sijEPpY%R.d";
      objectArray0[3] = (Object) ")sijEPpY%R.d";
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifge\t\t#14577", string2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2104), (-76));
      assertEquals("0:    wide\t(wide)\n1:    breakpoint\n2:    ireturn\n3:    d2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "From\tTo\tHandler\tType\n";
      stringArray0[1] = "From\tTo\tHandler\tType\n";
      Utility.methodTypeToSignature("From\tTo\tHandler\tType\n", stringArray0);
      Utility.accessToString(26);
      Utility.methodSignatureToString("(LFrom;LFrom;)LFrom;", "From\tTo\tHandler\tType\n", "From\tTo\tHandler\tType\n");
      Utility.convertString("From\tTo\tHandler\tType\n");
      Utility.clearBit(97, 4215);
      Utility.searchOpcode("\"`>LbXI <@nd0uz%RV/");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("e?8/\"#UA-Q`~", "From\tTo\tHandler\tType\n", "(LFrom;LFrom;)LFrom;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e?8/\"#UA-Q`~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)29;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-671), (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "[ SpZpN:";
      Utility.typeOfSignature("[ SpZpN:");
      Utility.decode("[ SpZpN:", false);
      Utility.isJavaIdentifierPart('C');
      Utility.typeOfSignature("[ SpZpN:");
      String string1 = "org.apache.bcel.classfile.Utility$1";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.accessToString(1230, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.format(698, (-1606), true, 'r');
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 698, (-1606));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "static");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-112);
      byte byte1 = (byte)124;
      byteArray0[4] = (byte)124;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, (int) (byte)124, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("D4#r:v0$ ]Ro+bCsl", true);
      assertEquals("double", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      Constant constant0 = constantString0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("return", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " 5PW=4+w|2|'$");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.decode(" 5PW=4+w|2|'$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "istore_0");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString((-1320), true);
      Utility.isJavaIdentifierPart('e');
      Utility.methodSignatureReturnType("TDSUROT1;+Y-UYN");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)67;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" (");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B)Cyj)U]E'#U{<pF 7");
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "ifge", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) " (";
      objectArray1[2] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (-1065));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("invokeinterface", stringArray0);
      String string0 = Utility.compactClassName("invokeinterface");
      assertEquals("invokeinterface", string0);
      
      Utility.getSignature("float");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("int");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals("()F", string1);
      
      String string2 = Utility.methodSignatureToString("()F", "invokeinterface", "aload_3");
      assertEquals("aload_3 float invokeinterface()", string2);
      
      Utility.methodSignatureReturnType("F");
      String string3 = Utility.fillup("VbiAUs<J@I)6gkD3I6C", (byte)0, true, '8');
      assertEquals("VbiAUs<J@I)6gkD3I6C", string3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "S!A&;Ev7*";
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("S!A&;Ev7*", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byte byte0 = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode(")8|S02&/.xQM$5>88", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2551, (int) (byte)1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)15;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-114));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, (int) (byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24591. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte) (-104));
      constantArray0[0] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-30);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, 1259);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16280. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.isSet(199, 199);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)120;
      objectArray0[1] = (Object) (byte)98;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte) (-91);
      objectArray0[4] = (Object) (byte) (-91);
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) byteSequence0;
      objectArray0[7] = (Object) (byte) (-69);
      objectArray0[8] = (Object) "aload_1";
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.convertString("<");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "<";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) "<";
      objectArray0[4] = (Object) "<";
      objectArray0[5] = (Object) "<";
      objectArray0[6] = (Object) "<";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.decode("<", false);
      Utility.getSignature("{<, java.lang.Object@6b28a818, <, <, <, <, <}");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 243, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 220, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet((-371), (-771));
      String string0 = "org.apache.bcel.classfile.JavaClass$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.JavaClass$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)44;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)35, (-2253));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y5l>R OGzp,DXCXe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y5l>R OGzp,DXCXe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-14);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)35;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2192), (int) (byte)35);
      try { 
        Utility.methodSignatureReturnType("0:    ifnull\t\t#-3426\n3:    aload_0\n4:    fload_1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    ifnull\t\t#-3426
         // 3:    aload_0
         // 4:    fload_1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2291), 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)58, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore\t\t%18
         // 2:    istore_3
         // 3:    impdep2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("Code", "Code", "Code");
      Utility.accessToString(1366);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), 1366);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dastore
         // 1:    d2i
         // 2:    monitorexit
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-86));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1617, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ishl");
      try { 
        Utility.typeOfSignature("#T9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #T9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("\"3,<;=e <^Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"3,<;=e <^Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-121);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(207);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 207, (int) (byte) (-33));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 34703. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.convertString("R:5>G>");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("R:5>G>");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(250, (byte) (-20));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 54508. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.compactClassName("java.lang.IjjxR\",)q~[G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      Utility.accessToString(59, false);
      Utility.convertString("r(],7QKC\"kF+");
      Utility.compactClassName("multianewarray", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)39;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "K*igm_U:";
      try { 
        Utility.typeOfSignature("K*igm_U:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K*igm_U:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 164;
      Utility.fillup("Warning: Padding byte != 0 in ", 164, false, 'g');
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ". BrxTBq.Gf`Rwey^^!");
      String string0 = "/b(|hWzm";
      try { 
        Utility.typeOfSignature("/b(|hWzm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /b(|hWzm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.searchOpcode("!3 {sA}");
      Utility.accessToString((int) (short) (-1), true);
      try { 
        Utility.typeOfSignature("!3 {sA}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3 {sA}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "w\\qu`f``8>m";
      boolean boolean0 = false;
      Utility.compactClassName("wqu`f``8>m", "wqu`f``8>m", false);
      String string1 = ".JJo<Vg";
      try { 
        Utility.typeOfSignature(".JJo<Vg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .JJo<Vg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "9V0H*%zz0|'+";
      try { 
        Utility.typeOfSignature("9V0H*%zz0|'+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9V0H*%zz0|'+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.typeOfSignature("V1fAt6wsTe27o");
      Utility.signatureToString("V1fAt6wsTe27o");
      Utility.replace("V1fAt6wsTe27o", "void", "void");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.replace("M 1s*RH ,$Z[ f]8Jb", "M 1s*RH ,$Z[ f]8Jb", "M 1s*RH ,$Z[ f]8Jb");
      Utility.getSignature("M 1s*RH ,$Z[ f]8Jb");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("M 1s*RH ,$Z[ f]8Jb", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M 1s*RH ,$Z[ f]8Jb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-22), (int) (byte) (-65));
      assertEquals("0:    dreturn\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    idiv\n4:    athrow\n", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.HiddenFileFilter", false);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4242, 256);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4242, (-533));
      constantArray0[2] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[3] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 114, (-69), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      String string0 = "L<B*V:fwx;V";
      try { 
        Utility.methodSignatureReturnType("L<B*V:fwx;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<B*V:fwx;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-72);
      byteArray0[0] = (byte) (-72);
      byte byte1 = (byte)20;
      byteArray0[1] = (byte)20;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.compactClassName("?Q[g(;J*w2SE^&wC^");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-386), (-3188), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    d2l
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)48;
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(181, (byte)86);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)35);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte)127, 95);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantClass constantClass0 = new ConstantClass((byte)48);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[4] = (Constant) constantClass1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 87, 2227);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.compactClassName("&<2GB.r`>$vh!", "&<2GB.r`>$vh!", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isJavaIdentifierPart('c');
      try { 
        Utility.typeOfSignature("&<2GB.r`>$vh!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &<2GB.r`>$vh!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2, 2);
      assertFalse(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The list o");
      Utility.compactClassName("6CJ~vtAs~", true);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-122);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1192), (int) (byte)67);
      assertEquals("0:    aconst_null\n1:    fstore_0\n2:    i2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "!0r6b.yX){y>3Ro";
      try { 
        Utility.typeOfSignature("!0r6b.yX){y>3Ro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0r6b.yX){y>3Ro
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)122;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), 15, true);
      assertEquals("0:    <illegal opcode>\n1:    bipush\t\t-90\n3:    fcmpg\n4:    ishr\n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte) (-22);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 186, 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.accessToString(171);
      assertEquals("public private static synchronized transient", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(81);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_1", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-81);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3084, 253);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.compactClassName("\"G", true);
      Utility.isSet(40, 6);
      Utility.typeOfSignature("**L9mc r=d");
      String string0 = "aWF@_\\>|";
      // Undeclared exception!
      try { 
        Utility.signatureToString("aWF@_>|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aWF@_>|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.classOrInterface(173);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2434), 1192, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i2b";
      stringArray0[1] = "i2b";
      stringArray0[2] = "i2b";
      stringArray0[3] = "i2b";
      stringArray0[4] = "i2b";
      stringArray0[5] = "i2b";
      stringArray0[6] = "i2b";
      Utility.methodTypeToSignature("i2b", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("i2b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(103);
      Utility.isJavaIdentifierPart('w');
      Utility.setBit(103, 103);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-101);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)86, (byte)85);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)78, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.searchOpcode("\"");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 58448. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = Utility.decode("p", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{}");
      byteSequence0.mark(46);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2618), (-2618));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantClass constantClass0 = new ConstantClass(25);
      constantArray0[1] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger((-2618));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertEquals("irem", string1);
      
      String string2 = Utility.compactClassName("a", "irem", true);
      assertEquals("a", string2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t\u0005S'>");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)42;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, (-389));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kDtD";
      Utility.methodTypeToSignature("kDtD", stringArray0);
      Utility.methodSignatureToString("(LkDtD;)LkDtD;", "kDtD", "kDtD", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.format((-4991), 4611, true, 'X');
      Utility.printArray((Object[]) stringArray0, false);
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-4991), (-4991), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^Gv@s9i)DCYcDMn@U&");
      String string0 = "+ /wM";
      try { 
        Utility.typeOfSignature("+ /wM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  /wM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      short short0 = Utility.searchOpcode("K@");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1), false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "K@";
      objectArray0[2] = (Object) "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0);
      int int0 = Utility.clearBit((short) (-1), (short) (-1));
      assertEquals(Integer.MAX_VALUE, int0);
      
      String string1 = Utility.compactClassName("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", ")ZDH;!K{AZ{m|H`K", true);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)96;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), (int) (byte)96, false);
      assertEquals("0:    ret\t\t%97\n2:    astore_0\n3:    iadd\n", string2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.getSignature("? super ");
      assertEquals("L?;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)29;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2805, 110);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-547), 264, false);
      assertEquals("0:    dstore_1\n1:    iload_3\n2:    lushr\n3:    if_icmple\t\t#-1332\n6:    dsub\n7:    lconst_0\n8:    iload_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Bogus");
      assertEquals((byte)8, byte0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Bogus";
      stringArray0[1] = "Bogus";
      stringArray0[2] = "Bogus";
      stringArray0[3] = "invokespecial";
      stringArray0[4] = "Bogus";
      stringArray0[5] = "Bogus";
      stringArray0[6] = "Bogus";
      String string0 = Utility.methodTypeToSignature("Bogus", stringArray0);
      assertEquals("(LBogus;LBogus;LBogus;Linvokespecial;LBogus;LBogus;LBogus;)LBogus;", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "5:g\"H>";
      try { 
        Utility.typeOfSignature("5:g\"H>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5:g\"H>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "Q=gU9q3}^=fr'V'\"|[x";
      try { 
        Utility.methodSignatureReturnType("Q=gU9q3}^=fr'V'\"|[x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q=gU9q3}^=fr'V'\"|[x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "static");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)90;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-11);
      byte byte0 = (byte)115;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-29);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('v');
      Utility.accessToString((int) (byte) (-29), false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)85;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "78H3iRWW2<1I^_A7");
      byteArray0[5] = (byte) (-18);
      byte byte0 = (byte)55;
      byteArray0[6] = (byte)55;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 77, (-95), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("The offset cannot be negative", "SKZe", "SKZe");
      Utility.convertString(">:HaS/KV4ltTnU");
      Utility.typeOfSignature("The offset cannot be negative");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(">:HaS/KV4ltTnU", stringArray0);
      Utility.fillup("()L>:HaS/KV4ltTnU;", (byte)40, false, '%');
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.classOrInterface(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-76);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)34, 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "24lekQ7nA|d8St O");
      String string0 = "N_*Y[wfZ8.|C2O";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("N_*Y[wfZ8.|C2O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N_*Y[wfZ8.|C2O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-2295);
      Utility.classOrInterface((-2295));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.typeOfSignature("Io_Sn8$4BhP)");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)98;
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) "Io_Sn8$4BhP)";
      objectArray0[3] = (Object) (byte)98;
      objectArray0[4] = (Object) (byte)98;
      objectArray0[5] = (Object) "Io_Sn8$4BhP)";
      objectArray0[6] = (Object) "interface";
      objectArray0[7] = (Object) "interface";
      objectArray0[8] = (Object) "interface";
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.methodSignatureArgumentTypes("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F^M{t<n/si[");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "GiA,DJE%Q~>z'N";
      try { 
        Utility.typeOfSignature("GiA,DJE%Q~>z'N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GiA,DJE%Q~>z'N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.replace("&k[~YTOJ=PE7gyi@`", "&k[~YTOJ=PE7gyi@`", "4dEsqK09hqW`v");
      Utility.convertString("_ZbtTP");
      Utility.fillup("0ANiQ?q3?-Dzn)+4s", (-1903), true, '8');
      Utility.accessToString((-1903), false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "4dEsqK09hqW`v";
      objectArray0[1] = (Object) "0ANiQ?q3?-Dzn)+4s";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "4dEsqK09hqW`v";
      objectArray0[4] = (Object) "0ANiQ?q3?-Dzn)+4s";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = Utility.decode("6Q_!jKMf%zbSk8-\"@U", false);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(246, (-1903));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantString constantString2 = new ConstantString(171);
      constantArray0[2] = (Constant) constantString2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1987, 171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)102;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[5] = (byte)91;
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('v');
      Utility.accessToString((int) (byte) (-29), true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)115, (int) (byte)115, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "'rX[5?/f_1{RlL)=";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'rX[5?/f_1{RlL)=");
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)34;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 1701;
      Utility.accessToString(1701);
      Utility.replace("p;+}", "4Gf.-w_Vf8v&5V(Yx", "%#9:");
      MockFile mockFile0 = new MockFile("<illegal opcode>", "\t\t");
      File file0 = MockFile.createTempFile("<illegal opcode>", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "\t\t";
      objectArray0[2] = (Object) "4Gf.-w_Vf8v&5V(Yx";
      objectArray0[3] = (Object) "public protected synchronized transient interface abstract";
      objectArray0[4] = (Object) "public protected synchronized transient interface abstract";
      PrintStream printStream0 = mockPrintStream0.format("F_@<xI", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("'Gi$G", "ifnull", true);
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SAME_LOCALS_1_STACK");
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)48;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.classOrInterface(57);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmplt\t\t#27367", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "7{^gw!cO~/N13gdtPE";
      try { 
        Utility.typeOfSignature("7{^gw!cO~/N13gdtPE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7{^gw!cO~/N13gdtPE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byte byte0 = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-28);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2827, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.compactClassName("java.lang.IjjxR\",)q~[G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(59, false);
      Utility.convertString("r(],7QKC\"kF+");
      Utility.compactClassName("multianewarray", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 112, (int) (byte)39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-63);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.format(2968, 0, false, 't');
      Utility.clearBit(0, (-1153));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "2968";
      objectArray0[1] = (Object) "2968";
      objectArray0[2] = (Object) "2968";
      objectArray0[3] = (Object) "2968";
      Utility.printArray(objectArray0);
      Utility.accessToString(0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, 86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.accessToString(191);
      int int0 = (-6272);
      Utility.classOrInterface((-6272));
      Utility.compactClassName("lushr", ">g%FBn7v:8ktD,", false);
      Utility.format(2712, 191, true, 'W');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      byte[] byteArray1 = new byte[1];
      Utility.equals(byteArray0, byteArray1);
      Utility.convertString("tableswitch");
      Utility.isJavaIdentifierPart(';');
      Utility.codeToString(byteArray1, (ConstantPool) null, (-6272), (-6272));
      Utility.searchOpcode("0:    nop\n");
      Utility.searchOpcode("interface");
      Utility.setBit((byte)29, 112);
      Utility.signatureToString("JKiFI0>l[h\"");
      Utility.classOrInterface(65565);
      try { 
        Utility.typeOfSignature("lushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lushr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.accessToString(766, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)20);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-3547), 34);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1582, 91);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5147. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "";
      Utility.getSignature("");
      String string1 = "xQ*$\"HVp2C$,'~S@b";
      try { 
        Utility.decode("xQ*$\"HVp2C$,'~S@b", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 2137;
      Utility.accessToString(2137, false);
      String string0 = "XDst}dT`2.rU`y:";
      try { 
        Utility.typeOfSignature("XDst}dT`2.rU`y:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XDst}dT`2.rU`y:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XT,Qp!1=g@#V");
      boolean boolean0 = true;
      Utility.accessToString(51, true);
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "int";
      Utility.convertString("int");
      String string1 = "1FE_$o";
      try { 
        Utility.typeOfSignature("1FE_$o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1FE_$o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = ";eKWfq<(JBV5j-K";
      try { 
        Utility.typeOfSignature(";eKWfq<(JBV5j-K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;eKWfq<(JBV5j-K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.isJavaIdentifierPart('|');
      try { 
        Utility.typeOfSignature("%&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "^:2\"EFr";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^:2\"EFr");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)24;
      Utility.toHexString(byteArray0);
      Utility.accessToString(2927);
      try { 
        Utility.methodSignatureReturnType("H+9`#ut_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H+9`#ut_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Utility.replace("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertEquals("org.apache.commons.io.filefilter.DirectoryFileFilter", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "org.apache.commons.io.filefilter.DirectoryFileFilter";
      objectArray0[1] = (Object) "org.apache.commons.io.filefilter.DirectoryFileFilter";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "org.apache.commons.io.filefilter.DirectoryFileFilter";
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)40);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger1 = new ConstantInteger(1928);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("areturn", string2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-84);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(22);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString(472);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40620. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1835), (byte)89);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-78), 18);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantFieldref0.setClassIndex(85);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.replace("[", "[", "[");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 859, (int) (byte) (-91), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 554, (int) (byte)73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "TMjQ,Iyr";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("TMjQ,Iyr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TMjQ,Iyr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace(")qKxuCP5Zn#'h/M=Id", ")qKxuCP5Zn#'h/M=Id", ")qKxuCP5Zn#'h/M=Id");
      try { 
        Utility.typeOfSignature(")qKxuCP5Zn#'h/M=Id");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )qKxuCP5Zn#'h/M=Id
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "D!$IK83+)&:WI;9uO^";
      Utility.typeOfSignature("D!$IK83+)&:WI;9uO^");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte)116;
      byteArray0[1] = (byte)116;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)7;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      Utility.equals(byteArray0, byteArray0);
      Utility.signatureToString("D!$IK83+)&:WI;9uO^");
      Utility.getSignature("double");
      try { 
        Utility.methodSignatureArgumentTypes("D", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.classOrInterface((-1068));
      Utility.isJavaIdentifierPart('/');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1123, (int) (byte)72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M0ORHDHT<GgZiQ4th");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M0ORHDHT<GgZiQ4th'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("invokeinterface", stringArray0);
      String string0 = Utility.compactClassName("invokeinterface");
      assertEquals("invokeinterface", string0);
      
      Utility.getSignature("float");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("int");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("wide\t(wide)", string1);
      
      String string2 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals("()F", string2);
      
      String string3 = Utility.methodSignatureToString("()F", "invokeinterface", "wide\t(wide)");
      assertEquals("wide\t(wide) float invokeinterface()", string3);
      
      String string4 = Utility.methodSignatureReturnType("F");
      assertEquals("float", string4);
      
      String string5 = Utility.fillup("VbiAUs<J@I)6gkD3I6C", (byte)45, true, '8');
      assertEquals("VbiAUs<J@I)6gkD3I6C88888888888888888888888888", string5);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)74;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ugc{*U,Y");
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "U[U[OYxx~yfr8<$TGOD";
      try { 
        Utility.typeOfSignature("U[U[OYxx~yfr8<$TGOD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U[U[OYxx~yfr8<$TGOD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("goto\t\t#31242", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.clearBit((-1076), (-1076));
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, (int) (byte)38, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)87;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (-147));
      boolean boolean0 = false;
      Utility.printArray((Object[]) constantArray0, false, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("0:    fneg\n1:    istore_0\n2:    fcmpl\n3:    lsub\n4:    pop\n5:    pop\n", "zH$.LBAE{vI|D");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // zH$.LBAE{vI|D
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-12);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)57;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(360L);
      constantArray0[0] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, (int) (byte) (-20), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)2;
      byteArray0[4] = (byte) (-56);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ej'U0e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ej'U0e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray((Object[]) null);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, 344);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 207, (int) (byte)109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.isSet(8192, 256);
      Utility.format(8192, 256, false, 'F');
      Utility.replace
      Utility.accessToString(8192);
      Utility.compactClassName("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8192");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lp+1}|&C}AyZxgckF'@R;V");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)122, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = Utility.decode("java.lang.Object@4a8757c, java.lang.Object@2635978b, java.lang.Object@1eb15e7b, null, java.lang.Object@8550ec5, java.lang.Object@4f918926, java.lang.Object@4592c690", false);
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(1447, 1447);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantClass constantClass0 = new ConstantClass(1447);
      constantArray0[5] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[6] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1447, (-1584), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.decode("&Ng%Q$58pamK>P}Tc/", false);
      Utility.getSignature("&Ng%Q$58pamK>P}Tc/");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">", "goto_w", "goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-86));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1617, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantPool constantPool1 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-88);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 413, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-1);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString(472);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)46;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte)65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = Utility.setBit(2506, 9);
      assertEquals(3018, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(1186);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("SNI'#)fAPScF#!", 97, false, '|');
      Utility.typeOfSignature("SNI'#)fAPScF#!");
      Utility.getSignature("getstatic");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lshl", "SNI'#)fAPScF#!", "[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.compactClassName("monitorenter", "monitorenter", false);
      Utility.compactClassName("ret");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-44);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1419, (int) (byte) (-44));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "ZA$$";
      Utility.typeOfSignature("ZA$$");
      Utility.fillup("ZA$$", 125, true, 'o');
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)45;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, (int) (byte) (-97), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-110);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-110);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("UPf*4k>jlrJ,L", "UPf*4k>jlrJ,L", false);
      Utility.signatureToString("Dont call getValueShort() on a non SHORT ElementValue");
      Utility.accessToString((int) (byte) (-110), false);
      try { 
        Utility.methodSignatureReturnType("UPf*4k>jlrJ,L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UPf*4k>jlrJ,L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.accessToString(129);
      String string0 = "4}wmho'eVp";
      boolean boolean0 = false;
      Utility.compactClassName("4}wmho'eVp", false);
      try { 
        Utility.typeOfSignature("4}wmho'eVp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4}wmho'eVp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.format(170, 1019, true, '~');
      String string1 = "`@L;BS/%qtLwE";
      String string2 = "i:|eab";
      Utility.replace(string0, "`@L;BS/%qtLwE", "i:|eab");
      Utility.searchOpcode("`@L;BS/%qtLwE");
      Utility.fillup("i:|eab", 1019, true, '~');
      Utility.isSet(1019, (-2146));
      try { 
        Utility.typeOfSignature("Expected class `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Expected class `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("l2d", false);
      String string0 = "'r.Oiue*=]avWp";
      try { 
        Utility.typeOfSignature("'r.Oiue*=]avWp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'r.Oiue*=]avWp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-119);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2033), 253);
      assertEquals("0:    lsub\n1:    dneg\n2:    l2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)114;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("_$A$a5r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _$A$a5r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("\t\t%");
      Utility.searchOpcode("]A[ K6RK`e0G");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Utility.fillup("long", 1218, true, 'g');
      Utility.setBit(1, 1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) "long";
      objectArray0[3] = (Object) string0;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-125);
      byteArray0[0] = (byte) (-125);
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("Ka", (byte) (-125), false, '+');
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ka", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ka'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 41;
      Utility.accessToString(41, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-97);
      byte byte0 = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-86);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte)67, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "RtY*O}&", "long");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('|');
      String string0 = "Invalid type: ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.static", "Invalid type: ", "java.lang.static", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.typeOfSignature("C^?8OK");
      String string0 = "jD:Y<E!X'\\I";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("jD:Y<E!X'I", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jD:Y<E!X'I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "P>Jj!y^aw]+m}6^A\"";
      // Undeclared exception!
      try { 
        Utility.signatureToString("P>Jj!y^aw]+m}6^A\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P>Jj!y^aw]+m}6^A\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (-1502), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("CONSTANT_Class", true);
      String string0 = "9<svU";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CONSTANT_Class", "9<svU", "9<svU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_Class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = (-1879048189);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((-1879048189), 36, true, 'J');
      try { 
        Utility.typeOfSignature("-1879048189JJJJJJJJJJJJJJJJJJJJJJJJJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1879048189JJJJJJJJJJJJJJJJJJJJJJJJJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.convertString("|+u6+3");
      Utility.compactClassName("OP");
      Utility.isJavaIdentifierPart('/');
      try { 
        Utility.typeOfSignature(":>.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :>.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "8TN%U^";
      try { 
        Utility.typeOfSignature("8TN%U^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8TN%U^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3/h_WKi&s9H/>PT'");
      String[] stringArray0 = new String[5];
      String string0 = " ";
      stringArray0[0] = " ";
      stringArray0[1] = "3/h_WKi&s9H/>PT'";
      stringArray0[2] = "3/h_WKi&s9H/>PT'";
      stringArray0[3] = "3/h_WKi&s9H/>PT'";
      stringArray0[4] = "3/h_WKi&s9H/>PT'";
      Utility.methodTypeToSignature("3/h_WKi&s9H/>PT'", stringArray0);
      Utility.accessToString(3, false);
      int int0 = (-3750);
      boolean boolean0 = true;
      Utility.accessToString((-3750), true);
      Utility.getSignature("areturn");
      int int1 = 6;
      MockFile mockFile0 = new MockFile("areturn", "areturn");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"V\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "A\\W";
      try { 
        Utility.typeOfSignature("AW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "long";
      stringArray0[1] = "{\"java.lang.Object@2a0f4e43\"}";
      stringArray0[2] = "i";
      stringArray0[3] = "i";
      stringArray0[4] = "{\"java.lang.Object@2a0f4e43\"}";
      stringArray0[5] = "i";
      stringArray0[6] = "i";
      stringArray0[7] = "{\"java.lang.Object@2a0f4e43\"}";
      Utility.methodTypeToSignature("i", stringArray0);
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{\"java.lang.Object@2a0f4e43\"}", "{\"java.lang.Object@2a0f4e43\"}", "4S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@2a0f4e43\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "RuntimeInvisibleParameterAnnotations";
      stringArray0[7] = "void";
      stringArray0[8] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "Or9k'2nIvD";
      try { 
        Utility.methodSignatureReturnType("Or9k'2nIvD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Or9k'2nIvD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.readDouble();
      ConstantClass constantClass0 = new ConstantClass(89);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureReturnType("boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.convertString("Lmonitorenter;V");
      Utility.typeOfSignature("Lmonitorenter;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("void", "Lmonitorenter;V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Lmonitorenter;V\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "?pglO#U)vQc4i0";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("?pglO#U)vQc4i0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?pglO#U)vQc4i0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.setBit(6, 6);
      try { 
        Utility.typeOfSignature("Ooops, what primitive type is ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ooops, what primitive type is 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = Utility.clearBit((-1076), 1818);
      assertEquals((-67109940), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)14;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (int) (byte)38, true);
      assertEquals("0:    if_icmpeq\t\t#-19418\n3:    wide\t(wide)\n4:    dconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.read();
      ConstantClass constantClass0 = new ConstantClass(89);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("dstore_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "Jv/G!NaIa<YAI";
      Utility.typeOfSignature("Jv/G!NaIa<YAI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("LM#[0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LM#[0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "L!R8JFu[v^aL@";
      boolean boolean0 = false;
      Utility.decode("L!R8JFu[v^aL@", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L!R8JFu[v^aL@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^");
      int int0 = 116;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(116, (-2658));
      Utility.signatureToString("Zfcyt;_ M");
      try { 
        Utility.typeOfMethodSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Go81y32PE";
      try { 
        Utility.methodSignatureReturnType("Go81y32PE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Go81y32PE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "(-!*0IiMsX>e(";
      try { 
        Utility.typeOfMethodSignature("(-!*0IiMsX>e(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (-!*0IiMsX>e(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, (-4662), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.clearBit(2108, 1293);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-949), 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_3
         // 1:    dload_3
         // 2:    iconst_3
         // 3:    laload
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-67);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(48);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("{java.lang.Object@4f8518e2, java.lang.Object@618808e8, java.lang.Object@6b1a807d, java.lang.Object@d8b4566, java.lang.Object@6a2e0e3d, java.lang.Object@4bc094d8, java.lang.Object@74e6fcb5, java.lang.Object@2311373a, java.lang.Object@39d49a83}");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(84, 238);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1327), 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.accessToString(191);
      Utility.classOrInterface((-6272));
      Utility.compactClassName("lushr", ">g%FBn7v:8ktD,", false);
      Utility.format(2712, 191, true, 'W');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)29;
      Utility.equals(byteArray0, byteArray1);
      Utility.convertString("tableswitch");
      Utility.isJavaIdentifierPart(';');
      Utility.codeToString(byteArray1, (ConstantPool) null, (-6272), (-6272));
      Utility.searchOpcode("0:    iload_3\n");
      Utility.searchOpcode("interface");
      Utility.setBit((byte)29, 112);
      Utility.signatureToString("JKiFI0>l[h\"");
      Utility.classOrInterface(65565);
      try { 
        Utility.typeOfSignature("lushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lushr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";6=-xuvPf[Lm\"{6F");
      try { 
        Utility.typeOfSignature("@8}_qsXSUXVNz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @8}_qsXSUXVNz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H=|#y@=Wh-#X@cD_,");
      Utility.compactClassName("goto_w", "", false);
      Object[] objectArray0 = null;
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      String string0 = "N#crG3`([ko:B^hAP";
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("N#crG3`([ko:B^hAP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N#crG3`([ko:B^hAP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "java.lang.*,?#6na";
      Utility.methodTypeToSignature("java.lang.*,?#6na", (String[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)41, (byte)8);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte)41);
      constantArray0[2] = (Constant) constantClass0;
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 41
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "(string_index = ";
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(string_index = ", "", "<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `string_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('1');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-79);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("R$F$L$b1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R$F$L$b1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)36;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('?');
      Utility.printArray(objectArray0, false);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "'))Y`Yroz9y0(<";
      try { 
        Utility.methodSignatureReturnType("'))Y`Yroz9y0(<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`Yroz9y0(<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "hj^(\\NPq\\$KcV2tWP3";
      boolean boolean0 = true;
      try { 
        Utility.decode("hj^(NPq$KcV2tWP3", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Utility.convertString("7Z''h&[f/R\"fWm?");
      assertEquals("7Z\\'\\'h&[f/R\\\"fWm?", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)10;
      Utility.toHexString(byteArray0);
      String string0 = "-+Cv(S!([";
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("-+Cv(S!([", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-+Cv(S!(['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)3;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte)3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "*,?#6na =YbS9-OH#";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*,?#6na =YbS9-OH#";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "*,?#6na =YbS9-OH#";
      Utility.methodTypeToSignature("*,?#6na =YbS9-OH#", stringArray0);
      Utility.methodSignatureArgumentTypes("(L*,?#6na;L*,?#6na;)L*,?#6na;");
      Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(65, (-1157));
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantFloat constantFloat0 = new ConstantFloat((-31.103996F));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(9, byteSequence0.getIndex());
      assertEquals("aload\t\t%1", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.methodSignatureReturnType("JwBHI", true);
      Utility.clearBit(3892, 3892);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)51;
      byteArray0[0] = (byte)51;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)51;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)51;
      byteArray1[6] = (byte)51;
      Utility.equals(byteArray0, byteArray1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Utility.signatureToString("BXqx");
      assertEquals("byte", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "byte";
      objectArray0[1] = (Object) "byte";
      objectArray0[2] = (Object) "BXqx";
      objectArray0[3] = (Object) "BXqx";
      objectArray0[4] = (Object) "byte";
      objectArray0[5] = (Object) "BXqx";
      objectArray0[6] = (Object) "BXqx";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"byte\", \"byte\", \"BXqx\", \"BXqx\", \"byte\", \"BXqx\", \"BXqx\"}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.replace("l", "l", "l");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-20);
      Utility.toHexString(byteArray0);
      String string0 = " (";
      try { 
        MockURI.URI("3a 3d 58 ec", "22u@@]FXy`j0", " (");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 3a 3d 58 ec:22u@@]FXy%60j0#%20(
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(89);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18848. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("=]>j+iU#J1KS", stringArray0);
      Utility.methodSignatureArgumentTypes("()L=]>j+iU#J1KS;");
      Utility.methodSignatureReturnType("()L=]>j+iU#J1KS;");
      try { 
        Utility.typeOfSignature("=]>j+iU#J1KS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =]>j+iU#J1KS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "Q\\2";
      try { 
        Utility.typeOfSignature("Q\u0002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q\u0002
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "*r|{s*sRb0{b_h-^T";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*r|{s*sRb0{b_h-^T";
      stringArray0[1] = "*r|{s*sRb0{b_h-^T";
      stringArray0[2] = "Sx^dv[uCZ";
      stringArray0[3] = "*r|{s*sRb0{b_h-^T";
      stringArray0[4] = "*r|{s*sRb0{b_h-^T";
      stringArray0[5] = "St%VGCT71r8j";
      stringArray0[6] = "'^?Z*&pLq&kAuZgB*I";
      stringArray0[7] = "*r|{s*sRb0{b_h-^T";
      stringArray0[8] = "*r|{s*sRb0{b_h-^T";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("*r|{s*sRb0{b_h-^T", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[uCZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.signatureToString("Vjd", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-72);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("void", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.methodSignatureReturnType("F>:uueKOH", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F>:uueKOH");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "F>:uueKOH";
      objectArray0[3] = (Object) "F>:uueKOH";
      objectArray0[4] = (Object) "F>:uueKOH";
      objectArray0[5] = (Object) "float";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) "float";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X?IoA;Z1nE?N<$oE&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X?IoA;Z1nE?N<$oE&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LLprivate;;V");
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      String string0 = Utility.fillup("{java.lang.Object@481d5781, java.lang.Object@55148e21, java.lang.Object@38fb0ae2, java.lang.Object@3eaba01, java.lang.Object@216954a2}", 2, true, 'R');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('R');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit((-1455), (-1021));
      assertEquals((-1455), int0);
      
      Utility.printArray((Object[]) null);
      String string1 = Utility.convertString("{java.lang.Object@481d5781, java.lang.Object@55148e21, java.lang.Object@38fb0ae2, java.lang.Object@3eaba01, java.lang.Object@216954a2}");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(447, false);
      assertEquals("public private protected static final synchronized transient native", string2);
      
      String string3 = Utility.signatureToString("LLprivate;;V", false);
      assertEquals("Lprivate", string3);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.fillup("if_acmpne", 221, true, ')');
      assertEquals("if_acmpne))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string0);
      
      String string1 = Utility.replace("\t\t<", "Unreachable default case reached!", "if_acmpne))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))");
      assertEquals("\t\t<", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_0", string2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[]} Wc#]6wvMvM2)8%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []} Wc#]6wvMvM2)8%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Utility.fillup("if_acmpne", 221, true, '3');
      assertEquals("if_acmpne33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string0);
      
      String string1 = Utility.replace("\t\t<", "Unreachable default case reached!", "3TnV2=k");
      assertEquals("\t\t<", string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "if_icmplt";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmplt");
      Utility.toHexString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)62;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)120, (-1090915128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.compactClassName("ifge", false);
      Utility.isSet(86, 86);
      Utility.isSet(86, 86);
      Utility.accessToString(86);
      try { 
        Utility.methodSignatureReturnType("private protected final volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private protected final volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "ifne";
      char char0 = '5';
      Utility.fillup("ifne", 249, false, '5');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555ifne");
      String string1 = "if_icmple";
      try { 
        Utility.typeOfSignature("if_icmple");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "Illegally nested brackets:";
      Utility.signatureToString("Illegally nested brackets:");
      String string1 = "";
      Utility.getSignature("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-24);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("N$f1v$c88$e8", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(1017, 716);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{java.lang.Object@39159aad, java.lang.Object@2b642841}";
      stringArray0[1] = "{java.lang.Object@39159aad, java.lang.Object@2b642841}";
      Utility.methodTypeToSignature("{java.lang.Object@39159aad, java.lang.Object@2b642841}", stringArray0);
      Utility.compactClassName("{java.lang.Object@39159aad, java.lang.Object@2b642841}", false);
      try { 
        Utility.methodSignatureArgumentTypes("<@)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <@)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%123\t108", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2410), 165);
      String string0 = Utility.accessToString(778, true);
      assertEquals("private static native", string0);
      
      String string1 = Utility.compactClassName("private static native", "private static native", true);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)102;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(20, false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)52;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "protected final");
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -24
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.compactClassName("|=Lp^y{mGNXT'^#s*", true);
      Utility.format(2606, 2606, true, '/');
      Utility.searchOpcode("return");
      Utility.isSet(10, (short)177);
      Utility.accessToString(2606, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("/+N8J@X", "\tdefault = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\tdefault = \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(170, 92, false, 'N');
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(46, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -86
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "DV- D[n^";
      try { 
        Utility.typeOfMethodSignature("DV- D[n^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: DV- D[n^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = (-1180);
      Utility.classOrInterface((-1180));
      int int1 = (-3049);
      Utility.classOrInterface((-3049));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("interface");
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "ifgt";
      try { 
        Utility.decode("ifgt", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "p+1}|&C}AyZxgckF'@R";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p+1}|&C}AyZxgckF'@R";
      stringArray0[1] = "p+1}|&C}AyZxgckF'@R";
      Utility.methodTypeToSignature("p+1}|&C}AyZxgckF'@R", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byte byte0 = (byte)88;
      byteArray0[1] = (byte)88;
      byte byte1 = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)91;
      String string1 = "if_icmpeq";
      URI uRI0 = MockURI.URI("if_icmpeq");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "TQ^zY";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TQ^zY");
      Utility.isSet((-2421), 18);
      int int0 = 52;
      int int1 = 169;
      Utility.isSet(52, 169);
      try { 
        Utility.methodSignatureArgumentTypes("p0B5VS>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p0B5VS>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile("$)>B#)j", "$)>B#)j");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'O';
      mockPrintWriter0.println(charArray0);
      mockPrintWriter0.flush();
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.clearBit((byte) (-68), (byte)87);
      try { 
        Utility.methodSignatureArgumentTypes("$)>B#)j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $)>B#)j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      short short0 = Utility.searchOpcode("freturn");
      assertEquals((short)174, short0);
      
      String string0 = Utility.fillup("freturn", (-2093953484), false, 'D');
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "monitorexit";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("K/-Q", "K/-Q", "monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K/-Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.isSet(95, 95);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = (-1180);
      Utility.classOrInterface((-1180));
      int int1 = (-3049);
      Utility.classOrInterface((-3049));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "putstatic";
      String string1 = "org.apache.bcel.classfile.AnnotationEntry";
      Utility.replace("putstatic", "putstatic", "org.apache.bcel.classfile.AnnotationEntry");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      int int0 = 581;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)119, 581);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-9);
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.convertString("GG");
      Utility.isJavaIdentifierPart('p');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)36;
      byte byte0 = (byte) (-21);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, (int) (byte)41, 39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.clearBit(418, 418);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "Invalid type: ";
      String string1 = "[dXf{\\:[7";
      Utility.compactClassName("Invalid type: ", "[dXf{:[7", false);
      Utility.setBit(88, 88);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[dXf{:[7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dXf{:[7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = Utility.decode("null, java.lang.Object@dd32bc7, java.lang.Object@704144fc, java.lang.Object@1c95d800, java.lang.Object@5288c4c3, java.lang.Object@46915046, java.lang.Object@3c0d8acc", false);
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(1410, 1410);
      constantArray0[3] = (Constant) constantMethodref2;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantClass constantClass0 = new ConstantClass(1410);
      constantArray0[5] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      objectArray0[4] = (Object) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1410, (-1584), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString((-1320), true);
      char char0 = 'e';
      Utility.isJavaIdentifierPart('e');
      Utility.methodSignatureReturnType("TDSUROT1;+Y-UYN");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "1lEQ^]bh1M@28";
      // Undeclared exception!
      try { 
        Utility.signatureToString("1lEQ^]bh1M@28");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1lEQ^]bh1M@28'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
