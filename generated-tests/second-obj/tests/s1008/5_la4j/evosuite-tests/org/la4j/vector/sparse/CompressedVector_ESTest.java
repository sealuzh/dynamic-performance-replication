/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:15:33 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1205), (-1205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1205
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-564));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -564
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(428);
      CompressedVector compressedVector0 = new CompressedVector(428);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(428);
      assertEquals(428, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(3, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("6");
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(1864.033678156207);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 849);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(849);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 113.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(32, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(1050, (-403));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -403.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = 1070.5782999015833;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(37.0, 37.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1925);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer.valueOf((-1925));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      String string0 = compressedVector0.toString();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4181, 4181);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4181, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(4181);
      assertNotNull(integer0);
      assertEquals(4181, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 4181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(353, (double) 1, (java.util.Random) mockRandom0);
      assertEquals(353, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(353, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(37, vectorFunction0);
      assertEquals(352, compressedVector0.cardinality());
      assertEquals(0.9971671388101983, compressedVector0.density(), 0.01);
      assertEquals(353, compressedVector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction1);
      assertEquals(351, compressedVector0.cardinality());
      assertEquals(353, compressedVector0.length());
      assertEquals(0.9943342776203966, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-2998), (double) (-2998), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 8);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(8, (double) 8, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2146421545);
      assertEquals(2146421545, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(2146421545);
      assertEquals(2146421545, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(37, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 39.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3499, 3499);
      assertEquals(3499, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.getOrElse(5, 373.681737);
      assertEquals(3499, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(373.681737, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(33, 33);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(33, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(33, 2211);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(33, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(0.0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.018315424892790113).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(0, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 461.08513174818;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[4] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 1, (double[]) null, intArray0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new int[] {1, 1, 0, 1, 1}, intArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.set(27, 3942.3212572532298);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.03125, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      Random.setNextRandom(32);
      compressedVector0.swapElements(32, 10);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.03125, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 192.0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(192.0);
      assertNotNull(double0);
      assertEquals(192.0, (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.0}, doubleArray0, 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(4, compressedVector1.length());
      assertEquals(0.25, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.0}, doubleArray0, 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(353, (double) 1, (java.util.Random) mockRandom0);
      assertEquals(353, compressedVector0.length());
      assertEquals(353, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3385.25843933)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(37, vectorFunction0);
      assertEquals(353, compressedVector0.length());
      assertEquals(353, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2020.15515428008).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction1);
      assertEquals(353, compressedVector0.length());
      assertEquals(353, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 1, (double[]) null, intArray0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.non(vectorPredicate0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-669), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2223.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 2223.0}, doubleArray0, 0.01);
      
      double double0 = compressedVector0.euclideanNorm();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2223.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 2223.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-1), (-1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 2223.0}, doubleArray0, 0.01);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 3934);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(3934, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(18, 727.8833848296989);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(3934, compressedVector0.length());
      assertEquals(2.541942043721403E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-308.7);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      CompressedVector compressedVector0 = new CompressedVector(8, 6, doubleArray0, intArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new int[] {8, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.zero(37, 37);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Integer integer0 = new Integer(37);
      assertNotNull(integer0);
      assertEquals(37, (int)integer0);
      
      Integer integer1 = Integer.getInteger("RGIO)oZ~_.U9p\"(");
      assertNull(integer1);
      
      Integer integer2 = hashMap1.put(integer0, (Integer) null);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer2);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap1, 4175);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (-45.841467079478505);
      Double double0 = new Double((-1470.732));
      assertNotNull(double0);
      assertEquals((-1470.732), (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-45.841467079478505)}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-3471), 5);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-45.841467079478505)}, doubleArray0, 0.01);
      
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 32;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.set(27, 3941.362633043924);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.03125, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      Random.setNextRandom(32);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(32, 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 192.0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(192.0);
      assertNotNull(double0);
      assertEquals(192.0, (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-1529), 3685);
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.0}, doubleArray0, 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.25, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(4, sparseVector0.length());
      assertNotNull(sparseVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.0}, doubleArray0, 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-1529), 1139.82501648);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1529' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 37;
      doubleArray0[2] = (double) 37;
      doubleArray0[5] = (double) 37;
      doubleArray0[4] = (double) 37;
      doubleArray0[7] = (-45.841467079478505);
      Double double0 = new Double((-1470.732));
      assertNotNull(double0);
      assertEquals((-1470.732), (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.625, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {37.0, 0.0, 37.0, 0.0, 37.0, 37.0, 0.0, (-45.841467079478505)}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-3471), 5);
      assertEquals(0.625, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertArrayEquals(new double[] {37.0, 0.0, 37.0, 0.0, 37.0, 37.0, 0.0, (-45.841467079478505)}, doubleArray0, 0.01);
      
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 37);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(37, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1925));
      assertNotNull(integer0);
      assertEquals((-1925), (int)integer0);
      
      Double double0 = new Double((-1925));
      assertNotNull(double0);
      assertEquals((-1925.0), (double)double0, 0.01);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(double1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1346);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements((-1511), (-1511));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 461.08513174818;
      doubleArray0[2] = 461.08513174818;
      doubleArray0[3] = 192.28051;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(192.28051);
      assertNotNull(double0);
      assertEquals(192.28051, (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {461.08513174818, 0.0, 461.08513174818, 192.28051}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(0, 2);
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {461.08513174818, 0.0, 461.08513174818, 192.28051}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 461.08513174818;
      doubleArray0[2] = 461.08513174818;
      doubleArray0[3] = 53.726792977629;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(192.28051);
      assertNotNull(double0);
      assertEquals(192.28051, (double)double0, 0.01);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {461.08513174818, 0.0, 461.08513174818, 53.726792977629}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(0, (-564));
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertArrayEquals(new double[] {461.08513174818, 0.0, 461.08513174818, 53.726792977629}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 21;
      doubleArray0[3] = 21.0;
      doubleArray0[5] = (double) 21;
      doubleArray0[2] = (double) 21;
      doubleArray0[7] = 0.0;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 21.0, 21.0, 0.0, 21.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(1246, 5);
      assertEquals(8, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 21.0, 21.0, 0.0, 21.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      Random.setNextRandom(1668);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(8, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 21.0, 21.0, 0.0, 21.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      doubleArray0[5] = (double) 32;
      CompressedVector compressedVector0 = new CompressedVector(32, 32, doubleArray0, (int[]) null);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertEquals(32, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 32.0, 32.0, 32.0, 32.0, 32.0}, doubleArray0, 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 32;
      intArray0[3] = 32;
      intArray0[2] = 32;
      intArray0[6] = 32;
      CompressedVector compressedVector0 = new CompressedVector(32, 32);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll(0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(32, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector1.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(32, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(32, compressedVector1.length());
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[5] = (double) 37;
      doubleArray0[11] = (double) 37;
      doubleArray0[7] = 37.0;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertNotNull(decimalFormat0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(15, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(15, compressedVector0.length());
      assertNotNull(vectorIterator0);
      
      compressedVector0.swapElements(5, 19);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(15, compressedVector0.length());
      
      Random.setNextRandom(5);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Locale locale2 = locale0.stripExtensions();
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale1));
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      
      // Undeclared exception!
      try { 
        compressedVector0.set(19, 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '19' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 1, (double[]) null, intArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.non(vectorPredicate0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      
      boolean boolean1 = compressedVector0.nonZeroAt(1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 37;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 37.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(8, vector0.length());
      assertNotNull(vector0);
      assertArrayEquals(new double[] {0.0, 0.0, 37.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt((-2201));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 37.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.set(1, 417);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 37.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 417);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(402);
      assertEquals(402, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)402).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(402, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(402, compressedVector0.length());
      assertEquals(0.0024875621890547263, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(402, compressedVector0.length());
      assertEquals(0.0024875621890547263, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3172);
      doubleArray0[1] = (double) 430;
      doubleArray0[2] = (double) 430;
      doubleArray0[3] = (double) 430;
      doubleArray0[4] = (double) 430;
      doubleArray0[5] = (double) (-3172);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-3172.0), 430.0, 430.0, 430.0, 430.0, (-3172.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(4, (-3172));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (double) 37;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 37.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 37.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertNotNull(decimalFormatSymbols0);
      
      double double0 = compressedVector0.getOrElse(0, 2084.6700663497736);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(2084.6700663497736, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 37.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(1L);
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      CompressedVector compressedVector1 = CompressedVector.random(32, (double) 0L, (java.util.Random) mockRandom0);
      assertEquals(32, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      Random.setNextRandom(25);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 461.08513174818;
      doubleArray0[1] = 1538.061339216;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(14, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      double double0 = compressedVector0.getOrElse(0, 1538.061339216);
      assertEquals(14, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertEquals(461.08513174818, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.applySymmetric((DenseVector) null, compressedVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 0.0;
      doubleArray0[7] = (-35.11340788708623);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-35.11340788708623)}, doubleArray0, 0.01);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      double double0 = compressedVector0.innerProduct(compressedVector0);
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1232.9514134448896, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-35.11340788708623)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-2965));
      assertNotNull(integer0);
      assertEquals((-2965), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 34;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 34;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 34.0, 34.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertEquals(5, vector0.length());
      assertNotNull(vector0);
      assertArrayEquals(new double[] {0.0, 34.0, 34.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 417;
      int int2 = (-307);
      boolean boolean0 = compressedVector0.nonZeroAt((-307));
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 34.0, 34.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, (-307));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 192.28050963063;
      doubleArray0[7] = 1070.5782999015833;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.28050963063, 0.0, 0.0, 0.0, 1070.5782999015833}, doubleArray0, 0.01);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = 417;
      compressedVector0.swapElements(417, 417);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.28050963063, 0.0, 0.0, 0.0, 1070.5782999015833}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(417);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(417, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(0.004796163069544364, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.28050963063, 0.0, 0.0, 0.0, 1070.5782999015833}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(8, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.28050963063, 0.0, 0.0, 0.0, 1070.5782999015833}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(8, compressedVector2.length());
      assertEquals(0.25, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 192.28050963063, 0.0, 0.0, 0.0, 1070.5782999015833}, doubleArray0, 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      // Undeclared exception!
      try { 
        compressedVector1.subtract((Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 417 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 0;
      int int1 = 743;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 56;
      doubleArray0[2] = (double) 56;
      doubleArray0[5] = (double) 56;
      doubleArray0[7] = (-35.11340788708623);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(8, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {56.0, 0.0, 56.0, 0.0, 0.0, 56.0, 0.0, (-35.11340788708623)}, doubleArray0, 0.01);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CompressedVector compressedVector1 = CompressedVector.zero(56, 56);
      assertEquals(56, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-35.11340788708623);
      doubleArray1[1] = (-35.11340788708623);
      doubleArray1[3] = (-2392.811008625151);
      doubleArray1[4] = (double) 5;
      doubleArray1[5] = (-2392.811008625151);
      doubleArray1[6] = (double) 5;
      doubleArray0[0] = (double) 56;
      doubleArray1[8] = (double) 31;
      CompressedVector compressedVector2 = new CompressedVector(5, 31, doubleArray1, (int[]) null);
      assertEquals(5, compressedVector2.length());
      assertEquals(6.2, compressedVector2.density(), 0.01);
      assertEquals(31, compressedVector2.cardinality());
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-35.11340788708623), (-35.11340788708623), 0.0, (-2392.811008625151), 5.0, (-2392.811008625151), 5.0, 0.0, 31.0}, doubleArray1, 0.01);
      
      compressedVector0.set(0, 0.0);
      assertEquals(0.375, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertArrayEquals(new double[] {56.0, 0.0, 56.0, 0.0, 0.0, 56.0, 0.0, (-35.11340788708623)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector2.eachNonZero(vectorProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }
}
