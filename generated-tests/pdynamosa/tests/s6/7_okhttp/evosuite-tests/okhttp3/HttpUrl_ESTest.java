/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:08:50 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("obzo%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: obzo%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "~0Fw7kKxSmRu_p,R4", 1538, 48, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Tuo0");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Tuo0
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("WZA<+]#'");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        HttpUrl.getChecked("size=%s offset=%s byteCount=%s");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for size=%s offset=%s byteCount=%s
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("A1(Q2YR(*qw8r");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        HttpUrl.getChecked("za#JTKI");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for za#JTKI
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments(".:");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("..");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("3l=Sy#2r\"\"Wg`a>BMq'");
      httpUrl_Builder0.removeAllQueryParameters("i?c_8oru?)^");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals("foo.bar", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "^V:vg9lx");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("0MDf)?{`AcM5=-Bvhm@");
      assertEquals("http://www.somefakebutwellformedurl.org/0MDf)?{`AcM5=-Bvhm@", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("okio.Pipe$PipeSink", 15, 15, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:fooJbar");
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals("https://foojbar/", httpUrl0.toString());
      assertTrue(boolean0);
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">G[x", "closed");
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, "https:ftp.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals("https://ftp.somefakebutwellformedurl.org/ftp.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals(2, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/foo.bar", "https:/foo.bar", (String) null, (String) null, "unexpected encodedPath: ");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("https://foo.bar//https:%2Ffoo.bar#unexpected%20encodedPath:%20", httpUrl0.toString());
      assertNotNull(httpUrl0);
      assertEquals("unexpected encodedPath: ", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("https:", 0, 0, (String) null, true, true, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      httpUrl0.queryParameterValues((String) null);
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.queryParameterValues("");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1969466554));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter((String) null);
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("http", (-1822), (-1822));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 2147483645, 1480);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("", 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "F'BA0hz5TjwDHx:M", 0, 0, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, (-508), (-508), true);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "", (-1), 0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.percentDecode((Buffer) null, "%3edxoh+", 13, 13, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1701L);
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "]^TUC", 43, 832, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", (-27), 1663, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(632);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.pathSegmentsToString(stringBuilder0, linkedList0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("C<8z");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      assertNotNull(httpUrl_Builder0);
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("okhttp3.HttpUrl$Builder", "okhttp3.HttpUrl$Builder", 0, "okhttp3.HttpUrl$Builder", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(".", ".", 127, "byteString == null", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      URI uRI0 = MockURI.URI("ileo", "td~M13=?Nt4pTuP;m~?", "!'2$@FRDdktG}");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URI uRI0 = MockURI.create("CRC");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.equals((Object) null);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('*');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "O!rX)pgM", 0, 0, "O!rX)pgM", true, true, true, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "", 16, (-1), "", false, false, true, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.canonicalize((Buffer) null, "[hex=", 0, (-3715), "3", true, true, true, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong((-1426L));
      HttpUrl.canonicalize(buffer0, "A;X", 49, 49, "A;X", false, false, false, false);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("FHCRC", ")toD=-r1 N4dmHS3x>", true, true, false, true);
      assertEquals("F%48CRC", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("}aq6G &{pgOGFVz]WJ4", "", true, false, true, false);
      assertEquals("}aq6G &{pgOGFVz]WJ4", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("", ">q=NS%`3I>nu", false, false, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("T(d[2$kKEOGtT/", (-774), 0, "L >d4q3u>/,", true, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("q=%20llf&m98%23v3l5@", 0, 2368, ".%252e", false, false, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", (-2343), 63, "", true, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("qk.&NTu6]", 3, (-903), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, 0, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("oeN=Ay|r\"9&H)i c");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("okio.RealBufferedSink");
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, (String) null, (-2564), 32, (String) null, true, false, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("ChGM#Ve)1DL]QvsQG", 662, (-2594), "SHA-256", true, true, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 14, (-2734), (String) null, true, false, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "{1");
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/%7B1", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("okio.InflaterSource", ".%2s52#");
      String string0 = httpUrl_Builder1.toString();
      assertEquals("https://foo.bar/.%2s52?okio.InflaterSource=.%252s52%23#", string0);
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      httpUrl_Builder0.port(50);
      String string0 = httpUrl_Builder0.toString();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo.bar:50/.%2s52#", string0);
      assertEquals("https://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("m");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("keFPEmRx\"2y/0");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("::expected hex digit: ");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.port(120);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.newBuilder();
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals("https://foo.bar:120/.%2s52#", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedFragment());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      httpUrl0.encodedFragment();
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.#=bar");
      String string0 = httpUrl0.encodedFragment();
      assertEquals("=bar", string0);
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo./#=bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:ap0");
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals("http://ap0/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, list0.size());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("https");
      assertEquals(443, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.#=bar");
      httpUrl0.encodedPassword();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo./#=bar", httpUrl0.toString());
      assertEquals("=bar", httpUrl0.fragment());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:///tmp/foo.bar");
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedUsername();
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = httpUrl0.toString();
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("[\u0000-\u001F-\u009Fp{javaWhitespace}]", "[\u0000-\u001F-\u009Fp{javaWhitespace}]", true, true, false, false);
      assertEquals("%5B%00%2D%1F%7F%2D%C2%9F%70%7B%6A%61%76%61%57%68%69%74%65%73%70%61%63%65%7D%5D", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("%3edxoh+", "%3edxoh+");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("\u2026]");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("Fg}E\"(");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%-2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("%2b", 1, 1909);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("%7B4v-iujeukLV+&q2Z!");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = HttpUrl.percentDecode(".F%><&(2", true);
      assertEquals(".F%><&(2", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("UL23d=Ym~>sUWb5QZ%J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: UL23d=Ym~>sUWb5QZ%J
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("(+'%0\"B/b", "Invalid URL: ");
      httpUrl_Builder1.port(1145);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("+n/b");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::tps:/www.somefakebutwellformedurl.org/p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::tps:/www.somefakebutwellformedurl.org/p
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("6:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 6:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("P^=D");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Z.s");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Z.s
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        HttpUrl.getChecked(" RP-g^;l^");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for  RP-g^;l^
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        HttpUrl.getChecked("aH{^^BnN854Ac");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for aH{^^BnN854Ac
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve(".%2e");
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "sU9)B/>p()H=");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("#^Nk}");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:a");
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertEquals("http://a/", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:d:oqko$%.55E?");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:d:oqko$%.55E?
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("s.limit == s.pos");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("rw2}OG_)|al0 Cc)%3");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("rw2}OG_)|al0 Cc)%3");
      httpUrl_Builder0.addEncodedQueryParameter("%2e", "cJ");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("Invalid host: ", "Invalid host: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("Invalid host: ", "Invalid host: ");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, "X>QX>*gg`n}`TH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("L@m9cCMS@Li", "L@m9cCMS@Li");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("oEJ~^", "6dq9y;hL");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, " \"<>^`{}|/?#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("*OM6l");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: S
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/.`]$s?dgltz>4l2;");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("tpomkk%20e%3ce75");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("tpomkk%20e%3ce75");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removePathSegment(0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "3/");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("3l=Sy#2r\"\"Wg`a>BMq'");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(912, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(51, "\u2026]");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(5, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(1404, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment(".h:");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("&.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("?+");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(65536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 65536
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -24
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("fie:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: fie:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("{1");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("-");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.scheme("http");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: [\u0000-\u001F-\u009Fp{javaWhitespace}]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      boolean boolean0 = httpUrl0.equals(httpUrl1);
      assertEquals(443, httpUrl1.port());
      assertEquals("https://foo.bar/.%2s52#", httpUrl1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertEquals(80, httpUrl0.port());
      assertTrue(boolean0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      Object object0 = new Object();
      boolean boolean0 = httpUrl0.equals(object0);
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(boolean0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        HttpUrl.getChecked("S+jsxs:OQKo$^~");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for S+jsxs:OQKo$^~
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("https:~(~=e*k/e'y");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      httpUrl_Builder0.port(50);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      URI uRI0 = httpUrl1.uri();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo.bar:50/.%2s52#", httpUrl1.toString());
      assertEquals("/.%252s52", uRI0.getRawPath());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      HttpUrl httpUrl1 = httpUrl0.resolve("https:foo.bar");
      assertEquals("https://foo.bar/foo.bar", httpUrl1.toString());
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(1682);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:ap0");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      httpUrl_Builder0.setQueryParameter("https:foo.bar", ".%2s52#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 206, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.#=bar");
      httpUrl0.queryParameterValues("~@@`n");
      assertEquals("=bar", httpUrl0.fragment());
      assertEquals("https://foo./#=bar", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.setQueryParameter("https:foo.bar", ".%2s52#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      Set<String> set0 = httpUrl1.queryParameterNames();
      assertEquals("https://foo.bar/.%2s52?https:foo.bar=.%252s52%23#", httpUrl1.toString());
      assertEquals(443, httpUrl1.port());
      assertTrue(set0.contains("https:foo.bar"));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("https:foo.bar");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.querySize();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("3l=Sy#2r\"\"Wg`a>BMq'");
      httpUrl_Builder0.setQueryParameter("3l=Sy#2r\"\"Wg`a>BMq'", "https:foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      String string0 = httpUrl1.query();
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl1.port());
      assertEquals("3l=Sy#2r\"\"Wg`a>BMq'=https:foo.bar", string0);
      assertEquals("https://foo.bar/3l=Sy?3l%3DSy%232r%22%22Wg`a%3EBMq%27=https:foo.bar#2r\"\"Wg`a>BMq'", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("//&=Hm'(i|#");
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("5i8>x2;4JF");
      httpUrl_Builder1.setQueryParameter("inflater == null", (String) null);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertEquals("https://foo.bar/foo.bar?5i8%3Ex2;4JF&inflater%20%3D%3D%20null", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      assertEquals("https://foo.bar/", httpUrl0.toString());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      httpUrl_Builder0.setQueryParameter("okio.InflaterSource", ".%2s52#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      URI uRI0 = httpUrl1.uri();
      assertEquals("https://foo.bar/.%252s52?okio.InflaterSource=.%252s52%23#", uRI0.toString());
      assertEquals(443, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("https://foo.bar/.%2s52?okio.InflaterSource=.%252s52%23#", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".%2s52#");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.encodedPassword = ".%2s52#";
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.newBuilder();
      assertEquals(".%2s52#", httpUrl1.encodedPassword());
      assertEquals("@foo.bar/.%2s52#", httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals(443, httpUrl1.port());
      assertEquals(".%2s52#", httpUrl1.password());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port();
      assertEquals(80, int0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.host();
      assertEquals("foo.bar", string0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:///tmp/foo.bar");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:foo.bar");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals("", string0);
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.#=bar");
      httpUrl0.url();
      assertEquals("https://foo./#=bar", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.scheme();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:ap0");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://ap0/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:///tmp/foo.bar");
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertEquals(80, httpUrl0.port());
      assertFalse(list0.isEmpty());
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.isHttps();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.fragment();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.redact();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("!JQA\"(.", (String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }
}
