/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:57:30 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-835.3086587717765));
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(927, vectorAccumulator0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byte byte0 = (byte)21;
      byteArray0[3] = (byte)21;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((int) (byte)23, (int) (byte)36, (-1936));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(byte0, vectorProcedure0);
      String string0 = null;
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1;
      mockRandom0.nextFloat();
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      int int1 = 2991;
      // Undeclared exception!
      try { 
        cCSMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 1378, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(13, 0, 836.63478112, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1167.33;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      cCSMatrix0.rowMajorIterator();
      cCSMatrix0.nonZeroRowMajorIterator();
      cCSMatrix0.toCSV();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.iteratorOfColumn(0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308;
      doubleArray0[1] = 1167.33;
      doubleArray0[2] = (double) 308;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(308, 308, doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.product();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(">,nT[}g{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 495;
      doubleArray1[4] = (double) 495;
      doubleArray0[1] = doubleArray1;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix.fromCSV("");
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.shuffle();
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(1097);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1097
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(16, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.max();
      SparseMatrix.diagonal(0, (-1.0));
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((-1255), 7134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7134
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        CCSMatrix.random(1378, 0, (-2063.2385), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3654);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-2035), 237, matrixFunction0);
      cCSMatrix0.getOrElse(3654, 3654, 1897.287079951);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.toBinary();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-290);
      intArray0[2] = 4;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-290);
      intArray0[7] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1167.33;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 16, doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.blankOfShape(2759, (-1984));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2759x-1984
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      cCSMatrix0.setAll(0.0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)21;
      SparseMatrix.diagonal((byte)23, (byte) (-4));
      cCSMatrix0.nonZeroAt((byte)21, (byte)21);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      Integer integer0 = new Integer(2991);
      Integer integer1 = new Integer(2991);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn(2991);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2991
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1;
      int int1 = 1735;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      int int2 = (-1711);
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZeroInRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      int int0 = 927;
      cCSMatrix0.setAll(0.0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)23;
      intArray0[2] = 1138;
      intArray0[3] = 927;
      int[] intArray1 = new int[2];
      intArray1[0] = 927;
      intArray1[1] = (int) (byte)23;
      cCSMatrix0.select(intArray0, intArray1);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.fold(matrixAccumulator0);
      CCSMatrix.diagonal(int0, byteArray0[0]);
      int int1 = 468;
      cCSMatrix0.minInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
          OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
          double[][] doubleArray0 = new double[2][4];
          double[] doubleArray1 = new double[2];
          doubleArray1[0] = 1.0;
          doubleArray1[1] = (-954.2);
          doubleArray0[0] = doubleArray1;
          MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          CCSMatrix.randomSymmetric(933, 1.0, (Random) mockRandom0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1111);
      cCSMatrix1.swapColumns((byte)23, 48);
      Integer integer0 = new Integer(1111);
      cCSMatrix1.maxInColumn(1111);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(10, 10);
      cCSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse((-2772), (-2772), (-2772));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2772' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-728L));
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(268, 0.0, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(268, vectorProcedure0);
      String string0 = null;
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1557, 4359, 1337);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(462, 1557, matrixFunction0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 6;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 6);
      int int1 = 5;
      int int2 = 1116;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1116, 1246);
      cCSMatrix0.getRow(5);
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(512L, 1301, 1403);
      byte[] byteArray0 = new byte[6];
      mockRandom0.doubles(1000L);
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)14, (-842.9078666313386));
      cCSMatrix0.setColumn(1, (double) (byte)14);
      MockRandom mockRandom1 = new MockRandom((-70L));
      mockRandom0.ints((long) (byte)14);
      cCSMatrix0.getRow((-2694));
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("F)L+<`i;O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.rowMajorIterator();
      CCSMatrix cCSMatrix1 = new CCSMatrix((byte)1, (byte)1);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.updateAt((byte)1, (byte)1, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int0 = (-1411);
      Integer integer0 = new Integer(2);
      byte byte0 = (byte)3;
      cCSMatrix0.blankOfRows(3);
      CCSMatrix.zero((int) (byte)3, 74);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-1411), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1411x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      SparseMatrix.identity(1099);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((-3135), 469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 469
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte byte0 = (byte)4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)4);
      cCSMatrix0.rowMajorIterator();
      cCSMatrix0.subtract((double) (byte)4);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((byte)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 1138);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      cCSMatrix0.columnMajorIterator();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(2, vectorProcedure0);
      cCSMatrix0.blankOfShape((-345), (-345));
      cCSMatrix1.maxInColumn(byteArray0[0]);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      Integer integer0 = new Integer(1138);
      cCSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1728;
      cCSMatrix0.eachNonZeroInColumn(826, (VectorProcedure) null);
      int int1 = 499;
      CCSMatrix.identity(int1);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      long long0 = 525L;
      MockRandom mockRandom1 = new MockRandom(long0);
      MockRandom mockRandom2 = new MockRandom();
      long long1 = (-1100L);
      mockRandom2.ints(long1);
      int int2 = 1546;
      cCSMatrix1.maxInColumn(int2);
      String string0 = "vector";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromCSV(string0);
      cCSMatrix2.iteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 2209;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2209, 2209);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      Matrix matrix1 = Matrix.unit(2209, 2209);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix1, matrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2210' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.rowMajorIterator();
      CCSMatrix cCSMatrix1 = new CCSMatrix(280, 8);
      cCSMatrix1.columnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1138, (byte)21, matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix1, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int0 = 10;
      Matrix matrix0 = cCSMatrix1.copyOfShape(10, 10);
      DenseMatrix denseMatrix0 = DenseMatrix.fromMatrixMarket("");
      int int1 = 986;
      int int2 = 1061;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(int1, int2);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      CCSMatrix.block(matrix1, denseMatrix0, columnMajorSparseMatrix0, matrix0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
      String string0 = "~0W2 X/6b";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromCSV(string0);
      int int3 = (-3091);
      double double0 = (-425.43732425058334);
      CCSMatrix.diagonal(int3, double0);
      cCSMatrix2.toRowVector();
      int int4 = 1014;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(int4, int0, matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1839, (-3206.54634415));
      cCSMatrix0.toRowVector();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-163.0);
      doubleArray0[1] = 1167.33;
      doubleArray0[2] = 4083.3147498299654;
      doubleArray0[3] = (double) 1839;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-3206.54634415);
      CCSMatrix.from1DArray(0, 0, doubleArray0);
      cCSMatrix0.copyOfRows(4);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      cCSMatrix0.setAll(0.0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      cCSMatrix0.columnMajorIterator();
      byteArray0[3] = (byte)21;
      cCSMatrix0.copyOfColumns((byte)23);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)23).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((byte)23, (byte)23, matrixFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.fold(matrixAccumulator0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.rowMajorIterator();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      Double double0 = new Double((byte)23);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1111, (-835.3086587717765));
      cCSMatrix1.minInColumn((byte)23);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int0 = 8;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(8, 0.0);
      int int1 = 1;
      cCSMatrix1.setColumn(1, 0.0);
      MockRandom mockRandom1 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        mockRandom1.ints((-1507L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      cCSMatrix0.setAll(0.0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte)21;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((byte)23, (byte)23, matrixFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.fold(matrixAccumulator0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1559, 1559);
      cCSMatrix0.setAll(0.0);
      int int0 = 1745;
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.swapColumns(1745, 1559);
      int int1 = 8;
      int int2 = (-1894);
      Integer integer0 = new Integer(int2);
      cCSMatrix0.setAll(int1);
      Random random0 = null;
      int int3 = (-322);
      ColumnMajorSparseMatrix.randomSymmetric(int3, (double) int0, random0);
      Integer integer1 = new Integer(int2);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix0.eachNonZeroInColumn(int1, vectorProcedure0);
      String string0 = "M/AK";
      CCSMatrix.fromCSV(string0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2656.022889365533);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.75;
      doubleArray1[3] = 1643.0;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-2656.022889365533);
      doubleArray2[3] = 1643.0;
      doubleArray2[4] = (-2656.022889365533);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = 1643.0;
      doubleArray2[7] = 0.75;
      doubleArray2[8] = 1643.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1643.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = 0.75;
      doubleArray5[2] = 1643.0;
      doubleArray5[3] = 1643.0;
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1643.0;
      doubleArray6[1] = (-2656.022889365533);
      doubleArray6[2] = 1643.0;
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray6[4] = (-2656.022889365533);
      doubleArray0[5] = doubleArray6;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 6);
      cCSMatrix0.minInColumn(5);
      int int0 = 1115;
      int int1 = 1246;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1115, 1246);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1113, 432);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      cCSMatrix0.select(intArray0, intArray0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte) (-11);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-11);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1378);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1116, 1116, 1116);
      cCSMatrix0.maxInColumn(1073);
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1073, 1116);
      int int0 = 3;
      cCSMatrix0.minInColumn(3);
      cCSMatrix1.nonZeroIterator();
      cCSMatrix1.nonZeroAt((-320), 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(3167, 3167, matrixFunction0);
      cCSMatrix0.minInColumn(int0);
      String string0 = "?RmE#!%";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)5, (double)(byte)5, (double)(byte)5, 786.9992500834197, (double)(byte)5).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      Integer integer0 = new Integer((byte)5);
      cCSMatrix0.sum();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)526, 9.0, (double)(byte)5, 1096.0, 1096.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.toCSV();
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns((-3690), (byte)5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3689
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(1, 481, (double) 1, (Random) mockRandom0);
      SparseMatrix.identity(481);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)74);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((int) (byte)17, (int) (byte)74, (int) (byte)74);
      cCSMatrix1.toBinary();
      cCSMatrix0.iterator();
      cCSMatrix0.minInColumn(16);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = (-3377.6298959197707);
      cCSMatrix1.nonZeroAt(800, 16);
      CCSMatrix cCSMatrix2 = new CCSMatrix((-1419), (-988));
      int int0 = (-4188);
      cCSMatrix0.iteratorOfColumn(int0);
      int int1 = 99;
      cCSMatrix0.set(int1, int1, double0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1018;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1018, Double.POSITIVE_INFINITY);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      int int1 = 1123;
      CCSMatrix.random(int0, int0, (double) int0, (Random) mockRandom0);
      double double0 = 329.2363419431795;
      CCSMatrix.diagonal(int1, double0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 6);
      cCSMatrix0.minInColumn(5);
      cCSMatrix0.setAll(2447.62665173);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1156;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1156, 1156);
      cCSMatrix0.setAll(0.0);
      Integer integer0 = new Integer(1156);
      int int1 = 507;
      int int2 = 860;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1156, 860);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix1);
      Integer integer1 = new Integer(int2);
      Integer integer2 = new Integer(int1);
      cCSMatrix1.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.subtract((Matrix) cCSMatrix1);
      CCSMatrix cCSMatrix3 = CCSMatrix.identity(1102);
      cCSMatrix3.toColumnMajorSparseMatrix();
      cCSMatrix3.swapColumns(1102, 1102);
      int int0 = 8;
      cCSMatrix3.maxInColumn(8);
      cCSMatrix1.setAll(1409.244);
      ColumnMajorSparseMatrix.randomSymmetric(754, 1.0, (Random) null);
      double double0 = new Integer(int0);
      cCSMatrix1.columnMajorIterator();
      cCSMatrix3.min();
      int int1 = (-25);
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix2.eachNonZeroInColumn(int1, vectorProcedure0);
      String string0 = "k";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[] doubleArray0 = new double[2];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1102);
      cCSMatrix0.min();
      cCSMatrix0.max();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      SparseVector.fromMatrixMarket("y#;QM\"\"({I.xip;");
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      Vector vector0 = sparseVector0.to(vectorFactory0);
      int int0 = 2292;
      cCSMatrix0.setRow(int0, vector0);
      int int1 = 1091;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int1, vectorProcedure0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte byte0 = (byte)23;
      int int0 = 1099;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1099, 1099, 1099);
      cCSMatrix0.rowMajorIterator();
      Matrix matrix0 = cCSMatrix0.subtract((double) (byte)23);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)23;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      vector0.to((VectorFactory<SparseVector>) null);
      int int1 = 2991;
      Integer integer0 = new Integer(int1);
      cCSMatrix0.sliceTopLeft(int0, byte0);
      cCSMatrix0.subtract(matrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int0);
      int int2 = (-1846);
      cCSMatrix1.minInColumn(int2);
      int int3 = 4;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int1, int3);
      cCSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1138, 0.0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.rowMajorIterator();
      CCSMatrix cCSMatrix1 = new CCSMatrix(280, 8);
      cCSMatrix1.columnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1138).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1138, (byte)21, matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix2 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.fold(matrixAccumulator0);
      int int0 = 502;
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix0.eachInColumn(int0, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix2.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte byte0 = (byte)4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)4);
      cCSMatrix0.rowMajorIterator();
      cCSMatrix0.subtract((double) (byte)4);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)4;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        vector0.to((VectorFactory<SparseVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      int int0 = 495;
      CCSMatrix cCSMatrix0 = new CCSMatrix(495, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '496' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 41, doubleArray0);
      cCSMatrix0.rank();
      Integer integer0 = new Integer(0);
      cCSMatrix0.setColumn(41, (double) 0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(4271);
      hashMap0.put(integer1, integer0);
      hashMap0.remove((Object) doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(4271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4271
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1378;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      int int1 = 495;
      double double0 = 0.6943149872474883;
      // Undeclared exception!
      CCSMatrix.random(495, 495, 0.6943149872474883, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1378, 1378);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      cCSMatrix0.select(intArray0, intArray0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1378);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(8, 6);
      int int0 = 2466;
      int int1 = 16;
      int[] intArray1 = new int[1];
      intArray1[0] = 6;
      cCSMatrix1.select(intArray1, intArray0);
      cCSMatrix1.multiply((Matrix) cCSMatrix1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2466;
      doubleArray0[1] = (double) 6;
      CCSMatrix cCSMatrix2 = new CCSMatrix(2466, 16, 8, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.isZeroAt(3, 2466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2466
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 6);
      double double0 = new Integer(5);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1116, 1246);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(512L, 1301, 1403);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)14, (-842.9078666313386));
      cCSMatrix0.setColumn(1, Double.POSITIVE_INFINITY);
      MockRandom mockRandom1 = new MockRandom((-70L));
      mockRandom0.ints((long) (byte)14);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 6;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 6);
      int int1 = 5;
      cCSMatrix0.minInColumn(5);
      CCSMatrix cCSMatrix1 = new CCSMatrix(6, 1246);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)122;
      double double0 = (-842.9078666313386);
      mockRandom0.nextBytes(byteArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)14, (-842.9078666313386));
      int int0 = 1;
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)13);
      cCSMatrix0.rowMajorIterator();
      cCSMatrix0.subtract((double) (byte)13);
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)13;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity((byte)13);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix1.iterator();
      mockRandom0.ints(3326L);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(4, vectorFunction0);
      MockRandom mockRandom1 = new MockRandom((byte)13);
      mockRandom1.ints(3326L);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.ints(9993L);
      // Undeclared exception!
      try { 
        mockRandom2.ints((-2408L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)5, (double)(byte)5, (double)(byte)5, 787.7189481400575, (double)(byte)5).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)5, (-1.0), (-2215.8910681297), 787.7189481400575, (-1.0)).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      CCSMatrix.identity(1102);
      int int0 = (-6489);
      cCSMatrix0.product();
      int int1 = 21;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      cCSMatrix0.nonZeroIteratorOfRow(778);
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      int int2 = 4;
      cCSMatrix1.maxInColumn(4);
      cCSMatrix0.minInColumn((-1));
      cCSMatrix1.multiply((double) int0);
      int int3 = 770;
      double double0 = 0.7;
      long long0 = 161L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix cCSMatrix2 = CCSMatrix.random(int1, int3, double0, (Random) mockRandom0);
      cCSMatrix2.iteratorOfColumn(int2);
      String string0 = "";
      CCSMatrix.fromCSV(string0);
  }
}
