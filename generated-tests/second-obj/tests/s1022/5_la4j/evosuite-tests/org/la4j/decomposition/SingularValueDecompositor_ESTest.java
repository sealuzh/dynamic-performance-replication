/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:18:11 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom(25);
      boolean boolean0 = singularValueDecompositor0.applicableTo(matrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(7, mockRandom0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 3);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 7);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      singularValueDecompositor0.matrix = (Matrix) columnMajorSparseMatrix0;
      singularValueDecompositor0.applicableTo(columnMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      singularValueDecompositor2.decompose();
      singularValueDecompositor0.applicableTo(columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor3 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      denseVector0.toColumnMatrix();
      rowMajorSparseMatrix0.toMatrixMarket();
      Random.setNextRandom(3);
      DenseMatrix.constant(953, 3, 953);
      singularValueDecompositor3.decompose();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      singularValueDecompositor2.applicableTo(matrix0);
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertFalse(matrixArray1.equals((Object)matrixArray0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(5, 5);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(matrixAccumulator0).accumulate();
      denseMatrix0.fold(matrixAccumulator0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom((-764));
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.identity((-764));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 32;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) (-12));
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom(1028488307);
      columnMajorSparseMatrix0.add(1761.035114406);
      singularValueDecompositor0.applicableTo(matrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(matrix0);
      // Undeclared exception!
      DenseVector.zero(1028488307);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 32;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 32);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) 8);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(20, 20);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom(7);
      Matrix matrix0 = columnMajorSparseMatrix0.add((double) 7);
      singularValueDecompositor0.applicableTo(matrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(matrix0);
      DenseVector denseVector0 = DenseVector.zero(20);
      denseVector0.toColumnMatrix();
      columnMajorSparseMatrix0.toMatrixMarket();
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(matrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(500, 7, 20);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general column-major\n20 20 0\n");
      SingularValueDecompositor singularValueDecompositor3 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor4 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      singularValueDecompositor1.decompose();
      singularValueDecompositor0.decompose();
      singularValueDecompositor4.applicableTo(matrix0);
      singularValueDecompositor3.applicableTo(rowMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor5 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor3.applicableTo(matrix0);
      singularValueDecompositor4.decompose();
      singularValueDecompositor2.applicableTo(denseMatrix0);
      singularValueDecompositor4.applicableTo(matrix0);
      Random.setNextRandom(89);
      singularValueDecompositor0.applicableTo(denseMatrix0);
  }
}
