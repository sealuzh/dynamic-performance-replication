/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:31:15 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.classic.StaticXmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "L]C}0AK", "null");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L]C}0AK";
      Component component0 = checkbox0.attributes(stringArray0);
      assertSame(component0, checkbox0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      Checkbox checkbox0 = new Checkbox(text0, "", "");
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      Radio radio0 = new Radio(checkbox0, "mu&~Mf|BhrZ\"2'-F", "param");
      tableBlock0.var((Object) radio0);
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "?v@");
      Component component0 = tableBlock0.strong();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.script();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "^OqEK\"7ep87l", "^OqEK\"7ep87l", stringSelectModel0, "^OqEK\"7ep87l");
      Form form0 = new Form("~l+o!9*|%iuN*>s4S");
      Component component0 = select0.h6((Object) form0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "aJ%DZF-\"597#8WgAE");
      Text text0 = new Text(errorPage0, table0);
      text0.getComponentId();
      assertTrue(text0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "`?V}efsjsk");
      TableBlock tableBlock0 = table0.tfoot();
      Checkbox checkbox0 = new Checkbox(tableBlock0, "=gg0@7", "java.lang.String@0000000004");
      checkbox0.getAttributes();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      component0.create();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "dl");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.col();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "`?V}efsjsk");
      table0.renderHint("=gg0@7");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, ";_3C/Q&+D", "=|m/c3f{0@ Sa");
      // Undeclared exception!
      try { 
        fileInput0.multiSelect("=|m/c3f{0@ Sa", (ISelectModel) null, ";_3C/Q&+D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("org.mvel.ASTNode");
      ActionExpression actionExpression1 = actionExpression0.submitForm(false);
      errorPage0.form("d'@'8\"*^/8',Qk!=s", actionExpression1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Form form0 = new Form("%rWJ+xfv Y|j>a4F");
      ActionExpression actionExpression0 = new ActionExpression("%rWJ+xfv Y|j>a4F");
      actionExpression0.submissible(true);
      // Undeclared exception!
      try { 
        form0.form("Tbody component can be added only to a Table.", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "{");
      // Undeclared exception!
      try { 
        checkbox0.end("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("x/5n|Y^2%L8IJAOS}XL");
      Component component0 = xmlEntityRef0.clasS("s");
      assertSame(xmlEntityRef0, component0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("yk.Mc");
      Component component0 = xmlEntityRef0.attribute("yk.Mc", "yk.Mc");
      assertSame(component0, xmlEntityRef0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Form form0 = new Form("wheel.Messages");
      Component component0 = form0.actionBinding((String) null);
      assertSame(form0, component0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "");
      Hidden hidden0 = new Hidden(block0, "", "");
      hidden0.actionBinding("");
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      tableRow0._setComponentId("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      Text text0 = new Text(errorPage0, tableBlock0);
      StandaloneComponent standaloneComponent0 = text0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.var((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("56/n");
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "toString()", "56/n", "toString()");
      // Undeclared exception!
      try { 
        dateInput0.var();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Form form0 = new Form("!mk??UI6C;6O4<K");
      // Undeclared exception!
      try { 
        form0.strong((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, (String) null, (String) null, (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.strong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("");
      Checkbox checkbox0 = new Checkbox(form0, "", "?expires=");
      // Undeclared exception!
      try { 
        checkbox0.small();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Form form0 = new Form("mc|>x|K");
      // Undeclared exception!
      try { 
        form0.placeholder("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      Component component0 = table0.img("KN)@EoB0qGN", "");
      // Undeclared exception!
      try { 
        component0.noscript();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Form form0 = new Form("eUQR[p");
      // Undeclared exception!
      try { 
        form0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "org.mvel.conversion.ShortCH$2", "org.mvel.conversion.ShortCH$2", "org.mvel.conversion.ShortCH$2");
      // Undeclared exception!
      try { 
        dateInput0.h5((Object) "w3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "^3eNQIS", "", "/$>");
      // Undeclared exception!
      try { 
        dateInput0.h5();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Tr component can be added only to a TableBlock.");
      Submit submit0 = new Submit(xmlEntityRef0, "[MpN%`rzh:Xg#", "[MpN%`rzh:Xg#");
      Radio radio0 = new Radio(submit0, "Tr component can be added only to a TableBlock.", "Tr component can be added only to a TableBlock.");
      // Undeclared exception!
      try { 
        radio0.h1();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Form form0 = new Form("{");
      // Undeclared exception!
      try { 
        form0.form((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Form form0 = new Form("div");
      // Undeclared exception!
      try { 
        form0.dfn((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("4SQua>%w*pIK$");
      // Undeclared exception!
      try { 
        form0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Form form0 = new Form("?/iQdu(WO$B3");
      // Undeclared exception!
      try { 
        form0.big((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("n:]$=yro<nm.M[");
      // Undeclared exception!
      try { 
        xmlEntityRef0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Form form0 = new Form("longValue");
      Checkbox checkbox0 = new Checkbox(form0, "!8v-;NFRM9", "3&(&mk");
      // Undeclared exception!
      try { 
        form0.addFirst(checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "`>Hto|", "`>Hto|");
      // Undeclared exception!
      try { 
        errorPage0.add(textArea0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "Block_1");
      NumberInput numberInput0 = new NumberInput(checkbox0, (String) null, "Block_1");
      // Undeclared exception!
      try { 
        numberInput0.acronym();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" xmlns");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "8wu)qEYgC\"Z7[iW", "8wu)qEYgC\"Z7[iW");
      // Undeclared exception!
      try { 
        checkbox0.a();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "4H>Sa", "dd");
      TextArea textArea0 = new TextArea(checkbox0, "java.lang.String@0000000007", ")1BUhfJX");
      textArea0._wrapComponentId("wheel_ErrorPage");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.b();
      Component component0 = errorPage0.kbd((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Form form0 = new Form("\"*!pkNew'0yG&^");
      Checkbox checkbox0 = new Checkbox(form0, ",rhsN~_oQ\"", "\"*!pkNew'0yG&^");
      // Undeclared exception!
      try { 
        form0.addFormElement(checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("^='4Q?");
      Form form0 = new Form(errorPage0, "^='4Q?", actionExpression0);
      NumberInput numberInput0 = new NumberInput(errorPage0, "^='4Q?", "strike");
      form0.addFormElement(numberInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      tableRow0.createTh();
      tableRow0.createTh();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      tableRow0.afterAdd();
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._isGeneratedId();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "v", "v");
      checkbox0.label("#M @`LM'IK6k,`");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Form form0 = new Form("@/+pmMc=%U");
      // Undeclared exception!
      try { 
        form0.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0.date();
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "", "rix@UK");
      TextArea textArea0 = new TextArea(fileInput0, "rix@UK", "rix@UK");
      textArea0.end();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000009");
      Checkbox checkbox0 = new Checkbox(form0, "wheel.components.Form@0000000001", "wheel.components.Form@0000000001");
      Component component0 = checkbox0.end("java.lang.String@0000000009");
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      // Undeclared exception!
      try { 
        component0.end("d'@'8\"*^/8',Qk!=s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'd'@'8\"*^/8',Qk!=s'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "^='4Q?", "strike");
      ElExpression elExpression0 = new ElExpression("charAt");
      // Undeclared exception!
      try { 
        numberInput0.dt((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression charAt in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      TableBlock tableBlock0 = new TableBlock(block0);
      // Undeclared exception!
      try { 
        tableBlock0.find("nbsp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id nbsp on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get("5K_T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id '5K_T'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("C;}^#i");
      // Undeclared exception!
      try { 
        xmlEntityRef0.up(48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000009");
      XmlEntityRef xmlEntityRef1 = (XmlEntityRef)xmlEntityRef0.up((-2293));
      assertNull(xmlEntityRef1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "Block_1");
      NumberInput numberInput0 = new NumberInput(checkbox0, (String) null, "Block_1");
      boolean boolean0 = numberInput0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      boolean boolean0 = errorPage0.equals(calendar0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Form form0 = new Form("V}9t8A9");
      Form form1 = form0.renderHint("V}9t8A9");
      form1._clear();
      assertEquals("V}9t8A9", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("C{d2RDD;t");
      Form form0 = new Form(errorPage0, "C{d2RDD;t", actionExpression0);
      Component component0 = form0.tt((Object) actionExpression0);
      assertTrue(component0._isGeneratedId());
      
      form0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(form0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Form form0 = new Form("3lCAg@R=u^T");
      // Undeclared exception!
      try { 
        form0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Form form0 = new Form("RMrUQT'6%fOXs)GGt;");
      Form form1 = form0._getVisibleForm(true);
      assertEquals("RMrUQT'6%fOXs)GGt;", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Form form0 = new Form("RMrUQT'6%fOXs)GGt;");
      Form form1 = form0._getVisibleForm(false);
      assertNull(form1);
      assertEquals("RMrUQT'6%fOXs)GGt;", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Form form0 = new Form("GFh~0}k,");
      Checkbox checkbox0 = new Checkbox(form0, "java.lang.String@0000000009", "java.lang.String@0000000009");
      // Undeclared exception!
      try { 
        checkbox0.textInput("OC8nUi\"q/F_i1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "iframe", "sup");
      Boolean boolean0 = Boolean.valueOf(true);
      Label label0 = new Label(checkbox0, boolean0);
      label0.h5();
      ErrorPage errorPage1 = (ErrorPage)errorPage0.id("style");
      assertEquals("div", errorPage1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "?v@");
      ActionExpression actionExpression0 = new ActionExpression("?v@");
      Form form0 = new Form(tableBlock0, "legend", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("z3JL}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "dl");
      TableBlock tableBlock0 = table0.tbody();
      assertTrue(tableBlock0._isGeneratedId());
      
      tableBlock0.id("dl");
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Select select0 = new Select(block0, "mH<if@Kb?F", "", (ISelectModel) null, "mH<if@Kb?F");
      // Undeclared exception!
      try { 
        select0.id("java.lang.String@0000000009");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("C{d2RDD;t");
      Form form0 = new Form(errorPage0, "C{d2RDD;t", actionExpression0);
      Form form1 = form0.renderHint(actionExpression0);
      form1.toString();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(form1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "org.apache.commons.io.filefilter.AgeFileFilter", "H[U6f:d[s7U");
      List<RenderableComponent> list0 = fileInput0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("H[U6f:d[s7U", fileInput0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "]e8aO lvFvBmA", "UV[LlZ^O)J[0du");
      TextArea textArea0 = new TextArea(checkbox0, (String) null, (String) null);
      Select select0 = new Select(textArea0, "wheel_ErrorPage", "java.lang.String@0000000007", (ISelectModel) null, "UV[LlZ^O)J[0du");
      select0.noscript();
      // Undeclared exception!
      try { 
        select0.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getAction();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Form form0 = new Form("");
      String[] stringArray0 = new String[6];
      Component component0 = form0.attributes(stringArray0);
      assertEquals("wheel_components_Form", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Form form0 = new Form("JjL@!bjD+wrrAv_x");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        form0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "^OqEK\"7ep87l", "^OqEK\"7ep87l", stringSelectModel0, "^OqEK\"7ep87l");
      Table table0 = new Table(select0, "");
      Component component0 = table0.attributes((String[]) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("^OqEK\"7ep87l", select0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("^='4Q?");
      Form form0 = new Form(errorPage0, "^='4Q?", actionExpression0);
      Form form1 = (Form)form0.addInternalRenderHint("^='4Q?");
      Form form2 = form1.renderHint("^='4Q?");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(form2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "J!}7.");
      Table table1 = table0.renderHint("J!}7.");
      Table table2 = table1.renderHint("J!}7.");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Form form0 = new Form("V}9t8A9");
      // Undeclared exception!
      try { 
        form0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "`?V}efsjsk");
      TableBlock tableBlock0 = table0.tfoot();
      Checkbox checkbox0 = new Checkbox(tableBlock0, "=gg0@7", "java.lang.String@0000000004");
      TextInput textInput0 = new TextInput(tableBlock0, "`?V}efsjsk", "");
      // Undeclared exception!
      try { 
        checkbox0.em((Object) textInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b();
      Component component1 = component0.h1();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Tr component can be added only to a TableBlock.");
      Submit submit0 = new Submit(xmlEntityRef0, "[MpN%`rzh:Xg#", "[MpN%`rzh:Xg#");
      Radio radio0 = new Radio(submit0, "Tr component can be added only to a TableBlock.", "Tr component can be added only to a TableBlock.");
      // Undeclared exception!
      try { 
        radio0.cite((Object) "Tr component can be added only to a TableBlock.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Float float0 = new Float((-1.0F));
      Component component0 = errorPage0.ins((Object) float0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("h6");
      ElExpression elExpression0 = new ElExpression("h6");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(component0, "DUP", "DUP", dynamicSelectModel1, elExpression0);
      Component component1 = errorPage0.h5((Object) checkboxGroup0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(checkboxGroup0._isGeneratedId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("u");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "u", "u");
      // Undeclared exception!
      try { 
        hidden0.sup();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "java.lang.String@0000000004", "H73q?Fea");
      // Undeclared exception!
      try { 
        textInput0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      Component component1 = component0.span();
      assertEquals("Block_2", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "ol", "ol");
      Component component0 = errorPage0.pre((Object) hidden0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(hidden0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Form form0 = new Form((String) null);
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(form0, (String) null, "java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        errorPage0.addFirst(radio0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select("<?xml version=\"1.0\"", dynamicSelectModel0, "<?xml version=\"1.0\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("org.mvel.ASTNode");
      Component component0 = errorPage0.form("d'@'8\"*^/8',Qk!=s", actionExpression0);
      assertFalse(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Hidden hidden0 = new Hidden(tableRow0, (String) null, "9#O&J2Q:v=r6b$");
      TextArea textArea0 = new TextArea(hidden0, "9#O&J2Q:v=r6b$", "org.mvel.conversion.BooleanCH$5");
      // Undeclared exception!
      try { 
        textArea0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("y{jO-O^]Ni>");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.a(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Form form0 = new Form((String) null);
      Byte byte0 = new Byte((byte)62);
      // Undeclared exception!
      try { 
        form0.label((Object) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("@Z]", "@Z]");
      // Undeclared exception!
      try { 
        component0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "Could not encode string '", "Could not encode string '");
      // Undeclared exception!
      try { 
        hidden0.param("Could not encode string '", "Could not encode string '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.ByteCH$3");
      // Undeclared exception!
      try { 
        xmlEntityRef0.reset("org.mvel.conversion.ByteCH$3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "lPG,fazJF&]RSk~", "lPG,fazJF&]RSk~");
      // Undeclared exception!
      try { 
        checkbox0.ol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      DynamicSelectModel dynamicSelectModel0 = tableRow0.selectModel();
      Component component0 = errorPage0.big((Object) dynamicSelectModel0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock("");
      component0.dfn();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, " (attr value=", " (attr value=");
      // Undeclared exception!
      try { 
        fileInput0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "J!}7.");
      table0._setParent(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Form form0 = new Form("unsupported feature ");
      // Undeclared exception!
      try { 
        form0.address((Object) "unsupported feature ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("rB>5)!\"%VOp>$d6");
      MXSerializer mXSerializer0 = new MXSerializer();
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      StaticXmlSerializerWrapper staticXmlSerializerWrapper0 = new StaticXmlSerializerWrapper(mXSerializer0, xmlPullWrapperFactory0);
      xmlEntityRef0._renderActions(staticXmlSerializerWrapper0);
      assertEquals("rB>5)!\"%VOp>$d6", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      Component component1 = component0.style();
      assertEquals("Block_2", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      // Undeclared exception!
      try { 
        tableRow0.textarea("java.lang.String@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      dynamicSelectModel0.enumeration("<6JB[H");
      ElExpression elExpression0 = new ElExpression("<6JB[H");
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "<6JB[H", "<6JB[H", dynamicSelectModel0, elExpression0);
      DateInput dateInput0 = new DateInput(errorPage0, "", (String) null, "<6JB[H");
      Component component0 = radioGroup0.u((Object) dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("<6JB[H", radioGroup0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "]e8aO lvFvBmA", "UV[LlZ^O)J[0du");
      TextArea textArea0 = new TextArea(checkbox0, (String) null, (String) null);
      Select select0 = new Select(textArea0, "wheel_ErrorPage", "java.lang.String@0000000007", (ISelectModel) null, "UV[LlZ^O)J[0du");
      Component component0 = select0.noscript();
      Component component1 = component0.br();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
      assertFalse(select0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "div");
      Component component0 = tableBlock0.table();
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Form form0 = new Form("O^}zR]");
      // Undeclared exception!
      try { 
        form0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      xmlEntityRef0.action("java/lang/Byte");
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      Link link0 = new Link(tableRow0, "");
      Float float0 = new Float(1377.3954F);
      Text text0 = (Text)link0.rawText(float0);
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(text0.isCdata());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}3$9?eS3YH>y%Y9VhzD");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.radioGroup("xA</Z?+|mQD.y<t", stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "dl", "H)I} W.Nld5]JG6^");
      // Undeclared exception!
      try { 
        submit0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.submit("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Form form0 = new Form("Oj4vL~ur:9d=D");
      // Undeclared exception!
      try { 
        form0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "J!}7.");
      TableBlock tableBlock0 = table0.thead();
      TextInput textInput0 = new TextInput(tableBlock0, "J!}7.", "!QZ=Xb;C0<(c[Ee*D");
      // Undeclared exception!
      try { 
        textInput0.cite();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "G.", "G.");
      // Undeclared exception!
      try { 
        hidden0.big();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.iframe();
      // Undeclared exception!
      try { 
        component0.remove((Component) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "", (String) null, stringSelectModel0, elExpression0);
      Checkbox checkbox0 = new Checkbox(radioGroup0, "", "numberInputError");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("').focus();");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Form form0 = new Form("");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        form0.h1((Object) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Form form0 = new Form("Tfoot component can be added only to a Table.");
      // Undeclared exception!
      try { 
        form0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      Checkbox checkbox0 = new Checkbox(text0, "", "");
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      tableBlock0.dd((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "iframe", "sup");
      TextInput textInput0 = new TextInput(checkbox0, "/|YE:rRUBl", "");
      checkbox0._applyFormat(textInput0);
      assertTrue(textInput0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.title("org.mvel");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Form form0 = new Form("W@zN6j um4");
      // Undeclared exception!
      try { 
        form0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.u();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Any any0 = new Any(errorPage0, (CharSequence) null);
      // Undeclared exception!
      try { 
        any0.script();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        submit0.hidden("java.lang.String@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Form form0 = new Form("IaRd*B&'dyY`6rQfM");
      // Undeclared exception!
      try { 
        form0.small((Object) "IaRd*B&'dyY`6rQfM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "lSmP;`9eI,+9");
      Component component0 = table0.h2();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "href", "href");
      // Undeclared exception!
      try { 
        numberInput0.htmlText((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "?v@");
      ActionExpression actionExpression0 = new ActionExpression("?v@");
      Form form0 = new Form(tableBlock0, "legend", actionExpression0);
      Component component0 = form0.li((Object) "legend");
      assertEquals("legend", form0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Form form0 = new Form("->");
      // Undeclared exception!
      try { 
        form0.bdo("->");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Form form0 = new Form("`@<crM(/pk&");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.h3(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "");
      Radio radio0 = new Radio(errorPage0, "4SN3>.{*,d\"", "area");
      block0.code((Object) radio0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertFalse(radio0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Form form0 = new Form("blockquote");
      // Undeclared exception!
      try { 
        form0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "hE|WP#RHy7g?M", "hE|WP#RHy7g?M");
      // Undeclared exception!
      try { 
        textInput0.numberInput("hE|WP#RHy7g?M", (CharSequence) "hE|WP#RHy7g?M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      LocalDate localDate0 = MockLocalDate.now();
      Component component0 = errorPage0.h4((Object) localDate0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      Component component1 = component0.abbr();
      assertEquals("Block_2", component0.getComponentId());
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "(vJ\"&.;oo]#lpI:l>0", (String) null);
      Component component0 = errorPage0.b((Object) fileInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "lSmP;`9eI,+9");
      // Undeclared exception!
      try { 
        table0.buttonInput("o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "dl");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.entity("dl");
      // Undeclared exception!
      try { 
        component0.span((Object) tableBlock0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "h1", "wheel_ErrorPage");
      // Undeclared exception!
      try { 
        fileInput0.passwordInput("h1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "kKm/+", "kKm/+");
      // Undeclared exception!
      try { 
        radio0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "wheel.components.ActionExpression", "wheel.components.ActionExpression");
      Component component0 = errorPage0.noframes();
      Component component1 = component0.hr();
      // Undeclared exception!
      try { 
        component1.var((Object) textArea0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.pre();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Select select0 = new Select((Component) null, "kbd", "J", (ISelectModel) null, "J");
      // Undeclared exception!
      try { 
        select0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("null");
      Component component0 = errorPage0.sub((Object) actionExpression0);
      Component component1 = component0.object();
      ElExpression elExpression0 = new ElExpression("Text_1");
      List<Component> list0 = component1.findAll(elExpression0);
      assertTrue(component1._isGeneratedId());
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "", "org.mvel.conversion.CharCH");
      Radio radio0 = new Radio(textArea0, "", "(3b}yt\"yv");
      // Undeclared exception!
      try { 
        radio0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.acronym();
      // Undeclared exception!
      try { 
        errorPage0.remove("aJ%DZF-\"597#8WgAE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id aJ%DZF-\"597#8WgAE does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("C{d2RDD;t");
      Form form0 = new Form(errorPage0, "C{d2RDD;t", actionExpression0);
      Component component0 = form0.tt((Object) actionExpression0);
      assertTrue(component0._isGeneratedId());
      
      List<RenderableComponent> list0 = form0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertEquals("C{d2RDD;t", form0.getComponentId());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Form form0 = new Form("org.mvel.ast.PreFixDecNode");
      // Undeclared exception!
      try { 
        form0.radio("Np*G_e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" gtc_CqGeiUA*P%<");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression(" gtc_CqGeiUA*P%<");
      RadioGroup radioGroup0 = new RadioGroup(xmlEntityRef0, " gtc_CqGeiUA*P%<", " gtc_CqGeiUA*P%<", stringSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.ul();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "?v@");
      ActionExpression actionExpression0 = new ActionExpression("?v@");
      Component component0 = tableBlock0.abbr((Object) actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("BZAy=M'3");
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Form form0 = new Form("@A");
      Hidden hidden0 = new Hidden(form0, "@A", "setOutput() must called set before serialization can start");
      // Undeclared exception!
      try { 
        hidden0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "Failed to initialize SimpleDateFormat with pattern '");
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "iframe", "sup");
      Boolean boolean0 = Boolean.valueOf(true);
      Label label0 = new Label(checkbox0, boolean0);
      Component component0 = label0.h5();
      String string0 = component0.getComponentName();
      assertEquals("Block", string0);
      assertFalse(checkbox0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "v", "v");
      Any any0 = new Any(checkbox0, "v");
      // Undeclared exception!
      try { 
        any0.fieldset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.base("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Form form0 = new Form((String) null);
      FileInput fileInput0 = new FileInput(form0, "Ye;RFlL%ge?57n])N", "@jlU");
      Checkbox checkbox0 = new Checkbox(fileInput0, (String) null, "@jlU");
      // Undeclared exception!
      try { 
        checkbox0.strike((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("jjA@B@MvwE");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, (String) null, "jjA@B@MvwE");
      // Undeclared exception!
      try { 
        checkbox0.q((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000009");
      Checkbox checkbox0 = new Checkbox(form0, "wheel.components.Form@0000000001", "wheel.components.Form@0000000001");
      // Undeclared exception!
      try { 
        checkbox0.li();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Form form0 = new Form("wheel.Messages");
      Radio radio0 = new Radio(form0, (String) null, "\"$aB[-t{_kKOam~.Nc");
      // Undeclared exception!
      try { 
        radio0.s((Object) "wheel.Messages");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "4SN3>.{*,d\"", "area");
      // Undeclared exception!
      try { 
        radio0.address();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.imageSubmit("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "org.apache.commons.io.filefilter.AgeFileFilter", "H[U6f:d[s7U");
      Radio radio0 = new Radio(fileInput0, "Y/1#3;#6V.o6|3", "org.apache.commons.io.filefilter.AgeFileFilter");
      ActionExpression actionExpression0 = new ActionExpression("");
      Form form0 = new Form(radio0, "FO/91+6R+g\">B", actionExpression0);
      // Undeclared exception!
      try { 
        form0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      Component component1 = component0.form("text/javascript");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("text/javascript", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "gO655=pg{D(4", ";%mC");
      TextInput textInput0 = new TextInput(checkbox0, "", "gO655=pg{D(4");
      Double double0 = Double.valueOf((-1297.591846739693));
      // Undeclared exception!
      try { 
        textInput0.legend((Object) double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "JcR<Ry<80XH%c", "java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        submit0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("x/5n|Y^2%L8IJAOS}XL");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "s", "{^n4RUskSL)>CD]");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp((Object) textInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "strsim");
      // Undeclared exception!
      try { 
        checkbox0.img((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("href");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        errorPage0.checkboxGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "`W9{9]Mt._", "`W9{9]Mt._");
      // Undeclared exception!
      try { 
        radio0.fileInput((String) null, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      ActionExpression actionExpression0 = new ActionExpression("wZ9@;6&_4jB,*oM");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i((Object) actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput("div");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "y=j4(<pWuAb");
      assertEquals("y=j4(<pWuAb", tableBlock0.getComponentId());
      
      tableBlock0._setComponentId("'AW}YG)Hwmhgq");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Form form0 = new Form("");
      form0.getAttributes();
      assertEquals("wheel_components_Form", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      Text text0 = new Text(errorPage0, tableBlock0);
      // Undeclared exception!
      try { 
        text0.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("C{d2RDD;t");
      Form form0 = new Form(errorPage0, "C{d2RDD;t", actionExpression0);
      FormElement formElement0 = form0.checkbox("C{d2RDD;t");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(formElement0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Form form0 = new Form("B=3YDG*0f2s");
      // Undeclared exception!
      try { 
        form0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "dl");
      TableBlock tableBlock0 = table0.tbody();
      FileInput fileInput0 = new FileInput(table0, "", "");
      Component component0 = tableBlock0.dt((Object) fileInput0);
      component0.blockquote();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(fileInput0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "L]C}0AK", "null");
      // Undeclared exception!
      try { 
        checkbox0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Float float0 = new Float((-1.0F));
      Component component0 = errorPage0.ins((Object) float0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("h6");
      ElExpression elExpression0 = new ElExpression("h6");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(component0, "DUP", "DUP", dynamicSelectModel1, elExpression0);
      FileInput fileInput0 = new FileInput(checkboxGroup0, "cGc7AZ@$0RVG?x<Eg;)", "samp");
      Checkbox checkbox0 = new Checkbox(component0, "POP", "textarea");
      // Undeclared exception!
      try { 
        fileInput0.dateFormat("java.lang.String@0000000004", checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'java.lang.String@0000000004'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("div");
      Component component0 = errorPage0.remove((Component) block0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
      assertFalse(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      dynamicSelectModel0.enumeration("<6JB[H");
      ElExpression elExpression0 = new ElExpression("<6JB[H");
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "<6JB[H", "<6JB[H", dynamicSelectModel0, elExpression0);
      Component component0 = errorPage0.dt((Object) radioGroup0);
      component0.el("^JV8IJ|9&8l9~:5-78");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("<6JB[H", radioGroup0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("del");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Form form0 = new Form("`@<crM(/pk&");
      TextInput textInput0 = new TextInput(form0, "`@<crM(/pk&", "`@<crM(/pk&");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        textInput0.area(stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b();
      Component component1 = component0.acronym((Object) errorPage0);
      String string0 = component1.eval((Object) null);
      assertTrue(component1._isGeneratedId());
      assertEquals("null", string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "y=j4(<pWuAb");
      Component component0 = tableBlock0.h3();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("y=j4(<pWuAb", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "", "vm^j6^y79ZG", stringSelectModel0, "vm^j6^y79ZG");
      Table table0 = new Table(select0, "'");
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.h6();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      Checkbox checkbox0 = new Checkbox(text0, "", "");
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      tableBlock0.s();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, ".", "f^E?");
      // Undeclared exception!
      try { 
        hidden0.dateInput("f^E?", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("entity reference names can not start with character '");
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        xmlEntityRef0.sup((Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("^='4Q?");
      Form form0 = new Form(errorPage0, "^='4Q?", actionExpression0);
      Component component0 = form0.small();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("^='4Q?", form0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Form form0 = new Form("{Q|TFE!Wj.");
      // Undeclared exception!
      try { 
        form0.frame("{Q|TFE!Wj.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone", "X7Z'G[r", (ISelectModel) null, "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone");
      Link link0 = new Link(errorPage0, select0);
      Checkbox checkbox0 = new Checkbox(link0, "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone", "gQS");
      // Undeclared exception!
      try { 
        checkbox0.samp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Form form0 = new Form("iframe");
      // Undeclared exception!
      try { 
        form0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "'.", "cite");
      // Undeclared exception!
      try { 
        radio0.map("cite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("C{d2RDD;t");
      Form form0 = new Form(errorPage0, "C{d2RDD;t", actionExpression0);
      Component component0 = form0.actionBinding("C{d2RDD;t");
      assertFalse(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "", "rix@UK");
      // Undeclared exception!
      try { 
        fileInput0.h6((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.h2((Object) "~Z(xewSEXtGeTNK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Form form0 = new Form("");
      Component component0 = form0.clasS("");
      assertEquals("wheel_components_Form", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("", dynamicSelectModel0, "tr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "xUL");
      Component component0 = tableBlock0.legend();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Form form0 = new Form("7.QN");
      // Undeclared exception!
      try { 
        form0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      String string0 = table0.toString();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("<table id=\"Table_1\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      dynamicSelectModel0.enumeration("<6JB[H");
      ElExpression elExpression0 = new ElExpression("<6JB[H");
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "<6JB[H", "<6JB[H", dynamicSelectModel0, elExpression0);
      Component component0 = errorPage0.dt((Object) radioGroup0);
      Component component1 = component0.dfn((Object) "expected name start and not ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("<6JB[H", radioGroup0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("yk.Mc");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
