/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:43:36 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import okio.Buffer;
import okio.ByteString;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1946);
      ByteString byteString0 = segmentedByteString0.hmacSha512(segmentedByteString0);
      Pipe pipe0 = new Pipe(1000000001L);
      segmentedByteString0.hmacSha1(byteString0);
      Buffer buffer2 = pipe0.buffer;
      segmentedByteString0.md5();
      assertEquals(1946, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1215);
      segmentedByteString0.getByte(45);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1215);
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=3130303030303030303030303030303130303030303030303030303030303130\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1220);
      buffer1.indexOfElement((ByteString) segmentedByteString0, 1000000000L);
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.substring(0, 1189);
      segmentedByteString0.sha1();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(1000000010L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2408);
      ByteString byteString0 = segmentedByteString0.hmacSha512(segmentedByteString0);
      segmentedByteString0.asByteBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString.encodeUtf8("hKdz1vb2#s+2z-f6");
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2408);
      segmentedByteString0.equals(byteString0);
      Buffer buffer2 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      segmentedByteString0.md5();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 999999986L;
      Buffer buffer1 = buffer0.writeDecimalLong((-14));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 0);
      segmentedByteString0.hashCode();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 1200);
      segmentedByteString1.getByte(749);
      buffer_UnsafeCursor0.seek(749);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2408);
      ByteString byteString0 = segmentedByteString0.hmacSha512(segmentedByteString0);
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-122);
      byte byte1 = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      segmentedByteString0.lastIndexOf(byteArray0, (int) (byte)0);
      byteString0.compareTo((ByteString) segmentedByteString0);
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer2 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2408);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer2 = pipe0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteArrayOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 127);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 52);
      segmentedByteString0.rangeEquals(2398, (byte[]) null, 2410, 2435);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      segmentedByteString0.write(pipedOutputStream0);
      segmentedByteString0.rangeEquals((-1), (byte[]) null, 2435, 2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(6L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.asByteBuffer();
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer2 = pipe0.buffer;
      buffer1.segmentSizes();
      segmentedByteString0.size();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      segmentedByteString0.write(buffer_UnsafeCursor0.buffer);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(12, (byte[]) null, 1, (-3248));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2446);
      segmentedByteString0.hmacSha1(segmentedByteString0);
      segmentedByteString0.asByteBuffer();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.segmentSizes();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        segmentedByteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1212);
      byte byte0 = ObjectStreamConstants.TC_CLASS;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteArrayOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 760);
      segmentedByteString0.equals(pipedInputStream0);
      Buffer buffer3 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 65;
      segmentedByteString0.rangeEquals(65, (byte[]) null, (-1), 15);
      buffer_UnsafeCursor0.buffer.clone();
      segmentedByteString0.substring(12);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      // Undeclared exception!
      try { 
        realBufferedSource2.readByteString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(27L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2442);
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2393);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1, 2393);
      segmentedByteString0.equals(buffer_UnsafeCursor0);
      Buffer buffer2 = new Buffer();
      boolean boolean0 = buffer_UnsafeCursor0.readWrite;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream1);
      segmentedByteString0.rangeEquals((-1), (byte[]) null, (-425), (-425));
      segmentedByteString0.internalArray();
      segmentedByteString0.size();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1212);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 760);
      segmentedByteString0.equals(pipedInputStream0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      segmentedByteString0.write(byteArrayOutputStream0);
      byte byte1 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      realBufferedSource0.buffer();
      ByteString byteString0 = segmentedByteString0.sha1();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      segmentedByteString0.rangeEquals(1599, byteString0, 1212, (int) (byte)123);
      // Undeclared exception!
      try { 
        buffer3.readByteArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2442);
      segmentedByteString0.hmacSha1(segmentedByteString0);
      Pipe pipe0 = new Pipe(8L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|*GcXI7%Y.OWa");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteArrayOutputStream0.close();
      segmentedByteString0.equals(segmentedByteString0);
      Buffer buffer2 = new Buffer();
      boolean boolean0 = pipe0.sinkClosed;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe1 = new Pipe(8L);
      boolean boolean1 = pipe0.sourceClosed;
      byte[] byteArray0 = new byte[0];
      segmentedByteString0.rangeEquals(41, byteArray0, 2442, 1940);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer3, (-817));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-817
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      buffer1.readUnsafe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2442);
      segmentedByteString0.hmacSha1(segmentedByteString0);
      segmentedByteString0.asByteBuffer();
      Pipe pipe0 = new Pipe(8L);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, (byte)125);
      // Undeclared exception!
      try { 
        segmentedByteString1.indexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1212);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 760);
      segmentedByteString0.equals(pipedInputStream0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      segmentedByteString0.write(byteArrayOutputStream0);
      byte byte1 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      realBufferedSource0.buffer();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 2);
      segmentedByteString1.hashCode();
      byte byte2 = ObjectStreamConstants.SC_ENUM;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.indexOf((ByteString) segmentedByteString1);
      segmentedByteString0.write(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        segmentedByteString1.getByte(960);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=960 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2421);
      segmentedByteString0.hmacSha256(segmentedByteString0);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)99;
      byteArray0[2] = (byte)47;
      segmentedByteString0.lastIndexOf(byteArray0, (int) (byte)47);
      segmentedByteString0.asByteBuffer();
      Pipe pipe0 = new Pipe((byte)99);
      Buffer buffer2 = pipe0.buffer;
      ByteString.encodeUtf8("hKdz1vb2#s+2z-f6");
      segmentedByteString0.equals(buffer2);
      Buffer buffer3 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = pipe0.sourceClosed;
      segmentedByteString0.rangeEquals((int) (byte)47, byteArray0, (int) (byte)99, (int) (byte) (-90));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2408);
      segmentedByteString0.hmacSha512(segmentedByteString0);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-122);
      segmentedByteString0.startsWith(byteArray0);
      int int0 = 2431;
      segmentedByteString0.rangeEquals((int) (byte) (-122), byteArray0, 60, 2408);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.toByteArray();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 909);
      segmentedByteString1.getByte((byte)99);
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer1, (-3058));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1000000001 offset=0 byteCount=-3058
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1949);
      segmentedByteString0.hmacSha512(segmentedByteString0);
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte)106;
      segmentedByteString0.lastIndexOf(byteArray0, 1908);
      segmentedByteString0.asByteBuffer();
      Pipe pipe0 = new Pipe((byte)106);
      Buffer buffer2 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString byteString0 = segmentedByteString0.hmacSha512(segmentedByteString0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, (byte)106);
      segmentedByteString1.endsWith(byteArray0);
      buffer0.rangeEquals((long) 1908, byteString0);
      segmentedByteString1.equals(byteString0);
      Buffer buffer3 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.sha512();
      Pipe pipe1 = new Pipe(1908);
      boolean boolean0 = pipe0.sourceClosed;
      segmentedByteString0.sha1();
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer3, 1949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1949
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1212);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 760);
      segmentedByteString0.equals(pipedInputStream0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      segmentedByteString0.write(byteArrayOutputStream0);
      segmentedByteString0.getByte(1074);
      realBufferedSource0.buffer();
      ByteString byteString0 = segmentedByteString0.sha1();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      segmentedByteString0.rangeEquals((int) (byte)48, byteString0, 1212, (int) (byte)123);
      // Undeclared exception!
      try { 
        buffer3.readByteArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 1206);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 760);
      segmentedByteString0.equals(pipedInputStream0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      segmentedByteString0.write(byteArrayOutputStream0);
      segmentedByteString0.getByte(1074);
      Buffer buffer4 = realBufferedSource0.buffer;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 6);
      segmentedByteString1.hashCode();
      byte byte1 = ObjectStreamConstants.SC_ENUM;
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 52);
      segmentedByteString2.rangeEquals((-1), (ByteString) segmentedByteString0, 6, 6);
      buffer2.readLong();
      SegmentedByteString segmentedByteString3 = new SegmentedByteString(buffer2, 52);
      segmentedByteString3.toAsciiLowercase();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2421);
      ByteString byteString0 = segmentedByteString0.hmacSha256(segmentedByteString0);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)99;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-122);
      byteArray0[10] = (byte) (-90);
      buffer1.size = 0L;
      byteArray0[5] = (byte)74;
      segmentedByteString0.lastIndexOf(byteArray0, (int) (byte)74);
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer2 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteString.encodeUtf8("hKdz1vb2#s+2z-f6");
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 127);
      segmentedByteString0.equals(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = pipe0.sourceClosed;
      boolean boolean1 = pipe0.sourceClosed;
      segmentedByteString0.rangeEquals(2, byteString0, 2, (-1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      long long0 = 8L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      int int0 = 2442;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2442);
      segmentedByteString0.hmacSha1(segmentedByteString0);
      Pipe pipe0 = new Pipe(8L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|*GcXI7%Y.OWa");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteArrayOutputStream0.close();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2442);
      segmentedByteString0.equals(segmentedByteString1);
      Buffer buffer2 = new Buffer();
      boolean boolean0 = pipe0.sinkClosed;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      Pipe pipe1 = new Pipe(long0);
      boolean boolean1 = pipe0.sourceClosed;
      int int1 = 41;
      byte[] byteArray0 = new byte[0];
      int int2 = 1940;
      segmentedByteString0.rangeEquals(int1, byteArray0, int0, int2);
      int int3 = (-817);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer3, int3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1946);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)73;
      segmentedByteString0.lastIndexOf(byteArray0, 1);
      segmentedByteString0.asByteBuffer();
      Pipe pipe0 = new Pipe(1908);
      Buffer buffer2 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      segmentedByteString0.hmacSha512(byteString0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 3027);
      segmentedByteString0.equals(byteString0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000029L;
      Buffer buffer1 = buffer0.writeDecimalLong(6L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2442);
      ByteString byteString0 = segmentedByteString0.hmacSha1(segmentedByteString0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      segmentedByteString0.hashCode();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer2, 2442);
      segmentedByteString0.hashCode();
      segmentedByteString0.getByte(1287);
      buffer2.readUtf8CodePoint();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      segmentedByteString0.toAsciiLowercase();
      byteString0.toString();
      segmentedByteString1.base64Url();
      segmentedByteString0.sha1();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Buffer buffer0 = new Buffer();
          buffer0.size = 1000000000L;
          Buffer buffer1 = buffer0.writeDecimalLong(8L);
          SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2442);
          segmentedByteString0.hmacSha1(segmentedByteString0);
          Pipe pipe0 = new Pipe(8L);
          ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|*GcXI7%Y.OWa");
          ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          Buffer buffer2 = new Buffer();
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`a%LdXeu");
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`a%LdXeu");
          FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
          // Undeclared exception!
          try { 
            segmentedByteString0.write((OutputStream) null);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // out == null
             //
             verifyException("okio.SegmentedByteString", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2408);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-104);
      int int0 = ObjectStreamConstants.baseWireHandle;
      segmentedByteString0.asByteBuffer();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer2 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)45);
      segmentedByteString0.equals(segmentedByteString0);
      Buffer buffer3 = new Buffer();
      boolean boolean0 = pipe0.sinkClosed;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      segmentedByteString0.hex();
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer2, 8257536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8257536
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)118);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)75;
      segmentedByteString0.startsWith(byteArray0);
      ByteString byteString0 = ByteString.encodeUtf8("");
      segmentedByteString0.indexOf(byteString0, (int) (byte) (-37));
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      charset1.aliases();
      ByteString.encodeString("", charset0);
      segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.string(charset0);
      segmentedByteString0.write(buffer1);
      segmentedByteString0.equals(charset1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeDecimalLong(8L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1946);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)73;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.asByteBuffer();
      Pipe pipe0 = new Pipe(1908);
      Buffer buffer2 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      segmentedByteString0.hmacSha512(byteString0);
      pipe0.sinkClosed = false;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)91);
      segmentedByteString0.equals(byteString0);
      Buffer buffer3 = new Buffer();
      segmentedByteString1.utf8();
      boolean boolean0 = pipe0.sinkClosed;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe1 = new Pipe(100L);
      boolean boolean1 = pipe1.sourceClosed;
      segmentedByteString1.toString();
      segmentedByteString0.asByteBuffer();
  }
}
