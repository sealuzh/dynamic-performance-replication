/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:58:42 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(595, 595);
      cRSMatrix0.set(0, 13, 13);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 5;
      double[][] doubleArray0 = new double[1][2];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int1 = 424;
      cRSMatrix0.copyOfRows(5);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int2 = 3;
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(424, (double) 424);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '424' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(5, 5, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(6, 6, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(17, 0, doubleArray0);
      double double0 = cRSMatrix0.min();
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3556, (byte)32);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      double double1 = new Integer(3556);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1000, 1000, 2093.13951904527, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[1];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = (-1);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator1);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random((-902), 564, (double) (-902), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 13, 2795);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2795, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2795, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2795, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(13, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 612;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 612;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '612' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(rowMajorMatrixIterator0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 13, 2795);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2795, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2795, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2795, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(13, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)64;
      byteArray0[1] = (byte)64;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix.diagonal(633, 633);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 447;
      doubleArray0[1] = (double) 447;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(447, 447, doubleArray0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4169, 4169);
      assertNotNull(cRSMatrix1);
      
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.iterator();
      int int0 = 3;
      cRSMatrix0.get(3, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(0, vectorProcedure0);
      CRSMatrix.fromMatrixMarket("`%a;wPt]bjxGQik)j&");
      cRSMatrix0.setColumn(int0, (double) int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.1111111111111111, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      cRSMatrix0.setColumn(0, (double) 0);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      double double0 = cRSMatrix0.manhattanNorm();
      assertEquals(8.0, double0, 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      double double1 = cRSMatrix0.norm();
      assertEquals(2.8284271247461903, double1, 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(0.09876543209876543, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      
      MockRandom mockRandom0 = new MockRandom(9983L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure0);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(595, 595);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.set(5, 0, 4.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-1249), (-518), (-518));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1249' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(628, 628);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.toBinary();
      cRSMatrix0.to((MatrixFactory<Matrix>) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(970, 2324.194);
      cRSMatrix0.set(17, 17, 0.0);
      cRSMatrix0.nonZeroIteratorOfRow((-196));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.slice(613, Integer.MAX_VALUE, Integer.MAX_VALUE, 613);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [613..2147483647][2147483647..613].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1000;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1000, 1000);
      int int1 = 0;
      cRSMatrix0.nonZeroRowMajorIterator();
      int int2 = 3;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cRSMatrix0.nonZeroAt(4, 454);
      CRSMatrix.fromCSV("-T[?oYK2Q");
      String string0 = "";
      cRSMatrix0.mkString(numberFormat0, string0, string0);
      cRSMatrix0.setColumn(int2, (double) int2);
      cRSMatrix0.manhattanNorm();
      cRSMatrix0.minInRow(int1);
      cRSMatrix0.getRow(int0);
      int[] intArray0 = new int[2];
      intArray0[0] = int1;
      intArray0[1] = int1;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3556, (byte)32);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      Matrix.zero((byte)32, (byte)32);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.nonZeroAt((byte)32, (byte)32);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, (-1598.42231310129));
      int int0 = (-4482);
      cRSMatrix0.eachNonZeroInColumn((-4482), (VectorProcedure) null);
      int int1 = 32;
      int int2 = 4;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(2796, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2796' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2791);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(13, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      int int0 = (-1);
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator1).accumulate();
      cRSMatrix1.foldNonZeroInRows(vectorAccumulator1);
      cRSMatrix1.toRowVector();
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("UbEk=9{2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1366);
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1366;
      doubleArray1[1] = (double) 1366;
      doubleArray1[2] = (double) 1366;
      doubleArray1[3] = (double) 1366;
      doubleArray1[4] = (double) 1366;
      doubleArray1[5] = (double) 1366;
      doubleArray1[6] = (double) 1366;
      doubleArray1[7] = (double) 1366;
      doubleArray1[8] = (double) 1366;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 1366;
      doubleArray2[1] = (double) 1366;
      doubleArray2[2] = (double) 1366;
      doubleArray2[3] = (double) 1366;
      doubleArray2[4] = (double) 1366;
      doubleArray2[5] = (double) 1366;
      doubleArray2[6] = (double) 1366;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 1366;
      doubleArray3[1] = (double) 1366;
      doubleArray3[2] = 1347.188308385829;
      doubleArray3[3] = (double) 1366;
      doubleArray3[4] = (double) 1366;
      doubleArray3[5] = (double) 1366;
      doubleArray3[6] = (double) 1366;
      doubleArray3[7] = 2113.006123662713;
      doubleArray3[8] = (double) 1366;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 1347.188308385829;
      doubleArray4[1] = 2113.006123662713;
      doubleArray4[2] = 2113.006123662713;
      doubleArray4[3] = (double) 1366;
      doubleArray4[4] = 2113.006123662713;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 1347.188308385829;
      doubleArray5[1] = 1347.188308385829;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (double) 1366;
      doubleArray6[1] = 2113.006123662713;
      doubleArray6[2] = 2113.006123662713;
      doubleArray6[3] = (double) 1366;
      doubleArray6[4] = 1347.188308385829;
      doubleArray6[5] = (double) 1366;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 2113.006123662713;
      doubleArray7[1] = 2113.006123662713;
      doubleArray7[2] = 2113.006123662713;
      doubleArray7[3] = 2113.006123662713;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (-1146.169);
      doubleArray8[1] = (double) 1366;
      doubleArray8[2] = 2113.006123662713;
      doubleArray8[3] = (-0.35355339059327373);
      doubleArray0[7] = doubleArray8;
      Matrix.from2DArray(doubleArray0);
      int int0 = 187;
      cRSMatrix0.eachNonZeroInRow(187, (VectorProcedure) null);
      int int1 = (-2170);
      cRSMatrix0.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 424;
      int int1 = 1014;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1014, 0.0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(394, 1014, matrixFunction0);
      double double0 = cRSMatrix0.min();
      int int2 = 608;
      cRSMatrix0.maxInRow(608);
      int int3 = Double.MIN_EXPONENT;
      int int4 = 588;
      cRSMatrix0.toRowMajorSparseMatrix();
      MockRandom mockRandom1 = new MockRandom((-1022));
      SparseVector sparseVector0 = SparseVector.random(424, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
      cRSMatrix0.multiply((Matrix) cRSMatrix0);
      int int5 = 0;
      CRSMatrix.randomSymmetric(int5, double0, (Random) mockRandom1);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector1 = SparseVector.zero(int2);
      ooPlaceVectorByMatrixMultiplication0.partiallyApply(sparseVector1);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix0.setRow(int1, vector0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(int4, vectorFunction0);
      int int6 = (-246);
      int int7 = 4;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int6, int3, int7);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(int0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachNonZeroInRow(int4, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      cRSMatrix0.rotate();
      cRSMatrix0.iteratorOfNonZeroRows();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.max();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.getColumn((-1572));
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("GUUe}^G?p1v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.norm();
      cRSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(3, (-223));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      cRSMatrix0.rotate();
      cRSMatrix0.iteratorOfNonZeroRows();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cRSMatrix0.toColumnVector();
      int int1 = 488;
      int int2 = 836;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(488, 836, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 488
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2461, 540);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(628, 628);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.getRow(1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(617);
      cRSMatrix0.setRow(5, (double) 5);
      int int0 = (-277);
      cRSMatrix0.minInRow(int0);
      String string0 = "P\\pQ&t4NZ";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(633, 633);
      int int0 = 31;
      cRSMatrix0.setRow(31, (double) 31);
      Matrix matrix0 = cRSMatrix0.blank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(int0, vectorFunction0);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int1 = 16;
      cRSMatrix0.minInRow(int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 628;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(628, 628);
      int int1 = 0;
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      MockRandom mockRandom0 = new MockRandom(628);
      cRSMatrix0.transformRow(0, (VectorFunction) null);
      long long0 = 0L;
      MockRandom mockRandom1 = new MockRandom(long0);
      mockRandom1.nextInt(int1);
      MockRandom mockRandom2 = new MockRandom();
      int int2 = (-3974);
      int int3 = 678;
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int0, int3, (double) int2, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure0);
      int int4 = 8;
      cRSMatrix0.blankOfShape(int0, int4);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2266);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 2795;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 13, 2795);
      cRSMatrix0.toColumnMajorSparseMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = 13;
      intArray0[1] = 13;
      cRSMatrix0.minInRow(13);
      cRSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.longs(2293L, (long) 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copy();
      cRSMatrix0.norm();
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(17, 0, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.setAll(0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 628;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(628, 628);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      Double double0 = new Double(0.0);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      cRSMatrix0.apply(matrixOperation0);
      cRSMatrix0.setAll(628);
      int int1 = (-632);
      CRSMatrix.zero(int1, int0);
      int int2 = 624;
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(int2, int2, doubleArray0);
      MatrixOperation<Object> matrixOperation1 = null;
      cRSMatrix1.apply(matrixOperation1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(17, 0, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.copyOfColumns(5);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.max();
      cRSMatrix0.setAll(17.0);
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.09234951562953232;
      doubleArray1[1] = (-2358.016336);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 0.09234951562953232;
      doubleArray2[2] = 0.09234951562953232;
      doubleArray2[3] = 0.09234951562953232;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 26, 2795);
      int[] intArray0 = new int[19];
      intArray0[1] = 26;
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      cRSMatrix0.maxInRow(26);
      cRSMatrix0.nonZeroIteratorOfColumn(48);
      MatrixProcedure matrixProcedure0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.setColumn(0, (double) 9);
      // Undeclared exception!
      try { 
        SparseMatrix.zero(592, (-466));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 592x-466
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 633;
      CRSMatrix cRSMatrix0 = new CRSMatrix(633, 633, 633);
      cRSMatrix0.setRow(10, (double) 10);
      Matrix matrix0 = cRSMatrix0.blank();
      matrix0.divide(int0);
      cRSMatrix0.toDenseMatrix();
      int int1 = 8;
      int int2 = (-568);
      int int3 = 1283;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int2, int1, int3);
      cRSMatrix1.iterator();
      cRSMatrix1.toDenseMatrix();
      int int4 = 8;
      int int5 = 456;
      int int6 = (-1245);
      int int7 = 1;
      CRSMatrix.zero(int6, int4, int7);
      RowMajorSparseMatrix.block(matrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(int5);
      int int8 = (-3104);
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int0, int8, (double) int3, (Random) mockRandom1);
      cRSMatrix2.nonZeroRowMajorIterator();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        CRSMatrix.random(596, 596, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setColumn(9, (-830.900867603548));
      cRSMatrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom((-1539L));
      cRSMatrix0.isColumnMajor();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 17);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.copyOfColumns(5);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.max();
      cRSMatrix0.setAll(17.0);
      org.evosuite.runtime.Random.setNextRandom(0);
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1032, 1032);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.copyOfRows(424);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(628, 628, 628);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      cRSMatrix0.getRow(1);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2011, 24, 43);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-1199));
      MockRandom mockRandom2 = new MockRandom(43);
      mockRandom2.nextInt(1);
      CRSMatrix cRSMatrix2 = CRSMatrix.random(1, 17, 0.968863919569388, (Random) mockRandom2);
      mockRandom2.nextGaussian();
      mockRandom2.ints((long) 2011);
      cRSMatrix2.copyOfColumns(0);
      cRSMatrix2.getOrElse(43, 30, 30);
      int int0 = 26;
      cRSMatrix2.maxInRow(int0);
      int int1 = (-394);
      org.evosuite.runtime.Random.setNextRandom(int1);
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 13, 2795);
      cRSMatrix0.toColumnMajorSparseMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = 13;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      CRSMatrix cRSMatrix0 = new CRSMatrix(21, 21, 21, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 620;
      CRSMatrix cRSMatrix0 = new CRSMatrix(620, 620);
      cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow((-3052));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..619
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(628, 628);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      byte[] byteArray0 = new byte[4];
      Matrix.constant(777, 174, (-1.0));
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)53;
      cRSMatrix0.toBinary();
      cRSMatrix0.maxInRow(17);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)62;
      intArray0[1] = 174;
      cRSMatrix0.select(intArray0, intArray0);
      Matrix.diagonal((byte)21, Double.POSITIVE_INFINITY);
      MockRandom mockRandom0 = new MockRandom((byte)62);
      CRSMatrix.random((int) (byte)62, 0, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.rotate();
      Integer integer0 = new Integer((-1));
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator1);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 13, 2795);
      cRSMatrix0.rotate();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(628, 628);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(4);
      MockRandom mockRandom0 = new MockRandom(613);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(763, 587, 0.0, (Random) mockRandom0);
      cRSMatrix1.updateAt(613, 4, (MatrixFunction) null);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cRSMatrix0.rank();
      double double1 = Locale.LanguageRange.MAX_WEIGHT;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(628, 628, 628);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.getRow(1);
      int int0 = 2011;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2011, 24, 24);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-1199));
      MockRandom mockRandom2 = new MockRandom(0);
      mockRandom2.nextInt(1316);
      int int1 = 1898;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)1898, (double)1, (-1392.3021), 3629.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      CRSMatrix.random(int0, int1, (double) int1, (Random) mockRandom2);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 2795;
      int int1 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.rotate();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix.zero(30, 30, 30);
      CRSMatrix cRSMatrix0 = new CRSMatrix(30, 30);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(30);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-487.512327688), (double)30, (-487.512327688), (double)30, (double)30).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.transform(matrixFunction0);
      int int0 = (-221);
      CRSMatrix.zero(int0, int0);
      cRSMatrix0.toBinary();
      MatrixPredicate matrixPredicate0 = null;
      cRSMatrix0.is(matrixPredicate0);
      double[][] doubleArray0 = new double[0][5];
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 628;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(628, 628, 628);
      int int1 = 407;
      cRSMatrix0.nonZeroRowMajorIterator();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      int int2 = 613;
      MockRandom mockRandom0 = new MockRandom(628);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(407, 613, 0.0923495156295323, (Random) mockRandom0);
      VectorFunction vectorFunction0 = null;
      cRSMatrix0.maxInRow(int0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int2, vectorProcedure0);
      cRSMatrix1.transformRow(int2, vectorFunction0);
      long long0 = 0L;
      MockRandom mockRandom1 = new MockRandom(long0);
      mockRandom1.nextInt(int1);
      MockRandom mockRandom2 = new MockRandom();
      int int3 = (-3974);
      int int4 = 678;
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int0, int4, (double) int3, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.each(matrixProcedure0);
      int int5 = 2252;
      CRSMatrix.identity(int5);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 640;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(640);
      int int1 = 0;
      cRSMatrix0.setRow(0, (double) 0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix cRSMatrix2 = CRSMatrix.fromMatrixMarket((String) null);
      cRSMatrix2.min();
      int int2 = (-2954);
      cRSMatrix2.iteratorOfRow(int2);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      double double1 = Locale.LanguageRange.MAX_WEIGHT;
      CRSMatrix cRSMatrix3 = new CRSMatrix();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int3 = (-555);
      int int4 = 630;
      Locale locale0 = Locale.CANADA_FRENCH;
      Matrix matrix0 = Matrix.block(cRSMatrix0, cRSMatrix2, cRSMatrix1, cRSMatrix3);
      int int5 = 4157;
      int int6 = 1643;
      cRSMatrix2.insert(matrix0, int5, int3, int2, int6);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "]V):q')u0p4&1Ok=Ihb";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(string0);
      ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, denseMatrix0);
      RowMajorSparseMatrix.block(cRSMatrix3, cRSMatrix2, matrix0, denseMatrix0);
      CRSMatrix cRSMatrix4 = CRSMatrix.zero(int2, int0, int2);
      int int7 = (-84);
      cRSMatrix4.nonZeroIteratorOfColumn(int7);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix2.each(matrixProcedure0);
      cRSMatrix3.blankOfShape(int1, int4);
      cRSMatrix4.each(matrixProcedure0);
      cRSMatrix1.getColumn(int1);
      String string1 = "[j1Vr/(gxu3$";
      CRSMatrix.fromMatrixMarket(string1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2796;
      int int1 = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2796, 13, 2796);
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.nonZeroColumnMajorIterator();
      int[] intArray0 = new int[3];
      intArray0[0] = 13;
      intArray0[0] = 13;
      cRSMatrix0.nonZeroRowMajorIterator();
      MockRandom mockRandom0 = new MockRandom(8L);
      MockRandom mockRandom1 = new MockRandom(13);
      mockRandom0.nextInt(28);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(893, 28, 0.0, (Random) mockRandom1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, (double)8L, Double.NEGATIVE_INFINITY, (double)13, (-1471.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      int int2 = 97;
      int int3 = 398;
      CRSMatrix.diagonal(int3, int1);
      double double0 = (-1138.72402);
      CRSMatrix.random(int0, int2, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 13, 2795);
      cRSMatrix0.toColumnMajorSparseMatrix();
      int[] intArray0 = new int[3];
      intArray0[1] = 13;
      intArray0[2] = 612;
      cRSMatrix0.nonZeroRowMajorIterator();
      CRSMatrix.zero(2795, 13, 612);
      cRSMatrix0.minInRow(612);
      cRSMatrix0.maxInRow(13);
      cRSMatrix0.blankOfShape(327, 2795);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-440L));
      CRSMatrix cRSMatrix1 = CRSMatrix.random(3, 1081, 0.0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(13, 773.65569);
      cRSMatrix2.iteratorOfNonZeroRows();
      cRSMatrix0.nonZeroAt(327, 612);
      cRSMatrix1.copyOfShape(327, (-1));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2795, 26, 2795);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      int[] intArray0 = new int[19];
      intArray0[1] = 26;
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      double double1 = Locale.LanguageRange.MAX_WEIGHT;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2795);
      RowMajorSparseMatrix.block(sparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, cRSMatrix0);
      int int0 = 163;
      int int1 = (-2807);
      int int2 = (-306);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int1, int2);
      cRSMatrix1.nonZeroIteratorOfColumn(int0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix1.each(matrixProcedure0);
      cRSMatrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte byte0 = (byte)32;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 616;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(616, 616);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.minInRow(0);
      Matrix matrix0 = Matrix.constant(777, 174, (-1.0));
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      cRSMatrix0.maxInRow(460);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
      int int1 = 13;
      double double0 = 1.0;
      Random random0 = null;
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric(int1, double0, random0);
      MockRandom mockRandom0 = new MockRandom();
      double double1 = (-1.0);
      Double double2 = new Double(double1);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.apply(matrixOperation0);
      double double3 = 2.0;
      cRSMatrix1.setAll(double3);
      int int2 = (-1293);
      CRSMatrix cRSMatrix3 = CRSMatrix.zero(int0, int2);
      MatrixOperation<Object> matrixOperation1 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix3.apply(matrixOperation1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.to(matrixFactory0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(616, 616);
      int int0 = 0;
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.minInRow(0);
      int int1 = 777;
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      cRSMatrix0.maxInRow(460);
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(13, 1.0, (Random) null);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = (-1.0);
      Double double1 = new Double(double0);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.apply(matrixOperation0);
      int int2 = 1319;
      cRSMatrix1.getOrElse(int0, int2, int2);
      cRSMatrix1.nonZeroIteratorOfColumn(int1);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix1.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4169, 4169);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(4158);
      Matrix.constant(1677, 2868, (-1158.02));
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.maxInRow(435);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      cRSMatrix0.max();
      CRSMatrix.zero(2868, 37);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(628, (-761.1753515143836));
      int int0 = 0;
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      byte byte0 = (byte)33;
      int int1 = 1365;
      int int2 = (-1579);
      Matrix.constant(1365, (-1579), (-761.1753515143836));
      cRSMatrix0.nonZeroRowMajorIterator();
      int int3 = (-134);
      cRSMatrix0.minInRow(int3);
      int int4 = 460;
      cRSMatrix0.maxInRow(int4);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cRSMatrix0.setColumn(int2, (double) int0);
      CRSMatrix.zero((int) byte0, int1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 624;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(624, 624);
      int int1 = 0;
      int int2 = 37;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(37, vectorProcedure0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.minInRow(0);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.copyOfShape(int2, int0);
      int int3 = 1647;
      matrix0.swapColumns(int3, int2);
      RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cRSMatrix0.min();
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int2, int1);
      int int4 = 1513;
      int int5 = 527;
      double double1 = 581.20570758;
      MockRandom mockRandom0 = new MockRandom(int1);
      CRSMatrix.random(int4, int5, double1, (Random) mockRandom0);
      cRSMatrix1.rowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(int1);
  }
}
