/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 07:28:15 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)82;
      byteArray1[2] = (byte)95;
      byteArray1[6] = (byte) (-46);
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte) (-46);
      byteArray1[7] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray1);
      byteSequence0.read(byteArray0);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "dastore";
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.accessToString((int) (byte)95);
      try { 
        Utility.methodSignatureToString("dastore", "iconst_m1", "public private protected static final volatile", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dcmpg
         // 2:    monitorenter
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      String string0 = "frem";
      byte[] byteArray1 = Utility.decode("frem", false);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)85;
      byteArray2[1] = (byte)85;
      byteArray2[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence1.readFully(byteArray2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(type=");
      Utility.isSet((byte)101, (-2900));
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.getSignature("$]9=n~9iJ`[#Hs]@N");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.decode("org.apache.bcel.util.ClassPath$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.getSignature("$]9=n~9iJ`[#Hs]@N");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[L$]9=n~9iJ`;");
      // Undeclared exception!
      try { 
        Utility.replace("[L$]9=n~9iJ`;", (String) null, "$]9=n~9iJ`[#Hs]@N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-113);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("3e 18 61 00 b3 8f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3e 18 61 00 b3 8f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-90);
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.classOrInterface((byte) (-90));
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-108));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)50);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantUtf8.getCachedInstance("interface");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readChar();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-32);
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte)29;
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte)29;
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)29;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-32), 81, true);
      assertEquals("0:    iload_3\n1:    <illegal opcode>\n2:    iload_3\n3:    iload_3\n4:    iload_3\n5:    iload_3\n6:    iload_3\n7:    iload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "java.lang.\\bi7'tbF-rAwryz";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        constantPool0.getConstantString((byte) (-72), (byte) (-52));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.methodSignatureReturnType("B", false);
      assertEquals("byte", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-652), (-418));
      assertEquals("0:    if_icmpne\t\t#-24416\n3:    if_icmpne\t\t#-24413\n", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("a0 a0 a0 a0 a0 a0", string2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "Jz";
      String string1 = "RE#.[>?";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)126;
      byteArray0[6] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.skip((-2838L));
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K<rV_8gO<~}*&!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K<rV_8gO<~}*&!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "(";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte)42;
      byte byte0 = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      byte byte1 = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      byte byte2 = (byte) (-51);
      byteArray0[7] = (byte) (-51);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-99));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      byteSequence0.readFully(byteArray0);
      Utility.compactClassName("]e\"4GT_#.{(3oC_mw-#", "char", false);
      try { 
        Utility.methodSignatureArgumentTypes("istore_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)52;
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte)52;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        byteSequence0.readFully(byteArray1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 504;
      Utility.accessToString(504);
      String string0 = "java.lang.$l$8b$I$A$A$A$A$A$A$A";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("java.lang.$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(91, 91);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(12, 127);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wh=CR1Ulg$");
      short short0 = Utility.searchOpcode(";3s*;");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.methodTypeToSignature("wh=CR1Ulg$", (String[]) null);
      assertEquals("()Lwh=CR1Ulg$;", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(12, byteSequence0.getIndex());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch\tdefault = 1, npairs = 0 ()");
      Utility.searchOpcode("wh=CR1Ulg$");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.methodTypeToSignature("NQ", (String[]) null);
      assertEquals("()LNQ;", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("Illegally nested brackets:", false);
      String string0 = Utility.signatureToString("J4__,B9F7Ov8");
      byte[] byteArray0 = Utility.decode("Bc$qX", false);
      Utility.toHexString(byteArray0);
      String string1 = Utility.compactClassName("'");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lconst_0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_3");
      String[] stringArray0 = new String[0];
      Utility.getSignature("lconst_0");
      Utility.compactClassName("Llconst_0;");
      Utility.accessToString(1, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte) (-83);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1329, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = Utility.signatureToString("F", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object object0 = new Object();
      Utility.decode("$>>WIUp,Cc]B<F", false);
      Object object1 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$>>WIUp,Cc]B<F");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("long", false);
      assertEquals("long", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      int int0 = 1728;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 103, false);
      byteSequence2.mark(103);
      // Undeclared exception!
      try { 
        Utility.signatureToString("irem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `irem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byte byte0 = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-97);
      byte byte1 = (byte) (-52);
      byteArray0[4] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readChar();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpeq\t\t#-13309");
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.compactClassName("dload_3", "dload_3", true);
      Utility.convertString("7(scvMf)$$o;{$:Y7|O");
      Utility.isJavaIdentifierPart('{');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("aload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-97), 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_2
         // 1:    dsub
         // 2:    istore_0
         // 3:    if_icmpeq\t\t#-13251
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte)42;
      byte byte0 = (byte)6;
      byteArray0[3] = (byte)6;
      byte byte1 = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      byte byte2 = (byte) (-51);
      byteArray0[7] = (byte) (-51);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-99));
      try { 
        Utility.methodSignatureArgumentTypes("0:    aload_0\n1:    nop\n2:    aload_0\n3:    iconst_3\n4:    nop\n5:    ifgt\t\t#-25134\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aload_0
         // 1:    nop
         // 2:    aload_0
         // 3:    iconst_3
         // 4:    nop
         // 5:    ifgt\t\t#-25134
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apace.bcelclassfile.tility$JavaReadei");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-105);
      byteArray0[8] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("35 11 97 00 5c 93 aa 97 11", string0);
      
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      String string1 = Utility.accessToString(91, true);
      assertEquals("public private static final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-86);
      Utility.convertString("Dng1&X^nCZI");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("H^eG!9s[P");
      String string0 = "^W5?$Z^";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Dng1&X^nCZI";
      objectArray0[1] = (Object) (byte)45;
      objectArray0[2] = (Object) (byte)77;
      Constant[] constantArray0 = new Constant[4];
      int int0 = (-3168);
      ConstantString constantString0 = new ConstantString((-3168));
      constantString0.copy();
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("k3fH4");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)77, (byte)77);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName(",^CN.JZ7^B*F>0/,c}7", ",^CN.JZ7^B*F>0/,c}7", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-91);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",^CN.JZ7^B*F>0.,c}7");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(5);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)0);
      byteSequence0.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byteSequence1.readFloat();
      byteSequence3.mark(195);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("Illegally nested brackets:", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readBoolean();
      Utility.codeToString(byteSequence3, constantPool0, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence1);
      constantPool0.constantToString((Constant) constantInteger0);
      byteSequence2.readShort();
      String string0 = "$}6CwHx=~<";
      Utility.compactClassName("$}6CwHx=~<", false);
      Utility.compactClassName("1634495609", true);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("v3>R8$/OSzK", false);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[2] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ConstantClass constantClass0 = new ConstantClass((byte) (-34));
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), 52);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byteSequence2.readByte();
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("b0 00 de 00 00 00 00 00 00", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: b0 00 de 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-13));
      byteSequence0.markSupported();
      BCELComparator bCELComparator0 = Method.getComparator();
      constantClass0.toString();
      Constant.setComparator(bCELComparator0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-13), false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), 26666, false);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.decode("astore_3", false);
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n1:    astore_3\n2:    fcmpl\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    astore_3
         // 2:    fcmpl
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         // 11:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.convertString("long");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        byteSequence1.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)6;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)79;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), (int) (byte) (-106));
      assertEquals("0:    aload_0\n1:    nop\n2:    aload_0\n3:    iconst_3\n4:    nop\n5:    fcmpg\n6:    fcmpg\n7:    iastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.getSignature("$Fbm)");
      assertEquals("L$Fbm);", string0);
      
      byte[] byteArray0 = Utility.decode("$Fbm)", false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), 1752);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-39));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.codeToString(byteSequence1, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)5, (byte)98, (byte)109, (byte)41}, byteArray0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface((-1));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dstore_3");
      Utility.convertString("dstore_3");
      Object[] objectArray0 = new Object[19];
      objectArray0[1] = (Object) "dstore_3";
      objectArray0[2] = (Object) "dstore_3";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dstore_3");
      objectArray0[3] = (Object) "[X#PBb'T/:";
      Utility.printArray(objectArray0);
      Utility.format((-838), 185, false, '`');
      Utility.accessToString(185);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)34;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-282), (-282));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = ",^CN.JZ7^B*F>0/,c}7";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readUnsignedByte();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",^CN.JZ7^B*F>0/,c}7");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("L,;V", false);
      Utility.isJavaIdentifierPart('3');
      Utility.convertString("double");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)0);
      Utility.equals(byteArray0, byteArray0);
      MockFile mockFile0 = new MockFile("5L'b", "Wi_f");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "i";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ",";
      objectArray0[4] = (Object) (byte) (-65);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-65), (byte) (-65), (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("double", "double", "double", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byte byte0 = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(215);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorexit'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.compactClassName("java.lang.LkZ.6o#A#:5n9QH5Bnh;V");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      Constant[] constantArray0 = new Constant[7];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("java.lang.LkZ.6o#A#:5n9QH5Bnh;V", "float");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"float\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dj");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) (byte)66;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      // Undeclared exception!
      try { 
        syntheticRepository0.loadClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantClass constantClass3 = new ConstantClass(constantClass2);
      int int0 = new Integer((byte) (-86));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, 153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      constantPool0.toString();
      byteArray0[0] = (byte) (-62);
      byteArray0[6] = (byte) (-117);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(6, (byte) (-117));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantInteger constantInteger0 = new ConstantInteger(109);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2b}4C$-Rm@,&'!qR`B8");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      byteSequence0.readChar();
      Utility.isJavaIdentifierPart('\u0000');
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('J');
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("L/b5U:~}KBa!R", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.getSignature("$Fbm)");
      byte[] byteArray0 = Utility.decode("$Fbm)", false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), 1752);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.equals(byteArray0, byteArray0);
      byteSequence0.read(byteArray0);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)98, (byte)109, (byte)41}, byteArray0);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string0 = Utility.getSignature("L$Fbm);");
      assertEquals("LL$Fbm);;", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("X+LJ/igeE*2|j2yT58");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X+LJ/igeE*2|j2yT58");
      ConstantPool constantPool0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X+LJ/igeE*2|j2yT58", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X+LJ/igeE*2|j2yT58'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("@ox])f1l9rSCi4N\"ei", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.readShort();
      Utility.codeToString(byteSequence2, constantPool0, true);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence4, constantPool2, false);
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      boolean boolean0 = byteSequence3.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.compactClassName("V");
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("V", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-105);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-86);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes(",^CN.JZ7^B*F>0/,c}7,^CN.JZ7^B*F>0.,c}7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,^CN.JZ7^B*F>0/,c}7,^CN.JZ7^B*F>0.,c}7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-10), 464);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8.getCachedInstance("I1(/#$}SIkOqi6");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = Utility.setBit(222, 464);
      assertEquals(65758, int0);
      
      String string0 = Utility.convertString("I1(/#$}SIkOqi6");
      assertEquals("I1(/#$}SIkOqi6", string0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("wide\t(wide)", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean0);
      
      String string2 = Utility.classOrInterface(3988);
      assertEquals("interface", string2);
      
      String string3 = Utility.accessToString((int) (byte) (-79));
      assertEquals("public final synchronized transient native interface abstract strictfp synthetic annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      constantPool0.toString();
      byteArray0[0] = (byte) (-73);
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte) (-73);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (int) (byte) (-73), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature("Thh{");
      Utility.compactClassName("@y#}RN6h^m", "gT{HMdn{>B9W<\"(", true);
      Utility.signatureToString("LThh{;");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 844, (int) (byte) (-67), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)42, 1169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.compactClassName("lstore_3");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-84);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("byte");
      Integer integer0 = new Integer((-2397));
      Utility.setBit(192, 165);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      constantPool0.toString();
      byteArray0[0] = (byte) (-54);
      byteArray0[6] = (byte) (-118);
      ConstantInteger constantInteger0 = new ConstantInteger(109);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      MockFile mockFile0 = new MockFile("lconst_1", "|E!~QG<Nqz{di8");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 109, (-1297));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.clearBit((byte)31, (byte)31);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-46));
      byteSequence1.read(byteArray0);
      Object object0 = new Object();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence2, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, (-2546), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-10), 464);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8.getCachedInstance("I1(/#$}SIkOqi6");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.setBit(222, 464);
      Utility.convertString("I1(/#$}SIkOqi6");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 326, 326);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("v3>R8$/OSzK", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      byteSequence1.readFloat();
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence3.readShort();
      Utility.codeToString(byteSequence1, constantPool1, true);
      char char0 = byteSequence1.readChar();
      assertEquals('\u4F53', char0);
      
      String string0 = Utility.compactClassName("=%%!U9g/&V_q\"#}F", true);
      assertEquals("=%%!U9g.&V_q\"#}F", string0);
      
      Utility.compactClassName("nop", true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence5, constantPool0);
      assertArrayEquals(new byte[] {(byte)118, (byte)51, (byte)62, (byte)82, (byte)56, (byte)0, (byte)79, (byte)83, (byte)122, (byte)75}, byteArray0);
      assertEquals("fneg", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("LkZ/6o#A#:5n9QH5Bnh;V", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      ByteSequence byteSequence5 = new ByteSequence(byteArray1);
      byteSequence3.readShort();
      Utility.codeToString(byteSequence3, constantPool0, false);
      Utility.compactClassName("Wg7{7tP", false);
      Utility.compactClassName("tableswitch", false);
      Utility.equals(byteArray1, byteArray1);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)0;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      constantPool0.toString();
      byteArray0[0] = (byte) (-54);
      byteArray0[6] = (byte) (-117);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(6, (byte) (-117));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantInteger constantInteger0 = new ConstantInteger(109);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2b}4C$-Rm@,&'!qR`B8");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-117);
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte) (-54);
      byteArray1[3] = (byte) (-54);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool0, false);
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("q=l%.mi}", "8b 8b ca ca", "if_iqmplt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q=l%.mi}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.isJavaIdentifierPart('6');
      Integer integer1 = new Integer((-2849));
      Integer.sum((byte)42, 162);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.isJavaIdentifierPart('6');
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("ior");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ior
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.getSignature("Thh{");
      String string0 = "gT{HMdn{>B9W<\"(";
      boolean boolean0 = false;
      Utility.compactClassName("@y#}RN6h^m", "gT{HMdn{>B9W<\"(", false);
      Utility.signatureToString("LThh{;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.typeOfSignature("LThh{;");
      Utility.isJavaIdentifierPart('+');
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("@y#}RN6h^m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @y#}RN6h^m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("nop");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean1 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "Y+p=]@#P";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("Y+p=]@#P", false);
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantArray0[0] = (Constant) constantClass0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      int int0 = 193;
      ConstantInteger constantInteger0 = new ConstantInteger(193);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(dataInputStream0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 193, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-115);
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.setBit((byte) (-12), (byte) (-12));
      try { 
        Utility.methodSignatureToString("\t\t", "f2d", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaReader");
      assertEquals("org.apache.bcel.classfile.Utility$JavaReader", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$JavaReader", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$JavaReader");
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence1.readChar();
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("irem", string1);
      
      Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(43, byteArray0.length);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('\u6F72');
      assertFalse(boolean2 == boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "The array of names must not be null";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[X#PBb'T/:");
      Utility.replace("The array of names must not be null", "The array of names must not be null", "dstore_3");
      Object[] objectArray0 = new Object[19];
      objectArray0[1] = (Object) "dstore_3";
      objectArray0[2] = (Object) "dstore_3";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dstore_3");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)120;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = "L,;V";
      try { 
        Utility.methodSignatureReturnType("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ireturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-115);
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.readShort();
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      String string1 = Utility.compactClassName("ifge\t\t#-29440", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "V>O%L@I#$(s{*?q^x";
      Utility.compactClassName("V>O%L@I#$(s{*?q^x");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.mark((byte) (-98));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.fillup("freturn", (-1763), true, '-');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)119;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.getSignature("dneg");
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "freturn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.mark(122);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('3');
      try { 
        Utility.methodSignatureArgumentTypes("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-41));
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.mark(142);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-41), false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), 26666, false);
      Utility.decode("athrow", false);
      Utility.getSignature("impdep2");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("7_m31!zJW?", "Limpdep2;", "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7_m31!zJW?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      constantPool0.toString();
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-117);
      byteArray0[8] = (byte) (-117);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-34));
      Utility.setBit((byte) (-34), 2299);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-34), false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte) (-34);
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte) (-117);
      byteArray1[7] = (byte) (-34);
      byteArray1[8] = (byte) (-34);
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.compactClassName("V");
      Utility.signatureToString("V", true);
      Utility.isJavaIdentifierPart('3');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J )kZy>");
      Utility.convertString("J )kZy>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J )kZy>");
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isJavaIdentifierPart('3');
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("q=l%.mi}", "return", "q=l%.mi}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q=l%.mi}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[X#PBb'T/:");
      String string0 = Utility.replace("The array of names must not be null", "The array of names must not be null", "dstore_3");
      assertEquals("dstore_3", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "dstore_3";
      objectArray0[2] = (Object) "dstore_3";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dstore_3");
      objectArray0[3] = (Object) "dstore_3";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{null, dstore_3, dstore_3, dstore_3}", string1);
      
      String string2 = Utility.format(76, 185, true, '`');
      assertEquals("76```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", string2);
      
      String string3 = Utility.accessToString(185);
      assertEquals("public static final synchronized transient", string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string4 = Utility.format((byte)34, (byte) (-37), false, '(');
      assertEquals("34", string4);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.fillup("freturn", (-1763), true, '-');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)119;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(1419);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("R!YiO@gJE");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('-');
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("R!YiO@gJE", ",^CN.JZ7^B*F>0/,c}7,^CN.JZ7^B*F>0.,c}7", "|4a ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R!YiO@gJE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      Utility.clearBit(171, 1404);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte)95;
      byteArray1[6] = (byte) (-46);
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte) (-46);
      byteArray1[7] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte)110);
      byteSequence0.read(byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "private protected static synchronized volatile";
      objectArray0[1] = (Object) "private protected static synchronized volatile";
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.classOrInterface(171);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 21202, 261, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.compactClassName("@y#}RN6h^m", "gT{HMdn{>B9W<\"(", true);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-105));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('F');
      try { 
        Utility.methodSignatureArgumentTypes("K8YR$cHVz*2H|=F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K8YR$cHVz*2H|=F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantClass constantClass3 = new ConstantClass(constantClass2);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, 153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)77);
      Method.getComparator();
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence1.mark(131);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[2] = (Constant) constantClass1;
      constantArray0[3] = (Constant) constantClass1;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass1;
      constantArray0[7] = (Constant) constantClass0;
      ConstantClass constantClass2 = new ConstantClass(byteSequence1);
      constantArray0[8] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 77. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.accessToString((-2001));
      Utility.accessToString((-2001));
      Utility.convertString("GKXRQZ'd@5Ut:P");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (int) (byte)39, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("class");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DCgXi");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.isJavaIdentifierPart('1');
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";:", "J4rr3\"cMnA8>*M", "iushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.methodSignatureReturnType("Synthetic attribute with length > 0");
      Utility.searchOpcode("fconst_1");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "($OQV(x9");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fconst_1");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-58);
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/1_bcel");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte)11, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 1081, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-86);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.isJavaIdentifierPart('0');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)48;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte) (-88);
      byteArray1[4] = (byte) (-88);
      byteArray1[5] = (byte)63;
      byteArray1[6] = (byte) (-88);
      byteArray1[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-13));
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.mark(142);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      boolean boolean1 = Utility.isJavaIdentifierPart('m');
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.classOrInterface(90);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-13));
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.mark(142);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-13), false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-109), 26666, false);
      byte[] byteArray1 = Utility.decode("athrow", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)116, (byte)104, (byte)114, (byte)111, (byte)119}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte)20;
      byteArray1[1] = (byte)20;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("class");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DCgXi");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.isJavaIdentifierPart('1');
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";:", "J4rr3\"cMnA8>*M", "iushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byte byte0 = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      constantClass0.clone();
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "Sx5B;i203";
      Locale.getISOLanguages();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_1
         // 1:    fload_2
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.compactClassName("V>O%L@I#$(s{*?q^x");
      Utility.compactClassName("V>O%L@I#$(s{*?q^x", "V>O%L@I#$(s{*?q^x", true);
      Utility.compactClassName("k3f1}nIHJv9Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.isJavaIdentifierPart('F');
      try { 
        Utility.methodSignatureArgumentTypes("mgvGE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mgvGE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.compactClassName("mQd^|G8;rCdr\";", false);
      Utility.setBit((-1910), (-3158));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-92);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(238, 248);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble((-4654.831371123727));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(70, 22);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(248, (byte)21);
      constantArray0[4] = (Constant) constantFieldref1;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-886), (-1910));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    iload\t\t%241
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)54);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      constantClass0.dump(dataOutputStream0);
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass1;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass1;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('m');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Integer integer1 = new Integer((-2849));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Integer.compareUnsigned((-2849), (-2849));
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      byteSequence2.mark((-2849));
      byteSequence1.skipBytes((int) integer1);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariable localVariable0 = new LocalVariable((-2849), (-2904), 87, 1132, 0, constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2849), 0, localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("$A", "Unreachable default case reached!", "Unreachable default case reached!", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("(<K{nG1@8~Odn");
      try { 
        Utility.methodSignatureToString("(<K{nG1@8~Odn", "(<K{nG1@8~Odn", "(<K{nG1@8~Odn", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<K{nG1@8~Odn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariableTable localVariableTable0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ")", "<K{nG@8eOGn", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("@ox])f1l9rSCi4N\"ei", "@ox])f1l9rSCi4N\"ei", false);
      assertEquals("@ox])f1l9rSCi4N\"ei", string0);
      
      String string1 = Utility.convertString("@ox])f1l9rSCi4N\"ei");
      assertEquals("@ox])f1l9rSCi4N\\\"ei", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('!');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)73;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean1 = Utility.isJavaIdentifierPart('R');
      assertFalse(boolean1 == boolean0);
      
      String string2 = Utility.classOrInterface((byte) (-66));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)103;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('F');
      Utility.classOrInterface(1065);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("isub", "Fks|66Ag-4B8tlR", "isub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: isub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantClass constantClass0 = new ConstantClass(55);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byte byte0 = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.accessToString((-6135), false);
      Utility.signatureToString("[FwsH", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-33);
      MockFile mockFile0 = new MockFile("YAa7=VpP?Ny&a^\"+{z");
      File file0 = MockFile.createTempFile("9V%63 ]v", "n@ Z", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "n@ Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"n@ Z\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("LkZ/6o#A#:5n9QH5Bnh;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.readFully(byteArray0);
      byteSequence0.readDouble();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LkZ/6o#A#:5n9QH5Bnh;V");
      Utility.isSet((-2588), (-2588));
      byteSequence1.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      
      String string0 = Utility.replace("org.apache.bcel.classfile.Utility$1", "reachingEOF", "Q7k }=8Ba");
      assertEquals("org.apache.bcel.classfile.Utility$1", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaReader");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$JavaReader", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$JavaReader");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence1.readChar();
      Utility.isJavaIdentifierPart('U');
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-13));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((byte) (-100));
      assertEquals("interface", string0);
      
      String string1 = Utility.format(184, 243, true, '\\');
      assertEquals("184\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("f3 4e 93", string2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      Utility.clearBit(171, 1404);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte)72;
      byteArray1[4] = (byte) (-46);
      byteArray1[5] = (byte) (-120);
      byteArray1[6] = (byte) (-46);
      byteArray1[7] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte) (-120));
      byteSequence0.read(byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "static transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "static transient native interface abstract strictfp synthetic annotation enum";
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("LkZ/6o#A#:5n9QH5Bnh;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.readFully(byteArray0);
      byteSequence0.readChar();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LkZ/6o#A#:5n9QH5Bnh;V");
      Utility.isSet((-2588), (-2588));
      byteSequence1.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-22);
      byteArray2[1] = (byte) (-84);
      byteArray2[2] = (byte) (-85);
      byteArray2[3] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 198, (int) (byte) (-84), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.clearBit(176, 1404);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(176);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte)72;
      byteSequence1.read(byteArray1);
      Object object0 = new Object();
      Utility.getSignature("lookupswitch");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("putstatic", "final synchronized transient");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // final synchronized transient
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode(";24Fbm[)q}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";24Fbm[)q}");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.setBit(530, 2197);
      String string0 = "M}ujf#@+_";
      Utility.replace("M}ujf#@+_", ";24Fbm[)q}", ";24Fbm[)q}");
      Utility.encode(byteArray0, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2197, (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      Utility.signatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode(":I[+Knf7]0", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dont call getValueShort() on s non SHORT Eleme/tValue");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readChar();
      Utility.isJavaIdentifierPart('U');
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(5, byteSequence0.getIndex());
      
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)7;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("@ox])f1l9rSCi4N\"ei", "@ox])f1l9rSCi4N\"ei", false);
      assertEquals("@ox])f1l9rSCi4N\"ei", string0);
      
      String string1 = Utility.convertString("@ox])f1l9rSCi4N\"ei");
      assertEquals("@ox])f1l9rSCi4N\\\"ei", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-75);
      byteArray0[5] = (byte)64;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(176, (byte)64);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), (int) (byte)13);
      assertEquals("0:    dconst_0\n1:    arraylength\n2:    dstore_2\n3:    fconst_2\n4:    imul\n5:    lstore_1\n6:    nop\n7:    nop\n", string2);
      
      String string3 = Utility.format((-471), (byte)73, false, '!');
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-471", string3);
      
      String string4 = Utility.classOrInterface((-957));
      assertEquals("class", string4);
      
      String string5 = Utility.format((-455), (byte) (-75), true, '!');
      assertEquals("-455", string5);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((int) (byte)19, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.typeOfSignature("LSI<H;V");
      try { 
        Utility.methodSignatureReturnType("LSI<H;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LSI<H;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(13);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals(1, byteSequence2.getIndex());
      
      Utility.searchOpcode("nop");
      Utility.accessToString((int) (byte) (-23));
      Utility.isJavaIdentifierPart(':');
      String string0 = Utility.classOrInterface(72);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)103;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (int) (byte) (-98), false);
      assertEquals("0:    isub\n1:    <illegal opcode>\n2:    bastore\n3:    ifle\t\t#28879\n6:    idiv\n7:    dsub\n8:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      constantPool0.toString();
      byteArray0[5] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('`');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('s');
      Utility.classOrInterface(883);
      Utility.printArray((Object[]) constantArray0);
      try { 
        Utility.typeOfSignature("H1+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H1+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)101;
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)88);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifge\t\t#25856", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(3142);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.clearBit(69, (byte)12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V");
      Locale locale0 = new Locale(" (tTf^lY],{\")4[", "V", "new");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "new";
      objectArray0[2] = (Object) "new";
      objectArray0[3] = (Object) "V";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("V");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "new");
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lshr", "", " (tTf^lY],{\")4[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.isJavaIdentifierPart('0');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)48;
      byteArray0[4] = (byte)48;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-79), (byte)63);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, false);
      Utility.getSignature("!dWw");
      Utility.compactClassName("System", false);
      try { 
        Utility.typeOfSignature("WDqvg{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WDqvg{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("LkZ/6o#A#:5n9QH5Bnh;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of prefixes must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of prefixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      Utility.signatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", false);
      Utility.isJavaIdentifierPart('3');
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("$SAx%uXmL\"i` U`", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$SAx%uXmL\"i` U`");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.convertString(")\n");
      Utility.isJavaIdentifierPart(']');
      String string0 = "";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(")\n", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      Utility.clearBit(171, 1404);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte) (-45);
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte) (-120);
      byteArray1[6] = (byte) (-46);
      byteArray1[7] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte) (-120));
      try { 
        Utility.methodSignatureArgumentTypes("dstore_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)127;
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)88);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifge\t\t#32512", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(3142);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence1);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantClass0.accept(emptyVisitor0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpeq");
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence2.readChar();
      Utility.isJavaIdentifierPart('\u3939');
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)127;
      byteArray0[0] = (byte)127;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.encode(byteArray0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("land");
      Utility.setBit((-472), (byte) (-120));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.clearBit((byte) (-54), 95);
      // Undeclared exception!
      try { 
        Utility.signatureToString("land", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `land'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.getSignature("Thh{");
      boolean boolean0 = true;
      Utility.compactClassName("@y#}Rh^m", "gT{HMdn{>B9W<\"(", true);
      Utility.signatureToString("LThh{;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-86);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-119);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte) (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ConstantUtf8.getCachedInstance("s!5q!7|oxWX}");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((short) (-1));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('s');
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid signature: `");
      Utility.getSignature("_YBBc}'");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "L_YBBc}';";
      objectArray0[1] = (Object) "drem";
      objectArray0[2] = (Object) "lload_3";
      objectArray0[3] = (Object) ";24Fbm[)q}";
      objectArray0[4] = (Object) ";24Fbm[)q}";
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = " reaching EOF";
      byte byte0 = (byte) (-120);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.encode(byteArray0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(" reaching EOF", "pop2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // pop2
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-23));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((byte) (-23));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.searchOpcode("JO6in!nKsFx");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("anewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      byteSequence0.readFully(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "anewarray");
      Utility.isSet((-511), (-2588));
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readFloat();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.methodSignatureReturnType("Synthetic attribute {ith length > 0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byte byte0 = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[0] = (byte) (-100);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)79;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4d;\"c7`HRu}(>GY<wR";
      String string0 = "l}0s";
      stringArray0[1] = "l}0s";
      stringArray0[2] = "jsr_w";
      String string1 = "Zu.UF~OnDbg>dT(z";
      stringArray0[3] = "Zu.UF~OnDbg>dT(z";
      Utility.methodTypeToSignature("jsr_w", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFile mockFile0 = new MockFile("l}0s");
      try { 
        Utility.methodSignatureArgumentTypes("(L4d;\"c7`HRu}(>GY<wR;Ll}0s;Ljsr_w;LZu/UF~OnDbg>dT(z;)Ljsr_w;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wR;Ll}0s;Ljsr_w;LZu/UF~OnDbg>dT(z;)Ljsr_w;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpeq");
      byte[] byteArray1 = new byte[1];
      byteSequence0.readShort();
      byteArray1[0] = (byte)61;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readChar();
      Utility.isJavaIdentifierPart('U');
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(255, 65);
      assertEquals(255, int0);
      
      String string0 = Utility.convertString("gDEX#7Rr'#");
      assertEquals("gDEX#7Rr\\'#", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)42;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      String string2 = Utility.accessToString(45);
      assertEquals("public protected static synchronized", string2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" reaching EOF", false);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("", " reaching EOF", true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.encode(byteArray0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("$l$8b$I$A$A$A$A$A$A$A");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.format(32, 165, true, ';');
      Utility.classOrInterface(32);
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)127;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmple");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence1.readChar();
      Utility.isJavaIdentifierPart('i');
      Utility.classOrInterface(2894);
      try { 
        Utility.typeOfSignature("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.isJavaIdentifierPart('0');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpeq");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)61;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readChar();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)61;
      byteArray2[1] = (byte)63;
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)63;
      byteArray2[4] = (byte)105;
      byteArray2[5] = (byte)61;
      byteArray2[6] = (byte) (-122);
      byteArray2[7] = (byte)48;
      byteArray2[8] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte)105, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("GM", false);
      ConstantUtf8.getCachedInstance("p:v#N7h6");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(135);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.getSignature("p:v#N7h6");
      assertEquals("Lp:v#N7h6;", string1);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-13), (int) (byte) (-13));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    fstore_3
         // 2:    aload_0
         // 3:    iconst_3
         // 4:    dreturn
         // 5:    d2f
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)127;
      byteArray0[0] = (byte) (-100);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-100);
      byte byte0 = (byte)88;
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)78;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-100));
      constantPool0.constantToString((Constant) constantFloat0);
      constantFloat0.toString();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-54), (int) (byte) (-54));
      Utility.compactClassName("-100.0", "0:    ifge\t\t#32512\n3:    breakpoint\n4:    ifge\t\t#22776\n7:    breakpoint\n8:    astore_3\n", false);
      constantFloat0.setBytes(0.0F);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 62, false);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte) (-54));
      try { 
        Utility.typeOfSignature("-100.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -100.0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      String string0 = Utility.toHexString(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(981, 193);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((byte) (-102));
      String string1 = Utility.convertString("00 00 00 00 00 00 00 00 00 00 00 00 00 00 00");
      assertTrue(string1.equals((Object)string0));
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(165);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-102);
      byteArray2[1] = (byte)54;
      byteArray2[2] = (byte)54;
      byteArray0[1] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ifne\t\t#13878", string2);
      
      String string3 = Utility.getSignature("00 00 00 00 00 00 00 00 00 00 00 00 00 00 00");
      assertEquals("L00;", string3);
      
      String string4 = Utility.compactClassName("q5\"3EB]", false);
      assertEquals("q5\"3EB]", string4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(9, 464);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8.getCachedInstance("I1(/#$}SIkOqi6");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.setBit(222, 464);
      Utility.convertString("I1(/#$}SIkOqi6");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 306, 306);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-74);
      byteArray0[2] = (byte) (-76);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-92), (byte) (-12));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmple\t\t#22532", string0);
      
      int int0 = Utility.clearBit((byte)16, (byte)78);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantClass constantClass3 = new ConstantClass(constantClass2);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.isJavaIdentifierPart('0');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpeq");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)61;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readChar();
      Utility.isJavaIdentifierPart('U');
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(4, byteSequence0.getIndex());
      
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.setBit(255, (short) (-1));
      Utility.convertString(", index = ");
      byte[] byteArray1 = new byte[5];
      byte byte0 = (byte)42;
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-127);
      byteArray1[2] = (byte) (-84);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      int int0 = new Integer((byte) (-127));
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("LkZ/6o#A#:5n9QH5Bnh;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byte byte0 = (byte)54;
      Integer integer0 = new Integer(78);
      Utility.convertString("Eq3er0Q");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(78);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 165, (-586));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
      
      byte[] byteArray1 = Utility.decode("LkZ/6o#A#:5n9QH5Bnh;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isSet((-2588), (-2588));
      assertFalse(boolean0);
      
      byteSequence0.readFloat();
      byteSequence0.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore\t\t%53", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('[');
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean2 = Utility.isJavaIdentifierPart('x');
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(9, 464);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(254);
      Utility.convertString("#cp(^UL{6\"on){");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 464, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isSet((short) (-1), 2191);
      byteSequence0.readFloat();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-98);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-59);
      byteArray2[1] = (byte) (-59);
      byteArray2[2] = (byte) (-98);
      byteArray2[3] = (byte)0;
      ByteSequence byteSequence3 = new ByteSequence(byteArray2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-128), 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 164. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.replace("1ddTv", "1ddTv", "1ddTv");
      Utility.setBit(2373, (-1787));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1ddTv");
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)47;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)47, 91);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1ddTv");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantUtf8_0.accept(emptyVisitor0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)47);
      constantMethodType0.toString();
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantMethodType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("9y>sJs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9y>sJs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.compactClassName("@ox])f1l9rSCi4N\"ei", "@ox])f1l9rSCi4N\"ei", false);
      Utility.convertString("@ox])f1l9rSCi4N\"ei");
      Utility.clearBit(156, 607);
      Utility.isJavaIdentifierPart('!');
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      byte byte1 = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)13;
      byte byte2 = (byte)104;
      byteArray0[4] = (byte)104;
      byte byte3 = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      byte byte4 = (byte)41;
      byteArray0[6] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(176, (byte) (-75));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10496. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("<illegal opcode>", false);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("RrZpEziZ#4?p~cv6X", "$l$8b$I$A$A$A$A$A$A$A", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RAYRghi.J)vQ+");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RrZpEziZ#4?p~cv6X");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("m(I.T]+ZGo<nK`_o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m(I.T]+ZGo<nK`_o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
      
      byte[] byteArray1 = Utility.decode("LkZ/6o#A#:5n9QH5Bnh;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isSet((-2588), (-2588));
      byteSequence0.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean1 = Utility.isJavaIdentifierPart('[');
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-74);
      byteArray0[2] = (byte) (-76);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-92), (byte) (-12));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray1[0] = (Constant) constantInterfaceMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)78);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray1[1] = (Constant) constantDouble1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray1[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_icmple\t\t#22532", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)38;
      byteArray0[1] = (byte)38;
      Utility.setBit(159, 1141);
      Utility.convertString("SI<H");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("dload_0");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 185, 1141, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_acmpeq");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)61;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean1 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)22;
      Utility.setBit(159, 1141);
      ConstantClass constantClass0 = new ConstantClass(1141);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)65;
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte)22;
      byteArray1[6] = (byte)22;
      byteArray1[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray1, byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)65;
      try { 
        Utility.methodSignatureReturnType("lload\t\t%65");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload\t\t%65'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaReader");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$JavaReader", false);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaReader", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFloat constantFloat0 = new ConstantFloat(1216.83F);
      constantPool0.constantToString((Constant) constantFloat0);
      Utility.codeToString(byteArray0, constantPool0, 6, (-2228));
      Utility.compactClassName("org.apache.bcel.classfile.LineNumberTable", "1216.83", true);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$JavaReader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)22;
      Utility.setBit(159, 1141);
      Utility.convertString("SI<H");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 159);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.methodSignatureReturnType("Synthetic attribute with length > 0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("short", false);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("newarray");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(923);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("imul", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)127;
      byteArray0[0] = (byte) (-100);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-100));
      constantPool0.constantToString((Constant) constantFloat0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-54), (int) (byte)58);
      Utility.compactClassName("-100.0", "0:    ifge\t\t#32512\n3:    breakpoint\n4:    l2i\n5:    pop2\n6:    <illegal opcode>\n7:    astore\t\t%78\n", false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-120), 62, false);
      Utility.classOrInterface((byte) (-54));
      try { 
        Utility.methodSignatureArgumentTypes("0:    ifge\t\t#32512\n3:    breakpoint\n4:    l2i\n5:    pop2\n6:    <illegal opcode>\n7:    astore\t\t%78\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ifge\t\t#32512
         // 3:    breakpoint
         // 4:    l2i
         // 5:    pop2
         // 6:    <illegal opcode>
         // 7:    astore\t\t%78
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)127;
      byteArray0[0] = (byte) (-100);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "T@@Z/~Il7Z-<q";
      stringArray0[1] = "l}0s";
      stringArray0[2] = "jsr_w";
      stringArray0[3] = "Zu.UF~OnDbg>dT(z";
      String string0 = Utility.methodTypeToSignature("jsr_w", stringArray0);
      assertEquals("(LT@@Z/~Il7Z-<q;Ll}0s;Ljsr_w;LZu/UF~OnDbg>dT(z;)Ljsr_w;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte) (-125);
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte) (-79);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte) (-79);
      byteArray1[6] = (byte)46;
      byteArray1[7] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)124, (-1222), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Utility.compactClassName("Synthetic attribute with length > 0");
      assertEquals("Synthetic attribute with length > 0", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("Synthetic attribute with length > 0", false);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("newarray");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(923);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshl", string1);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m/4*|Ck?V=9{v7Tl");
      try { 
        Utility.typeOfSignature("RR).kHm0S%4o9R.C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RR).kHm0S%4o9R.C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-100);
      byteArray0[2] = (byte) (-76);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("10 7f b4 00 a4 58 f4 3a 4e", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.isJavaIdentifierPart('0');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AIf7,Iqi'?");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lmul", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)26;
      byteArray0[0] = (byte)26;
      byte byte1 = (byte)8;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.setBit(255, (short) (-1));
      Utility.convertString(", index = ");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte)74;
      Utility.encode(byteArray1, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 255, (-1401));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isSet((short) (-1), 2191);
      byteSequence0.readFloat();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-98);
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte) (-89);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = null;
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)90;
      byteArray0[6] = (byte)34;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)15);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1621), 76);
      assertEquals("0:    bipush\t\t127\n2:    ifge\t\t#-19290\n5:    pop2\n6:    <illegal opcode>\n7:    astore\t\t%78\n", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(40);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)126;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-123), (int) (byte)95);
      assertEquals("0:    dconst_1\n1:    i2l\n2:    dconst_1\n3:    dup_x1\n4:    iand\n", string0);
      
      Integer integer0 = new Integer((byte)126);
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance("Synthetic attribute with length > 0");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.setBit(1, (byte)61);
      Utility.convertString("Synthetic attribute with length > 0");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(95);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)25;
      byteArray0[1] = (byte)25;
      Utility.setBit(159, 1141);
      Utility.convertString("SI<H");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName(">");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 185, 1141, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = Utility.compactClassName("Synthetic attribute with length > 0");
      Utility.signatureToString("Synthetic attribute with length > 0", false);
      Utility.isJavaIdentifierPart('3');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      Utility.convertString("Synthetic attribute with length > 0");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Utility.decode("d1<v_0F", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.setBit(676, 676);
      Utility.convertString("p]b");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(997);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 110, 530);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[10];
      Utility.isJavaIdentifierPart('b');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d{jt`LF-];<+*7");
      Utility.convertString("Null");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteSequence0.readUTF();
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)39;
      byteArray2[1] = (byte)60;
      byteArray2[2] = (byte)67;
      byteArray2[3] = (byte) (-9);
      byteArray2[4] = (byte)119;
      byteArray2[5] = (byte) (-58);
      byteArray2[6] = (byte) (-57);
      byteArray2[7] = (byte) (-9);
      byteArray2[8] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 163, 768);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      String string0 = Utility.signatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", false);
      Utility.isJavaIdentifierPart('3');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w>%h\"/${=.Nl<[]hQO");
      Utility.convertString("Null");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpge\t\t#19791", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.compactClassName(">..");
      try { 
        Utility.typeOfSignature(">..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >..
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      String string0 = Utility.signatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", false);
      Utility.isJavaIdentifierPart('3');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w>%h\"/${=.Nl<[]hQO");
      Utility.convertString("Null");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)50);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.mark((byte)50);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)82;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byteSequence1.skipBytes((byte) (-56));
      byteSequence1.reset();
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), 0, false);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("lload_1");
      assertEquals("lload_1", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) (byte)31;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lload_1");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jsr";
      stringArray0[1] = "lload_1";
      stringArray0[2] = "lload_1";
      String string1 = Utility.methodTypeToSignature("lload_1", stringArray0);
      assertEquals("(Ljsr;Llload_1;Llload_1;)Llload_1;", string1);
      
      String string2 = Utility.classOrInterface(198);
      assertEquals("class", string2);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode(")0", false);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Utility.compactClassName("Synthetic attribute with length > 0");
      Utility.compactClassName("Synthetic attribute with length > 0", "K,`t8l#yMKB", true);
      Utility.convertString("9H9{/FA<mU5eJc^qN");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      byte byte0 = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-23));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)61;
      byteArray1[3] = (byte)37;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)37;
      byteArray0[3] = (byte)50;
      byteArray1[7] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.mark(70);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte)37, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, (int) (byte)37, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(981, 193);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-3978), (-928));
      Utility.convertString("00");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-930));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)54;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-45);
      byteArray2[1] = (byte)54;
      byteArray2[2] = (byte)54;
      byteArray2[3] = (byte)54;
      byteArray2[4] = (byte) (-102);
      byteArray2[5] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals("istore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byte byte0 = (byte)37;
      byteArray0[1] = (byte)37;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)37;
      byte byte1 = (byte) (-63);
      byteArray1[1] = (byte) (-63);
      byteArray1[3] = (byte)37;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)37;
      byteArray0[3] = (byte)50;
      byteArray1[7] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "')I_<\"5:)F9");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.skipBytes((-1));
      byteSequence1.reset();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (-1), false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantClass constantClass3 = new ConstantClass(constantClass2);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)19;
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("xfkP");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, (-1164), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.compactClassName("ZD4ib&");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("EZZ#:oSqX", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EZZ#:oSqX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)25;
      int int0 = Utility.setBit(159, 1141);
      assertEquals(2097311, int0);
      
      String string0 = Utility.convertString("SI<H");
      assertEquals("SI<H", string0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 159);
      assertEquals("0:    nop\n1:    aload\t\t%0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.typeOfSignature("Ivalid ype: ");
      Utility.setBit((byte)10, (byte)10);
      Utility.convertString("Ivalid ype: ");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(49);
      Utility.replace("F", "Ivalid ype: ", "qRlm/");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      short short0 = Utility.searchOpcode(";24Fbm[)q}");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("drem", string0);
      
      boolean boolean0 = Utility.isSet((short) (-1), (short) (-1));
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("s!5q!7|oxWX}");
      assertEquals("s!5q!7|oxWX}", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byte byte0 = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)121;
      Utility.accessToString((int) (byte)6, true);
      Utility.replace("", "={C", "N8j+hj.LE_Uz3");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.setBit(530, 2197);
      Utility.convertString("M}ujf#3+_");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(95);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2197, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)25);
      constantArray0[0] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.isSet(2191, 217);
      assertFalse(boolean0);
      
      Utility.convertString("iand");
      String string0 = Utility.convertString("Attribte(s) = ");
      assertEquals("Attribte(s) = ", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      Utility.isJavaIdentifierPart('U');
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)84;
      int int0 = 170;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-558), 170);
      Utility.accessToString((int) (byte)0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("00 00", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.searchOpcode(";24Fbm[)q}");
      byte[] byteArray0 = Utility.decode("s!5q!7|oxWX}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.isSet(158, 158);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte)77;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray2 = Utility.decode(":$U8,", false);
      assertArrayEquals(new byte[] {(byte)58, (byte)20, (byte)56, (byte)44}, byteArray2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.isSet((-1400), (byte)77);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("false");
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.signatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", false);
      assertEquals("double", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("0vD$Hvv", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("faload", string2);
      
      boolean boolean1 = Utility.isSet(196, 1837);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("K2E", "short", false);
      String string1 = Utility.convertString("K2E");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte)77;
      byteArray1[6] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass((-915));
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantClass constantClass3 = new ConstantClass(constantClass1);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
      
      Utility.compactClassName("astore_2");
      String string1 = Utility.compactClassName("astore_2");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.compactClassName("PSY.d$0Eq5ZN[", true);
      int int0 = (-2315);
      Utility.accessToString((-2315), true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("public protected final volatile transient abstract synthetic annotation enum", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('q');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printWriter0, objectArray0);
      String string0 = ")r2W-;[";
      String string1 = ")OL~Ba7>";
      boolean boolean0 = false;
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable((LocalVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)61);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("Synthetic attribute with length > 0", false);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("newarray");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(923);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)61, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? super ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface((-2849));
      assertEquals("class", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("? super ", false);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("}h");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(76);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-795), (-795));
      assertEquals("0:    lstore_0\n1:    lload_2\n2:    drem\n3:    lneg\n4:    irem\n5:    lsub\n6:    frem\n7:    lload_2\n", string1);
      
      int int0 = Utility.clearBit(177, 1374);
      assertEquals(177, int0);
      
      String string2 = Utility.format(161, 76, false, 'c');
      assertEquals("ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc161", string2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (int) (byte) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.accessToString(4);
      Utility.classOrInterface((-157));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "interface";
      objectArray0[4] = (Object) "interface";
      Utility.printArray(objectArray0, true, true);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(48);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 77, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "YM|phE]yC^";
      // Undeclared exception!
      try { 
        Utility.signatureToString("YM|phE]yC^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YM|phE]yC^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.searchOpcode("Warning: Padding byte != 0 in ");
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-95);
      byteArray2[1] = (byte)61;
      byteArray2[2] = (byte)121;
      byteArray2[3] = (byte)59;
      byteArray2[4] = (byte)61;
      Utility.equals(byteArray2, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("From\tTo\tHandler\tType\n");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.replace("1ddTv", "1ddTv", "1ddTv");
      Utility.setBit(2373, (-1787));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)47;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)47, 91);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1ddTv");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)47);
      constantMethodType0.toString();
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantMethodHandle0;
      constantArray0[7] = (Constant) constantMethodHandle1;
      constantArray0[8] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4469, (-1787));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12032. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(981, 193);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-3978), (-928));
      Utility.convertString("00");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-919));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 981, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_2", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.fillup("Unreachable default case reached!", 41, false, '0');
      assertEquals("00000000Unreachable default case reached!", string1);
      
      String string2 = Utility.getSignature("{null, java.lang.Object@6306f6c}");
      assertEquals("L{null,;", string2);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SSGJ#");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)9);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)9, (-2830));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(97, (byte)9);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("SSGJ#");
      ConstantMethodType constantMethodType1 = new ConstantMethodType(156);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      constantMethodType2.toString();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-2830), (-90));
      assertEquals("0:    ior\n1:    lconst_0\n2:    lconst_0\n3:    lconst_0\n", string0);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("ior", string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface((byte)46);
      assertEquals("class", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence1);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iushr", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.fillup("? super ", (-1429), false, 'd');
      String string2 = Utility.getSignature("dconst_1");
      assertEquals("Ldconst_1;", string2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      Utility.classOrInterface((byte)37);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("C31pcWHOwkS|@/R7l", false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)37;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)37;
      byteArray1[6] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "goto_w", "Z1hImw(Bp[%eT]S-P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      byte byte1 = (byte)124;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)55);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)55);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("class", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "class", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(981, 193);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-3978), (-928));
      Utility.convertString("00");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-930));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 981, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.clearBit(69, (byte)12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V");
      Locale locale0 = new Locale(" (tTf^lY],{\")4[", "V", "new");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) " (tTf^lY],{\")4[";
      objectArray0[2] = (Object) "new";
      objectArray0[3] = (Object) "V";
      byte byte0 = (byte) (-95);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_icmplt\t\t#-244", "", " (tTf^lY],{\")4[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmplt\t\t#-244
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.setBit(163, (-4461));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Synthetic attribute with length > 0";
      objectArray0[1] = (Object) "Synthetic attribute with length > 0";
      objectArray0[2] = (Object) "Synthetic attribute with length > 0";
      objectArray0[3] = (Object) "Synthetic attribute with length > 0";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(163, 43);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Synthetic attribute with length > 0");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(25);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)55;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      syntheticRepository0.findClass((String) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (-22));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)54;
      Utility.setBit((-1598), (byte)54);
      Utility.convertString("l2d");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(531);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1575, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byte byte0 = (byte)124;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((byte)55);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("class", false);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("}h");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(72);
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)124, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.accessToString((int) (byte)6, true);
      Utility.replace("", "={C", "N8j+hj.LE_Uz3");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)6;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.readFloat();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(91, 91);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("goto");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(91);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(64);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      constantMethodType0.toString();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(84, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("_s({");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)126, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")0");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.getSignature(")0");
      int int0 = (-3813);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)27, (byte)27, byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("long", "ifne", "land", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.compactClassName("Synthetic attribute with length > 0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.accessToString((-3199), true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("public transient native synthetic annotation enum");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 184, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.getSignature(")\n");
      assertEquals("L);", string0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("L);");
      byte byte0 = (byte)68;
      Utility.encode(byteArray0, false);
      String string1 = "goto";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.reset();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("\"VE");
      Utility.searchOpcode("dreturn");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 1);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("G_p vp%^");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)112);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(169);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      constantMethodType1.toString();
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodType1;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, (int) (byte)112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" reaching EOF", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$mreaching$mEOF", string0);
      
      Utility.compactClassName("", " reaching EOF", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "$mreaching$mEOF";
      objectArray0[2] = (Object) " reaching EOF";
      objectArray0[3] = (Object) "";
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{, $mreaching$mEOF,  reaching EOF, }", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2, 2);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(2, 2);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string2 = Utility.codeToString(byteArray0, constantPool0, 2, (-1), false);
      assertEquals("2:    lsub\n3:    ladd\n4:    dadd\n5:    imul\n6:    lmul\n7:    fdiv\n8:    dsub\n9:    lload_2\n10:   fstore_2\n11:   iastore\n12:   fstore_3\n", string2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Utility.getSignature(")\n");
      assertEquals("L);", string0);
      
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("L);");
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
      
      String string2 = Utility.replace("goto", "goto", "1,5 #6/qn");
      assertEquals("1,5 #6/qn", string2);
      
      int int0 = Utility.setBit(1777, 200);
      assertEquals(2033, int0);
      
      Utility.replace("'iu[yz", "jrI<~,_EV4h", "'iu[yz");
      boolean boolean0 = Utility.isSet((byte)68, 200);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")0");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)27;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(512, (byte) (-34));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1840), 1538);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    iload_1\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    nop\n", string0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.equals(byteArray0, byteArray0);
      String string1 = Utility.accessToString(1486);
      assertEquals("private protected static volatile transient native abstract", string1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)124;
      try { 
        Utility.typeOfSignature("Exceptions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      Utility.toHexString(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(981, (-801));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("double");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)96);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType1.toString();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle1;
      Utility.signatureToString("CONSTANT_MethodType[16](descriptor_index = 96)", false);
      Utility.fillup("!2m#13VQ5", (byte)15, true, 'B');
      try { 
        Utility.methodSignatureReturnType("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)96;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 239);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Np,Gd");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)96);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodType0;
      constantMethodType0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)105, 2010);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(3128, 477, true, 'U');
      Utility.isJavaIdentifierPart('U');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)84;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-558), 170);
      Utility.accessToString((int) (byte)84, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("44 54", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 44 54
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)124;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface((byte)46);
      assertEquals("class", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("iaload");
      assertEquals("iaload", string1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(25);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType1.toString();
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType1;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1), (-1304));
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-1840), 2314);
      assertEquals("0:    iaload\n1:    iushr\n", string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-1));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "monitorexit";
      try { 
        Utility.methodSignatureToString("ireturn", "org.apache.bcel.classfile.LocalVariableTable", "org.apache.bcel.classfile.LocalVariableTable", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)54;
      Utility.setBit((-1598), (byte)54);
      Utility.convertString("l2d");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(531);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1575, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.replace("TEmJ^P3Fbb", "boolean", "if_icmpne");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("XM(\"tFdC[");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)105, (-3210));
      Utility.classOrInterface(1314);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("XM(\"tFdC[");
      ConstantFieldref constantFieldref1 = new ConstantFieldref((-1436), (-1436));
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(23, 2);
      constantFieldref1.clone();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantFieldref2;
      constantArray0[2] = (Constant) constantFieldref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, (-3210), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Integer integer0 = new Integer((-2849));
      Utility.signatureToString("V", true);
      String string0 = "+";
      byte byte0 = (byte)67;
      Utility.isSet((-150), 212);
      Utility.compactClassName("+", "Integer", false);
      Utility.searchOpcode("+");
      Utility.searchOpcode("freturn");
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.accessToString((-3199), true);
      assertEquals("public transient native synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("public transient native synthetic annotation enum");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup_x1", string1);
      
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("O:'Cp3XD&r=9_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O:'Cp3XD&r=9_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.printArray((Object[]) stringArray0, false);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)67;
      Utility.classOrInterface(100);
      char char0 = '-';
      Utility.isJavaIdentifierPart('#');
      Utility.equals(byteArray0, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Cloneable, java.io.Serializable");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.Cloneable, java.io.Serializable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Cloneable, java.io.Serializable'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.replace("7 B2Mi=@ ^@oK/", "Only element values of type annotation can be built with this ctor - type specified: ", "Invalid class name ");
      assertEquals("7 B2Mi=@ ^@oK/", string0);
      
      String string1 = Utility.accessToString(1949);
      assertEquals("public protected static final transient native interface abstract", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "public protected static final transient native interface abstract";
      stringArray0[1] = "Only element values of type annotation can be built with this ctor - type specified: ";
      stringArray0[2] = "boolean";
      stringArray0[3] = "7 B2Mi=@ ^@oK/";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantClass constantClass0 = new ConstantClass(1949);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("6^y~20");
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1949, 1949);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_2", string2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.replace("TEmJ^P3Fbb", "boolean", "if_icmpne");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("XM(\"tFdC[");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)105, (-3210));
      Utility.classOrInterface(1314);
      Utility.isJavaIdentifierPart('[');
      Utility.equals(byteArray0, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("30s");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "TEmJ^P3Fbb";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "if_icmpne";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = Utility.methodSignatureReturnType("C(&0<Is=CaRcqV-", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)96;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 239);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Np,Gd");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)96);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodType0;
      constantMethodType0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)105, 2010);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.signatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", false);
      assertEquals("double", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      Utility.compactClassName("JZWaO&aND}}");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "JZWaO&aND}}";
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Dont call getValueShort() on s non SHORT Eleme/tValue");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Dont call getValueShort() on s non SHORT Eleme/tValue");
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "double";
      objectArray1[1] = (Object) "JZWaO&aND}}";
      objectArray1[2] = (Object) "double";
      objectArray1[3] = (Object) "JZWaO&aND}}";
      byte[] byteArray0 = Utility.decode("ifgt", false);
      byte byte1 = Utility.typeOfSignature("JZWaO&aND}}");
      assertEquals((byte)11, byte1);
      
      int int0 = Utility.clearBit((byte)11, (byte)7);
      assertEquals(11, int0);
      
      String string1 = Utility.compactClassName("<Any exception>(0)");
      assertEquals("<Any exception>(0)", string1);
      
      Integer integer0 = new Integer((byte)7);
      String string2 = Utility.fillup("J $)x}?~LX", 11, false, 'd');
      assertEquals("dJ $)x}?~LX", string2);
      
      int int1 = Utility.setBit(11, (byte)11);
      assertEquals(2059, int1);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("ifgt", string3);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byte[] byteArray1 = Utility.decode("FMMgf;~Q", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte)77, (byte)103, (byte)102, (byte)59, (byte)126, (byte)81}, byteArray1);
      
      byteArray0[6] = (byte) (-117);
      byte byte0 = Utility.typeOfSignature("FMMgf;~Q");
      assertEquals((byte)6, byte0);
      
      int int0 = Utility.clearBit((byte)0, (byte) (-117));
      assertEquals(0, int0);
      
      Utility.compactClassName("FMMgf;~Q");
      Utility.decode("double", false);
      int int1 = Utility.clearBit((-2068), (byte) (-34));
      assertEquals((-1073743892), int1);
      
      String string0 = Utility.methodSignatureReturnType("FMMgf;~Q", true);
      assertEquals("float", string0);
      
      String string1 = Utility.classOrInterface((byte)125);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("pv", "class", false);
      assertEquals("pv", string2);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byte byte0 = (byte)124;
      byteArray0[1] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      Utility.accessToString(2314, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("lload_1");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "lload_1";
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.getSignature(")\n");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")\n");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")\n";
      stringArray0[1] = ",ZS";
      stringArray0[2] = ")\n";
      stringArray0[3] = "L);";
      stringArray0[4] = "L);";
      stringArray0[5] = "L);";
      stringArray0[6] = "L);";
      stringArray0[7] = ")\n";
      stringArray0[8] = ")\n";
      Utility.methodTypeToSignature(")\n", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.setBit(185, 185);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.printArray((Object[]) stringArray0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(25, (byte)73);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.Cloneable, java.io.Serializable");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)43);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("\"VE");
      Utility.searchOpcode("dreturn");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)49;
      Utility.accessToString(46, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("qMadc$q#0i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qMadc$q#0i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.getSignature(")\n");
      Object[] objectArray0 = new Object[9];
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L);");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" reaching EOF", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(13, byteArray0.length);
      
      String string1 = Utility.compactClassName("", " reaching EOF", false);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) " reaching EOF";
      objectArray0[3] = (Object) "";
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{, $l$8b$I$A$A$A$A$A$A$A,  reaching EOF, }", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8.getCachedInstance("");
      int int0 = 2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2, 2);
      constantFieldref1.clone();
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, 2, 2, true);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)80;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)105;
      objectArray0[1] = (Object) (byte) (-7);
      objectArray0[2] = (Object) (byte) (-7);
      objectArray0[3] = (Object) (byte)80;
      objectArray0[4] = (Object) "Np,Gd";
      objectArray0[5] = (Object) (byte)105;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("Np,Gd");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2901, (byte)105);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)125;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-117);
      int int0 = 2487;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-117);
      int int0 = 2487;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.getSignature("Thh{");
      Utility.compactClassName("@y#}RN6h^m", "gT{HMdn{>B9W<\"(", true);
      Utility.signatureToString("LThh{;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-86);
      byteArray0[6] = (byte) (-119);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte byte0 = (byte)99;
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{java.lang.Object@4d3f6249, java.lang.Object@558c1238}", (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.replace("1ddTv", "1ddTv", "1ddTv");
      int int0 = (-1787);
      Utility.setBit(2373, (-1787));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("^KTS~4>IJkQB@V", "ybbBk=", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.setBit(185, 185);
      Utility.printArray((Object[]) stringArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)55;
      Constant[] constantArray0 = new Constant[2];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 43. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)80;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)105;
      objectArray0[1] = (Object) (byte) (-7);
      objectArray0[2] = (Object) (byte) (-7);
      objectArray0[3] = (Object) (byte)80;
      objectArray0[4] = (Object) "Np,Gd";
      objectArray0[5] = (Object) (byte)105;
      Utility.printArray(objectArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("Np,Gd");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2901, (byte)105);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)80, (byte)120);
      constantFieldref1.clone();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.printArray(objectArray0, true);
      Utility.convertString("'(,tT#VGVgLcTXYj");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)105;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte)105;
      byteArray1[6] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 199, (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid type: ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Invalid type: ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.signatureToString("Invalid type: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)80;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)105;
      objectArray0[1] = (Object) (byte) (-7);
      objectArray0[2] = (Object) (byte) (-7);
      objectArray0[3] = (Object) (byte)80;
      objectArray0[4] = (Object) "Np,Gd";
      objectArray0[5] = (Object) (byte)105;
      Utility.printArray(objectArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("Np,Gd");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2901, (byte)105);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)80, (byte)120);
      constantFieldref1.clone();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)105, 82, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString((int) (byte)124, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "iaload";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.signatureToString("L;", true);
      Utility.methodSignatureReturnType("Invalid signature: `");
      Utility.classOrInterface((-2271));
      try { 
        Utility.methodSignatureArgumentTypes("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)13;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    impdep2
         // 2:    fstore_2
         // 3:    fconst_2
         // 4:    nop
         // 5:    lstore_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = ",^CN.JZ7^B/,c}7";
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName(",^CN.JZ7^B/,c}7", ",^CN.JZ7^B/,c}7", true);
      Utility.classOrInterface(48);
      String string1 = "9xO";
      try { 
        Utility.typeOfSignature("9xO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9xO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("a");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-1), (byte)99);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)99, 204);
      constantFieldref0.clone();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("{java.lang.Object@4a8bcae5, java.lang.Object@2c4e1711}");
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool2, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 78, (int) (byte)99, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" reaching EOF", false);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("", " reaching EOF", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 627, (-1056), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "";
      String string1 = "Byte code error: ";
      String string2 = "BI`D%mA3<1VNZ,eV'qh";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "Byte code error: ", "BI`D%mA3<1VNZ,eV'qh", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)69;
      Utility.toHexString(byteArray0);
      Utility.fillup("jsr_w", (byte)69, true, 'Y');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)69);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" reaching EOF", false);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("", " reaching EOF", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) " reaching EOF";
      objectArray0[3] = (Object) "";
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2, 2);
      constantFieldref1.clone();
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, 2, 2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = Utility.setBit(171, (-2877));
      assertEquals(171, int0);
      
      String string0 = Utility.signatureToString("BootstrapMethods", false);
      assertEquals("byte", string0);
      
      String string1 = Utility.classOrInterface(171);
      assertEquals("class", string1);
      
      int int1 = Utility.clearBit((-2877), (-921));
      assertEquals((-3005), int1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      Utility.accessToString(2314, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "iaload";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("private static native strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private static native strictfp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=75 bN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =75 bN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, 67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Utility.getSignature("Thh{");
      Utility.compactClassName("@y#}RN6h^m", "gT{HMdn{>B9W<\"(", true);
      Utility.signatureToString("LThh{;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-119);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.accessToString(12);
      Utility.isJavaIdentifierPart(' ');
      Utility.setBit(12, 12);
      int int0 = (-1183);
      Utility.fillup("boolean", (-1183), true, 'q');
      Utility.accessToString(44, false);
      String string0 = "wide";
      try { 
        Utility.methodSignatureReturnType("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wide'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!PV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.searchOpcode(">}+EAJ4I\"Yw");
      Utility.getSignature(">}+EAJ4I\"Yw");
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.fillup("V", 47, false, 'A');
      Utility.decode("V", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("invokestatic");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[1];
      Locale.forLanguageTag("linenumbertable");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      objectArray0[0] = (Object) "invokedynamic";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "invokedynamic", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      try { 
        Utility.methodSignatureReturnType("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokestatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("PO", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "ZD7$";
      Utility.typeOfSignature("ZD7$");
      String string1 = "\"2;!(P +D5Fw";
      Utility.compactClassName("\"2;!(P +D5Fw");
      try { 
        Utility.typeOfSignature("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "CONSTANT_Fieldref";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OE%7>{Q~+*EH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OE%7>{Q~+*EH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "PO";
      try { 
        Utility.typeOfSignature("PO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[SA)uM659AHRn89");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("(lM <qXh*!Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lM <qXh*!Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[hL<Z@hJC0`VLD8!w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `hL<Z@hJC0`VLD8!w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('V');
      try { 
        Utility.methodSignatureReturnType("Ei_;wosqG2\"*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ei_;wosqG2\"*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.typeOfSignature("V");
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "\"O";
      try { 
        Utility.typeOfSignature("\"O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = "(#5wv9wp\\U|aupQy";
      try { 
        Utility.methodSignatureArgumentTypes("(#5wv9wpU|aupQy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#5wv9wpU|aupQy'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = Utility.compactClassName("AFf", "AFf", true);
      assertEquals("", string0);
      
      Utility.decode("", false);
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("TMa9;}l*.vt_8Snx");
      assertEquals("Ma9", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(lM <qXh*!Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lM <qXh*!Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      String string1 = Utility.getSignature("ixor");
      assertEquals("Lixor;", string1);
      
      String string2 = Utility.compactClassName("ixor");
      assertEquals("ixor", string2);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "LineNumberTable";
      boolean boolean0 = true;
      String string1 = "Q  k.I'X6M0T'?dQ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q  k.I'X6M0T'?dQ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q  k.I'X6M0T'?dQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Mn,tanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mn,tanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M~U/~Ei)1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M~U/~Ei)1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-118);
      Utility.encode(byteArray0, false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("newarray", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) (byte) (-118);
      objectArray0[2] = (Object) (byte) (-3);
      objectArray0[3] = (Object) (byte)115;
      mockFileWriter0.flush();
      objectArray0[4] = (Object) "newarray";
      objectArray0[5] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "";
      Utility.convertString("");
      try { 
        Utility.methodSignatureReturnType("aload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("#j>UDwl|71q\"nb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #j>UDwl|71q\"nb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Utility.format(83, 2726, false, '`');
      try { 
        Utility.typeOfSignature("8x;uktfz8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8x;uktfz8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.format(58, 86, true, '$');
      try { 
        Utility.typeOfSignature("58$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 58$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)107;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("T$ff$dc9$ddjk", string0);
      
      String string1 = Utility.compactClassName("g0/W&[U83~Yr=LUp75I", "T$ff$dc9$ddjk", false);
      assertEquals("g0.W&[U83~Yr=LUp75I", string1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NGd", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NGd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "SSGJ#";
      Utility.typeOfSignature("SSGJ#");
      try { 
        Utility.typeOfSignature("4c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(<K{nG1@8~Odn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (<K{nG1@8~Odn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" reaching EOF", false);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("", " reaching EOF", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) " reaching EOF";
      objectArray0[3] = (Object) "";
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2, 2);
      constantFieldref1.clone();
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, 2, (-1), true);
      assertEquals("2:    lsub\n3:    ladd\n4:    dadd\n5:    imul\n6:    lmul\n7:    fdiv\n8:    dsub\n9:    lload_2\n10:   fstore_2\n11:   iastore\n12:   fstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byte byte0 = (byte)61;
      byteArray0[1] = (byte)61;
      byte byte1 = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)59;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "athrow";
      Utility.fillup("athrow", 118, true, 'r');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, 118, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.accessToString(89);
      assertEquals("public static final volatile", string0);
      
      String string1 = Utility.convertString("putstatic");
      assertEquals("putstatic", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q/DH=45");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q/DH=45'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = Utility.format(50, 50, true, 'A');
      assertEquals("50AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      String string1 = Utility.accessToString(1557, true);
      assertEquals("public protected final abstract", string1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "(";
      Utility.compactClassName("(", "(", false);
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      try { 
        Utility.typeOfMethodSignature("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.typeOfSignature("SSGJ#");
      // Undeclared exception!
      try { 
        Utility.getSignature("[T$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [T$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.convertString("\"");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 69;
      int int1 = 88;
      Utility.clearBit(69, 88);
      String string0 = "%`3";
      try { 
        Utility.typeOfSignature("%`3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %`3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.format((-2909), (byte)8, false, 'q');
      assertEquals("qqq-2909", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z0eJ`@MmX*Fe$dBX");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "-o>]YJf4#<b$>4[n\"F$";
      // Undeclared exception!
      try { 
        Utility.getSignature("-o>]YJf4#<b$>4[n\"F$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[n\"F$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "RV:s={)DT%@s40";
      // Undeclared exception!
      try { 
        Utility.signatureToString("RV:s={)DT%@s40", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RV:s={)DT%@s40'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = ")\n";
      Utility.getSignature(")\n");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "L);";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("j[@,[]O&su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[@,[]O&su
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Utility.signatureToString("SSGJ#", false);
      Utility.compactClassName("org.apache.bcel.classfile.ElementValuePair");
      try { 
        Utility.methodSignatureArgumentTypes("tLvKtu:wwc(R#~xg{S@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tLvKtu:wwc(R#~xg{S@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Utility.methodSignatureReturnType("SqSGJ#");
      String[] stringArray0 = Constants.ITEM_NAMES;
      try { 
        Utility.methodSignatureToString("short", "void", "SqSGJ#", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ol");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ol'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d6[BnZY>^+/RNlCh");
      int int0 = Utility.clearBit((-226), 24);
      assertEquals((-16777442), int0);
      
      String string0 = Utility.getSignature("<illegal opcode>");
      assertEquals("L<illegal;", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "L<illegal;";
      objectArray0[1] = (Object) "<illegal opcode>";
      objectArray0[2] = (Object) "<illegal opcode>";
      objectArray0[3] = (Object) "<illegal opcode>";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d6[BnZY>^+/RNlCh");
      int int1 = Utility.clearBit(198, (-16777442));
      assertEquals(198, int1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)32;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("_6$ea$94$81$b1$m", string1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Utility.getSignature("int");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1346), (-1346), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Utility.classOrInterface(211);
      Utility.isJavaIdentifierPart('|');
      try { 
        Utility.methodSignatureReturnType(":<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Utility.getSignature("\n");
      Utility.replace("L\n;", "L\n;", "(rrTgC");
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.classOrInterface(76);
      String string0 = "XH";
      try { 
        Utility.methodSignatureReturnType("XH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = Utility.classOrInterface(152);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = " no ident, reaching EOF";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ljava/lang/Object", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ljava/lang/Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = Utility.replace("I]o", "|==y`f;F", "?4@K#");
      assertEquals("I]o", string0);
      
      String string1 = Utility.accessToString((-1162), true);
      assertEquals("private protected final volatile native strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.classOrInterface(163);
      String string1 = Utility.compactClassName("class", false);
      assertTrue(string1.equals((Object)string0));
      
      Utility.printArray((Object[]) null, false);
      String string2 = Utility.format(32767, (-1131), false, 'W');
      assertEquals("32767", string2);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = Utility.signatureToString("I]o");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.getSignature("\n");
      try { 
        Utility.typeOfSignature("$~M'S&IVkrd&_mKeMk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $~M'S&IVkrd&_mKeMk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)59;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = Utility.getSignature("\n");
      assertEquals("L;", string0);
      
      int int0 = Utility.clearBit((-1556), (-1556));
      assertEquals((-5652), int0);
      
      String string1 = Utility.accessToString((-5652), true);
      assertEquals("protected static volatile transient native strictfp annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = Utility.getSignature("\n");
      assertEquals("L;", string0);
      
      String string1 = Utility.convertString("\n");
      assertEquals("\\n", string1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.typeOfSignature("Invalid type: ");
      Utility.setBit(16371, (byte)10);
      Utility.decode("ddiv", false);
      Utility.fillup("Invalid type: ", (-940), false, '2');
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = (-3879);
      Utility.classOrInterface((-3879));
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("5", stringArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      try { 
        Utility.methodSignatureArgumentTypes("tz;+Qk+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tz;+Qk+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = Utility.replace("I]o", "|==y`f;F", "?4@K#");
      assertEquals("I]o", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = null;
      String string0 = ")P'DogV7-et9s{:";
      try { 
        Utility.methodSignatureReturnType(")P'DogV7-et9s{:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'DogV7-et9s{:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.isJavaIdentifierPart('A');
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "Un";
      try { 
        Utility.typeOfSignature("Un");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Un
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Fx9");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("Total of ");
      Utility.replace("Total of ", "Total of ", "Total of ");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/faD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /faD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.compactClassName(",^CN.JZ7^B/,c}7", ",^CN.JZ7^B/,c}7", true);
      assertEquals(",^CN.JZ7^B.,c}7", string0);
      
      String string1 = Utility.classOrInterface(48);
      assertEquals("class", string1);
      
      String string2 = Utility.fillup("ifne", 48, true, 'H');
      assertEquals("ifneHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string2);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Tiy8\"9WuEih@08yq8");
      assertEquals((byte)14, byte0);
      
      byte byte1 = Utility.typeOfSignature("ConstantValue");
      assertEquals((byte)5, byte1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = "0\"\\\\kffA";
      try { 
        Utility.typeOfSignature("0\"\\kffA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0\"\\kffA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "?m", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Utility.replace("fs]q6u?@x`MF+oQ]E", "IEegaX type: ", "{=3*Lkl!@UR8ybS");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-2549), false, 'b');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = Utility.getSignature("\n");
      assertEquals("L;", string0);
      
      String string1 = Utility.compactClassName("org.apache.commons.io.filefilter.DirectoryFileFilter", "\n", true);
      assertEquals("org.apache.commons.io.filefilter.DirectoryFileFilter", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", (String) null, "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Dont call getValueShort() on s non SHORT Eleme/tValue
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("System");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      try { 
        Utility.typeOfSignature("->@b}8(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ->@b}8(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueShort() on s non SHORT Eleme/tValue");
      Utility.signatureToString("Dont call getValueShort() on s non SHORT Eleme/tValue", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(<K{nG1@8~On", "D$unpg,CZaMs8", "D$unpg,CZaMs8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<K{nG1@8~On'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      byte byte1 = Utility.typeOfSignature("Z&EXg@F>{'_U|D3");
      assertEquals((byte)4, byte1);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.getSignature("\n");
      try { 
        Utility.methodSignatureReturnType("NB(g}1qJA !0Hj<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NB(g}1qJA !0Hj<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xjlz;T;TMW[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xjlz;T;TMW[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(162, true);
      try { 
        Utility.decode("{java.lang.Object@279634d0, java.lang.Object@58b9ae6b, java.lang.Object@3f6e92bf, java.lang.Object@6ab8205a, java.lang.Object@7c1ea969, java.lang.Object@69c18a77, java.lang.Object@2271069a}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = ".=qLb,rd1:57&<yt>";
      try { 
        Utility.typeOfSignature(".=qLb,rd1:57&<yt>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .=qLb,rd1:57&<yt>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = "NGd";
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("NGd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NGd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = "ifgt";
      String string1 = "$1}|";
      try { 
        Utility.typeOfMethodSignature("$1}|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $1}|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "Gk3(:WY8Jso=HEQ4vk";
      try { 
        Utility.typeOfSignature("Gk3(:WY8Jso=HEQ4vk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gk3(:WY8Jso=HEQ4vk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*@t0n%7wuc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @t0n%7wuc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.accessToString((-3837), false);
      MockFile mockFile0 = new MockFile("Dont call getValueShort() on 3 no< SHORT Eleme/tValue");
      File file0 = MockFile.createTempFile("Dont call getValueShort() on 3 no< SHORT Eleme/tValue", "Dont call getValueString() on a non STRING ElementValue", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Dont call getValueString() on a non STRING ElementValue";
      objectArray0[1] = (Object) "Dont call getValueShort() on 3 no< SHORT Eleme/tValue";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "public private native synthetic annotation enum";
      objectArray0[4] = (Object) "public private native synthetic annotation enum";
      objectArray0[5] = (Object) mockFile0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Utility.typeOfSignature("Ljava/lang/Object");
      Utility.replace("Ljava/lang/Object", "Ljava/lang/Object", " no ident, reaching EOF");
      Utility.isJavaIdentifierPart('B');
      try { 
        Utility.methodSignatureReturnType("Ljava/lang/Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ljava/lang/Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.isSet(251, 251);
      // Undeclared exception!
      try { 
        Utility.compactClassName("A1\"", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("areturn", (String) null, "dcmpl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call getValueShort() on a non SHORT Eleme/tValue");
      assertEquals((byte)7, byte0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      stringArray0[1] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      stringArray0[2] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      stringArray0[3] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      stringArray0[4] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      stringArray0[5] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      stringArray0[6] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      stringArray0[7] = "Dont call getValueShort() on a non SHORT Eleme/tValue";
      String string0 = Utility.methodTypeToSignature("Dont call getValueShort() on a non SHORT Eleme/tValue", stringArray0);
      assertEquals("(LDont;LDont;LDont;LDont;LDont;LDont;LDont;LDont;)LDont;", string0);
      
      String string1 = Utility.methodSignatureReturnType("(LDont;LDont;LDont;LDont;LDont;LDont;LDont;LDont;)LDont;");
      assertEquals("Dont", string1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3(:WY8Jso=HEQ4vk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3(:WY8Jso=HEQ4vk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = Utility.replace("areturn", "areturn", "areturn");
      assertEquals("areturn", string0);
      
      short short0 = Utility.searchOpcode("areturn");
      assertEquals((short)176, short0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AlYS#,~6}j)9l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AlYS#,~6}j)9l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ljava/lang/Object");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.replace("Ljava/lang/Object", "jsr_w", " no ident, reaching EOF");
      assertEquals("Ljava/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Utility.getSignature(":");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = "@c*j";
      try { 
        Utility.typeOfSignature("@c*j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @c*j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "KPf";
      try { 
        Utility.typeOfSignature("KPf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KPf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = Utility.getSignature("float");
      assertEquals("F", string0);
      
      short short0 = Utility.searchOpcode("void");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("jCZ *I+Xt&", "float", true);
      assertEquals("jCZ *I+Xt&", string1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Total of ");
      assertEquals((byte)14, byte0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      String string0 = Utility.accessToString(2664, false);
      objectArray0[0] = object0;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.typeOfSignature("Signature");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(",Da*AbOIQ[+|D[[Lo2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Da*AbOIQ[+|D[[Lo2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "int", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.signatureToString("J-`cjZ0VZ", false);
      try { 
        Utility.typeOfSignature("YM|phE]yC^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YM|phE]yC^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "<Any exception>(0)";
      try { 
        Utility.typeOfSignature("<Any exception>(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Any exception>(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1|9<?Z*,2wSB\"it'4gI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1|9<?Z*,2wSB\"it'4gI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&>^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &>^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.compactClassName("", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("wR,:", "tableswitch", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wR,:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.typeOfSignature("Invalid type: ");
      Utility.setBit(16371, (byte)10);
      try { 
        Utility.decode("ddiv", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7`N'F4>V?KQbZwArN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7`N'F4>V?KQbZwArN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("_FotQ,2zhDK`)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YM|phE]yC^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YM|phE]yC^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.convertString("anewarray");
      String string0 = "";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = Utility.replace("invokeinterface", "H", ">");
      assertEquals("invokeinterface", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-125);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$BL$US$bc$J$E$83", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("01 4c 14 53 bc 09 04 83", string2);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = Utility.compactClassName(":");
      assertEquals(":", string0);
      
      String string1 = Utility.classOrInterface((-1097721156));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.signatureToString("V", true);
      try { 
        Utility.typeOfSignature("lload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("XhUR?fm''#?B~jy");
      assertEquals("XhUR?fm\\'\\'#?B~jy", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("/jgQ*", "", "H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /jgQ*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.MethodParameter");
      Utility.clearBit((-703), (-703));
      Utility.setBit((-703), (-703));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.MethodParameter");
      Utility.setBit((-703), (-701));
      Utility.getSignature("org.apache.bcel.classfile.MethodParameter");
      Utility.format((-703), (-701), false, 'm');
      try { 
        Utility.typeOfSignature("fu;c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fu;c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("impdep1");
      String string0 = Utility.fillup("impdep1", 4051, false, 'd');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "impdep1";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "impdep1";
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) "impdep1";
      objectArray0[5] = (Object) string0;
      objectArray0[6] = (Object) "impdep1";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = Utility.getSignature("l~t");
      assertEquals("Ll~t;", string0);
      
      String string1 = Utility.compactClassName("instanceof", "Constant pool at index ", true);
      assertEquals("instanceof", string1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("GM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = "Total of ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Total of ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("RE#.[>?", "Jz", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.getSignature(":");
      Utility.isJavaIdentifierPart('=');
      Utility.clearBit(6, (-1122));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L:;", ":", "L:;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L:;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.compactClassName("zn2?HnsXxd23\"Nt");
      Utility.compactClassName("LckA)yV?d\"*m8", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.getSignature(":");
      Utility.compactClassName("char", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "char";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.fillup("^J4T ", 45, false, ')');
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.compactClassName("zn2?HnsXxd23\"Nt");
      Utility.isJavaIdentifierPart('=');
      Utility.clearBit(256, 0);
      try { 
        Utility.methodSignatureReturnType("zn2?HnsXxd23\"Nt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zn2?HnsXxd23\"Nt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "t1G,f1uo@eC", "t1G,f1uo@eC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-13), (int) (byte) (-13));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "DH|4YG4", "DH|4YG4", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.getSignature(":");
      Utility.compactClassName("char", true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ":";
      objectArray0[1] = (Object) "L:;";
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.compactClassName("zn2?HnsXxd23\"Nt");
      Utility.isJavaIdentifierPart('M');
      Utility.clearBit(256, 0);
      Utility.setBit(256, 256);
      try { 
        Utility.methodSignatureReturnType("zn2?HnsXxd23\"Nt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zn2?HnsXxd23\"Nt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = Utility.replace("{_Ue.O;", "{_Ue.O;", (String) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lrem", "The wildcard list must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = "YM|phE]yC^";
      try { 
        Utility.methodSignatureReturnType("YM|phE]yC^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YM|phE]yC^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.convertString("getfield");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean boolean0 = Utility.isSet(90, (-702));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = "zn2?HnsXxd23\"Nt";
      Utility.replace("zn2?HnsXxd23\"Nt", "zn2?HnsXxd23\"Nt", "zn2?HnsXxd23\"Nt");
      Utility.setBit(901, 581);
      Utility.clearBit(933, 32);
      MockFile mockFile0 = new MockFile("qL:j'uHgN~c/{p<7=", "zn2?HnsXxd23\"Nt");
      MockFile mockFile1 = new MockFile(mockFile0, "(d#@@O~9`_V`\"-ZK");
      File file0 = MockFile.createTempFile("zn2?HnsXxd23\"Nt", "zn2?HnsXxd23\"Nt", (File) mockFile1);
      String string1 = "getfield";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "getfield");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // getfield
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = Utility.compactClassName("H", false);
      assertEquals("H", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = "athrow";
      Utility.decode("athrow", false);
      String string1 = " and got ";
      try { 
        Utility.methodSignatureReturnType(" and got ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` and got '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Utility.compactClassName("H");
      Utility.isJavaIdentifierPart('t');
      Utility.setBit((-1769), 93);
      Utility.decode("4\u0004Or#![k)4rq", false);
      try { 
        Utility.methodSignatureArgumentTypes("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 196, 196);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("Ru%t<5,xD3DA", "FX9bb\"Ox", "Ru%t<5,xD3DA");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2373, 2373);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)23;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte)77;
      byteArray1[6] = (byte)77;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = null;
      String string1 = "(";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", (String) null, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("$w\"AAh;7ZA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$w\"AAh;7ZA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.compactClassName("zn2?HnsXxd23\"Nt");
      assertEquals("zn2?HnsXxd23\"Nt", string0);
      
      Object object0 = new Object();
      boolean boolean0 = Utility.isSet((-1305), 320);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      try { 
        Utility.typeOfSignature("]q35");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]q35
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Object object0 = new Object();
      objectArray0[5] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureToString("jsr_w", ">", "System", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.isSet(0, 0);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object1;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      int int0 = (-1567);
      int int1 = 122;
      Utility.format((-1567), 122, false, '0');
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("B*%{PHdaLV3U*O#i", true);
      MockFile mockFile0 = new MockFile("");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "B*%{PHdaLV3U*O#i";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Warning: Padding byte != 0 in ");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = Utility.accessToString(3102);
      String string1 = Utility.replace("private protected static final abstract strictfp", "private protected static final abstract strictfp", "private protected static final abstract strictfp");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit(76, 3102);
      assertEquals(76, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)122;
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
      
      String string2 = Utility.format(0, 127, true, ']');
      assertEquals("0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string2);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.ExceptionTable", "org.apache.bcel.classfile.ExceptionTable", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.ExceptionTable";
      objectArray0[1] = (Object) "";
      Utility.printArray(objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("short");
      Locale locale0 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "{org.apache.bcel.classfile.ExceptionTable, }", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Locale locale1 = Locale.KOREAN;
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, "long", objectArray0);
      Utility.printArray(printWriter1, objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      int int0 = 0;
      Utility.accessToString(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, true, false);
      String string0 = "`l";
      boolean boolean0 = true;
      int int1 = (-1653);
      int int2 = 2403;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("U&ei!9nxg,AI&10", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[3] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      String string1 = Utility.fillup("in`pkednamic", (-2655), true, 'N');
      assertEquals("in`pkednamic", string1);
      
      String string2 = Utility.accessToString((-2655));
      assertEquals("public synchronized transient native abstract synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.compactClassName(" and got ");
      String string0 = "6,1kb>,u3wUSLxmuTG";
      String[] stringArray0 = new String[8];
      stringArray0[0] = " and got ";
      stringArray0[1] = "6,1kb>,u3wUSLxmuTG";
      stringArray0[2] = " and got ";
      stringArray0[3] = " and got ";
      stringArray0[4] = " and got ";
      stringArray0[5] = " and got ";
      stringArray0[6] = "6,1kb>,u3wUSLxmuTG";
      stringArray0[7] = " and got ";
      Utility.methodTypeToSignature(" and got ", stringArray0);
      Utility.searchOpcode(" and got ");
      Utility.setBit(0, 111);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "(Land;L6,1kb>,u3wUSLxmuTG;Land;Land;Land;Land;L6,1kb>,u3wUSLxmuTG;Land;)Land;", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Utility.printArray((Object[]) stringArray0);
      Utility.setBit(46, 1024);
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" reaching EOF", false);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("", " reaching EOF", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) " reaching EOF";
      objectArray0[3] = (Object) "";
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2, 2);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.compactClassName(" and got ");
      Utility.compactClassName("6,1kb>,u3wUSLxmuTG", " and got ", false);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) " and got ";
      objectArray0[2] = (Object) " and got ";
      objectArray0[3] = (Object) " and got ";
      objectArray0[4] = (Object) "6,1kb>,u3wUSLxmuTG";
      objectArray0[5] = (Object) "6,1kb>,u3wUSLxmuTG";
      objectArray0[6] = (Object) "6,1kb>,u3wUSLxmuTG";
      Utility.getSignature(" and got ");
      Utility.setBit((-2719), (-1662));
      Utility.decode("1;NPv5<EXZJl$.m", false);
      try { 
        Utility.methodSignatureArgumentTypes(" and got ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  and got 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2373, 2373);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-86);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = " and got ";
      Utility.compactClassName(" and got ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" and got ", " and got ", "Pattern is missing");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  and got 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      objectArray0[5] = object0;
      boolean boolean0 = Utility.isSet(0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.compactClassName(" and got ");
      String string0 = Utility.compactClassName("6,1kb>,u3wUSLxmuTG", " and got ", false);
      assertEquals("6,1kb>,u3wUSLxmuTG", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " and got ";
      objectArray0[1] = (Object) " and got ";
      objectArray0[2] = (Object) " and got ";
      objectArray0[3] = (Object) " and got ";
      objectArray0[4] = (Object) "6,1kb>,u3wUSLxmuTG";
      objectArray0[5] = (Object) "6,1kb>,u3wUSLxmuTG";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals(" and got ,  and got ,  and got ,  and got , 6,1kb>,u3wUSLxmuTG, 6,1kb>,u3wUSLxmuTG, null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.getSignature("B*%{PHdaLV3U*O#i");
      MockFile mockFile0 = new MockFile("", "B*%{PHdaLV3U*O#i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREAN;
      mockFile0.deleteOnExit();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter1;
      mockFile0.getAbsolutePath();
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "B*%{PHdaLV3U*O#i";
      objectArray0[4] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        mockPrintWriter1.format(locale0, "B*%{PHdaLV3U*O#i", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '{'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = "iaload";
      try { 
        Utility.methodSignatureArgumentTypes("iaload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.format(1810, 1254, true, 'C');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.searchOpcode("2DnzMc:LpRw");
      int int0 = 0;
      Utility.setBit((short) (-1), 0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.accessToString(3102);
      Utility.replace("private protected static final abstract strictfp", "private protected static final abstract strictfp", "private protected static final abstract strictfp");
      Utility.clearBit(76, 3102);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      MockFile mockFile0 = new MockFile("(L?");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.accessToString(0);
      String string0 = Utility.fillup("", 0, true, 'X');
      String string1 = Utility.accessToString(0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Utility.compactClassName(" and got ");
      Utility.compactClassName("6,1kb>,u3wUSLxmuTG", " and got ", false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " and got ";
      objectArray0[1] = (Object) " and got ";
      objectArray0[2] = (Object) " and got ";
      objectArray0[3] = (Object) " and got ";
      objectArray0[4] = (Object) "6,1kb>,u3wUSLxmuTG";
      objectArray0[5] = (Object) "6,1kb>,u3wUSLxmuTG";
      objectArray0[6] = (Object) "6,1kb>,u3wUSLxmuTG";
      Utility.printArray(objectArray0);
      Utility.setBit((-2719), (-1662));
      try { 
        Utility.decode("1;NPv5<EXZJl$.m", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("&&#", true);
      int int0 = 3593;
      Utility.accessToString(3593);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.clearBit(0, 165);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)40;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)25;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      Utility.printArray(objectArray0, false);
      String string0 = "The strings must not be null";
      try { 
        Utility.methodSignatureArgumentTypes("The strings must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The strings must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = "j0tszx 8pE2";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".F9", " wq~rZi*{5q>\u0003", "j0tszx 8pE2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .F9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.replace("", "Byte code error: ", "char");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Byte code error: ";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)48;
      objectArray0[4] = (Object) "Byte code error: ";
      objectArray0[5] = (Object) (byte)123;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) "";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{Byte code error: , $l$8b$I$A$A$A$A$A$A$A, 0, 48, Byte code error: , 123, 0, }", string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = Utility.compactClassName("zn2?HnsXxd23\"Nt");
      assertEquals("zn2?HnsXxd23\"Nt", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
      
      String string1 = Utility.format(0, 0, false, 'M');
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      int int0 = (-4350);
      Utility.format((-4350), (-4350), false, 'T');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<clinit>", "<clinit>", "-4350", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = "B*%{PHdaLV3U*O#i";
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("B*%{PHdaLV3U*O#i", true);
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      String string0 = "CONSTANT_MethodType";
      String string1 = "<A!F7H";
      boolean boolean0 = false;
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.setBit((-18), (-18));
      Utility.compactClassName("/<^2q");
      Utility.methodTypeToSignature("yhJsn", (String[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)90;
      Utility.toHexString(byteArray0);
      Utility.setBit((-18), (byte)0);
      Utility.typeOfMethodSignature("()LyhJsn;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("kO:%(DEsSHNn_DAml");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `kO:%(DEsSHNn_DAml'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("X0`n[X?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X0`n[X?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Utility.setBit(310, 1410);
      Utility.compactClassName("[Zx[MF{Vm0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)84, 1417);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("[Zx[MF{Vm0");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      try { 
        constantPool0.getConstant((int) (byte) (-9), (byte) (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -9. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("org.apache.bcel.classfile.ExceptionTable", "org.apache.bcel.classfile.ExceptionTable", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.ExceptionTable";
      objectArray0[1] = (Object) "";
      Utility.printArray(objectArray0);
      Utility.replace("", "Fl <HLR$OH(", "");
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = "^J4T ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[qS*Dnv?Igj` P5I", "TEbAU8G|2+ee00>B", "^J4T ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [qS*Dnv?Igj` P5I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = ", high = ";
      try { 
        Utility.methodSignatureArgumentTypes(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Utility.accessToString(76);
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      objectArray0[8] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }
}
