/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:11:28 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-85);
      byte byte1 = (byte) (-1);
      byte byte2 = (byte)4;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.toDenseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(8.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 0, 0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 9, 9);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(9);
      Matrix matrix0 = cRSMatrix0.blankOfShape(9, 9);
      ((CRSMatrix) sparseMatrix0).toBinary();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3, 3);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) sparseMatrix0);
      ((CRSMatrix) sparseMatrix0).toBinary();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 572;
      doubleArray0[1] = (double) 572;
      doubleArray0[2] = (double) 572;
      doubleArray0[3] = (double) 2058;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(572, 2058, doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(670, 670, 670);
      cRSMatrix0.nonZeroAt(190, 190);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      cRSMatrix0.toDenseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(Integer.MAX_VALUE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1377.6);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1377.6);
      doubleArray2[3] = (-3259.7331517790903);
      doubleArray2[4] = (-1377.6);
      doubleArray2[5] = (-3503.7158552029114);
      doubleArray2[6] = 2023.3609661;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-1377.6);
      doubleArray0[1] = doubleArray2;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(8, 8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix.identity(1);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toMatrixMarket();
      int[] intArray0 = new int[1];
      CRSMatrix.identity(1468);
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 172;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 172;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 172;
      CRSMatrix cRSMatrix0 = new CRSMatrix(172, 32, 32, doubleArray0, intArray0, intArray0);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(264, 264);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 264
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.maxInColumn((-1));
      cRSMatrix0.forEach(consumer0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.updateRow((-1), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("org.la4j.LinearAlgebra$DecompositorFactory$3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.max();
      cRSMatrix0.product();
      int int0 = 48;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 6;
      CRSMatrix.identity(2200);
      CRSMatrix.fromBinary((byte[]) null);
      cRSMatrix0.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 861;
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(861, 1.0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 48;
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48, 48);
      int int1 = 190;
      int int2 = 0;
      cRSMatrix0.nonZeroAt(0, 1437);
      cRSMatrix0.min();
      int int3 = cRSMatrix0.rank();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int4 = 2488;
      int int5 = (-5326);
      int int6 = 111;
      double[] doubleArray0 = new double[8];
      double double0 = 2213.194084;
      doubleArray0[0] = double0;
      doubleArray0[2] = (double) int3;
      double double1 = 0.0;
      doubleArray0[3] = double1;
      doubleArray0[4] = (double) int2;
      doubleArray0[5] = (double) int4;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int4;
      int[] intArray0 = new int[1];
      intArray0[0] = int1;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int1, int5, int6, doubleArray0, intArray0, intArray0);
      int int7 = 3057;
      int int8 = 2449;
      CRSMatrix.from1DArray(int7, int8, doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure0);
      String string0 = null;
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = 1443;
      ColumnMajorSparseMatrix.identity(1443);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1443, 1443, (double) 1443, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 279;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(279, 279);
      double double0 = new Integer(279);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(279, vectorFunction0);
      cRSMatrix0.nonZeroIteratorOfRow(int0);
      int int1 = 2457;
      cRSMatrix0.getRow(int1);
      cRSMatrix0.minInRow(int0);
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(int2, double0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(113, 113);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(113);
      int int0 = 8;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(8, 5.0);
      cRSMatrix1.divide(631.4354612830709);
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 370;
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix cRSMatrix2 = CRSMatrix.random((-1), 16, 0.0, (java.util.Random) mockRandom1);
      cRSMatrix0.getRow(int1);
      int int2 = (-1834);
      sparseMatrix0.nonZeroIteratorOfColumn(int2);
      int int3 = 8;
      cRSMatrix2.iteratorOfRow(int3);
      cRSMatrix0.rotate();
      cRSMatrix2.multiplyByItsTranspose();
      double double0 = (-978.80062);
      cRSMatrix2.equals((Matrix) cRSMatrix0, double0);
      int int4 = (-746);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).updateAt(int4, int2, matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).updateAt(int4, int0, matrixFunction1);
      int int5 = 13;
      CRSMatrix.identity(int5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      cRSMatrix0.toDenseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      double[] doubleArray0 = new double[27];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 106;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1997.6538;
      doubleArray0[4] = 0.0;
      doubleArray0[24] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      CRSMatrix.from1DArray(106, 106, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 279;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(279, 279);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 279;
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      double double0 = cRSMatrix0.maxInRow(279);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(int0, vectorFunction0);
      cRSMatrix0.add((Matrix) sparseMatrix0);
      int int1 = (-1);
      double double1 = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.random(int0, int1, double1, (java.util.Random) mockRandom0);
      cRSMatrix0.nonZeroIteratorOfRow(int0);
      int int2 = 2457;
      cRSMatrix0.getRow(int2);
      cRSMatrix0.minInRow(int0);
      int int3 = 0;
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix.randomSymmetric(int3, double0, (java.util.Random) mockRandom1);
      cRSMatrix0.nonZeroIteratorOfRow(int3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 212;
      cRSMatrix0.getColumn(212);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(212);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.minInColumn(212);
      cRSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(Integer.MAX_VALUE, 212, (-2400.4), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-419);
      MockRandom mockRandom0 = new MockRandom(279);
      // Undeclared exception!
      try { 
        CRSMatrix.random(279, (-419), (double) (-419), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 212;
      cRSMatrix0.getColumn(163);
      Integer integer0 = new Integer(212);
      double double0 = Double.NEGATIVE_INFINITY;
      cRSMatrix0.toBinary();
      Integer integer1 = new Integer(6);
      cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(6, 17, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      int int0 = 1439;
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      CRSMatrix cRSMatrix3 = CRSMatrix.block(cRSMatrix1, cRSMatrix2, cRSMatrix0, cRSMatrix2);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int1 = 1425;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1425);
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(97);
      int[] intArray0 = new int[14];
      cRSMatrix0.rotate();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.randomSymmetric((-948), (double) (-948), (java.util.Random) mockRandom0);
      cRSMatrix0.select(intArray0, intArray0);
      int int0 = 17;
      cRSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(113, 113);
      cRSMatrix0.getColumn(34);
      Integer integer0 = new Integer((-1613));
      byte[] byteArray0 = cRSMatrix0.toBinary();
      Integer integer1 = new Integer(3698);
      Matrix matrix0 = cRSMatrix0.rotate();
      CRSMatrix.fromBinary(byteArray0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(3698, 5191);
      cRSMatrix1.equals(matrix0, 2613.7508521926);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.min();
      MatrixPredicate matrixPredicate0 = null;
      cRSMatrix0.is(matrixPredicate0);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(113, 113, 113);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(113);
      byte[] byteArray0 = ((CRSMatrix) sparseMatrix0).toBinary();
      ((CRSMatrix) sparseMatrix0).toBinary();
      int int0 = (-1931);
      int int1 = Integer.min(0, (-1931));
      cRSMatrix0.rotate();
      Matrix matrix0 = sparseMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.equals(matrix0, (double) int1);
      int int2 = 241;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateAt(int0, int2, matrixFunction0);
      int int3 = (-714);
      CRSMatrix.identity(int3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix.identity(1443);
      MockRandom mockRandom0 = new MockRandom();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1443, 1443, 0.0, (java.util.Random) mockRandom0);
      cRSMatrix0.minInRow((-4));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 679;
      CRSMatrix cRSMatrix0 = new CRSMatrix(679, 679);
      int int1 = 190;
      int int2 = 2433;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-735));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -734
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(113);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(113, 113);
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      cRSMatrix0.rowMajorIterator();
      CRSMatrix.identity(113);
      cRSMatrix1.toBinary();
      cRSMatrix1.add((Matrix) cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int[] intArray0 = new int[25];
      intArray0[0] = 113;
      MockRandom mockRandom2 = new MockRandom((-2634));
      CRSMatrix.identity(113);
      cRSMatrix1.setAll(113);
      int int0 = (-2735);
      Integer integer0 = new Integer(int0);
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.min();
      cRSMatrix0.rank();
      double double0 = (-3302.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(1549, 1549, (-2827.4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1549' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(283, 638.82364339556);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 283;
      doubleArray1[1] = (-1840.3613);
      doubleArray1[2] = 4364.61897;
      doubleArray1[3] = 638.82364339556;
      doubleArray1[4] = (double) 283;
      doubleArray1[5] = (-2095.0);
      doubleArray1[6] = (double) 283;
      doubleArray1[7] = (double) 283;
      doubleArray1[8] = 638.82364339556;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1840.3613);
      int[] intArray0 = new int[0];
      cRSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(4);
      cRSMatrix0.iteratorOfNonZeroRows();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.copyOfShape(57, 16);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      cRSMatrix0.toDenseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(0, Double.POSITIVE_INFINITY, (java.util.Random) mockRandom0);
      cRSMatrix1.nonZeroIterator();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 2036;
      doubleArray0[5] = (double) 2036;
      CRSMatrix cRSMatrix2 = CRSMatrix.from1DArray(0, 2036, doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix2.getOrElse(45, (-339), 572.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '45' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix.identity(1443);
      MockRandom mockRandom0 = new MockRandom();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(253);
      Matrix.constant(259, 2526, 1443.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(259);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.eachInRow(3, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 550;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(550);
      cRSMatrix0.removeLastColumn();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(int0, int0, matrixFunction0);
      String string0 = "!WTU%q6eA`(";
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket(string0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = cRSMatrix1.fold(matrixAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int0, int0, double0, (java.util.Random) mockRandom0);
      MatrixAccumulator matrixAccumulator1 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.foldNonZero(matrixAccumulator1);
      cRSMatrix2.columnMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.each(matrixProcedure0);
      cRSMatrix2.iteratorOfRow(int0);
      int int1 = 2;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachInRow(int1, vectorProcedure0);
      int int2 = (-247);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int2;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int0;
      CRSMatrix.from1DArray(int1, int2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = 1420;
      intArray0[1] = (int) (byte)68;
      intArray0[2] = (int) (byte)68;
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix.identity(1335);
      cRSMatrix1.iteratorOfNonZeroRows();
      cRSMatrix1.setAll((byte) (-1));
      cRSMatrix0.maxInRow(1335);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.rank();
      Matrix matrix0 = cRSMatrix0.slice(0, 0, 0, 1502);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.forEach(consumer0);
      Matrix matrix0 = cRSMatrix0.hadamardProduct(cRSMatrix1);
      matrix0.trace();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix.diagonal(16, 0.0);
      CRSMatrix cRSMatrix2 = new CRSMatrix(16, 16);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 8;
      CRSMatrix cRSMatrix3 = CRSMatrix.zero(16, 8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix3.eachNonZeroInRow(8, vectorProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix1.updateAt(8, (-2422), (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte byte0 = (byte)68;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1400;
      Matrix matrix0 = Matrix.diagonal(1400, (byte)68);
      CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, matrix0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(denseMatrix0, cRSMatrix0, cRSMatrix0, denseMatrix0);
      double double0 = 106.0;
      cRSMatrix1.add(double0);
      cRSMatrix0.minInRow(int0);
      cRSMatrix0.toDenseMatrix();
      Integer integer0 = new Integer(byte0);
      int int1 = 3;
      int int2 = 1617;
      int int3 = (-1178);
      Matrix.constant(int2, int3, double0);
      CRSMatrix.identity(int1);
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      cRSMatrix2.nonZeroAt(int3, byte0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.getColumn(212);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(212);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(212, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(2146126293, vectorFunction0);
      int[] intArray0 = new int[3];
      intArray0[0] = 212;
      intArray0[1] = 212;
      intArray0[2] = 32;
      int[] intArray1 = new int[0];
      cRSMatrix0.select(intArray0, intArray1);
      int int0 = (-854);
      CRSMatrix.zero(intArray0[0], int0, intArray0[0]);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(113, 113);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(113);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      sparseMatrix0.hadamardProduct(cRSMatrix0);
      cRSMatrix0.trace();
      double double0 = 0.0;
      int int0 = 16;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int0, double0);
      Matrix matrix0 = cRSMatrix1.divide(double0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      int int1 = (-1817);
      int int2 = 17;
      double double1 = Double.NEGATIVE_INFINITY;
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int1, int2, double1, (java.util.Random) mockRandom1);
      cRSMatrix1.rotate();
      cRSMatrix0.multiplyByItsTranspose();
      double double2 = (-1050.4183198974947);
      cRSMatrix2.equals(matrix0, double2);
      int int3 = 3;
      int int4 = 1051;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.updateAt(int4, int1, matrixFunction0);
      CRSMatrix.identity(int3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 279;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(279, 279);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      String string0 = "r;|}GnmUD!Z{7K8c/]";
      Matrix matrix0 = Matrix.fromMatrixMarket(string0);
      cRSMatrix0.hadamardProduct(matrix0);
      double double0 = cRSMatrix0.trace();
      int int1 = 16;
      int int2 = 1126;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int2, double0);
      cRSMatrix0.divide(double0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int int3 = 8;
      int int4 = 17;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int3, int2);
      String string1 = "%BB}t{r$pk%oooi[3h";
      CRSMatrix cRSMatrix3 = CRSMatrix.fromMatrixMarket(string1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachNonZeroInRow(int0, vectorProcedure0);
      int int5 = 8;
      int int6 = 37;
      cRSMatrix1.getRow(int5);
      CRSMatrix.diagonal(int5, int4);
      int int7 = (-1056);
      cRSMatrix3.minInRow(int7);
      cRSMatrix2.toDenseMatrix();
      Integer integer0 = new Integer(int5);
      double double1 = 4556.373;
      Matrix.constant(int1, int4, double1);
      CRSMatrix.identity(int4);
      cRSMatrix1.nonZeroAt(int6, int7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(113, 113);
      SparseMatrix.identity(113);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
      int int0 = 1;
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(int0);
      String string0 = null;
      CRSMatrix cRSMatrix3 = CRSMatrix.fromMatrixMarket(string0);
      cRSMatrix3.iteratorOfNonZeroRows();
      double double0 = (-2118.9);
      cRSMatrix0.setAll(double0);
      int int1 = 32;
      cRSMatrix2.maxInRow(int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(113);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(113, 113);
      cRSMatrix0.insert((Matrix) cRSMatrix1);
      cRSMatrix1.toBinary();
      cRSMatrix1.add((Matrix) cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = 5;
      int int1 = 44;
      double double0 = 657.824454;
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int1, double0);
      double double1 = 100.0;
      cRSMatrix2.divide(double1);
      MockRandom mockRandom2 = new MockRandom();
      MockRandom mockRandom3 = new MockRandom();
      CRSMatrix.identity(int0);
      int int2 = 670;
      CRSMatrix.zero(int0, int2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 279;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(279, 279);
      int int1 = 0;
      int int2 = (-1487);
      cRSMatrix0.nonZeroAt(0, (-1487));
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int3 = cRSMatrix1.rank();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseMatrix denseMatrix0 = cRSMatrix1.toDenseMatrix();
      denseMatrix0.toString();
      int int4 = (-1170);
      VectorAccumulator vectorAccumulator0 = null;
      cRSMatrix0.foldColumn(int4, vectorAccumulator0);
      int int5 = 263;
      DenseVector denseVector0 = DenseVector.zero(int1);
      double double0 = 3197.46;
      denseVector0.max();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(int3, double0);
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, columnMajorSparseMatrix0);
      int[] intArray0 = new int[8];
      intArray0[0] = int4;
      intArray0[1] = int2;
      intArray0[2] = int3;
      int int6 = 26;
      intArray0[3] = int6;
      intArray0[4] = int4;
      intArray0[5] = int3;
      intArray0[6] = int0;
      intArray0[7] = int5;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 279;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(279, 279);
      int int1 = 190;
      cRSMatrix0.nonZeroAt(278, 278);
      cRSMatrix0.min();
      cRSMatrix0.rank();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int[] intArray0 = new int[4];
      intArray0[0] = int1;
      intArray0[1] = int0;
      int int2 = 230;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(int2);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int3 = 258;
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(int3);
      cRSMatrix3.iteratorOfNonZeroRows();
      cRSMatrix2.setAll(int0);
      double double0 = new Integer(intArray0[0]);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.product();
      int int1 = 13;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = 13.0;
      doubleArray0[5] = (double) (byte) (-88);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(13, 4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(279, 279);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      SparseMatrix.zero(279, (-18));
      cRSMatrix0.max();
      cRSMatrix0.product();
      double[][] doubleArrayArray0 = null;
      SparseMatrix.from2DArray(doubleArrayArray0);
      int int0 = 265;
      CRSMatrix.zero(int0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iteratorOfColumn(3);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(282);
      cRSMatrix1.setAll(0.0);
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(282, vectorProcedure0);
      cRSMatrix2.setAll(0.0);
      cRSMatrix2.maxInRow(Integer.MAX_VALUE);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.hadamardProduct(cRSMatrix0);
      matrix0.trace();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int0 = 16;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(16, 4.816131193400836);
      cRSMatrix1.divide(4.816131193400836);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      int int1 = 8;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(16, 8);
      DenseMatrix.diagonal(16, 0.0);
      cRSMatrix0.toString();
      cRSMatrix0.setAll(16);
      cRSMatrix2.maxInRow(8);
      int int2 = (-1834);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(8, 1936, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
