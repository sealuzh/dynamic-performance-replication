/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:24:46 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong0, 13, 13, byteArray0, byteOrder0, 13);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      int int0 = tiffField0.getOffset();
      assertEquals(13, int0);
      assertEquals(13, tiffField0.getTag());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong0, 13, 13, byteArray0, byteOrder0, 13);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getOffset());
      assertEquals("13 (0xd: Unknown Tag): ", string0);
      assertFalse(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong0, 13, 13, byteArray0, byteOrder0, 13);
      String string0 = tiffField0.toString();
      assertEquals(52, tiffField0.getBytesLength());
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals("13 (0xd: Unknown Tag): 0 (13 Long)", string0);
      assertEquals(13, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(3021, 3021, fieldTypeFloat0, 3021, 3021, byteArray0, byteOrder0, 3021);
      tiffField0.getDoubleArrayValue();
      assertEquals(3021L, tiffField0.getCount());
      assertEquals(3021, tiffField0.getTag());
      assertEquals(3021, tiffField0.getSortHint());
      assertEquals(3021, tiffField0.getOffset());
      assertEquals(12084, tiffField0.getBytesLength());
      assertEquals(3021, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(15, 15, fieldTypeLong0, 15, 15, byteArray0, byteOrder0, 15);
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(18, 18, fieldTypeAscii0, 18, 18, (byte[]) null, byteOrder0, 18);
      String string0 = tiffField0.getTagName();
      assertEquals(18, tiffField0.getDirectoryType());
      assertEquals(18, tiffField0.getSortHint());
      assertEquals("Unknown Tag (0x12)", string0);
      assertEquals(18, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-34), (-34), fieldTypeLong0, (-34), (-34), byteArray0, byteOrder0, (-34));
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong0, 13, 13, byteArray0, byteOrder0, 13);
      tiffField0.getIntArrayValue();
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getOffset());
      assertEquals(52, tiffField0.getBytesLength());
      assertEquals(13L, tiffField0.getCount());
      assertEquals(13, tiffField0.getTag());
      assertEquals(13, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(3026, 3026, fieldTypeFloat0, 3026, 3026, byteArray0, byteOrder0, 3026);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(3026, 3026);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(3026, tiffField0.getDirectoryType());
      assertEquals(3026, tiffField0.getSortHint());
      assertEquals(3026, tiffField0.getTag());
      assertEquals(3026, tiffField0.getOffset());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(50735, 50735, fieldTypeFloat0, 50735, 50735, byteArray0, byteOrder0, 50735);
      tiffField0.getFieldTypeName();
      assertEquals(50735, tiffField0.getOffset());
      assertEquals(50735, tiffField0.getSortHint());
      assertEquals(50735, tiffField0.getDirectoryType());
      assertEquals(50735, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[223];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(33445, 33445, fieldTypeFloat0, 33445, 33445, byteArray0, byteOrder0, 33445);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(33445, tiffField0.getTag());
      assertEquals(33445, tiffField0.getSortHint());
      assertEquals(33445, tiffField0.getOffset());
      assertEquals(33445, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(15, 15, fieldTypeLong0, 15, 15, byteArray0, byteOrder0, 15);
      tiffField0.getIntValueOrArraySum();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(50736, 50736, fieldTypeFloat0, 50736, 50736, byteArray0, byteOrder0, 50736);
      tiffField0.getValueDescription();
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@6db77589 for: 50736 (0xc630: DNGLensInfo): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeFloat0, 13, 13, byteArray0, byteOrder0, 13);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(13, 13);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals(13, tiffField0.getTag());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(13, tiffField0.getOffset());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Float", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(10, 10, fieldTypeLong0, 10, 10, byteArray0, byteOrder0, 10);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "SpatialFrequencyResponse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong0, 13, 13, byteArray0, byteOrder0, 13);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      int int0 = tiffField0.getSortHint();
      assertEquals(52, tiffField0.getBytesLength());
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, int0);
      assertEquals(13L, tiffField0.getCount());
      assertEquals(13, tiffField0.getTag());
      assertEquals(13, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(50736, 50736, fieldTypeFloat0, 50736, 50736, byteArray0, byteOrder0, 50736);
      String string0 = tiffField0.toString();
      assertEquals(50736, tiffField0.getOffset());
      assertEquals("50736 (0xc630: DNGLensInfo): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (50736 Float)", string0);
      assertEquals(50736, tiffField0.getSortHint());
      assertEquals(50736, tiffField0.getDirectoryType());
      assertEquals(202944, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(50736, 50736, fieldTypeDouble0, 50736, 50736, byteArray0, byteOrder0, 50736);
      String string0 = tiffField0.toString();
      assertEquals(50736, tiffField0.getOffset());
      assertEquals(405888, tiffField0.getBytesLength());
      assertEquals("50736 (0xc630: DNGLensInfo): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (50736 Double)", string0);
      assertEquals(50736, tiffField0.getDirectoryType());
      assertEquals(50736, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[15];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeLong0, 13, 13, byteArray0, byteOrder0, 13);
      String string0 = tiffField0.getValueDescription();
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(13, tiffField0.getOffset());
      assertEquals(13L, tiffField0.getCount());
      assertEquals(52, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(2147380863, 41996, fieldTypeRational0, 41996, 1963, byteArray0, byteOrder0, 2147380863);
      tiffField0.getIntArrayValue();
      tiffField0.getDoubleArrayValue();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [Lorg.apache.commons.imaging.common.RationalNumber;@3679c967
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[90];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(50736, 50736, fieldTypeDouble0, 50736, 50736, byteArray0, byteOrder0, 50736);
      tiffField0.getDoubleArrayValue();
      assertEquals(50736, tiffField0.getOffset());
      assertEquals(50736L, tiffField0.getCount());
      assertEquals(405888, tiffField0.getBytesLength());
      assertEquals(50736, tiffField0.getTag());
      assertEquals(50736, tiffField0.getDirectoryType());
      assertEquals(50736, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(50736, 50736, fieldTypeFloat0, 50736, 50736, byteArray0, byteOrder0, 50736);
      String string0 = tiffField0.getTagName();
      assertEquals(50736, tiffField0.getOffset());
      assertEquals("DNGLensInfo", string0);
      assertEquals(50736, tiffField0.getSortHint());
      assertEquals(50736, tiffField0.getDirectoryType());
      assertEquals(50736, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(0, "~r");
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeAscii0, 0, 0, byteArray0, byteOrder0, 0);
      tiffField0.toString();
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[2];
      TiffField tiffField0 = new TiffField((byte)0, 2, fieldTypeByte0, 1428L, 1428L, byteArray0, byteOrder0, (-26));
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@208e79fa for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)5;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldType fieldType0 = FieldType.getFieldType((byte)5);
      TiffField tiffField0 = new TiffField(50, 50, fieldType0, 1172L, 2990, byteArray0, byteOrder0, 2990);
      ByteOrder.nativeOrder();
      tiffField0.getByteArrayValue();
      tiffField0.getBytesLength();
      tiffField0.getDoubleArrayValue();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [Lorg.apache.commons.imaging.common.RationalNumber;@637f284c
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(3, 3, fieldTypeRational0, 3, 0, byteArray0, byteOrder0, 0);
      String string0 = tiffField0.getValueDescription();
      assertEquals("", string0);
      assertNotNull(string0);
      
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      tiffField0.getIntArrayValue();
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(3, tiffField0.getTag());
      assertEquals(0, int0);
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(3, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(24, tiffField0.getBytesLength());
      assertEquals(3L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(50736, "~r");
      TiffField tiffField0 = new TiffField(50736, 50736, fieldTypeAscii0, 50736, 50736, byteArray0, byteOrder0, 50736);
      tiffField0.toString();
      assertEquals(50736, tiffField0.getSortHint());
      assertEquals(50736, tiffField0.getBytesLength());
      assertEquals(50736, tiffField0.getDirectoryType());
      assertEquals(50736L, tiffField0.getCount());
      assertEquals(50736, tiffField0.getTag());
      assertEquals(50736, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(642, 642, fieldTypeFloat0, 642, 642, byteArray0, byteOrder0, 642);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@5822810b for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(3007, 1, fieldTypeFloat0, 1, 3007, byteArray0, byteOrder0, 3007);
      tiffField0.dump();
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(3007, tiffField0.getTag());
      assertEquals(3007, tiffField0.getOffset());
      assertEquals(3007, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(1, "");
      TiffField tiffField0 = new TiffField(640, 640, fieldTypeShort0, 1, 1, byteArray0, byteOrder0, 2069);
      tiffField0.getIntArrayValue();
      assertEquals(2069, tiffField0.getSortHint());
      assertEquals(640, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(640, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(3684, 3684, fieldTypeByte0, 3684, 3684, byteArray0, byteOrder0, 3684);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(3684, tiffField0.getOffset());
      assertEquals(3684, tiffField0.getTag());
      assertEquals(3684, tiffField0.getSortHint());
      assertEquals(3684, tiffField0.getBytesLength());
      assertEquals(3684, tiffField0.getDirectoryType());
      assertEquals(3684L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[73];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField((-2257), 29, fieldTypeShort0, 29, (-2257), byteArray0, byteOrder0, (-746));
      String string0 = tiffField0.getValueDescription();
      assertEquals("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", string0);
      assertNotNull(string0);
      
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-746), tiffField0.getSortHint());
      assertEquals(0, int0);
      assertEquals((-2257), tiffField0.getOffset());
      assertEquals(29L, tiffField0.getCount());
      assertEquals((-2257), tiffField0.getTag());
      assertEquals(29, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[88];
      ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(48129, 48129, fieldTypeShort0, 48129, 48129, byteArray0, byteOrder0, 48129);
      tiffField0.getDoubleArrayValue();
      assertEquals(48129, tiffField0.getSortHint());
      assertEquals(48129, tiffField0.getDirectoryType());
      assertEquals(48129, tiffField0.getTag());
      assertEquals(48129L, tiffField0.getCount());
      assertEquals(48129, tiffField0.getOffset());
      assertEquals(96258, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 4L, byteArray0, byteOrder0, 1);
      tiffField0.getDoubleArrayValue();
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getDoubleValue();
      assertEquals(4, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeFloat fieldTypeFloat1 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, byteOrder0, 1);
      tiffField0.getDoubleValue();
      tiffField0.getIntValueOrArraySum();
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[88];
      ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(48129, 48129, fieldTypeShort0, 48129, 48129, byteArray0, byteOrder0, 48129);
      tiffField0.getIntArrayValue();
      String string0 = tiffField0.getValueDescription();
      assertEquals(48129, tiffField0.getTag());
      assertEquals(48129, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(48129, tiffField0.getSortHint());
      assertEquals(48129, tiffField0.getOffset());
      assertEquals(96258, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(13, "");
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeRational0, 99072L, 13, byteArray0, byteOrder0, (-3569));
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeAscii0, 1L, 13, byteArray0, byteOrder0, 13);
      assertEquals(1, tiffField0.getBytesLength());
      
      tiffField0.getStringValue();
      String string0 = tiffField0.getStringValue();
      assertNotNull(string0);
      
      tiffField0.getByteArrayValue();
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getOffset());
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(100, 100, fieldTypeRational0, 41996, 100, byteArray0, byteOrder0, 41996);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField(1462, 65108, fieldTypeByte0, 1462, 1462, byteArray0, byteOrder0, 1462);
      String string0 = tiffField0.getValueDescription();
      assertEquals(1462, tiffField0.getTag());
      assertEquals(1462, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(1462, tiffField0.getOffset());
      assertEquals(65108, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[66];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(50741, ":xPE5D>zm");
      TiffField tiffField0 = new TiffField(50741, 50741, fieldTypeAscii0, 50741, 50741, byteArray0, byteOrder0, 50741);
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      tiffField0.dump();
      assertEquals(50741, tiffField0.getOffset());
      assertEquals(50741, tiffField0.getTag());
      assertEquals(50741, tiffField0.getSortHint());
      assertEquals(50741, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeShort0, 65535, 65535, byteArray0, byteOrder0, 65535);
      String string0 = tiffField0.getValueDescription();
      assertEquals(65535, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(65535, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[229];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(3035, 3035, fieldTypeFloat0, 3035, 3035, byteArray0, byteOrder0, 3035);
      String string0 = tiffField0.toString();
      assertEquals(3035, tiffField0.getOffset());
      assertEquals(3035, tiffField0.getSortHint());
      assertEquals("3035 (0xbdb: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (57) (3035 Float)", string0);
      assertEquals(3035, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[331];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      TiffField tiffField0 = new TiffField(36, (-1), fieldTypeLong0, 2081L, 36, byteArray0, byteOrder0, 2988);
      tiffField0.dump();
      assertEquals(36, tiffField0.getTag());
      assertEquals((-1), tiffField0.getDirectoryType());
      assertEquals(36, tiffField0.getOffset());
      assertEquals(2988, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[417];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(2652, (-43), fieldTypeDouble0, 2652, (-43), byteArray0, byteOrder0, (-43));
      tiffField0.dump();
      assertEquals(2652, tiffField0.getTag());
      assertEquals((-43), tiffField0.getOffset());
      assertEquals((-43), tiffField0.getDirectoryType());
      assertEquals((-43), tiffField0.getSortHint());
  }
}
