/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:23:52 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.sparse.CRSMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(43, 43, 43);
      basic1DMatrix0.swapRows(43, 43);
      assertEquals(43, basic1DMatrix0.columns());
      assertEquals(43, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(1, 1, mockRandom0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfShape((-1608), 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(3, 3);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(3, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 26;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(26);
      // Undeclared exception!
      try { 
        basic1DMatrix0.set(26, 26, 26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '26' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(9, 0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("_]MAcsV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(3, 3, (double[]) null);
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfShape((-4565), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(13, 13);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(1204, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15652
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(13);
      basic1DMatrix0.swapRows(1, 8);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("y.TVTeaY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.setAll(126.403832246121);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(43, 43);
      assertNotNull(basic1DMatrix0);
      assertEquals(43, basic1DMatrix0.columns());
      assertEquals(43, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(43, basic1DMatrix0.columns());
      assertEquals(43, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(17, 17);
      assertNotNull(basic1DMatrix0);
      assertEquals(17, basic1DMatrix0.rows());
      assertEquals(17, basic1DMatrix0.columns());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(17, basic1DMatrix0.rows());
      assertEquals(17, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 61;
      doubleArray0[4] = (double) 61;
      doubleArray0[2] = (double) 61;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(61, 61, doubleArray0);
      assertArrayEquals(new double[] {61.0, 0.0, 61.0, 0.0, 61.0}, doubleArray0, 0.01);
      assertNotNull(basic1DMatrix0);
      assertEquals(61, basic1DMatrix0.columns());
      assertEquals(61, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.determinant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic1DMatrix0.copy();
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapColumns(66, 55);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(4);
      assertNotNull(basic1DMatrix0);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns(4, 4);
      assertEquals(4, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-53));
      assertEquals((-53), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer1 = new Integer(428);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(428, (int)integer1);
      assertNotNull(integer1);
      
      MockRandom mockRandom0 = new MockRandom((-53));
      assertNotNull(mockRandom0);
      
      int int0 = 358;
      Integer integer2 = new Integer(358);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(358, (int)integer2);
      assertNotNull(integer2);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(428);
      assertNotNull(cRSMatrix0);
      assertEquals(428, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(428, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(428, cRSMatrix0.cardinality());
      assertEquals(0.002336448598130841, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '429' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(252);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric((byte)1, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      Integer integer0 = new Integer((byte)1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity((byte)1);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(2, basic1DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix1, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte)1);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity((byte)1);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(4, (byte)1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(4, basic1DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix1, basic1DMatrix1, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(3345, 219);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(219, matrix0.columns());
      assertEquals(3345, matrix0.rows());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.copyOfRows(16);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(16, matrix0.rows());
      
      String string0 = basic1DMatrix0.toMatrixMarket();
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertEquals("%%MatrixMarket matrix array real general\n0 0\n", string0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotNull(string0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer1 = new Integer(431);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(431, (int)integer1);
      assertNotNull(integer1);
      
      byte byte0 = (byte)1;
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      Integer integer2 = new Integer(343);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(343, (int)integer2);
      assertNotNull(integer2);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity((byte)1);
      assertNotNull(cRSMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(43, 43);
      assertNotNull(basic1DMatrix0);
      assertEquals(43, basic1DMatrix0.rows());
      assertEquals(43, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfShape(0, 43);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertEquals(43, basic1DMatrix0.rows());
      assertEquals(43, basic1DMatrix0.columns());
      assertEquals(43, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Basic1DMatrix basic1DMatrix1 = matrix0.to(matrixFactory0);
      assertFalse(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertSame(matrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertSame(basic1DMatrix1, matrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(43, basic1DMatrix0.rows());
      assertEquals(43, basic1DMatrix0.columns());
      assertEquals(43, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(43, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Vector vector0 = basic1DMatrix0.getRow(8);
      assertNotNull(vector0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, vector0.length());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(8, 8, 0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(8, basic1DMatrix1.rows());
      assertEquals(8, basic1DMatrix1.columns());
      
      Matrix matrix0 = basic1DMatrix1.copyOfColumns(1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertFalse(matrix0.equals((Object)basic1DMatrix1));
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, matrix0);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(matrix0, basic1DMatrix1);
      assertNotSame(matrix0, basic1DMatrix0);
      assertNotNull(matrix0);
      assertEquals(8, basic1DMatrix1.rows());
      assertEquals(8, basic1DMatrix1.columns());
      assertEquals(8, matrix0.rows());
      assertEquals(1, matrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix1.to((MatrixFactory<Basic1DMatrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      MockRandom mockRandom0 = new MockRandom((byte)1);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(4, mockRandom0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(4, basic1DMatrix1.columns());
      assertEquals(4, basic1DMatrix1.rows());
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.unit(4, 8);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertNotNull(basic1DMatrix2);
      assertEquals(4, basic1DMatrix2.rows());
      assertEquals(8, basic1DMatrix2.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix2, basic1DMatrix2, basic1DMatrix2, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapRows(0, 0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns((-46), (-46));
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(1, basic1DMatrix1.rows());
  }
}
