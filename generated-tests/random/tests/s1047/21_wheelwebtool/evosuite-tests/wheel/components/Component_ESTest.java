/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:31:49 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import org.xmlpull.v1.wrapper.XmlPullWrapperFactory;
import org.xmlpull.v1.wrapper.XmlSerializerWrapper;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("java/util/HashMap");
      Component component0 = block0.form("eeW:_[nD");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "java/util/HashMap";
      component0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Form form0 = new Form("rP:X]79jW0HpoJQaY?");
      List<CharSequence> list0 = form0._getRenderHints();
      assertNotNull(list0);
      assertEquals("rP:X]79jW0HpoJQaY?", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TableBlock tableBlock0 = new TableBlock(checkbox0, "");
      StandaloneComponent standaloneComponent0 = tableBlock0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      component0.getComponentId();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Table table0 = new Table(link0, "");
      Any any0 = new Any(errorPage0, "");
      table0.eval(any0);
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("dl");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "dl", "dl");
      textInput0.clasS("dl");
      assertEquals("dl", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._applyFormat("DTDM!");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000009");
      Float float0 = new Float(0.0);
      Link link0 = new Link(table0, float0);
      TableBlock tableBlock0 = new TableBlock(link0, "L^X%$k.1~\"0nU");
      tableBlock0.renderHint("java.lang.String@0000000009");
      assertTrue(link0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, " on the page.");
      Block block0 = table0.placeholder("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("YgS#Jwiq");
      Link link0 = new Link(errorPage0, actionExpression0);
      // Undeclared exception!
      try { 
        link0.get("YgS#Jwiq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'YgS#Jwiq'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dt((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "=E 2iC a", "=E 2iC a");
      Component component0 = hidden0.attribute("=E 2iC a", "=E 2iC a");
      assertSame(component0, hidden0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Form form0 = new Form(">=g_Fcrzj9qVWXZ");
      DateInput dateInput0 = new DateInput(form0, ">=g_Fcrzj9qVWXZ", ">=g_Fcrzj9qVWXZ", ">=g_Fcrzj9qVWXZ");
      Checkbox checkbox0 = new Checkbox(dateInput0, ">=g_Fcrzj9qVWXZ", ">=g_Fcrzj9qVWXZ");
      ElExpression elExpression0 = new ElExpression("]gSL|");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(checkbox0, ">=g_Fcrzj9qVWXZ", ">=g_Fcrzj9qVWXZ", (ISelectModel) null, elExpression0);
      checkboxGroup0.attribute("", (CharSequence) null);
      assertEquals(">=g_Fcrzj9qVWXZ", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("*@");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "hr");
      // Undeclared exception!
      try { 
        checkbox0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Form form0 = new Form("6(5Z\"JXP,lh");
      // Undeclared exception!
      try { 
        form0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("rP:X]79jW0HpoJQaY?");
      // Undeclared exception!
      try { 
        form0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Form form0 = new Form("yY@eHxc,uWgTIWdi");
      TextArea textArea0 = new TextArea(form0, "yY@eHxc,uWgTIWdi", "yY@eHxc,uWgTIWdi");
      // Undeclared exception!
      try { 
        textArea0.span((Object) form0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("k<@TVN");
      // Undeclared exception!
      try { 
        form0.q((Object) "k<@TVN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.param("null", "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "&C;hP-2vyJn", "W@9nfL(BXXqE", stringSelectModel0, "&C;hP-2vyJn");
      TextInput textInput0 = new TextInput(select0, "java.lang.StringBuffer@0000000011", "&C;hP-2vyJn");
      Radio radio0 = new Radio(textInput0, "pO2SOE.]F", "wheel.components.RenderableComponent");
      // Undeclared exception!
      try { 
        radio0.p();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Form form0 = new Form("!");
      // Undeclared exception!
      try { 
        form0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Form form0 = new Form("00");
      // Undeclared exception!
      try { 
        form0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "y_Brb4/Exo", "sub");
      MockDate mockDate0 = new MockDate((short) (-86), 1836, (-2729), 2984, 102, 1836);
      // Undeclared exception!
      try { 
        checkbox0.legend((Object) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "body", "Rv\"'");
      // Undeclared exception!
      try { 
        submit0.htmlText("Rv\"'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Radio radio0 = new Radio(link0, "read property cache: ", "read property cache: ");
      // Undeclared exception!
      try { 
        radio0.h4();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "noscript");
      Checkbox checkbox0 = new Checkbox(block0, "", "noscript");
      // Undeclared exception!
      try { 
        checkbox0.form("error reading input, returned ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "INVOKEVIRTUAL java/lang/Float.floatValue", "INVOKEVIRTUAL java/lang/Float.floatValue");
      Radio radio0 = new Radio(errorPage0, "INVOKEVIRTUAL java/lang/Float.floatValue", "INVOKEVIRTUAL java/lang/Float.floatValue");
      // Undeclared exception!
      try { 
        checkbox0.em((Object) radio0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Form form0 = new Form("\"6L@F//J");
      // Undeclared exception!
      try { 
        form0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.dateInput(":UQ1cuIMJ<atH-@v", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Form form0 = new Form("Tfoot component can be added only to a Table.");
      // Undeclared exception!
      try { 
        form0.code((Object) "Tfoot component can be added only to a Table.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Form form0 = new Form("*@");
      // Undeclared exception!
      try { 
        form0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("code");
      // Undeclared exception!
      try { 
        form0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "RJoox", "IVp<,5dAx~zr V");
      // Undeclared exception!
      try { 
        checkbox0.abbr((Object) "RJoox");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      StringBuffer stringBuffer0 = new StringBuffer(102);
      Image image0 = new Image(tableBlock0, stringBuffer0, stringBuffer0);
      Checkbox checkbox0 = new Checkbox(image0, "java.lang.StringBuffer@0000000011", "noscript");
      checkbox0._wrapComponentId("g'Qx&F{:vh'zt");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "q 3g&FUm", "9Y;\"]X");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(textInput0, "9Y;\"]X", "9Y;\"]X", "q 3g&FUm", stringSelectModel0, true);
      TableBlock tableBlock0 = new TableBlock(select0);
      TableRow tableRow0 = new TableRow(tableBlock0);
      tableRow0._wrapComponentId("9Y;\"]X");
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, ":3M2=ap+5");
      Link link0 = new Link(tableBlock0, tableBlock0);
      link0.hashCode();
      assertTrue(link0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Form form0 = new Form("U!`7in");
      Checkbox checkbox0 = new Checkbox((Component) null, "Uo<bu?-PEGanR<\"5$mk", "Uo<bu?-PEGanR<\"5$mk");
      // Undeclared exception!
      try { 
        form0.addFormElement(checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      component0.object();
      component0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Form form0 = new Form((String) null);
      Form form1 = form0.renderHint((CharSequence) null);
      assertEquals("wheel_components_Form", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Form form0 = new Form((String) null);
      form0._setGeneratedId(true);
      assertTrue(form0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Form form0 = new Form((String) null);
      form0._setComponentId((String) null);
      assertEquals("form", form0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, (String) null, (String) null);
      Checkbox checkbox0 = new Checkbox(radio0, (String) null, (String) null);
      FormElement formElement0 = checkbox0.label((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(formElement0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "R3jx!!p", (String) null);
      // Undeclared exception!
      try { 
        checkbox0.isInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "3", (String) null);
      Table table0 = new Table(checkbox0, "wheel.components.ActionExpression@0000000009");
      TableRow tableRow0 = table0.tr();
      ActionExpression actionExpression0 = new ActionExpression("wheel.components.ActionExpression@0000000009");
      Form form0 = new Form(tableRow0, "<?xml encoding name expected to start with [A-Za-z] not ", actionExpression0);
      form0.buildComponent();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Form form0 = new Form("kK");
      // Undeclared exception!
      try { 
        form0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, " to: ");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.end();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "span", "null");
      Table table0 = new Table(hidden0, "ma7z9/&P{mhs");
      TableBlock tableBlock0 = table0.thead();
      // Undeclared exception!
      try { 
        tableBlock0.end("java.lang.StringBuffer@0000000011");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'java.lang.StringBuffer@0000000011'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.dateFormat("", "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      List<Component> list0 = errorPage0.findAll(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.table();
      errorPage0.strike();
      // Undeclared exception!
      try { 
        errorPage0.find("samp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id samp on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      Table table0 = new Table(hidden0, "");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = errorPage0.h2((Object) table0);
      tableBlock0.id("");
      assertFalse(tableBlock0._isGeneratedId());
      
      component0.get("");
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.up(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.StringBuffer@0000000011");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "java.lang.StringBuffer@0000000011", "java.lang.String@0000000008");
      TextArea textArea0 = new TextArea(checkbox0, "", " standalone=");
      TextArea textArea1 = (TextArea)textArea0.up((-559));
      assertEquals("textarea", textArea1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.StringBuffer@0000000011");
      Double double0 = new Double((-1962.7));
      boolean boolean0 = xmlEntityRef0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = new TableRow(tableBlock0);
      Table table0 = new Table(tableRow0, "link");
      table0.addInternalRenderHint("link");
      table0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Form form0 = new Form("java.lang.StringBuffer@0000000011");
      Form form1 = form0.renderHint("java.lang.StringBuffer@0000000011");
      form1._clear();
      assertSame(form0, form1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("aiGu-<#");
      Form form0 = new Form(errorPage0, "DhEfL;<luyU0<CY", actionExpression0);
      DateInput dateInput0 = new DateInput(form0, "aiGu-<#", (String) null, "aiGu-<#");
      // Undeclared exception!
      try { 
        errorPage0.addFirst(dateInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Form form0 = new Form("Uhq$(7|(3wwmQL86Dr");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(form0, "'{E!1b[", "Uhq$(7|(3wwmQL86Dr", (CharSequence) null, stringSelectModel0, true);
      Submit submit0 = new Submit(select0, "'{E!1b[", "java.lang.String@0000000008");
      Hidden hidden0 = new Hidden(submit0, "$48R&D+c'VC~ K", "null");
      Form form1 = hidden0._getVisibleForm(true);
      assertNotNull(form1);
      assertEquals("Uhq$(7|(3wwmQL86Dr", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getVisibleForm(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("java/util/HashMap");
      Form form0 = (Form)block0.form("eeW:_[nD");
      form0.id("eeW:_[nD");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "%ln62i$965D~QnJlD+;", "%ln62i$965D~QnJlD+;", "%ln62i$965D~QnJlD+;", stringSelectModel0, true);
      Radio radio0 = new Radio(select0, "QDXW-0[o )NVP", "%ln62i$965D~QnJlD+;");
      Checkbox checkbox0 = new Checkbox(radio0, "java.lang.String@0000000018", "'>c38S1Bc2-i[{");
      // Undeclared exception!
      try { 
        checkbox0.id("%ln62i$965D~QnJlD+;");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      Table table0 = new Table(hidden0, "");
      TableBlock tableBlock0 = table0.tfoot();
      Any any0 = tableBlock0.col();
      String string0 = any0._classReferenceFromHints();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertNotNull(string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("jSu0FQVa>");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup((Component) null, "jSu0FQVa>", "h1", stringSelectModel0, elExpression0);
      XmlPullWrapperFactory xmlPullWrapperFactory0 = XmlPullWrapperFactory.newInstance();
      XmlSerializerWrapper xmlSerializerWrapper0 = xmlPullWrapperFactory0.newSerializerWrapper();
      checkboxGroup0.renderComponent(xmlSerializerWrapper0);
      assertEquals(0, xmlSerializerWrapper0.getDepth());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<Component> list0 = errorPage0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getAction();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "java.lang.String@0000000008");
      Checkbox checkbox0 = new Checkbox(block0, "java.lang.String@0000000008", "java.lang.String@0000000008");
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        checkbox0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "", "PtT:_oI{#R#zG~");
      String[] stringArray0 = new String[0];
      Hidden hidden1 = (Hidden)hidden0.attributes(stringArray0);
      assertEquals("input", hidden1.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      StringBuffer stringBuffer0 = new StringBuffer(102);
      Image image0 = new Image(tableBlock0, stringBuffer0, stringBuffer0);
      Component component0 = image0.attributes((String[]) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "3", (String) null);
      Table table0 = new Table(checkbox0, "wheel.components.ActionExpression@0000000009");
      TableRow tableRow0 = table0.tr();
      tableRow0.addInternalRenderHint("3");
      Component component0 = tableRow0.clasS("-y:@#|S1KEdc5nk");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      Table table0 = new Table(hidden0, "");
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.renderHint("java.lang.String@0000000019");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "legend", "legend");
      // Undeclared exception!
      try { 
        textArea0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Table table0 = new Table(link0, "");
      table0.em((Object) "wheel.components.Any@0000000008");
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("j'xmvj=1'/*iPm");
      Submit submit0 = new Submit(xmlEntityRef0, "j'xmvj=1'/*iPm", "j'xmvj=1'/*iPm");
      // Undeclared exception!
      try { 
        submit0.h1();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Hidden hidden0 = new Hidden((Component) null, "org.mvel.ast.PreFixDecNode", "Could not find component with id ");
      // Undeclared exception!
      try { 
        hidden0.cite((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.h5((Object) "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "Yv'.%wiFlpe4,vhp", "Yv'.%wiFlpe4,vhp");
      Image image0 = new Image(fileInput0, "Yv'.%wiFlpe4,vhp", "Yv'.%wiFlpe4,vhp");
      // Undeclared exception!
      try { 
        image0.dfn();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, (String) null, (String) null, (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.sup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noscript();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "h", "h");
      // Undeclared exception!
      try { 
        textArea0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("dl");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "dl", "dl");
      // Undeclared exception!
      try { 
        textInput0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "org.mvel.CompileException", "aXR>Z");
      // Undeclared exception!
      try { 
        numberInput0.addFirst((Component) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, (String) null, (String) null);
      Checkbox checkbox0 = new Checkbox(radio0, (String) null, (String) null);
      Label label0 = new Label(checkbox0, (Object) null);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        label0.select((String) null, dynamicSelectModel0, "java.lang.StringBuffer@0000000011");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("eC W@C4oL:))k9Q]3~7");
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("eC W@C4oL:))k9Q]3~7", (ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "(lqiZ", "DjU;UKltoqF");
      TextInput textInput0 = new TextInput(radio0, "Uo+nH-4%", "DjU;UKltoqF");
      // Undeclared exception!
      try { 
        textInput0.a((Object) radio0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      DateInput dateInput0 = new DateInput(xmlEntityRef0, (String) null, "[_*TK^4Vh{X", (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.label((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      Table table0 = new Table(hidden0, "");
      TableBlock tableBlock0 = table0.tfoot();
      // Undeclared exception!
      try { 
        tableBlock0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "q 3g&FUm", "9Y;\"]X");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(textInput0, "9Y;\"]X", "9Y;\"]X", "q 3g&FUm", stringSelectModel0, true);
      TableBlock tableBlock0 = new TableBlock(select0);
      tableBlock0.param("9Y;\"]X", "9Y;\"]X");
      ElExpression elExpression0 = new ElExpression("q 3g&FUm");
      // Undeclared exception!
      try { 
        tableBlock0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate finder expression ' q 3g&FUm'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      // Undeclared exception!
      try { 
        component0.reset("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "SC~r/IL$", "");
      Image image0 = new Image(checkbox0, "", "SC~r/IL$");
      FileInput fileInput0 = new FileInput(image0, "", "SC~r/IL$");
      // Undeclared exception!
      try { 
        fileInput0.big((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q();
      Component component1 = component0.wBlock("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_2", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("java/util/HashMap");
      Component component0 = block0.strong((Object) "java/util/HashMap");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(block0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("D=^;=6s#a6KW\"t");
      // Undeclared exception!
      try { 
        xmlEntityRef0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      StringBuffer stringBuffer0 = new StringBuffer(102);
      Image image0 = new Image(tableBlock0, stringBuffer0, stringBuffer0);
      Checkbox checkbox0 = new Checkbox(image0, "java.lang.StringBuffer@0000000011", "noscript");
      image0._setParent(checkbox0);
      assertEquals("noscript", checkbox0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.address((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getActions();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      Table table0 = new Table(hidden0, "");
      TableBlock tableBlock0 = table0.tfoot();
      // Undeclared exception!
      try { 
        tableBlock0.textarea("i%MyRvK6v, )TDWt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Form form0 = new Form("@<$A!");
      // Undeclared exception!
      try { 
        form0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("DtXUpYaY!ujH");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup((Component) null, "DtXUpYaY!ujH", "DtXUpYaY!ujH", (ISelectModel) null, elExpression0);
      DateInput dateInput0 = new DateInput(checkboxGroup0, "DtXUpYaY!ujH", "DtXUpYaY!ujH", "DtXUpYaY!ujH");
      // Undeclared exception!
      try { 
        dateInput0.textInput(">|UNag9};avs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "vHwCBTVe(c6hmG2[Fa0", "vHwCBTVe(c6hmG2[Fa0");
      NumberInput numberInput0 = new NumberInput(hidden0, "vHwCBTVe(c6hmG2[Fa0", "^");
      // Undeclared exception!
      try { 
        numberInput0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym();
      Long long0 = new Long((byte) (-89));
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(long0, "iframe");
      Component component1 = component0.del((Object) initialFieldValue0);
      Table table0 = new Table(errorPage0, " on the page.");
      Text text0 = new Text(table0, (Object) null);
      Text text1 = (Text)component1.rawText(text0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text1._isGeneratedId());
      assertEquals(" on the page.", table0.getComponentId());
      assertTrue(text1.isCdata());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      ElExpression elExpression0 = new ElExpression("org.mvel.PropertyAccessor");
      Any any0 = new Any(label0, elExpression0);
      TableRow tableRow0 = new TableRow(any0);
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        tableRow0.radioGroup("org.mvel.PropertyAccessor", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TableBlock tableBlock0 = new TableBlock(checkbox0, "");
      tableBlock0.sub();
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Form form0 = new Form("small");
      Checkbox checkbox0 = new Checkbox(form0, "small", "small");
      // Undeclared exception!
      try { 
        checkbox0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Form form0 = new Form("wheel.components.DateInput");
      Hidden hidden0 = new Hidden(form0, "wheel.components.DateInput", "wheel.components.DateInput");
      // Undeclared exception!
      try { 
        hidden0.submit("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "_wrapper", "_wrapper");
      // Undeclared exception!
      try { 
        radio0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = new TableRow(tableBlock0);
      Component component0 = tableRow0.cite();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.big();
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "", (String) null);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        textArea0.message("h5", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, ":3M2=ap+5");
      TableRow tableRow0 = tableBlock0.tr();
      Link link0 = new Link(tableRow0, tableRow0);
      Component component0 = link0.noframes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals(":3M2=ap+5", tableBlock0.getComponentId());
      assertEquals("Block_2", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.i();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Table table0 = new Table(link0, "");
      Label label0 = new Label(link0, table0);
      TextInput textInput0 = new TextInput(label0, "n]#CSl+T>R0z%S1Z", "n]#CSl+T>R0z%S1Z");
      TableBlock tableBlock0 = new TableBlock(textInput0);
      tableBlock0.tt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("n]#CSl+T>R0z%S1Z", textInput0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(".Jhm{ f^4,(g");
      TextArea textArea0 = new TextArea(xmlEntityRef0, ".Jhm{ f^4,(g", ".Jhm{ f^4,(g");
      // Undeclared exception!
      try { 
        textArea0.u();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "]Cc}s^%<[ jj;^P", "P|+IaY");
      Image image0 = new Image(checkbox0, "]Cc}s^%<[ jj;^P", "P|+IaY");
      // Undeclared exception!
      try { 
        image0.hr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Form form0 = new Form("(Ljava/lang/Object;Ljava/lang/Object;Lorg/mvel/integration/VariableResolverFactory;)Ljava/lang/Object;");
      // Undeclared exception!
      try { 
        form0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("2^h`");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hidden("2^h`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "q 3g&FUm", "9Y;\"]X");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(textInput0, "9Y;\"]X", "9Y;\"]X", "q 3g&FUm", stringSelectModel0, true);
      TableBlock tableBlock0 = new TableBlock(select0);
      ElExpression elExpression0 = new ElExpression("q 3g&FUm");
      RadioGroup radioGroup0 = new RadioGroup(tableBlock0, "=w^U4", "input", stringSelectModel0, elExpression0);
      Component component0 = tableBlock0.small((Object) radioGroup0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("input", radioGroup0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000009");
      Float float0 = new Float(0.0);
      Link link0 = new Link(table0, float0);
      TableBlock tableBlock0 = new TableBlock(link0, "L^X%$k.1~\"0nU");
      tableBlock0.htmlText("java.lang.String@0000000009");
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      XmlSerializer xmlSerializer0 = xmlPullParserFactory0.newSerializer();
      // Undeclared exception!
      try { 
        tableBlock0._render(xmlSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Form form0 = new Form("+(1");
      // Undeclared exception!
      try { 
        form0.li((Object) "+(1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "&F\"OoaC(/-}F", "&F\"OoaC(/-}F");
      // Undeclared exception!
      try { 
        textInput0.bdo("&F\"OoaC(/-}F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Form form0 = new Form("NzoVOO%[zd-`");
      // Undeclared exception!
      try { 
        form0.h3((Object) "NzoVOO%[zd-`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Byte byte0 = new Byte((byte)106);
      Component component0 = errorPage0.code((Object) byte0);
      Component component1 = component0.ol();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Form form0 = new Form("'KDBWu8@w'");
      ActionExpression actionExpression0 = form0.action("'KDBWu8@w'");
      // Undeclared exception!
      try { 
        form0.numberInput("'KDBWu8@w'", (CharSequence) actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Form form0 = new Form("?0<h7d8)+8");
      // Undeclared exception!
      try { 
        form0.text("?0<h7d8)+8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Form form0 = new Form("W*@~");
      // Undeclared exception!
      try { 
        form0.h4((Object) "T1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "|", "|");
      // Undeclared exception!
      try { 
        checkbox0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "q 3g&FUm", "9Y;\"]X");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(textInput0, "9Y;\"]X", "9Y;\"]X", "q 3g&FUm", stringSelectModel0, true);
      TableBlock tableBlock0 = new TableBlock(select0);
      Component component0 = tableBlock0.h4();
      assertEquals("9Y;\"]X", select0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      Table table0 = new Table(component0, "C#.y' |");
      Component component1 = errorPage0.span((Object) table0);
      TableBlock tableBlock0 = table0.thead();
      Any any0 = tableBlock0.col();
      NumberInput numberInput0 = new NumberInput(any0, "org.mvel.conversion.ByteCH", (String) null);
      component1.p((Object) numberInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("C#.y' |", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = new TableRow(tableBlock0);
      Table table0 = new Table(tableRow0, "link");
      table0.b();
      table0._clear();
      assertFalse(table0._isGeneratedId());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, (String) null, "No corresponding component found for end expression '");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(187, (-991), 6, 187, 1021);
      // Undeclared exception!
      try { 
        fileInput0.b((Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buttonInput("Tfoot component can be added only to a Table.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "L3Kn", "Could not find component with id '");
      // Undeclared exception!
      try { 
        hidden0.entity("java.lang.StringBuffer@0000000011");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Select select0 = new Select((Component) null, "var", "var", "var", (ISelectModel) null, true);
      // Undeclared exception!
      try { 
        select0.passwordInput("H&+.wV:RtENN:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "code", "code");
      // Undeclared exception!
      try { 
        textInput0.encode("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "m>h", "m>h");
      // Undeclared exception!
      try { 
        checkbox0.var((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Component component0 = link0.pre();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(".4]^t\ti4rg&");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Form form0 = new Form("LP-TZG'~A:^j");
      // Undeclared exception!
      try { 
        form0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym();
      Long long0 = new Long((byte) (-89));
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(long0, "iframe");
      Component component1 = component0.del((Object) initialFieldValue0);
      Table table0 = new Table(errorPage0, " on the page.");
      Text text0 = new Text(table0, (Object) null);
      // Undeclared exception!
      try { 
        text0.sub((Object) component1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("YP`8,?V");
      Integer integer0 = new Integer((-2229));
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      // Undeclared exception!
      try { 
        checkbox0.radio("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      Component component1 = errorPage0.remove(component0);
      assertEquals("wheel_ErrorPage", component1.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Submit submit0 = new Submit(link0, "~nkjdQJ*N! `w", "L3Kn");
      Table table0 = new Table(submit0, "~nkjdQJ*N! `w");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.ul();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("~nkjdQJ*N! `w", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "", "", stringSelectModel0, elExpression0);
      Table table0 = new Table(checkboxGroup0, "");
      Image image0 = new Image(table0, elExpression0, "");
      TextArea textArea0 = new TextArea(image0, "", "gOfT0f>");
      // Undeclared exception!
      try { 
        textArea0.abbr((Object) stringSelectModel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Form form0 = new Form("table");
      TextArea textArea0 = new TextArea(form0, "}.$L9a\"", "}.$L9a\"");
      Radio radio0 = new Radio(textArea0, "org.apache.commons.io.filefilter.OrFileFilter", "table");
      Checkbox checkbox0 = new Checkbox(radio0, "zBS[PLGM", "}.$L9a\"");
      // Undeclared exception!
      try { 
        checkbox0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.date();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "span", "null");
      Table table0 = new Table(hidden0, "ma7z9/&P{mhs");
      Component component0 = table0.em();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "org.mvel.ast.PostFixIncNode", "org.mvel.ast.PostFixIncNode");
      // Undeclared exception!
      try { 
        radio0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.getComponentName();
      assertEquals("ErrorPage", string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Form form0 = new Form("T+_$6g=i75C&K");
      ElExpression elExpression0 = new ElExpression("OA]?-Bo");
      // Undeclared exception!
      try { 
        form0.base(elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "", "");
      // Undeclared exception!
      try { 
        submit0.strike((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Form form0 = new Form("Uhq$(7|(3wwmQL86Dr");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(form0, "'{E!1b[", "Uhq$(7|(3wwmQL86Dr", (CharSequence) null, stringSelectModel0, true);
      ElExpression elExpression0 = new ElExpression("No top level component found.");
      // Undeclared exception!
      try { 
        select0.q((Object) elExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, (Object) null);
      Checkbox checkbox0 = new Checkbox(label0, "/QzhG:~{5", "/QzhG:~{5");
      // Undeclared exception!
      try { 
        checkbox0.a();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Component component0 = errorPage0.style();
      Component component1 = component0.u((Object) link0);
      Component component2 = component1.del();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "]", "]");
      // Undeclared exception!
      try { 
        checkbox0.address();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Form form0 = new Form("");
      Hidden hidden0 = new Hidden(form0, "", "i");
      // Undeclared exception!
      try { 
        hidden0.imageSubmit("i", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "MZ", "MZ");
      // Undeclared exception!
      try { 
        checkbox0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "span", "null");
      Table table0 = new Table(hidden0, "ma7z9/&P{mhs");
      Component component0 = table0.legend((Object) "null");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("ma7z9/&P{mhs", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "lbn7$*'2", "expected ?> as last part of <?xml not ");
      // Undeclared exception!
      try { 
        textInput0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "p\"?h:/uLBZqXONc/wg", "p\"?h:/uLBZqXONc/wg");
      // Undeclared exception!
      try { 
        checkbox0.img("p\"?h:/uLBZqXONc/wg", "h6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, ".%tHd7l~,:D|w", ".%tHd7l~,:D|w");
      // Undeclared exception!
      try { 
        radio0.numberInput("Could not find component with id '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, ":3M2=ap+5");
      Link link0 = new Link(tableBlock0, tableBlock0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression(":3M2=ap+5");
      // Undeclared exception!
      try { 
        link0.checkboxGroup("wheel.components.TableRow", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Any any0 = new Any(errorPage0, "tZ5");
      Component component0 = errorPage0.s((Object) any0);
      ElExpression elExpression0 = new ElExpression("tZ5");
      // Undeclared exception!
      try { 
        component0.fileInput("tZ5", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      NumberInput numberInput0 = new NumberInput(checkbox0, "h", "h");
      Radio radio0 = new Radio(checkbox0, "", "cannot convert a string with a length greater than 1 to java.lang.Character");
      // Undeclared exception!
      try { 
        numberInput0.i((Object) radio0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.fileInput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Form form0 = new Form(" on the page.");
      form0.getAttributes();
      assertEquals(" on the page.", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, " on the page.");
      Component component0 = table0.button();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Form form0 = new Form(":k8h/oC4Pz7=VDQ");
      TextArea textArea0 = new TextArea(form0, ":k8h/oC4Pz7=VDQ", ":k8h/oC4Pz7=VDQ");
      // Undeclared exception!
      try { 
        textArea0.checkbox(":zJe96>d>mv5zoLCV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, " on the page.", " on the page.");
      // Undeclared exception!
      try { 
        textInput0.blockquote();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Form form0 = new Form("processing instruction PITarget must be exactly after <? and not white space character");
      // Undeclared exception!
      try { 
        form0.ins((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("java/util/HashMap");
      Component component0 = block0.form("eeW:_[nD");
      Component component1 = component0.samp((Object) block0);
      Component component2 = component1.object();
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component2.getComponentId());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      StringBuffer stringBuffer0 = new StringBuffer(102);
      Image image0 = new Image(tableBlock0, stringBuffer0, stringBuffer0);
      Checkbox checkbox0 = new Checkbox(image0, "java.lang.StringBuffer@0000000011", "noscript");
      FormElement formElement0 = checkbox0.fieldBinding("");
      assertTrue(image0._isGeneratedId());
      assertEquals("noscript", formElement0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "span", "null");
      Table table0 = new Table(hidden0, "ma7z9/&P{mhs");
      Component component0 = table0.p();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[6];
      Component component0 = errorPage0.area(stringArray0);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Byte byte0 = new Byte((byte) (-12));
      Component component0 = errorPage0.acronym((Object) byte0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "body", "body");
      // Undeclared exception!
      try { 
        fileInput0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "label");
      Component component0 = table0.s();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("label", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Form form0 = new Form("Oc=+Z^");
      NumberInput numberInput0 = new NumberInput(form0, "Oc=+Z^", "#2dw");
      // Undeclared exception!
      try { 
        numberInput0.requestFocus();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Float float0 = new Float(701.60236758);
      Label label0 = new Label(errorPage0, float0);
      Submit submit0 = new Submit(label0, "_", "_");
      // Undeclared exception!
      try { 
        submit0.dateInput(" = ", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Expires");
      // Undeclared exception!
      try { 
        xmlEntityRef0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "dir", "qB[52-h9g.");
      // Undeclared exception!
      try { 
        fileInput0.sup((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "label");
      // Undeclared exception!
      try { 
        table0.frame("label");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.kbd((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("-WsOg}`Z2QydSw->2L");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.label();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("p");
      // Undeclared exception!
      try { 
        xmlEntityRef0.map("Q{]y-x3eYO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "", "null", (ISelectModel) null, "");
      TableRow tableRow0 = new TableRow(select0);
      Component component0 = tableRow0.dfn((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("null", select0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding("tZ5");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer();
      Any any0 = new Any(errorPage0, stringBuffer0);
      TableRow tableRow0 = new TableRow(any0);
      // Undeclared exception!
      try { 
        tableRow0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, " on the page.");
      Component component0 = table0.h6((Object) " on the page.");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Form form0 = new Form(" 0$yst=Sf>eijM~Z>Y,");
      // Undeclared exception!
      try { 
        form0.multiSelect("5v7y&]ml%<^dGK6S", (ISelectModel) null, "5v7y&]ml%<^dGK6S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "IXLwwA`kVDDN1x~ 3", "IXLwwA`kVDDN1x~ 3");
      // Undeclared exception!
      try { 
        fileInput0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      hidden0._getXhtmlAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(hidden0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, (Object) null);
      Label label0 = new Label(errorPage0, link0);
      Checkbox checkbox0 = new Checkbox(label0, "name", "name");
      TextArea textArea0 = new TextArea(checkbox0, "", "");
      // Undeclared exception!
      try { 
        textArea0.dt((Object) checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "", "");
      Table table0 = new Table(hidden0, "");
      table0.dd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }
}
