/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:21:59 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.utils.FilePersistentBase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("dLA=9q9JCT.i)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-1389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Request request0 = new Request();
      request0.addHeader("", "");
      request0.setMethod("Thread interrupted when sleep");
      Request request1 = request0.addHeader("", "");
      request1.setUrl("");
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("cM");
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "6R";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6R");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      spider2.clearPipeline();
      spider1.getCollectorPipeline();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      spider1.getCollectorPipeline();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      spider0.getThreadAlive();
      Spider spider1 = spider0.setUUID("");
      spider1.runAsync();
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider0.startRequest(list0);
      // Undeclared exception!
      try { 
        spider2.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0k[PQe$IceX}]u6p");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(1000);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IO[23yF;bFpY;]";
      stringArray0[1] = "DY*-uUlcZK*iX7qU*";
      stringArray0[2] = "DY*-uUlcZK*iX7qU*";
      stringArray0[3] = "0k[PQe$IceX}]u6p";
      stringArray0[4] = "0k[PQe$IceX}]u6p";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Spider.Status.fromValue((-1295));
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      String string1 = "[y,%h J";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("[y,%h J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":wiUs+EscdpbY~");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 175;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(175, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(spider0, scheduledThreadPoolExecutor0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 175);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(spider3, scheduledThreadPoolExecutor0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      Spider spider5 = spider0.clearPipeline();
      spider5.setExitWhenComplete(false);
      spider5.runAsync();
      String string0 = "nN%8";
      Spider spider6 = spider4.setUUID("nN%8");
      spider6.getPageCount();
      String string1 = null;
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("oM@A)5/mI?~r");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.setExitWhenComplete(false);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(":HQVk3o{sCbi4");
      spider0.setSpawnUrl(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("DY*-uUlcZK*iX7qU*");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline(filePipeline0);
      ExecutorService executorService0 = null;
      spider2.setExecutorService((ExecutorService) null);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = null;
      try {
        fileCacheQueueScheduler1 = new FileCacheQueueScheduler((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1620, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1620);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider2 = spider1.pipeline(filePipeline0);
      boolean boolean0 = spider2.isExitWhenComplete();
      assertTrue(boolean0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3267, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.getSite();
      Request request0 = new Request();
      String string1 = "us.codecraft.webmagic.selector.RegexResult";
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-3436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.clearPipeline();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(161, 0, 161, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Request request0 = new Request("-R$^g{e6u*)");
      Request request1 = new Request("$VALUES");
      Request[] requestArray0 = new Request[4];
      requestArray0[0] = request1;
      requestArray0[1] = request0;
      requestArray0[2] = request1;
      Request request2 = request0.putExtra("-R$^g{e6u*)", "");
      requestArray0[3] = request2;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 2);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      AtomicInteger atomicInteger0 = new AtomicInteger();
      spider0.stat = atomicInteger0;
      Request request0 = new Request();
      Request request1 = request0.setMethod("Thread interrupted when sleep");
      Request request2 = request1.addCookie("Thread interrupted when sleep", "");
      request2.setCharset("Thread interrupted when sleep");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=%9pnU$`hAo");
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider1.setScheduler(duplicateRemovedScheduler0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 2);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Request request0 = new Request();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      fileCacheQueueScheduler0.push(request0, spider1);
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.scheduler(fileCacheQueueScheduler0);
      byte[] byteArray0 = new byte[0];
      HttpRequestBody httpRequestBody0 = HttpRequestBody.custom(byteArray0, "Thread interrupted when sleep", "d<FM%+");
      request0.setRequestBody(httpRequestBody0);
      Request[] requestArray0 = new Request[2];
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      Spider spider2 = spider1.addRequest(requestArray0);
      spider2.start();
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(")");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Request[] requestArray0 = new Request[3];
      spider0.checkIfRunning();
      Request request0 = new Request("@.LG4KH7");
      Request request1 = request0.setBinaryContent(false);
      requestArray0[0] = request1;
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Request request2 = request0.putExtra(">8`Z$>&}E{ccVt.DDF", resultItemsCollectorPipeline0);
      requestArray0[1] = request2;
      Request request3 = request0.addCookie("fMVD5ejs65>&812!", "_cycle_tried_times");
      requestArray0[2] = request3;
      spider1.addPipeline(resultItemsCollectorPipeline0);
      spider1.getStartTime();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("DY*-uUlcZK*iX7qU*");
      spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider1 = spider0.setSpawnUrl(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider0.addPipeline(jsonFilePipeline0);
      Spider spider3 = spider1.setExecutorService((ExecutorService) null);
      FilePersistentBase.PATH_SEPERATOR = "DY*-uUlcZK*iX7qU*";
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("2");
      spider1.getThreadAlive();
      String[] stringArray0 = new String[4];
      spider0.addUrl(stringArray0);
      spider2.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider3.get("DY*-uUlcZK*iX7qU*");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Spider.Status.fromValue(1);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("DY*-uUlcZK*iX7qU*");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider0.setSpawnUrl(false);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("K&`");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("2");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.clearPipeline();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider2.startUrls(linkedList0);
      Page.fail();
      String string0 = null;
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("DY*-uUlcZK*iX7qU*");
      spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider1 = spider0.setSpawnUrl(false);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("K&`");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider0.addPipeline(jsonFilePipeline0);
      Spider spider3 = spider2.scheduler(fileCacheQueueScheduler0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler0);
      Page page0 = new Page();
      spider4.extractAndAddRequests(page0, false);
      spider1.setUUID("DY*-uUlcZK*iX7qU*");
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      Request request0 = new Request("");
      fileCacheQueueScheduler0.push(request0, spider0);
      request0.setCharset("_cycle_tried_times");
      Request request1 = request0.addHeader("", "_cycle_tried_times");
      Request request2 = request1.setMethod("_cycle_tried_times");
      Request request3 = request1.addCookie("", "_cycle_tried_times");
      request3.getExtras();
      request2.setExtras((Map<String, Object>) null);
      request2.addHeader("KL&*r", "");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      linkedList0.add(request3);
      spider1.sleep(0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(")");
      Request request0 = new Request("u:uMn[(uB]");
      Request request1 = request0.setBinaryContent(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Request request2 = request1.putExtra("#Md+?BQcmu9A\"6~9c-", spider0);
      Request[] requestArray0 = new Request[2];
      requestArray0[0] = request2;
      requestArray0[1] = request1;
      ForkJoinPool.commonPool();
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("oM@A)5/mI?~r");
      FilePipeline filePipeline0 = new FilePipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(":HQVk3o{sCbi4");
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      int int0 = (-1315);
      spider0.setEmptySleepTime((-1315));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1315), 200, (-1315), timeUnit0, linkedBlockingDeque0, threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(")");
      Request request0 = new Request("u:uMn[(uB]");
      Request request1 = request0.setBinaryContent(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Request request2 = request1.putExtra("#Md+?BQcmu9A\"6~9c-", spider0);
      Request[] requestArray0 = new Request[2];
      requestArray0[0] = request2;
      requestArray0[1] = request1;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_cycle_tried_times", "Spider ");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(135);
      phantomJSDownloader1.setRetryNum(133);
      spider0.isSpawnUrl();
      spider1.runAsync();
      spider1.stop();
      // Undeclared exception!
      try { 
        spider0.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("DY*-uUlcZK*iX7qU*");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider0.setSpawnUrl(false);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Request request0 = new Request();
      String string0 = "Thread interrupted when sleep";
      Request request1 = request0.setMethod("Thread interrupted when sleep");
      String string1 = "";
      Request request2 = request0.addCookie((String) null, "");
      request0.setCharset("");
      spider1.setUUID("KS");
      request2.setBinaryContent(false);
      request1.addHeader("_cycle_tried_times", "");
      spider0.stop();
      Spider spider2 = spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider2.onSuccess(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("DY*-uUlcZK*iX7qU*");
      spider0.setScheduler(fileCacheQueueScheduler0);
      spider0.setSpawnUrl(false);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("K&`");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("2");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(fileCacheQueueScheduler1);
      Request request0 = new Request("P5i");
      Request request1 = request0.setBinaryContent(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Request request2 = request1.addHeader("", "Q~a`XG U(");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      request2.putExtra("DY*-uUlcZK*iX7qU*", bufferedOutputStream0);
      Request[] requestArray0 = new Request[0];
      Spider spider4 = spider3.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Thread interrupted when sleep", "_cycle_tried_times");
      spider4.downloader(phantomJSDownloader0);
      spider1.getUUID();
  }
}
