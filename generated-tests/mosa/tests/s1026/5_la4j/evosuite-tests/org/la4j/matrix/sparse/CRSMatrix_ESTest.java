/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:50:53 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(12, 12, Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix.random(3093, 13, (double) 0L, (Random) mockRandom1);
      CRSMatrix.identity(3093);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      double double0 = cRSMatrix0.min();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Bf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      double double0 = cRSMatrix0.manhattanNorm();
      assertEquals(7.0, double0, 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, 2, (-1548.1511552278048), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(13, 13, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2627;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2627, 13, doubleArray0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int0 = 1;
      org.evosuite.runtime.Random.setNextRandom(int0);
      String string0 = "j_qLrl8930Wyhj";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1793
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(11);
      cRSMatrix0.getColumn(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(13, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1655, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cRSMatrix0.copyOfShape(28, 28);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CRSMatrix.diagonal(0, 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[0];
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextBoolean();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 543;
      doubleArray1[2] = (double) 543;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 543;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix.unit(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.toColumnMajorSparseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix(7, 7);
      cRSMatrix1.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 7);
      cRSMatrix0.mkString("c}@`cHoDpZN}~sM!v&9", "c}@`cHoDpZN}~sM!v&9");
      cRSMatrix0.getColumn(6);
      cRSMatrix0.max();
      org.evosuite.runtime.Random.setNextRandom(7);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(11);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(9, 9, matrixFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 7;
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
          ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
          cRSMatrix0.determinant();
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          doReturn(0.0).when(vectorAccumulator0).accumulate();
          cRSMatrix0.foldNonZeroInColumn(7, vectorAccumulator0);
          // Undeclared exception!
          try { 
            RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0);
            fail("Expecting exception: IndexOutOfBoundsException");
          
          } catch(IndexOutOfBoundsException e) {
             //
             // Column '8' is invalid.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(41);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix.identity(41);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.copyOfShape(33, 41);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix.identity(13);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.multiply((double) 13);
      cRSMatrix0.toDenseMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 13;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.unit(0, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 964;
      cRSMatrix0.getColumn(964);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.iterator();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfRows(964);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      CRSMatrix cRSMatrix2 = (CRSMatrix)RowMajorSparseMatrix.diagonal(809, 4.9E-324);
      SparseMatrix.block(cRSMatrix1, cRSMatrix2, cRSMatrix0, cRSMatrix0);
      int int1 = 1;
      cRSMatrix0.copyOfShape(int1, int0);
      cRSMatrix1.isZeroAt(int1, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(11);
      cRSMatrix0.getColumn(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)11).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 11, matrixFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(30);
      cRSMatrix0.getColumn(30);
      cRSMatrix0.iterator();
      cRSMatrix0.blankOfRows(30);
      cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.isZeroAt(30, (-3103));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.toColumnMajorSparseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      CRSMatrix.diagonal(1537, 13);
      cRSMatrix0.swapColumns(2, 865);
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(11);
      cRSMatrix0.getColumn(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(11, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      ColumnMajorSparseMatrix.zero(5, 5, 5);
      Matrix matrix0 = cRSMatrix0.power(5);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(35);
      cRSMatrix0.maxInRow(8);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(8);
      CRSMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix1, (Matrix) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(31);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.rotate();
      Matrix matrix1 = cRSMatrix1.multiplyByItsTranspose();
      CRSMatrix.block(matrix1, matrix1, matrix0, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 943;
      cRSMatrix0.getColumn(943);
      cRSMatrix0.iterator();
      cRSMatrix0.blankOfRows(943);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.diagonalProduct();
      int int1 = 13;
      MockRandom mockRandom0 = new MockRandom(13);
      // Undeclared exception!
      CRSMatrix.random(13, 943, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix(0, 0, 3051);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(32, 0, doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(32, vectorFunction0);
      cRSMatrix0.mkString("M", "Can not decode BasicVector from the given byte array.");
      Matrix matrix0 = cRSMatrix0.copy();
      cRSMatrix0.rank();
      cRSMatrix0.product();
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.subtract((double) 0);
      CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextBoolean();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(3093, 13, (double) 0L, (Random) mockRandom1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 13;
      cRSMatrix0.eachNonZeroInRow(12, vectorProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(3066, vectorAccumulator0);
      mockRandom0.setSeed(13);
      MockRandom mockRandom2 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      int int0 = 3090;
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInColumn(int0, vectorProcedure1);
      int int1 = 1000;
      cRSMatrix0.isZeroAt(intArray0[0], int1);
      int int2 = (-856);
      double double0 = Double.POSITIVE_INFINITY;
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(int2, double0);
      cRSMatrix2.toBinary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(40, (-1748.5));
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      matrix0.setAll((-1748.5));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = (-2514);
      cRSMatrix0.setAll((-27.0));
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2514), 796);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2514x796
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(6, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 40;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(40, 40);
      int int1 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1630.5898569), (double)40, 270.326914146, (-29.345380047032652), 270.326914146).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(0, vectorFunction0);
      cRSMatrix0.copy();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.longs((long) 40, (long) 0);
      long long0 = (-1L);
      mockRandom0.longs(long0, (long) int0, (long) int0);
      CRSMatrix.randomSymmetric(int0, (double) int1, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextBoolean();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(3093, 13, (double) 0L, (Random) mockRandom1);
      cRSMatrix0.maxInRow(13);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      mockRandom1.longs();
      MockRandom mockRandom2 = new MockRandom();
      CRSMatrix.fromBinary(byteArray0);
      cRSMatrix0.isZeroAt(3093, 389);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      cRSMatrix0.blankOfShape(7, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 7;
      cRSMatrix0.multiply((double) 7);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.toDenseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 10);
      cRSMatrix0.blankOfShape(10, 0);
      cRSMatrix0.min();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 10;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 600.7387177726257, 1748.5, 1748.5, 2406.9732).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      intArray0[2] = 0;
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(10);
      cRSMatrix1.setAll(0.0);
      cRSMatrix0.min();
      cRSMatrix0.iteratorOfRow(10);
      Matrix.zero(0, 3090);
      // Undeclared exception!
      try { 
        Matrix.constant(10, (-2063), (-695.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 7);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(7, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 7;
      intArray0[2] = 0;
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix1.nonZeroIteratorOfColumn(7);
      cRSMatrix0.subtract(1748.5);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix2, cRSMatrix0, cRSMatrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      cRSMatrix0.minInRow(8);
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.minInRow(8);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.maxInRow(8);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      cRSMatrix0.rotate();
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      matrix0.toMatrixMarket(numberFormat0);
      CRSMatrix.identity(2161);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2159);
      Matrix matrix0 = cRSMatrix0.blankOfShape(26, 26);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.forEach(consumer0);
      cRSMatrix0.min();
      cRSMatrix0.minInRow(26);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2159, 26, 2159);
      cRSMatrix1.copyOfShape(26, 26);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      Matrix matrix0 = cRSMatrix0.rotate();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      RowMajorSparseMatrix.block(columnMajorSparseMatrix0, cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(48, 48);
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 40;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(40, (-1748.5));
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(40);
      int int1 = 32;
      Matrix matrix0 = cRSMatrix0.blankOfShape(40, 32);
      double double0 = cRSMatrix0.min();
      double double1 = cRSMatrix1.minInRow((-1182));
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      String string0 = "QK";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(string0);
      Matrix matrix1 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix1);
      Random random0 = null;
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric(int1, (double) int0, random0);
      CRSMatrix cRSMatrix3 = CRSMatrix.block(matrix1, cRSMatrix1, cRSMatrix2, matrix0);
      Matrix matrix2 = cRSMatrix3.multiply(double0);
      CRSMatrix.diagonal(int1, double1);
      cRSMatrix1.toColumnMajorSparseMatrix();
      CRSMatrix.block(matrix2, cRSMatrix3, cRSMatrix3, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2157, (-1748.5));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(1601, vectorFunction0);
      cRSMatrix0.mkString("", "");
      cRSMatrix0.copy();
      cRSMatrix0.product();
      cRSMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(11);
      cRSMatrix0.getColumn(11);
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(17, 17, 17);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(17, 1655);
      SparseMatrix.identity(1655);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix1 = cRSMatrix0.blankOfShape(17, 788);
      CRSMatrix.block(columnMajorSparseMatrix0, cRSMatrix0, matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toRowMajorSparseMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, (-1748.5));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(0, vectorFunction0);
      cRSMatrix0.mkString("org.la4j.Vectors", "org.la4j.Vectors");
      Matrix matrix0 = cRSMatrix0.copy();
      cRSMatrix0.rank();
      cRSMatrix0.product();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(5, (double) 12, (Random) mockRandom0);
      double double0 = cRSMatrix1.euclideanNorm();
      Matrix matrix1 = cRSMatrix1.subtract(double0);
      CRSMatrix.block(matrix1, matrix0, matrix1, matrix1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(914, 914);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(2, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      CRSMatrix.identity(0);
      cRSMatrix0.maxInRow(0);
      CRSMatrix.identity(346);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      Matrix matrix0 = cRSMatrix0.blankOfShape(7, 0);
      matrix0.eachInRow(0, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(40, (-1748.5));
      Matrix matrix0 = cRSMatrix0.multiply(2672.861737);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      int[] intArray0 = new int[2];
      intArray0[1] = 40;
      cRSMatrix0.select(intArray0, intArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(denseMatrix0, cRSMatrix0, denseMatrix0, matrix0);
      MatrixFunction matrixFunction0 = null;
      Matrix matrix1 = cRSMatrix0.transform(matrixFunction0);
      CRSMatrix.block(cRSMatrix0, matrix0, sparseMatrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(40, (-1748.5));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, (double)40, (double)40, (double)40).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(0, vectorFunction0);
      cRSMatrix0.mkString("org.la4j.Vectors", "org.la4j.Vectors");
      Matrix matrix0 = cRSMatrix0.copy();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.product();
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 34;
      int int1 = 0;
      int int2 = 2174;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2174);
      Matrix matrix0 = cRSMatrix0.blankOfShape(0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.min();
      cRSMatrix0.minInRow(34);
      matrix0.sliceTopLeft(7, 3);
      String string0 = "org.la4j.LinearAlgebra$SolverFactory$7";
      String string1 = "parwSB";
      matrix0.mkString(string0, string1);
      Matrix matrix1 = matrix0.multiply((double) int2);
      matrix1.copyOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      cRSMatrix0.toRowMajorSparseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.fold(matrixAccumulator0);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(35);
      cRSMatrix0.maxInRow(8);
      CRSMatrix.identity(8);
      cRSMatrix0.nonZeroAt(8, 8);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(35);
      cRSMatrix0.maxInRow(8);
      CRSMatrix.identity(8);
      cRSMatrix0.nonZeroAt(8, (-221));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1, 0.0, (Random) mockRandom0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.nonZeroRowMajorIterator();
  }
}
