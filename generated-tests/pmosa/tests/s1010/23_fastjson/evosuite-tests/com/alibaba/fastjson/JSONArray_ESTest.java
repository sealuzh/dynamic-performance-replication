/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:20:14 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-982));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3099);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3099, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1038);
      jSONArray0.getComponentType();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreNotMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableASM;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowComment;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.UseObjectArray;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.IgnoreAutoType;
      featureArray0[8] = feature8;
      JSON.parseObject((String) null, (Type) null, (ParserConfig) null, featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.addAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      linkedHashSet0.add(mockHijrahDate0);
      jSONArray0.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2044);
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      jSONArray0.fluentSet(1, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(2044);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2044, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1381;
      JSONArray jSONArray0 = new JSONArray(1381);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      List<MockJapaneseDate> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1381, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1381, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONArray0.fluentAdd((Object) class0);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3678080;
      JSONArray jSONArray0 = new JSONArray(3678080);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray1.toJSONString();
      int int1 = (-730);
      // Undeclared exception!
      try { 
        jSONArray1.getString(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1038);
      Feature feature0 = Feature.IgnoreNotMatch;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)70;
      Feature[] featureArray0 = new Feature[6];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature1;
      featureArray0[3] = feature1;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      JSON.parse(byteArray0, featureArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      float float0 = new Integer(989);
      jSONArray0.equals((Object) null);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("com.alibaba.fastjson.JSONArray", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      linkedHashSet0.add(mockHijrahDate0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(3099);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3099, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1038);
      int int0 = 1;
      jSONArray0.getComponentType();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreNotMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableASM;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowComment;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.UseObjectArray;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.IgnoreAutoType;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-2205));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2205
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2043);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(1178);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1178, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      JSONObject jSONObject0 = new JSONObject(434, true);
      jSONObject0.getJSONArray("@type");
      jSONArray2.fluentRemove((Object) null);
      jSONArray1.hashCode();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-695));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1940);
      String string0 = null;
      ParserConfig parserConfig0 = null;
      jSONArray0.equals((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray0.add(1, (Object) mockHijrahDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3099);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3099, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      jSONArray0.setComponentType((Type) null);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedList0);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1951), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2044);
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray0.fluentRetainAll(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      jSONArray0.getByteValue(1219);
      Object object0 = new Object();
      jSONArray0.fluentSet((byte)0, object0);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1), (-1738));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.set(0, mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@738d3548
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      LinkedList<PropertyNamingStrategy> linkedList1 = new LinkedList<PropertyNamingStrategy>(linkedList0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      linkedList1.add(propertyNamingStrategy0);
      jSONArray2.containsAll(linkedList1);
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      ListIterator<Object> listIterator0 = jSONArray2.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray1.setRelatedArray(jSONArray0);
      jSONArray1.containsAll(jSONArray0);
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      ListIterator<Object> listIterator0 = jSONArray1.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1217, (Object) null);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray0.getBoolean(972);
      assertEquals(1218, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1104, propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.fluentAdd((Object) jSONArray2);
      jSONArray3.retainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(1104);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      zoneOffset0.getRules();
      MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      jSONArray0.getByteValue(1219);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray0.getJSONObject(1501);
      jSONArray0.hashCode();
      assertEquals(1502, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      jSONArray0.getByteValue(1219);
      Object object0 = new Object();
      jSONArray0.fluentSet((byte)0, object0);
      jSONArray0.getBoolean(1);
      int int0 = (-1936);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1936));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      jSONArray0.getByteValue(1219);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(1501);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@35c4a447
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2044);
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'X';
      charArray0[2] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2044);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSON.handleResovleTask(defaultJSONParser0, mockMinguoDate0);
      jSONArray2.fluentClear();
      jSONArray2.toArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = jSONArray1.toArray(stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      jSONArray0.getByteValue(1219);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)0, object0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.Object@5083c64d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      jSONArray0.getByteValue(1219);
      Object object0 = new Object();
      jSONArray0.getJSONArray((byte)0);
      assertEquals(1502, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      mockThaiBuddhistDate0.getMockedClassName();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1501);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@1dc5fc5a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1470;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(1470);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1470, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.set(1501, mockThaiBuddhistDate0);
      jSONArray0.set((-1), (Object) null);
      jSONArray0.getByteValue(1425);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)0, "org.springframework.util.LinkedCaseInsensitiveMap");
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.springframework.util.LinkedCaseInsensitiveMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = new Integer(989);
      int int0 = jSONArray0.indexOf("@type");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-853), mockJapaneseDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONArray0.fluentSet(1, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      int int0 = (-1780);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1780));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1083, (Object) null);
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(1084, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(set0);
      JSONArray jSONArray4 = jSONArray3.fluentSet(1477, "1.2.46");
      jSONArray4.getDouble(1445);
      assertEquals(1478, jSONArray3.size());
      assertEquals(1478, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONArray0.lastIndexOf(propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(555, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 555, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, jSONArray1);
      jSONArray0.spliterator();
      jSONArray2.getObject(153, (Type) class0);
      boolean boolean0 = jSONArray1.getBooleanValue(968);
      assertEquals(990, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      jSONArray0.set(1690, (Object) null);
      long long0 = jSONArray0.getLongValue(1690);
      assertEquals(1691, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray0.set(1690, pipedInputStream0);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) null, parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1690);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.io.PipedInputStream@7814d586
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Class<Integer> class0 = Integer.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      SerializeConfig serializeConfig0 = new SerializeConfig(3099);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter3;
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter2;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeature0;
      jSONArray0.defaultLocale.getISO3Country();
      jSONArray0.set(145, simplePropertyPreFilter0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(145);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
