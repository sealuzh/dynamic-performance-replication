/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:23:25 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 1849, 1849, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1848
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[4];
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      int int0 = IOUtils.decodeUTF8(byteArray0, (-43), (-43), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((char[]) null, 2006, 2006);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((char[]) null, 2006, (-545));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, '\u0000', 2919, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("s=s>?@", (-1488), (-1488));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, (-1060), (-1060), iOUtils0.specicalFlags_singleQuotes);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[17];
      byte[] byteArray0 = IOUtils.decodeBase64("");
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 28, 28, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      char[] charArray0 = new char[8];
      charArray0[7] = '\u0083';
      charArray0[0] = '\u0083';
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, '\u0083', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      IOUtils.getChars(3, 3, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('r');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.CA, (-1287), 30, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1287
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("!PW\"");
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("!PW\"");
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars((-30L), 1409, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1284), (-1284), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1285
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.stringSize((-1999L));
      char[] charArray0 = new char[4];
      IOUtils.decodeBase64(charArray0, 1, 1);
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 236, 1231, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 236
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(76);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[4];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      uTF8Decoder0.malformedInputAction();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      IOUtils.stringSize(889L);
      uTF8Decoder0.charset();
      IOUtils.getChars((byte) (-10), 3, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      IOUtils.getChars((byte)1, (int) (byte)1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("`R,");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("=7gM$Oh5A>J");
      assertArrayEquals(new byte[] {(byte)3, (byte) (-72), (byte)12, (byte) (-1), (byte) (-13), (byte) (-95), (byte) (-1), (byte) (-1), (byte) (-55)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[14];
      IOUtils.getChars((long) '\u0000', 8, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.isValidJsonpQueryParam("Ozo.Qr+}W4WQm&m+.");
      String string0 = IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.decodeBase64(")i}=_V\"sW*RviLa", 52, 0);
      byte[] byteArray0 = IOUtils.decodeBase64(")i}=_V\"sW*RviLa");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-5), (byte)22, (byte) (-3), (byte)27, (byte) (-30), (byte)45}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('k');
      boolean boolean1 = IOUtils.isIdent('k');
      assertTrue(boolean1);
      
      boolean boolean2 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) (-2766), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("s");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483644L, (int) '\u0000', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 14, 14);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-12), (byte)17, (byte)73, (byte)53, (byte)21, (byte)89, (byte)118, (byte)25, (byte)105}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.decodeBase64(iOUtils0.CA, 20, 20);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '=';
      IOUtils.getChars((-1099L), 8, charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)25, (-1554), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1555
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[7];
      byte[] byteArray0 = new byte[14];
      byteArray0[5] = (byte)90;
      byteArray0[3] = (byte) (-59);
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, (byte)90, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int1 = IOUtils.stringSize(53);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[7];
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)90;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)90;
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, (byte)90, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = IOUtils.firstIdentifier('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-15);
      byteArray0[5] = (byte)76;
      IOUtils.decodeUTF8(byteArray0, 0, (byte)76, charArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        IOUtils.getChars((int) (byte)76, (int) (byte)76, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 75
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("-zf>?c)N3H079");
      char[] charArray0 = new char[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.decodeUTF8(byteArray0, 8, 8, charArray0);
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      // Undeclared exception!
      try { 
        IOUtils.readAll((Reader) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = IOUtils.stringSize(1000000000000L);
      assertEquals(13, int0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[0];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 63, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      char[] charArray0 = new char[17];
      int int0 = IOUtils.stringSize((-599L));
      assertEquals(1, int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      charArrayReader0.reset();
      String string1 = IOUtils.readAll(charArrayReader0);
      assertEquals("\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      char[] charArray0 = new char[8];
      charArray0[7] = '\u0083';
      charArray0[2] = '\u0083';
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, '\u0083', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils.isIdent('\u00FB');
      IOUtils.firstIdentifier('\u00FB');
      Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        IOUtils.getChars(2140277307, 480, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize(3683);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.decodeBase64("k8c;xqm6SaFUG}NXJ", 2, 2);
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      IOUtils.getChars(98, 3, charArray0);
      assertArrayEquals(new char[] {'\\', '9', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.stringSize(1000000000000L);
      String string0 = "Q7XUwHX0)YbRl)_";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("Q7XUwHX0)YbRl)_", 13, 2559);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      char[] charArray0 = new char[5];
      char[] charArray1 = new char[6];
      MockFile mockFile0 = new MockFile("@");
      IOUtils.getChars((-1247), 5, charArray1);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray1, 217, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 217
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("fastjson.compatibleWithFieldName");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-15);
      IOUtils.decodeUTF8(byteArray0, '\u0000', (byte)0, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 'L', 4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      IOUtils.isIdent('!');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.decodeBase64("ABCDEFGHIJKLMNPQRSTUVWXYZacdefghijklmnopqrstuvwxyz0123456789+", 14, 28);
      StringWriter stringWriter0 = new StringWriter(14);
      char[] charArray0 = new char[0];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        IOUtils.getChars(9999999986L, (-465), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -466
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      uTF8Decoder0.reset();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CodingErrorAction codingErrorAction1 = CodingErrorAction.REPLACE;
      uTF8Decoder1.onMalformedInput(codingErrorAction0);
      uTF8Decoder1.reset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize((-1556L));
      IOUtils.getStringProperty("i>DA('S<byx");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0083';
      charArray0[1] = '\u0083';
      IOUtils.decodeUTF8(byteArray0, 0, 1, charArray0);
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte) (-59), 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -59
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      IOUtils.stringSize(2147483645L);
      char[] charArray0 = new char[7];
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 10);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      IOUtils.close(bufferedOutputStream0);
      IOUtils.decodeUTF8(byteArray0, 10, 10, charArray0);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      char[] charArray0 = new char[19];
      charArray0[7] = '\u0083';
      charArray0[2] = '\u0083';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)92;
      IOUtils.decodeUTF8(byteArray0, 1, (byte)92, charArray0);
      IOUtils.decodeBase64("NwGU");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[0] = '=';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "-!w>c)N3H079";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[2] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 2, 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      byte[] byteArray0 = IOUtils.decodeBase64(";-#._BF?2u;7x/dM=-");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-10), (byte) (-1), (byte) (-2), (byte) (-15), (byte) (-3), (byte) (-45)}, byteArray0);
      
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.getStringProperty(";-#._BF?2u;7x/dM=-");
      boolean boolean0 = IOUtils.isValidJsonpQueryParam(";-#._BF?2u;7x/dM=-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.isIdent('\u00B3');
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-30);
      byteArray0[3] = (byte) (-125);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-30);
      char[] charArray0 = new char[9];
      charArray0[0] = '\u00B3';
      charArray0[1] = '\u00B3';
      charArray0[2] = '\u00B3';
      charArray0[3] = 'A';
      charArray0[4] = '\u00B3';
      charArray0[5] = '\u00B3';
      charArray0[6] = '\u00B3';
      charArray0[8] = '\u00B3';
      IOUtils.decodeUTF8(byteArray0, (byte)0, 2, charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-30), 1837, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1836
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.CA, 1, 63);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[7];
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)108;
      byteArray0[4] = (byte) (-32);
      IOUtils.decodeUTF8(byteArray0, 0, (byte)108, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "ABCDEFGHIJiLMNPRSTUVWXYZacdefghijklmnopqrstuvwxyz0123456789+";
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJiLMNPRSTUVWXYZacdefghijklmnopqrstuvwxyz0123456789+", 14, 46);
      char[] charArray0 = new char[0];
      IOUtils.decodeUTF8(byteArray0, 14, 14, charArray0);
      IOUtils.stringSize((long) 14);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte)9, 2, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[17];
      charArray0[0] = '\u0131';
      IOUtils.isIdent('\u0131');
      IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      String string0 = IOUtils.getStringProperty("'lg=M-B");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[11];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOUtils.getStringProperty("NK80SGu?8!D@Gb");
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.firstIdentifier('\u0131');
      byte[] byteArray2 = new byte[7];
      boolean boolean0 = IOUtils.firstIdentifier('\'');
      assertFalse(boolean0);
      
      int int0 = IOUtils.stringSize((-432));
      assertEquals(1, int0);
      
      boolean boolean1 = IOUtils.firstIdentifier('\u0131');
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 1, 80);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("ocEQ5OJCTG");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode((CharsetDecoder) null, byteBuffer1, charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
