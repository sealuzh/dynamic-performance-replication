/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:26:48 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("}^2Z9`3^>'");
      assertEquals((-113940309196873547L), long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("1+J{+bAd%T");
      assertEquals(5799898364113309535L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("char", classLoader0);
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("float");
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertTrue(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("|(ledlD\"A]RE");
      assertEquals(1755947027821989667L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Long long0 = new Long((-590L));
      Short short0 = TypeUtils.castToShort(long0);
      assertEquals((short) (-590), (short)short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1871L);
      Long long0 = TypeUtils.castToLong(atomicLong0);
      assertEquals(1871L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<BreakIterator> class0 = BreakIterator.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      BreakIterator breakIterator0 = TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
      assertNull(breakIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = new Double(0.0);
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short) (-1857));
      Long long0 = TypeUtils.castToLong(short0);
      Integer integer0 = TypeUtils.castToInt(long0);
      assertEquals((-1857), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short)50);
      Float float0 = TypeUtils.castToFloat(short0);
      assertEquals(50.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("net.sf.cglib.proxy.Factory");
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Byte byte0 = TypeUtils.castToByte(float0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type0, type1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("");
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass(".]Y", (ClassLoader) null, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("lemur", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "<(5=M2");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockDateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Field[] fieldArray0 = new Field[6];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "s}-,}", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(treeMap0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(3335, 3335);
      hashMap0.put("IQQU_HX]}smXLF7", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Insets insets0 = new Insets(18, 162, 162, (-827));
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(162, 162, 162, 162, 162, (-1850.8646), 162, 162, insets0, 18, 18);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.GridBagConstraints@6783cf35
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Insets insets0 = new Insets((-2119), (-2084482306), (-4267), (-2073758090));
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2084482306), 419, 419, (-1116), (-1088.0), (-2084482306), (-4267), (-2084482306), insets0, 18, 1407);
      String string0 = TypeUtils.castToString(gridBagConstraints0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Insets insets0 = new Insets((-2165), (-2165), (-1008), (-2435));
      Class<Float> class0 = Float.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) insets0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"code\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0.classLoader, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@94446f01
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, hashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, map0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("3");
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("SQLState");
      assertEquals("SQLState", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, (String) null, fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) class0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, class0);
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) identityHashMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, true, (PropertyNamingStrategy) null);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(concurrentHashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Float> class0 = Float.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Font", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("java.awt.Color", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertEquals("class java.awt.Color", class0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Type[] typeArray0 = new Type[2];
      Class<Long> class1 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      IllegalMonitorStateException illegalMonitorStateException0 = TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(illegalMonitorStateException0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@749d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      Class<AtomicInteger> class1 = AtomicInteger.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Short> class0 = Short.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      EnumDeserializer enumDeserializer0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(enumDeserializer0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("9nV,/F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("'4H5%M};");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Constructor<Rectangle>[] constructorArray0 = (Constructor<Rectangle>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("I?]K+**4I6_>2W");
      assertEquals(5357177099364990510L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.isHibernateInitialized(class0);
      LinkageError linkageError0 = new LinkageError();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "ha", linkageError0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Collection collection0 = TypeUtils.createCollection(type0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [I", class1.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getClass(type0);
      assertEquals("class [Z", class1.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("76l").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [C", class1.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "KriCp93.g3.", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.unwrapOptional(class0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Double> class0 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.beans.Transient", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.beans.Transient -> java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("hashCode", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Rectangle");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, linkedHashMap0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("c", sQLDataException0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLWarning0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(mockIllegalArgumentException0);
      Class<Float> class1 = Float.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(map0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, (ParserConfig) null);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], type0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Float float0 = new Float(0.0F);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "%w@h)&", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("java.com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer");
      assertEquals("java.com.alibaba.fastjson.parser.deserializer.contextobjectdeserializer", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("k1KWt8%_Zq>0}Y1u");
      assertEquals("k1kwt8%_ZQ>0}Y1U", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Insets insets0 = new Insets(512, 512, 26, 32);
      Class<Collator> class0 = Collator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) insets0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.Collator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Class<Calendar> class1 = Calendar.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      long[] longArray0 = new long[2];
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      SecurityException securityException0 = new SecurityException("vLT1]V|Pd", illegalThreadStateException0);
      SQLException sQLException0 = new SQLException(securityException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("#tDD62i$", "#tDD62i$", 22, longArray0, sQLException0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) batchUpdateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) propertyNamingStrategy0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<BigInteger> class1 = BigInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("illegal stat, textLength is zero", "illegal stat, textLength is zero", 1);
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) treeSet0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = TypeUtils.cast((Object) outOfMemoryError0, class0, parserConfig0);
      assertEquals("java.lang.OutOfMemoryError", object0.toString());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      WeakHashMap<InternalError, SQLTimeoutException> weakHashMap0 = new WeakHashMap<InternalError, SQLTimeoutException>();
      Class<Collator> class0 = Collator.class;
      Collator collator0 = TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      assertNull(collator0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "c", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.Collator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Collator collator0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(collator0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("*.z[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : *.z[
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(21);
      Boolean boolean0 = TypeUtils.castToBoolean(atomicInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("'");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedHashMap<StackTraceElementDeserializer, BatchUpdateException> linkedHashMap0 = new LinkedHashMap<StackTraceElementDeserializer, BatchUpdateException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("_vb5I+t]{6?E$+ &HM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_vb5I+t]{6?E$+ &HM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(1001);
      Integer integer0 = TypeUtils.castToInt(atomicInteger0);
      assertEquals(1001, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<Properties, PropertyProcessableDeserializer> hashMap0 = new HashMap<Properties, PropertyProcessableDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("*)z%eq-b+1v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : *)z%eq-b+1v
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Long long0 = TypeUtils.castToLong(bigDecimal0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("4T1]=srx1h%s=olT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 4T1]=srx1h%s=olT
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+yW3Y4#X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-1443623647));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -1443623647
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Double double0 = new Double(3.0);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(double0);
      assertEquals("1970-01-01 00:00:00.003", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Time time0 = new Time((-243L));
      Timestamp timestamp0 = TypeUtils.castToTimestamp(time0);
      assertEquals("1969-12-31 23:59:59.757", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Insets insets0 = new Insets(13, 13, 13, 13);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=13,left=13,bottom=13,right=13]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(166);
      Time time0 = TypeUtils.castToSqlTime(atomicInteger0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertEquals("20:21:21", time0.toString());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Date date0 = new Date((-1L));
      Time time0 = TypeUtils.castToSqlTime(date0);
      assertEquals("23:59:59", time0.toString());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("getMetaClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getMetaClass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("getSuppressed");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.MessageFormat@ce10920a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Double double0 = new Double(3.0);
      Date date0 = TypeUtils.castToSqlDate(double0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("hIm<SG[v['XoR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : hIm<SG[v['XoR
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("CAUSE_CAPTION");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"CAUSE_CAPTION\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Short short0 = new Short((short)51);
      java.util.Date date0 = TypeUtils.castToDate(short0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1365);
      Locale locale0 = jSONReaderScanner0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11, 11, 11, 11, 11, 2668);
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("writeEnumUsingName");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Double double0 = TypeUtils.castToDouble(bigDecimal0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Long long0 = new Long((-2499L));
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-2499.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("*.z[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedHashMap<BitSet, Float> linkedHashMap0 = new LinkedHashMap<BitSet, Float>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("1+J{+bAd%T");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1+J{+bAd%T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Long long0 = new Long(1550);
      Short short0 = TypeUtils.castToShort(long0);
      assertEquals((short)1550, (short)short0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("C]*5:");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.InterruptedException: C]*5:
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Nkh?dT#L>nd(`b<B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Nkh?dT#L>nd(`b<B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("");
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("#I^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#I^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Short short0 = new Short((short) (-2943));
      Byte byte0 = TypeUtils.castToByte(short0);
      assertEquals((byte) (-127), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.GridBagConstraints@ec6c3e8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("5");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "xs@!o", (Class<Collator>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[I");
      assertTrue(class0.isArray());
  }
}
