/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:22:47 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import okio.Buffer;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.toString();
      ByteString byteString0 = hashingSource0.hash();
      byteString0.base64Url();
      byteString0.EMPTY.hex();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)0;
      byteString0.indexOf(byteArray0, (-4709));
      byteString0.write(buffer0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.hmacSha512(byteString1);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.utf8();
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=cf83e0357eefb8bdf0542850d66d8007d620e4050b5705dc83f4a920d36ce9ce47d0d03c5d85f2b0ff8308d2877eec2f63b930bd47407a80a538327af927da3e]", string0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.lastIndexOf(byteArray0, 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)60;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)60;
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("<dgUXMdo_24RzJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.hex();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("f[Io");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteString0.EMPTY.hashCode();
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-119);
      byteString0.endsWith(byteArray0);
      byteString0.toString();
      byteString0.internalArray();
      // Undeclared exception!
      try { 
        byteString0.getByte((byte) (-42));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -42
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.utf8 = "";
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.getByte(71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 71
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("f[Io");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteString0.EMPTY.hashCode();
      byteArray0[2] = (byte) (-42);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString1.indexOf(byteArray0, (-433));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha1(gzipSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pipe pipe0 = new Pipe(1390L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)110;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 14);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-11);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 101, 0);
      byteArrayInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      byteArrayInputStream0.reset();
      ByteString byteString0 = ByteString.read(dataInputStream0, 0);
      byteString0.utf8();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 64, 90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("");
      ByteString byteString2 = byteString1.substring((int) (byte)0, (int) (byte)0);
      byteString0.lastIndexOf(byteString1, 2);
      byteString0.equals(byteString2);
      byteString1.EMPTY.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString2.getByte((-109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -109
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.equals("s == null");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("<dgUXUdo_24RzJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      Sink sink0 = hashingSink1.delegate();
      HashingSink hashingSink2 = HashingSink.md5(sink0);
      ByteString byteString1 = hashingSink2.hash();
      ByteString byteString2 = byteString1.EMPTY.md5();
      byteString1.compareTo(byteString0);
      byteString1.lastIndexOf(byteString0, 1);
      ByteString byteString3 = ByteString.decodeBase64("");
      ByteString byteString4 = byteString1.md5();
      byteString4.EMPTY.endsWith(byteString2);
      String string0 = byteString4.toString();
      assertEquals("[hex=59adb24ef3cdbe0297f05b395827453f]", string0);
      
      ByteString byteString5 = byteString0.hmacSha512(byteString4);
      ByteString byteString6 = byteString5.toAsciiLowercase();
      byteString1.base64();
      HashingSink.hmacSha512(hashingSink2, byteString5);
      byteString6.rangeEquals((int) (byte)0, byteString0, (int) (byte)0, (-32));
      ByteString.encodeUtf8("ym~-b15b2bG5zxr<th");
      ByteString byteString7 = byteString3.toAsciiUppercase();
      byteString7.hmacSha512(byteString2);
      byteString0.endsWith(byteArray0);
      byteString5.equals(byteString0);
      assertTrue(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("endIndex > string.length: ");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)47;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotSame(byteString0, byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      hashingSink0.delegate();
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString1 = hashingSink1.hash();
      ByteString byteString2 = byteString1.md5();
      byteString2.compareTo(byteString1);
      byteString1.lastIndexOf(byteString0, (-1));
      ByteString byteString3 = ByteString.decodeBase64("");
      ByteString byteString4 = byteString3.md5();
      byteString3.endsWith(byteString0);
      byteString3.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString5 = realBufferedSource0.readByteString();
      byteString5.hmacSha512(byteString4);
      ByteString byteString6 = realBufferedSource0.readByteString();
      ByteString byteString7 = byteString6.toAsciiLowercase();
      byteString2.base64();
      ByteString byteString8 = hashingSink1.hash();
      HashingSink.hmacSha512(hashingSink1, byteString8);
      ByteString byteString9 = hashingSink1.hash();
      int int0 = 54;
      byteString9.rangeEquals(54, byteString6, 95, (-1));
      ByteString.encodeUtf8("ZL}");
      byteString8.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString7.hmacSha512(byteString6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)105;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.sha1();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("f[Io");
      ByteString.of(byteBuffer0);
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)58;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.equals(byteString0);
      byteString0.hmacSha256(byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      Sink sink0 = hashingSink1.delegate();
      HashingSink hashingSink2 = HashingSink.md5(sink0);
      ByteString byteString1 = hashingSink2.hash();
      ByteString byteString2 = byteString1.EMPTY.md5();
      int int0 = byteString1.compareTo(byteString0);
      byteString1.lastIndexOf(byteString0, (-1));
      ByteString byteString3 = ByteString.decodeBase64("");
      ByteString byteString4 = byteString1.md5();
      byteString4.EMPTY.endsWith(byteString2);
      String string0 = byteString4.toString();
      assertEquals("[hex=2eaee24e2eceee02ee202eee282e42e2]", string0);
      
      ByteString byteString5 = byteString0.hmacSha512(byteString4);
      ByteString byteString6 = byteString5.toAsciiLowercase();
      byteString1.base64();
      HashingSink.hmacSha512(hashingSink2, byteString5);
      byteString6.EMPTY.write(buffer0);
      byteString6.rangeEquals((int) (byte) (-22), byteString0, (int) (byte) (-22), (-32));
      ByteString byteString7 = ByteString.encodeUtf8("ym~-b15b2bG5zxr<th");
      ByteString byteString8 = byteString3.toAsciiUppercase();
      byteString8.hmacSha512(byteString2);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      int int1 = byteString3.lastIndexOf(byteString5, 159);
      assertTrue(int1 == int0);
      assertNotSame(byteString5, byteString6);
      
      byteString1.lastIndexOf(byteArray0);
      ByteBuffer byteBuffer0 = byteString8.asByteBuffer();
      ByteString byteString9 = ByteString.of(byteBuffer0);
      assertFalse(byteString9.equals((Object)byteString7));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)51;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString2 = byteString0.EMPTY.hmacSha1(byteString1);
      ByteString byteString3 = byteString1.EMPTY.toAsciiLowercase();
      Object object0 = new Object();
      byteString3.EMPTY.equals(object0);
      byteString2.EMPTY.base64();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      Sink sink0 = hashingSink1.delegate();
      HashingSink hashingSink2 = HashingSink.md5(sink0);
      ByteString byteString1 = hashingSink2.hash();
      ByteString byteString2 = byteString1.EMPTY.md5();
      ByteString byteString3 = new ByteString(byteArray0);
      int int0 = byteString3.compareTo(byteString1);
      int int1 = byteString0.lastIndexOf(byteString1, (int) (byte)0);
      assertTrue(int1 == int0);
      
      boolean boolean0 = byteString2.equals(byteString1);
      assertTrue(boolean0);
      
      ByteString byteString4 = byteString1.hmacSha256(byteString1);
      int int2 = byteString0.indexOf(byteString3);
      assertEquals(0, int2);
      assertFalse(byteString3.equals((Object)byteString4));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = ".%L/Vp%+";
      // Undeclared exception!
      try { 
        byteString0.substring(62, 58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(8)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)109;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.utf8();
      byteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)85, (int) (byte)85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=85 byteCount=85
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      Sink sink0 = hashingSink1.delegate();
      HashingSink hashingSink2 = HashingSink.md5(sink0);
      ByteString byteString1 = hashingSink2.hash();
      ByteString byteString2 = byteString1.EMPTY.md5();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.compareTo(byteString1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString4 = realBufferedSource0.readByteString(0L);
      byteString4.indexOf(byteArray0);
      byteString2.base64Url();
      byteString1.hashCode();
      ByteString byteString5 = byteString4.sha256();
      assertNotSame(byteString5, byteString2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("");
      byteString1.indexOf(byteArray0, (-32));
      byteString1.hmacSha1(byteString0);
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteString0.base64();
      byteString2.EMPTY.startsWith(byteString0);
      // Undeclared exception!
      try { 
        byteString2.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("");
      byteString1.substring((int) (byte)0, (int) (byte)0);
      ByteString.encodeUtf8("");
      byteString1.toAsciiUppercase();
      byteString1.base64();
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.getByte(97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-117);
      byteString0.EMPTY.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("byteCount < 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: byteCount < 0: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.Buffer");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "endIndex > string.length: ");
      byteString0.write(printStream0);
      byteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-98);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 65533);
      byteArrayInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      byteArrayInputStream0.reset();
      try { 
        ByteString.read(sequenceInputStream0, 852);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("in == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("endIndex > string.length: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = "HmacSHA512";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("HmacSHA512");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: H
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      ByteString byteString2 = ByteString.encodeUtf8("");
      ByteString byteString3 = byteString0.toAsciiUppercase();
      byteString0.base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      int int0 = byteString1.indexOf(byteArray1);
      assertEquals((-1), int0);
      
      byteString2.base64Url();
      assertTrue(byteString2.equals((Object)byteString1));
      
      byteString0.sha256();
      assertSame(byteString0, byteString3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)19;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.substring(1506, 1506);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(1)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("");
      ByteString byteString2 = byteString1.substring((int) (byte)0, (int) (byte)0);
      byteString0.lastIndexOf(byteString1, 2);
      byteString1.base64();
      byteString2.hmacSha1(byteString0);
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      hashingSink1.flush();
      ByteString byteString1 = hashingSink1.hash();
      byteString0.base64();
      String string0 = byteString1.toString();
      assertEquals("[hex=c28eeee2eee2e8ee2e242820e66e800ee620e4020e2ee2ec8e24ae2eee6ceece4ee0eeec2e8222e0228ee8e28eeeec226eeeeeee4e4eea8ea2e8e2ea2e2eeaee]", string0);
      
      ByteString byteString2 = hashingSink0.hash();
      byteString2.internalArray();
      Charset.defaultCharset();
      ByteString byteString3 = byteString1.substring(39, 57);
      assertEquals(18, byteString3.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" =IulUql");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.delegate();
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      ByteString byteString1 = byteString0.md5();
      byteString0.equals(byteString1);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
  }
}
