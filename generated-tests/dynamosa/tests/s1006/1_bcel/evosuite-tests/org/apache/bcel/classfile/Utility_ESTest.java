/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:03:15 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.ObjectInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-124);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1116), (byte) (-124));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%0\t0", string0);
      
      String string1 = Utility.getSignature("iinc\t\t%0\t0");
      assertEquals("Liinc;", string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte)23;
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte)23;
      byteArray1[8] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 127, (-596), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(447, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.getSignature("");
      Utility.setBit(224, 81);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)113;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = new byte[0];
      Utility.equals(byteArray2, byteArray2);
      boolean boolean0 = false;
      String string0 = "x%bFmQ_c-ge>`B\"LV";
      try { 
        Utility.methodSignatureToString("}22+Dmn", (String) null, "x%bFmQ_c-ge>`B\"LV", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }22+Dmn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = new Integer(2);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.convertString(",N5=xX5ZyJ\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("-&2oAv`9XjL0v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -&2oAv`9XjL0v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("PeuF~[#+Rq'r;vqG8\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[#+Rq'r;vqG8\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2086, 2086);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 48, false, ',');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("fstore_3");
      assertEquals("Lfstore_3;", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("istore_2");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)121;
      objectArray0[1] = (Object) "istore_2";
      objectArray0[2] = (Object) "istore_2";
      objectArray0[3] = (Object) (byte)61;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) (byte) (-39);
      objectArray0[6] = (Object) (byte)121;
      objectArray0[7] = (Object) "istore_2";
      Utility.printArray(objectArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)20;
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("istore", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `istore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("lrem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lrem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "&";
      try { 
        Utility.methodSignatureArgumentTypes("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-71);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$b9$A", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$A$A$A$A$A$b9$A";
      stringArray0[1] = "$A$A$A$A$A$b9$A";
      stringArray0[4] = "$A$A$A$A$A$b9$A";
      stringArray0[5] = "$A$A$A$A$A$b9$A";
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char char0 = 'w';
      Utility.isJavaIdentifierPart('w');
      byte byte0 = (byte) (-80);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 254);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    areturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte)113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      short short0 = Utility.searchOpcode("laload");
      assertEquals((short)47, short0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)23;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.format((byte)0, 59, false, 'I');
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII0", string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      byte[] byteArray0 = Utility.decode("float", false);
      int int0 = Utility.clearBit(101, 6);
      assertEquals(37, int0);
      
      Object object1 = new Object();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t", "\t", "\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.searchOpcode("fsub");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-88);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$e8$a8", string0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid method signature: ");
      assertEquals("int", string1);
      
      String string2 = Utility.replace("ibVd*OA_", "#MLm_{Fq", "dreturn");
      assertEquals("ibVd*OA_", string2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Clone Not Supported", true);
      String string0 = "";
      String string1 = "GVxM*";
      Utility.accessToString((-612));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)14;
      Utility.encode(byteArray0, false);
      String string2 = "~mMR^2b";
      int int0 = 8;
      LocalVariable[] localVariableArray0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("9Djvk-fGik:zh2c4G", "GVxM*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"GVxM*\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2532), 234);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("Y3q>", "Y3q>", true);
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("Y3q>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y3q>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.replace("9MB&e3HZoXm@5&", ">\t", "void");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)95;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)95;
      byteArray1[5] = (byte)108;
      byteArray1[6] = (byte)95;
      byteArray1[7] = (byte)95;
      byteArray1[8] = (byte)95;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_acmpne\t\t#24415", string1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      short short0 = Utility.searchOpcode("B");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.classOrInterface(58);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      Object object1 = new Object();
      Object object2 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", offset delta=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , offset delta=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "R";
      // Undeclared exception!
      try { 
        Utility.signatureToString("R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.compactClassName("2UK4^STE", "2UK4^STE", false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "2UK4^STE";
      String string0 = Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte)119;
      Utility.equals(byteArray1, byteArray0);
      String string1 = Utility.replace("java.lang.Object@701ad1a, 2UK4^STE", "impdep2", "tn.\"#X&LiT=G4");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Utility.convertString("dsub");
      assertEquals("dsub", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-71);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.compactClassName("if_icmpne");
      assertEquals("if_icmpne", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-71);
      String string1 = Utility.accessToString((int) (byte)0, true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("k9pk", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (-4218));
      try { 
        Utility.typeOfSignature("bcel.maxcached.size");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bcel.maxcached.size
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)90;
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%50", string0);
      
      Utility.isSet(187, 166);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "Fnr_+E.BsWUMT";
      String string1 = "LocalVariable";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, false);
      Utility.decode("jsr_w", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "org.apache.bcel.classfile.Method$1", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Utility.fillup("u#m", 0, true, '*');
      Utility.printArray((Object[]) null, false, false);
      Utility.compactClassName("");
      Utility.isJavaIdentifierPart('*');
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("(", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[5] = (byte) (-25);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "q&v_%\" MA~n";
      stringArray0[1] = "\r";
      stringArray0[2] = "q&v_%\" MA~n";
      stringArray0[3] = "q&v_%\" MA~n";
      stringArray0[4] = "q&v_%\" MA~n";
      stringArray0[5] = "q&v_%\" MA~n";
      stringArray0[6] = "tableswitch";
      stringArray0[7] = "q&v_%\" MA~n";
      stringArray0[8] = "q&v_%\" MA~n";
      String string0 = Utility.methodTypeToSignature("q&v_%\" MA~n", stringArray0);
      assertEquals("(Lq&v_%\";L;Lq&v_%\";Lq&v_%\";Lq&v_%\";Lq&v_%\";Ltableswitch;Lq&v_%\";Lq&v_%\";)Lq&v_%\";", string0);
      
      String string1 = Utility.methodSignatureToString("(Lq&v_%\";L\r;Lq&v_%\";Lq&v_%\";Lq&v_%\";Lq&v_%\";Ltableswitch;Lq&v_%\";Lq&v_%\";)Lq&v_%\";", "tableswitch", "bRS2;DbvuN`Mb)6C", true);
      assertEquals("bRS2;DbvuN`Mb)6C q&v_%\" tableswitch(q&v_%\" arg1, \r arg2, q&v_%\" arg3, q&v_%\" arg4, q&v_%\" arg5, q&v_%\" arg6, tableswitch arg7, q&v_%\" arg8, q&v_%\" arg9)", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[3] = (byte) (-68);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b7$A$A$bc$A", string0);
      
      byte[] byteArray1 = Utility.decode("$b7$A$A$bc$A", false);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte) (-68), (byte)0}, byteArray1);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "-&2oAv`9XjL0v";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (-1324));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Utility.encode(byteArray0, true);
      Utility.replace("3ICf", "!O%JH\"_", "7");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "astore_1";
      byte[] byteArray0 = Utility.decode("astore_1", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 246, (-1996191921));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type annotation can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-4037), false);
      try { 
        Utility.typeOfSignature("ifle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifle
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 6;
      Utility.isSet(6, 6);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.decode("^L]t@r(J*S#}NTU8P", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("Bogus", true);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.ConstantString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ConstantString'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-65);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Invalid signature: `", false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.getSignature("aastore");
      assertEquals("Laastore;", string1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.setBit(4, 4);
      try { 
        Utility.methodSignatureReturnType("N", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "-&2oAv`9XjL0v";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "-&2oAv`9XjL0v";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      Object object3 = new Object();
      objectArray0[3] = object1;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)94;
      String string0 = Utility.format((byte) (-107), (byte)0, true, ',');
      assertEquals("-107", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.getSignature("-Qdf;8`+`");
      assertEquals("L-Qdf;8`+`;", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-48);
      byteArray1[1] = (byte) (-48);
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-86), (int) (byte) (-48), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ";1SHwD{#blOEdFgq";
      try { 
        Utility.typeOfSignature(";1SHwD{#blOEdFgq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;1SHwD{#blOEdFgq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      int int0 = 159;
      Utility.clearBit(106, (byte)0);
      Utility.isJavaIdentifierPart('L');
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)0);
      try { 
        Utility.methodSignatureReturnType("q'jS*=}~slHP2/yc/v", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `q'jS*=}~slHP2/yc/v'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)26;
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-117));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode(">\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Invalid method signature: ", "invokedynamic", false);
      Utility.compactClassName("m", "Invalid method signature: ", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)52;
      byteArray0[0] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte)115, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 71;
      Utility.classOrInterface(71);
      Utility.getSignature("aastore");
      String string0 = "(0kny.3%4v3";
      try { 
        Utility.methodSignatureArgumentTypes("(0kny.3%4v3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0kny.3%4v3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Clone Not Supported", true);
      String string0 = "";
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      Utility.convertString("xl@kmO8]C=N>S|SFw");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("ifnull");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("=Y*a^5Q'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Y*a^5Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      Object object1 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("i2d", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = Utility.decode("M$CDA>\"", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, (-1617508259));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Oyk1PF", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oyk1PF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-97);
      Utility.isJavaIdentifierPart('v');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)50;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-80);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-62), 254);
      try { 
        Utility.methodSignatureReturnType("0:    areturn\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    areturn
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(91);
      Utility.classOrInterface((-4806));
      Utility.isJavaIdentifierPart('C');
      String string0 = "G+DVa_s'6YVM-6|0Az";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G+DVa_s'6YVM-6|0Az", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G+DVa_s'6YVM-6|0Az'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)113;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)68;
      byteArray1[6] = (byte)113;
      Utility.compactClassName("Dont call getValueDouble() on a non DOUBLE ElementValue", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (-821), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.isSet(6, 6);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      Utility.clearBit(6, (byte)50);
      Object object0 = new Object();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 169);
      Utility.compactClassName("0:    aaload\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)50;
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("0:    aaload\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aaload
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)97;
      Utility.accessToString(0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.compactClassName("95;>a%U-", "95;>a%U-", true);
      Object object0 = new Object();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        Utility.typeOfSignature("95;>a%U-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 95;>a%U-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[3] = (byte) (-122);
      byteArray0[1] = (byte) (-109);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-122);
      objectArray0[1] = (Object) (byte) (-122);
      objectArray0[2] = (Object) (byte) (-122);
      objectArray0[3] = (Object) (byte) (-109);
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte) (-109);
      objectArray0[6] = (Object) (byte) (-109);
      Utility.printArray(objectArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), 83);
      Utility.compactClassName("_DX0D|bx", false);
      Utility.getSignature("f3^=}\"77tl 6i^&y");
      try { 
        Utility.typeOfMethodSignature("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")0Su7+nnC,;";
      stringArray0[1] = ")0Su7+nnC,;";
      stringArray0[2] = ")0Su7+nnC,;";
      stringArray0[3] = ")0Su7+nnC,;";
      Utility.methodTypeToSignature(")0Su7+nnC,;", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass(")0Su7+nnC,;");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Utility.getSignature("\t");
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-79), (int) (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("MR'#-ofh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MR'#-ofh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.typeOfSignature("IvA+BI)^O16u%@8Y+");
      Integer integer0 = new Integer((byte)10);
      assertEquals(10, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = null;
      int int0 = 244;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1311), 244);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)108;
      byteArray0[14] = (byte)108;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-2082), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    idiv
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[2] = (byte) (-29);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-68);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.fillup("I", (byte) (-68), false, '%');
      assertEquals("I", string1);
      
      String string2 = Utility.accessToString(0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("|A", stringArray0);
      assertEquals("()L|A;", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString("astore_2");
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 5302);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+m:B R7*;(*x)jA1/Np");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: m:B R7*;(*x)jA1/Np
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)113;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)113;
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$Hqq$A$Aq$A", string0);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-36);
      byte byte0 = (byte)48;
      byteArray0[3] = (byte)48;
      byte byte1 = (byte)18;
      byteArray0[4] = (byte)18;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)48;
      objectArray0[1] = (Object) "$84$ba$dc0$S";
      objectArray0[2] = (Object) (byte)48;
      objectArray0[3] = (Object) (byte)48;
      objectArray0[4] = (Object) (byte)48;
      objectArray0[5] = (Object) "$84$ba$dc0$S";
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2313, (int) (byte) (-70), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (-1008));
      Utility.compactClassName(".c1&_4&D{u", false);
      Utility.getSignature("rd,eP_y&uAkn%N&");
      try { 
        Utility.typeOfMethodSignature("kriKr%`Is~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kriKr%`Is~0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.decode(")>=Sj@T.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.replace("9MB&e3HZoXm@5&", ">\t", "void");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "!";
      Utility.searchOpcode("!");
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-88);
      Utility.accessToString((int) (byte) (-88), true);
      try { 
        Utility.methodSignatureReturnType("oL6LHE~-%^ E2'9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `oL6LHE~-%^ E2'9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")0Su7+nnC,;", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$v0Su7$xnnC$y$3b", string0);
      
      Object object0 = new Object();
      Utility.replace("u1|+_M!\"AVYgv[GL<i", "$v0Su7$xnnC$y$3b", "u1|+_M!\"AVYgv[GL<i");
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)26;
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-117));
      assertEquals("0:    f2i\n1:    iload_0\n", string0);
      
      short short0 = Utility.searchOpcode("wide");
      assertEquals((short)196, short0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.getSignature("char");
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("Y3q>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y3q>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 79;
      Utility.isSet(79, 79);
      String string0 = "w~5h7_<M@\"qT]m";
      Utility.compactClassName("w~5h7_<M@\"qT]m", false);
      int int1 = (-2412);
      Utility.setBit(79, (-2412));
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(1048655);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.searchOpcode(">\t");
      byte[] byteArray0 = Utility.decode("|Af%:n)}kJH.=", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit((byte) (-69), (byte)50);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-69), (byte) (-69), localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("if_icmpne", "if_icmpne", "", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      String string1 = Utility.classOrInterface(60);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('S');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      assertEquals("0:    monitorenter\n1:    monitorenter\n2:    monitorenter\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c2 c2 c2", string1);
      
      Utility.replace("c2 c2 c2", "0:    monitorenter\n1:    monitorenter\n2:    monitorenter\n", "c2 c2 c2");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.accessToString((int) (byte) (-62));
      assertEquals("private volatile transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.getSignature("freturn");
      assertEquals("Lfreturn;", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("s>B");
      assertEquals("s>B", string0);
      
      String string1 = Utility.convertString("if_icmpge");
      assertEquals("if_icmpge", string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.isSet(6, 6);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byte byte0 = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-62);
      objectArray0[1] = (Object) (byte) (-62);
      objectArray0[2] = (Object) (byte) (-62);
      objectArray0[3] = (Object) null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 254, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.methodSignatureReturnType("ZGJ-~fv<+dj]");
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)108;
      Utility.encode(byteArray0, false);
      Utility.encode(byteArray0, false);
      Object object2 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)47, (int) (byte)108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of names must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      Utility.isJavaIdentifierPart('k');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (int) (byte) (-101), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*|FaWo");
      byte[] byteArray1 = Utility.decode("fj", false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1239), (-1603));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-17);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("c8 ef", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("f2d");
      assertEquals("Lf2d;", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-74);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("astore_3", "astore_3", "astore_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("e7 e7 e7 e7", string0);
      
      String string1 = Utility.getSignature("astore_3");
      assertEquals("Lastore_3;", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("Ldsub;V", false);
      // Undeclared exception!
      Utility.replace("z", "", "");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      Utility.clearBit(63, (-1));
      Utility.accessToString((-1), false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-65);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type annotation can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Utility.compactClassName("6~GR");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "6~GR";
      objectArray0[1] = (Object) "6~GR";
      objectArray0[2] = (Object) "6~GR";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "6~GR";
      objectArray0[5] = (Object) "6~GR";
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Utility.signatureToString("DaH_<", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.compactClassName("Y3q>", "Y3q>", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)31;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 3, 3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureToString("-&2oAv`90XjL0v", "4Hm&phi", "impdep2", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -&2oAv`90XjL0v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[3] = (byte)69;
      try { 
        Utility.typeOfSignature("=Gd.Ew}S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Gd.Ew}S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("[\"R}3-@D)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"R}3-@D)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      String string0 = Utility.convertString("K '8");
      assertEquals("K \\'8", string0);
      
      Utility.format((-2092), (-2092), true, '0');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)41;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("5_$Gb$g$v", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte byte0 = (byte) (-43);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byte byte1 = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)13;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-48);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-48), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    nop
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "RH.MPf>8eL";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P$94$94", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P$94$94'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.isJavaIdentifierPart('&');
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-108);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Fnr_+E.BsWUMT", false);
      Utility.replace("float", "lookupswitch", "j");
      Object object3 = new Object();
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = Utility.clearBit((-1859), (-1859));
      assertEquals((-536872771), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (int) (byte) (-79));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), 171, true);
      assertEquals("0:    daload\n1:    l2d\n2:    faload\n3:    <illegal opcode>\n4:    ifge\t\t#-3014\n7:    <illegal opcode>\n8:    i2b\n", string0);
      
      short short0 = Utility.searchOpcode(" uG{3}52DSBF");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.signatureToString("S'_mOx`,?k*", false);
      Object object1 = new Object();
      Object object2 = new Object();
      ConstantPool constantPool0 = null;
      int int0 = 194;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byte byte0 = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, (int) (byte)108, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer integer0 = new Integer((-1513));
      Utility.convertString("!N3.S7Hi+s0");
      try { 
        Utility.typeOfMethodSignature("!N3.S7Hi+s0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !N3.S7Hi+s0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+", "+", "+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("(class_index = ", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), 224);
      Utility.getSignature("(class_index = ");
      String string0 = Utility.compactClassName("\tdefault = ", false);
      String string1 = Utility.compactClassName("\tdefault = ");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("DLnzO^E`T#]UT0c/fe", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 795, (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{JB/4G#_!L';*M");
      byte[] byteArray0 = Utility.decode("XD8D[KR =.tq*+@Q%", false);
      assertEquals(17, byteArray0.length);
      
      int int0 = Utility.clearBit(278, 278);
      assertEquals(278, int0);
      
      Object object0 = new Object();
      String string0 = Utility.methodSignatureReturnType("Byte code error: ");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Fnr_+E.BsWUMT", false);
      Utility.replace("areturn", "float", "areturn");
      Object object0 = new Object();
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "lookupswitch";
      objectArray0[1] = (Object) "Fnr_+E.BsWUMT";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) "lookupswitch";
      objectArray0[4] = (Object) (byte) (-110);
      Utility.printArray(objectArray0, false, false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-1421), (-946), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("areturn", "%*I9>U", "r {FHn8c(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.accessToString(2);
      assertEquals("private", string0);
      
      int int0 = Utility.clearBit(2, 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 50;
      char char0 = 's';
      Utility.format(50, 50, false, 's');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("ssssssssssssssssssssssssssssssssssssssssssssssss50");
      Utility.isJavaIdentifierPart('A');
      try { 
        Utility.methodSignatureReturnType("ssssssssssssssssssssssssssssssssssssssssssssssss50");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ssssssssssssssssssssssssssssssssssssssssssssssss50'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short short0 = Utility.searchOpcode("!");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
      
      String string1 = Utility.compactClassName("", "byte", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object object0 = new Object();
      Utility.searchOpcode("laload");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)19;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 6;
      Utility.isSet(6, 6);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_MethodHandle[15](reference_kind = 122, reference_index = 14371)}", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.convertString("K '8");
      assertEquals("K \\'8", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)19;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 139, (int) (byte)19, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)108;
      byteArray0[14] = (byte)108;
      byteArray0[2] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-2082), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    idiv
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "Y3\\q>";
      Utility.compactClassName("Y3q>", "Y3q>", true);
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-9), (int) (byte) (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+#OAT'g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #OAT'g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(171);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.accept(emptyVisitor1);
      try { 
        Utility.typeOfSignature("MH75aEt(g{yh3n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MH75aEt(g{yh3n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)88;
      Utility.typeOfSignature("J#O (eRz9h");
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Utility.methodSignatureArgumentTypes("P&XJ-7MkDLCY!|Ej");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P&XJ-7MkDLCY!|Ej
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("daload");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Ldaload;";
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.encode(byteArray0, false);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-110));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 00 00 00 00 00 00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00 00 00 00 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "+,CfZ6L?yHAlJj";
      stringArray0[1] = "byte";
      stringArray0[2] = "byte";
      stringArray0[3] = "ifnonnull";
      stringArray0[4] = "byte";
      Utility.methodTypeToSignature("byte", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "$Tk{IS)xzzB", "+,CfZ6L?yHAlJj", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = Utility.isJavaIdentifierPart('v');
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 249, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4864. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "@@-{;\"v)BH@I", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-8), (-8));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(111, (-1380));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(111);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2504), 1309);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.clearBit(275, 1309);
      assertEquals(275, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-109);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-101);
      Object object0 = new Object();
      Utility.encode(byteArray0, true);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.searchOpcode("!");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)2;
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, 585);
      try { 
        Utility.typeOfSignature("4:    fdiv\n5:    iconst_m1\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4:    fdiv
         // 5:    iconst_m1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = object1;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A, $l$8b$I$A$A$A$A$A$A$A, java.lang.Object@8dc5c77", false);
      assertEquals(48, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      short short0 = Utility.searchOpcode(")0Su7+nnC,;");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      Utility.printArray((Object[]) null, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)23;
      String string0 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      int int0 = Utility.setBit((byte)23, 74);
      assertEquals(1047, int0);
      
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)127;
      Utility.toHexString(byteArray0);
      Utility.format(386, (byte)66, true, 'X');
      Utility.compactClassName("b3 57 02 74 42 fc 42 3c 7f", "-*Fzs", false);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Utility.fillup("u#", 0, false, '*');
      Utility.printArray((Object[]) null, false, false);
      Utility.compactClassName("G8N1@");
      Utility.isJavaIdentifierPart('*');
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("(", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.compactClassName("6;");
      Utility.searchOpcode("p(c4:G/4&W");
      Utility.classOrInterface(2002);
      Utility.replace("6;", "6;", "Z&d:\u0003p:0p");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\tdefault = ";
      stringArray0[1] = "if_icmplt";
      stringArray0[2] = "6;";
      Utility.methodTypeToSignature("if_icmplt", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte) (-55), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-101);
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$88$93$9f$9b", string0);
      
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      
      byte[] byteArray1 = Utility.decode("$88$93$9f$9b", false);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-109), (byte) (-97), (byte) (-101)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      char char0 = '*';
      String string0 = "\\n";
      Utility.fillup("\n", 5, false, '*');
      Utility.printArray((Object[]) null, false, false);
      String string1 = "G8N1@";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (byte) (-109);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "74 93 00 00";
      objectArray0[4] = (Object) (byte)116;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) "74 93 00 00";
      Utility.printArray(objectArray0);
      Utility.clearBit(159, (byte)0);
      char char0 = 'U';
      Utility.isJavaIdentifierPart('U');
      Utility.accessToString((int) (byte)116);
      try { 
        Utility.methodSignatureReturnType("protected final synchronized volatile", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected final synchronized volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-45);
      Utility.compactClassName("(anonymous)", "", false);
      String string0 = "RbUfcI|E&c8$xj{";
      Utility.replace("goto", "RbUfcI|E&c8$xj{", "A\"4);f");
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")>=Sj@T.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )>=Sj@T.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("XD8D[KR =.tq*+@Q%", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("s>B");
      assertEquals("s>B", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-23808", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Utility.compactClassName("(HPf@&H10]x$qYP];K@", "(HPf@&H10]x$qYP];K@", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("(class_index = ", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$uclass_index$m$3d$m", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref0;
      byteSequence0.readUnsignedByte();
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("drem", string1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      String string0 = Utility.encode(byteArray0, true);
      Object object0 = new Object();
      Utility.encode(byteArray0, true);
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)100;
      Utility.encode(byteArray0, false);
      String string0 = "Only element values of type annotation can be built with this ctor - type specified: ";
      try { 
        Utility.typeOfSignature("6lmVKqc|S[^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6lmVKqc|S[^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.getSignature("pop2");
      assertEquals("Lpop2;", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "!";
      Utility.searchOpcode("!");
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (-1415));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('S');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("Illegally nested brackets:");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "Illegally nested brackets:";
      objectArray0[4] = (Object) "LIllegally;";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)18;
      Utility.signatureToString("J-LR;:0", false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)48, true, '|');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("fstore", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("fstore", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.getSignature("<illegal opcode>");
      assertEquals("L<illegal;", string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte) (-65);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Invalid signature: `", false);
      Utility.typeOfSignature("Invalid signature: `");
      Utility.methodSignatureReturnType("Invalid signature: `");
      Utility.isSet((-2304), (byte) (-65));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X2R>rPhHB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X2R>rPhHB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.isJavaIdentifierPart('[');
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-56);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Z=U6IYL}m7j.>", true);
      Utility.replace("Z=U6IYL}m7j.>", "S'_mOx`,?k*", "Z=U6IYL}m7j.>");
      Object object1 = new Object();
      Utility.printArray((Object[]) null, false, false);
      Utility.compactClassName("Z=U6IYL}m7j.>");
      Utility.clearBit(2616, (byte) (-56));
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)50, (-3030), (LocalVariable[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Z=U6IYL}m7j.>", " (", false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.searchOpcode("fsub");
      Utility.isJavaIdentifierPart('l');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[4] = (byte) (-126);
      Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (short)102, true);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9$!7'1&U");
      byte[] byteArray0 = new byte[4];
      Utility.encode(byteArray0, false);
      Utility.signatureToString("CONSTANT_Long", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NK6Q5)>{S%14", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NK6Q5)>{S%14'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.typeOfSignature("The FilenameFilter must not be null");
      String string0 = "o#i@";
      try { 
        Utility.typeOfMethodSignature("o#i@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o#i@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("PYlky{P:!YoHq3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PYlky{P:!YoHq3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)49;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "?,;!";
      Utility.searchOpcode("?,;!");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9)7X`}I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9)7X`}I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)68;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("YLdMrD", string0);
      
      Object object1 = new Object();
      String string1 = Utility.replace(")0su7+nnc,;", ".chc8@I?Pl{H+52", "\"");
      assertEquals(")0su7+nnc,;", string1);
      
      Object object2 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.compactClassName("k", "-A[G", false);
      assertEquals("k", string2);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.searchOpcode(">\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("S'_mOx`,?k*", false);
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, (int) (byte) (-68), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.getSignature("Ljava/lang/Object");
      assertEquals("LLjava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[2] = objectArray0[1];
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      Object object4 = new Object();
      objectArray0[6] = object4;
      Utility.printArray(objectArray0);
      Utility.compactClassName("Illegally nested brackets:", false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = ")0Su7+nnC,;";
      Utility.searchOpcode(")0Su7+nnC,;");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)23;
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.signatureToString(")0Su7+nnC,;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)0Su7+nnC,;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("E-76$v");
      assertEquals("E-76$v", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Constant[] constantArray0 = new Constant[16];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(", high = ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.searchOpcode("!");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)113;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("{}", false);
      try { 
        Utility.typeOfSignature("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-48);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-81);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-48), false);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    <illegal opcode>\n3:    dreturn\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", string0);
      
      byte byte0 = Utility.typeOfSignature("LineNumberTable");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.getSignature("P");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)121;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, (byte)121);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("P");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.replace("void", "char", "char");
      Object object0 = new Object();
      Utility.encode(byteArray0, false);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "13 13 13 00";
      objectArray0[1] = (Object) "void";
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, (-355), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("4OT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4OT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.getSignature(":");
      assertEquals("L:;", string0);
      
      byte[] byteArray1 = Utility.decode("L:;", false);
      assertArrayEquals(new byte[] {(byte)76, (byte)58, (byte)59}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Ldsub;V";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)5;
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      Utility.encode(byteArray0, false);
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.isJavaIdentifierPart('&');
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-76);
      Utility.typeOfSignature("+[MQeEeBa\"p}WLHd_QB");
      Object object3 = new Object();
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("Dont call getValueDouble() on a non DOUBLE ElementValue", false);
      Utility.signatureToString("Dont call getValueDouble() on a non DOUBLE ElementValue", true);
      Utility.replace("double", "null", "od<");
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)83;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("FS", string0);
      
      byte byte0 = Utility.typeOfSignature("FS");
      assertEquals((byte)6, byte0);
      
      Utility.signatureToString("FS");
      String string1 = Utility.signatureToString("FS");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.compactClassName("", true);
      Utility.searchOpcode("");
      Utility.compactClassName("");
      String string0 = ",q~@.k}*@/5. sC7mPF";
      try { 
        Utility.typeOfMethodSignature(",q~@.k}*@/5. sC7mPF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,q~@.k}*@/5. sC7mPF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-65);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$92$bf", string0);
      
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("92 bf", string1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.replace("9MB&e3HZoXm@5&", ">\t", "void");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.isSet(95, (-1066));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2472);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString((byte)3);
      constantArray0[1] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Object object0 = new Object();
      Utility.printArray((Object[]) null);
      int int0 = Utility.clearBit(106, (byte)0);
      assertEquals(106, int0);
      
      String string0 = Utility.accessToString((int) (byte)0);
      assertEquals("", string0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      int int1 = Utility.setBit(239, 239);
      assertEquals(33007, int1);
      
      String string2 = Utility.replace("u&&QH6].:c+-WUO!4#", "short", (String) null);
      assertEquals("u&&QH6].:c+-WUO!4#", string2);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Utility.compactClassName("j8ya=");
      assertEquals("j8ya=", string0);
      
      short short0 = Utility.searchOpcode("V@;");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.classOrInterface((short) (-1));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "q&v_%\" MA~n";
      stringArray0[1] = "q&v_%\" MA~n";
      String string0 = Utility.methodTypeToSignature("iconst_1", stringArray0);
      assertEquals("(Lq&v_%\";Lq&v_%\";)Liconst_1;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lq&v_%\";Lq&v_%\";)Liconst_1;", "bx&RS2;DbvuN`Mb)6[", "+b(6AZf@d9CVtg`JLBx", false);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("bx&RS2;DbvuN`Mb)6[");
      assertEquals("bx&RS2;DbvuN`Mb)6[", string2);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-12);
      byteArray0[7] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_icmpeq\t\t#-5565", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("x$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      short short0 = Utility.searchOpcode("-&2oAv`9XjL0v");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.methodSignatureReturnType("Ldsub?;V");
      assertEquals("dsub?", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.getSignature(" BVrT2Y:Aw#No");
      assertEquals("LBVrT2Y:Aw#No;", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      Utility.format((short) (-1), 4, true, 'U');
      Utility.setBit((short) (-1), (short) (-1));
      String string1 = Utility.printArray((Object[]) null, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-1UU";
      stringArray0[2] = null;
      stringArray0[3] = string1;
      stringArray0[4] = "2a`$iUM_wf2|G,^t p|";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-4745), false, 'o');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("APPEND ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: APPEND 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "sEZhTH<RreU", "p#|qGG(j)>Vb4 08");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      Object object0 = new Object();
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.isJavaIdentifierPart('}');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, true);
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)126;
      byteArray0[2] = (byte)64;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)47;
      byteArray0[5] = (byte)64;
      byteArray0[7] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("\"");
      assertEquals("L\";", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char char0 = 'w';
      Utility.isJavaIdentifierPart('w');
      byte byte0 = (byte) (-69);
      byte byte1 = (byte)50;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), 254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-119);
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2234), (-1302));
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("\t", (String[]) null);
      assertEquals("()L;", string0);
      
      String string1 = Utility.methodSignatureToString("()L;", "()L;", "\t", true);
      assertEquals("\t  ()L;()", string1);
      
      String string2 = Utility.getSignature("\t");
      assertEquals("L;", string2);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9$!7D1&U");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)122;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(201);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)41, 122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = Utility.classOrInterface(1928);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = Utility.compactClassName("2UK4^STE", "2UK4^STE", true);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "2UK4^STE";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)119;
      Utility.equals(byteArray1, byteArray0);
      String string1 = Utility.replace("java.lang.Object@2175909e, 2UK4^STE", "impdep2", "tn.\"#X&LiT=G4");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("[-]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [-]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.convertString("dsub");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte) (-112);
      Utility.convertString(",t-+B9*C");
      byte[] byteArray0 = new byte[5];
      byte byte1 = (byte) (-26);
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-110);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(",t-+B\\9*C", "getfield");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"getfield\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[3] = (byte) (-122);
      byteArray0[1] = (byte) (-109);
      Object[] objectArray0 = new Object[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      objectArray0[0] = (Object) (byte) (-122);
      objectArray0[1] = (Object) (byte) (-122);
      objectArray0[2] = (Object) (byte) (-122);
      objectArray0[3] = (Object) (byte) (-109);
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte) (-109);
      objectArray0[6] = (Object) (byte) (-109);
      Utility.printArray(objectArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), 83);
      Utility.compactClassName("_DX0D|bx", false);
      Utility.getSignature("f3^=}\"77tl 6i^&y");
      Utility.typeOfSignature("Lf3^=}\"77tl;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Lf3^=}\"77tl;", "0:    nop\n1:    i2s\n2:    nop\n3:    i2f\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n", "]k>}(s)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lf3^=}\"77tl;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "LocalVariable", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Utility.searchOpcode(">\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      Utility.methodTypeToSignature("astore_2", (String[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass((String) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(emptyVisitor0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.getSignature("dstore_2");
      try { 
        Utility.typeOfMethodSignature("astore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object object0 = new Object();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.searchOpcode(")0Su7+nnC,;");
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit((byte)23, 63);
      assertEquals(23, int0);
      
      String string0 = Utility.accessToString((int) (byte)23, true);
      assertEquals("public private protected final", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      Utility.compactClassName("byte", true);
      short short0 = Utility.searchOpcode("byte");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1464, (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-62);
      int int0 = 32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[3] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), 2284);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.searchOpcode("!");
      Utility.format((short) (-1), 4, true, 'U');
      Utility.compactClassName("-1UU", "s", true);
      String string0 = "int";
      // Undeclared exception!
      try { 
        Utility.replace("int", (String) null, "int");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.isJavaIdentifierPart('S');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(49);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.replace("?Hj!1%gvVU' y2b", "(C!'_M", "Sensitive");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Object object0 = new Object();
      ConstantDouble constantDouble0 = new ConstantDouble((-2.1804985228147484));
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2155, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
      assertEquals("0:    nop\\n1:    nop\\n2:    nop\\n3:    nop\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n8:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "qTg.Bw+oPBVGf!";
      Utility.decode("qTg.Bw+oPBVGf!", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName("qTg.Bw+oPBVGf!", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.getSignature("lor");
      assertEquals("Llor;", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.signatureToString("V", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("2UK4^STE", "2UK4^STE", true);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "2UK4^STE";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)0;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString((-5368));
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("00 77 00");
      constantArray0[1] = (Constant) constantUtf8_0;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)50, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aaload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("S'_mOx`,?k*", true);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = ", low = ";
      try { 
        Utility.typeOfMethodSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-85);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$93H$d8$b0$J$l$ab", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.getSignature("char");
      assertEquals("C", string1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.typeOfSignature("[]");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-32);
      byteArray0[8] = (byte)35;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-122), (int) (byte) (-33));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('!');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfMethodSignature("isub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: isub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Object object0 = new Object();
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-116);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 151, false);
      Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    <illegal opcode>\n4:    f2l\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmple");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmple'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Utility.searchOpcode(">\t");
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = 25;
      Utility.clearBit((-32768), 25);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.searchOpcode("!");
      Utility.format((short) (-1), (-2), true, 'U');
      Utility.compactClassName("-1", "s", true);
      String string0 = "int";
      // Undeclared exception!
      try { 
        Utility.replace("int", (String) null, "int");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('8');
      Utility.printArray((Object[]) null, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]%|,vA!1[@";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "w}  &p/#K%bX,V";
      stringArray0[4] = "]A?gT}{{)rR";
      stringArray0[5] = null;
      stringArray0[6] = "U!s5 HkS";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("w}  &p/#K%bX,V", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      String string0 = Utility.encode(byteArray0, true);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      // Undeclared exception!
      try { 
        Utility.decode("$7ncf|B-[?RWBCq", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = Utility.setBit((byte)0, 62);
      assertEquals(1073741824, int0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7b d6 d6 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Locale.getISOLanguages();
      try { 
        Utility.typeOfSignature("@p1`/ULd6NIQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @p1`/ULd6NIQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("kriKr%`Is~0", false);
      Utility.encode(byteArray0, false);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dmul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dmul'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-124);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1116), (byte) (-124));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("84 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      String string1 = Utility.replace("7", "7", "return");
      assertEquals("return", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(3452);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iinc\t\t%0\t0", string2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature(">\t");
      assertEquals("L>;", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", ">\t", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2071, 2071);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.replace("new", "new", "iload_1");
      try { 
        Utility.typeOfSignature("6pqrpUb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6pqrpUb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("74 93 00 13", string0);
      
      int int0 = Utility.setBit(103, (byte)19);
      assertEquals(524391, int0);
      
      Utility.printArray((Object[]) null, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2a`$iUM_wf2|G,^t p|";
      Utility.methodTypeToSignature("long", stringArray0);
      String string1 = Utility.methodTypeToSignature(" of class ", stringArray0);
      assertEquals("(L2a`$iUM_wf2|G,^t;)Lof;", string1);
      
      Utility.printArray((Object[]) null, false, true);
      String string2 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\"2a`$iUM_wf2|G,^t p|\"}", string2);
      
      int int1 = Utility.clearBit(103, 223);
      assertEquals(103, int1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Utility.fillup("u#m", 0, true, '*');
      Utility.printArray((Object[]) null, true, true);
      Utility.compactClassName("");
      Utility.isJavaIdentifierPart('*');
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("(", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = 61;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-110), 61, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = Utility.format(590, 590, false, '');
      assertEquals("590", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("13?AD3w60-v5Nm5!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 13?AD3w60-v5Nm5!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.isJavaIdentifierPart('');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.replace("9)7X`}I", "9)7X`}I", "9)7X`}I");
      try { 
        Utility.typeOfMethodSignature("9)7X`}I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9)7X`}I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-56);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Z=U6IYL}m7j.>", true);
      Utility.replace("Z=U6IYL}m7j.>", "S'_mOx`,?k*", "Z=U6IYL}m7j.>");
      Object object1 = new Object();
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-65), (byte) (-115));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-115);
      String string0 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{CONSTANT_NameAndType[12](name_index = -65, signature_index = -115), CONSTANT_NameAndType[12](name_index = -65, signature_index = -115), null, CONSTANT_NameAndType[12](name_index = -65, signature_index = -115), CONSTANT_NameAndType[12](name_index = -65, signature_index = -115)}", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("{CONSTANT_NameAndType[12](name_index = -65, signature_index = -115), CONSTANT_NameAndType[12](name_index = -65, signature_index = -115), null, CONSTANT_NameAndType[12](name_index = -65, signature_index = -115), CONSTANT_NameAndType[12](name_index = -65, signature_index = -115)}");
      assertEquals("[[[[L{CONSTANT_NameAndType;", string1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)112;
      byteArray0[14] = (byte)112;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-2080), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    irem
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-&2oAv`9XjL0v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -&2oAv`9XjL0v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Y";
      objectArray0[2] = (Object) "Y";
      objectArray0[3] = (Object) "Y";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 1685, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-48);
      byte byte0 = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        Utility.typeOfSignature("*y{e:#CE.KZMAmGp`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y{e:#CE.KZMAmGp`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char char0 = 'o';
      Utility.isJavaIdentifierPart('o');
      String string0 = "RH.MPf>8eL";
      try { 
        Utility.typeOfSignature("RH.MPf>8eL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RH.MPf>8eL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_Long", true);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)101;
      Utility.encode(byteArray0, false);
      Utility.typeOfSignature("CONSTANT_Methodref");
      String string0 = Utility.compactClassName("areturn", "g$aee$A$A", false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-119);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) (byte) (-119);
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) (byte)0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("(class_index = ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.methodSignatureReturnType("Ldsub?;V");
      assertEquals("dsub?", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("sastore");
      assertEquals("Lsastore;", string0);
      
      int int0 = Utility.setBit((byte)0, (-2761));
      assertEquals(8388608, int0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.searchOpcode("?,;!");
      byte[] byteArray0 = Utility.decode("?,;!", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1803, (-499));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.searchOpcode("!");
      Object[] objectArray0 = new Object[3];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-104);
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 245, (int) (short) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-65);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$92$bf", string0);
      
      String string1 = Utility.signatureToString("Invalid signature: `", false);
      assertEquals("int", string1);
      
      String string2 = Utility.replace("$92$bf", "invokeinterface", "\t<");
      assertTrue(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$92$bf", "int", "Invalid signature: `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $92$bf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)49;
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[8] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)18, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte)103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      Utility.encode(byteArray0, false);
      Object object0 = new Object();
      Utility.replace("$i$i$i$A$A$A$A$A", "{T\"e", "$i$i$i$A$A$A$A$A");
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Utility.convertString("dsub");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)97;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)34;
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)90;
      Utility.encode(byteArray0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "$7b$A$7c$ad$jZ";
      objectArray0[1] = (Object) (byte) (-83);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte) (-83);
      objectArray0[4] = (Object) (byte)124;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte) (-83);
      Object object1 = new Object();
      objectArray0[7] = object1;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, 78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = Utility.typeOfSignature("DaH_<");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.getSignature("]O UfIvf\"od/1");
      assertEquals("L]O;", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Utility.searchOpcode(">\t");
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]%|,vA!1[@";
      stringArray0[1] = ">\t";
      stringArray0[2] = ">\t";
      stringArray0[3] = ">\t";
      stringArray0[4] = ">\t";
      stringArray0[5] = ">\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("]%|,vA!1[@", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = Utility.isSet(49, 49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X@uT:2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X@uT:2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1206), (-479));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("9$!7D1&U", false);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)55, (byte)68, (byte)49, (byte)38, (byte)85}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")0Su7+nnC,;";
      stringArray0[1] = ")0Su7+nnC,;";
      stringArray0[2] = ")0Su7+nnC,;";
      stringArray0[3] = ")0Su7+nnC,;";
      Utility.compactClassName(")0Su7+nnC,;", false);
      Utility.methodTypeToSignature(")0Su7+nnC,;", stringArray0);
      Utility.replace("", "(L)0Su7+nnC,;;L)0Su7+nnC,;;L)0Su7+nnC,;;L)0Su7+nnC,;;)L)0Su7+nnC,;;", ")0Su7+nnC,;");
      try { 
        Utility.typeOfMethodSignature(")0Su7+nnC,;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )0Su7+nnC,;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-83);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, 269);
      try { 
        Utility.methodSignatureReturnType("1:    dup_x1\n2:    dcmpl\n3:    aconst_null\n4:    lreturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1:    dup_x1
         // 2:    dcmpl
         // 3:    aconst_null
         // 4:    lreturn
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = 0;
      Utility.clearBit(0, 0);
      String string0 = "class";
      boolean boolean0 = false;
      Method method0 = new Method();
      Method method1 = new Method(method0);
      // Undeclared exception!
      try { 
        method1.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.methodSignatureReturnType("ZGJ-~fv<+dj]");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      byte[] byteArray0 = new byte[4];
      Utility.signatureToString("V9ouHV5,/m}fR}8", true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      short short0 = Utility.searchOpcode(">\t");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A$A$A$A$A$A", string0);
      
      Utility.getSignature(">\t");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$A$A$A$A$A$A$A$A$A$A$A$A";
      stringArray0[1] = "L>;";
      stringArray0[2] = ">\t";
      stringArray0[3] = "$A$A$A$A$A$A$A$A$A$A$A$A";
      String string1 = Utility.methodTypeToSignature("org.apache.bcel.classfile.JavaClass", stringArray0);
      assertEquals("(L$A$A$A$A$A$A$A$A$A$A$A$A;LL>;;L>;L$A$A$A$A$A$A$A$A$A$A$A$A;)Lorg/apache/bcel/classfile/JavaClass;", string1);
      
      String string2 = Utility.classOrInterface((short) (-1));
      assertEquals("interface", string2);
      
      String string3 = Utility.accessToString(114, true);
      assertEquals("private final volatile", string3);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = "u){~tK&qUr<4{@x=";
      // Undeclared exception!
      try { 
        Utility.signatureToString("u){~tK&qUr<4{@x=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `u){~tK&qUr<4{@x='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("^L]t@r(J*S#}NTU8P", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 795, (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.toHexString(byteArray0);
      String string0 = Utility.convertString("Invalid type: ");
      assertEquals("Invalid type: ", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)47;
      Utility.encode(byteArray0, false);
      Object object0 = new Object();
      Utility.encode(byteArray0, false);
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte) (-49);
      byteArray1[2] = (byte)108;
      byteArray1[3] = (byte) (-74);
      byteArray1[4] = (byte)47;
      byteArray1[5] = (byte) (-95);
      byteArray1[6] = (byte) (-95);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)108, 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-112);
      String string0 = "monitorexit";
      Utility.compactClassName("monitorexit", false);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = Utility.classOrInterface(15);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = Utility.compactClassName("impdep1");
      assertEquals("impdep1", string0);
      
      short short0 = Utility.searchOpcode("impdep1");
      assertEquals((short)254, short0);
      
      String string1 = Utility.classOrInterface(169);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H=jU2fg8>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H=jU2fg8>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = ")>=Sj@T.";
      try { 
        Utility.typeOfSignature(")>=Sj@T.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )>=Sj@T.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Object[] objectArray0 = null;
      String string0 = Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(string0, string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)45;
      Utility.toHexString(byteArray0);
      String string0 = Utility.replace("7", "68 21 09 2d c5 2e 2d", "!O%JH\"_");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.decode("E-76$v", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Invalid signature: `", false);
      Object[] objectArray1 = new Object[0];
      Utility.printArray(objectArray1, false);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$5b$Q$Y$5b$5b", string0);
      
      String string1 = Utility.replace("7", "org.apache.bcel.classfile.RuntimeInvisibleAnnotations", "7");
      assertEquals("7", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.getSignature("7");
      assertEquals("L7;", string2);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "hW8f+^";
      boolean boolean0 = true;
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)48, (byte)90, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("!/", stringArray0);
      assertEquals("()L!/;", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-79);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2155, 1342, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.isSet(6, 6);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2275), 193);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, 68, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("\t", (String[]) null);
      assertEquals("()L;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%39", string1);
      
      String string2 = Utility.classOrInterface((-55));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.typeOfSignature("[]");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      short short0 = Utility.searchOpcode(")0Su7+nnC,;");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((int) (byte) (-42));
      assertEquals("private protected final volatile transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("(class_index = ", false);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-99);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kriKr%`Is~0");
      byte[] byteArray0 = Utility.decode("kriKr%`Is~0", false);
      Utility.clearBit((-2686), (-2686));
      Object object0 = new Object();
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("kriKr%`Is~0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `kriKr%`Is~0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("nm#.");
      assertEquals("nm#.", string1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.replace("?Hj!1%gvVU' y2b", "3J~H/.DC", "(C!'_M");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4864. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      int int0 = Utility.clearBit((-1697), (-1697));
      assertEquals(2147481951, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.searchOpcode(")0Su7+nnC,;");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")0Su7+nnC,;";
      stringArray0[1] = ")0Su7+nnC,;";
      stringArray0[2] = ")0Su7+nnC,;";
      stringArray0[3] = ")0Su7+nnC,;";
      Utility.methodTypeToSignature(")0Su7+nnC,;", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass(")0Su7+nnC,;");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.getSignature("(L)0Su7+nnC,;;L)0Su7+nnC,;;L)0Su7+nnC,;;L)0Su7+nnC,;;)L)0Su7+nnC,;;");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte byte0 = (byte)80;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("P$94$94");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P$94$94
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = Utility.compactClassName("fcmpg", false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Utility.isJavaIdentifierPart('&');
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-108);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Fnr_+E.BsWUMT", false);
      Utility.replace("float", "float", "j");
      Object object3 = new Object();
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-61);
      objectArray0[1] = (Object) "$7b$c3$cd$c3u$94";
      objectArray0[2] = (Object) "j";
      objectArray0[3] = (Object) (byte)117;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object3;
      Object object4 = new Object();
      objectArray0[7] = object4;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte) (-61), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("._rP<1d4Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ._rP<1d4Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-79);
      byteArray0[4] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.accessToString((-949));
      Utility.getSignature("long");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byte byte0 = (byte)64;
      byteArray0[1] = (byte)64;
      Utility.encode(byteArray0, false);
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("?r~nw**UmoY ^ro)?,9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?r~nw**UmoY ^ro)?,9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string0 = Utility.compactClassName("ireturn", false);
      assertEquals("ireturn", string0);
      
      int int0 = Utility.clearBit((-1713), (-1713));
      assertEquals((-34481), int0);
      
      String string1 = Utility.accessToString((-1713), true);
      assertEquals("public private protected static volatile native strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.getSignature("ishl");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)42;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-112);
      String[] stringArray0 = new String[5];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-48), (int) (byte)42);
      assertEquals("0:    nop\n1:    d2f\n", string0);
      
      Utility.compactClassName("wi", true);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.searchOpcode("!");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(179);
      try { 
        Utility.decode("TK\t", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)121;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-784), (int) (byte)121);
      assertEquals("0:    ret\t\t%50\n2:    f2l\n3:    lshl\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-33);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-68);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-111);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)49);
      Utility.compactClassName("Illegally nested brackets:", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, (int) (byte)49, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      Utility.toHexString(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("7rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7rE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dadd", "pOO@iyNouUM(`", "Clone Not Supported", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.searchOpcode("!");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1315, (int) (byte) (-57), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)50;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), 254);
      assertEquals("0:    monitorenter\n1:    monitorenter\n2:    return\n3:    aaload\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('w');
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("0:    monitorenter\n1:    monitorenter\n2:    return\n3:    aaload\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('S');
      Object object1 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte) (-6);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", (String) null, " -Cp)@tA@.v_B_0NMU%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 142, 194, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.searchOpcode("fsub");
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-27);
      Utility.toHexString(byteArray0);
      Utility.replace("7", "S&nR!", "C{3>X");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(59);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.AbstractFileFilter";
      int int0 = 74;
      Utility.fillup("org.apache.commons.io.filefilter.AbstractFileFilter", 74, false, '8');
      Utility.convertString("88888888888888888888888org.apache.commons.io.filefilter.AbstractFileFilter");
      String string1 = "&K";
      try { 
        Utility.methodSignatureReturnType("&K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (-1797118204));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.typeOfSignature("[]");
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("S'_mOx`,?k*");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      Utility.toHexString(byteArray0);
      Utility.replace("7", "c5", "!O%JH\"_");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = "RH.MPf>8eL";
      try { 
        Utility.typeOfSignature("RH.MPf>8eL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RH.MPf>8eL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/3[N0>W4UtSz ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /3[N0>W4UtSz 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)33;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-59);
      byteArray0[4] = (byte) (-74);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)44;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isSet(1427, (byte) (-51));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      Utility.decode("pCQ}k", false);
      Utility.clearBit('W', (byte)19);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("pCQ}k");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) null);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Object object0 = new Object();
      Utility.encode(byteArray0, true);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.decode("W4`d", false);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      String string1 = Utility.getSignature("00 00 00 00 00 00 00 00 00 00 00 00");
      assertEquals("L00;", string1);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      Object object0 = new Object();
      String string0 = Utility.methodSignatureReturnType("B");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(49);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.replace("?Hj!1%gvVU' y2b", "(C!'_M", "Sensitive");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("(C!'_M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (C!'_M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-110);
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-65);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Invalid signature: `", false);
      Utility.replace("$92$bf", "invokeinterface", "\t<");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t<", "$92$bf", ">", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.replace("void", "char", "char");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("13 13 13 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 13 13 13 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.searchOpcode(")0Su7+nnC,;");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")0Su7+nnC,;";
      stringArray0[1] = ")0Su7+nnC,;";
      stringArray0[2] = ")0Su7+nnC,;";
      stringArray0[3] = ")0Su7+nnC,;";
      Utility.methodTypeToSignature(")0Su7+nnC,;", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass(")0Su7+nnC,;");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2239, (int) (byte)2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte) (-66);
      Utility.encode(byteArray0, true);
      Object object2 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object1;
      objectArray0[1] = object2;
      objectArray0[2] = (Object) (byte)30;
      objectArray0[3] = object2;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("GTC6VBBV!dF<z,aEc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GTC6VBBV!dF<z,aEc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)108;
      byteArray0[14] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((byte)108, (byte)108);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = "+){~tK&qUr<4{x=";
      try { 
        Utility.methodSignatureReturnType("+){~tK&qUr<4{x=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{~tK&qUr<4{x='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)64;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("8d$%8F|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8d$%8F|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)50;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (int) (byte) (-62));
      Utility.compactClassName("|%be^sJm1DpA", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 50
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('l');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)77;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.replace("a{d2Xv}>B V", "char", "char");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.getSignature("dreturn");
      assertEquals("Ldreturn;", string2);
      
      Utility.replace("dreturn", "a{d2Xv}>B V", "a{d2Xv}>B V");
      String string3 = Utility.convertString("a{d2Xv}>B V");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.searchOpcode(">\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      MockFile mockFile0 = new MockFile(">\t", ">\t");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      ConstantPool constantPool2 = constantPool1.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)83;
      Utility.encode(byteArray0, false);
      Utility.signatureToString("CONSTANT_Long", false);
      Utility.encode(byteArray0, true);
      String string0 = "<AnsF&FTxa,@3*";
      try { 
        Utility.typeOfSignature("<AnsF&FTxa,@3*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <AnsF&FTxa,@3*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-9);
      Utility.encode(byteArray0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-106);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-9), 84);
      assertEquals("0:    <illegal opcode>\n1:    fcmpg\n", string1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.searchOpcode("pT59y\"4&\"H");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      String string0 = "S'_mOx`,?k*";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("a", string0);
      
      short short0 = Utility.searchOpcode("4O,dD ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = "impdep1";
      Utility.compactClassName("impdep1");
      Utility.searchOpcode("impdep1");
      Utility.typeOfSignature("[]");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)13;
      Utility.equals(byteArray0, byteArray0);
      int int0 = 89;
      URI uRI0 = MockURI.create(")");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-43);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, (int) (byte) (-10), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.compactClassName("Y3q>", "Y3q>", true);
      Object object0 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)31;
      // Undeclared exception!
      Utility.replace("{null, null}", "", "");
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2456), (-2456));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{CONSTANT_NameAndType[12](name_index = -2456, signature_index = -2456), CONSTANT_NameAndType[12](name_index = -2456, signature_index = -2456), CONSTANT_NameAndType[12](name_index = -2456, signature_index = -2456), null}", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("{CONSTANT_NameAndType[12](name_index = -2456, signature_index = -2456), CONSTANT_NameAndType[12](name_index = -2456, signature_index = -2456), CONSTANT_NameAndType[12](name_index = -2456, signature_index = -2456), null}");
      assertEquals("[[[L{CONSTANT_NameAndType;", string1);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, 1362, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte) (-105), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode(">\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "m";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-11);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ">\t";
      objectArray0[1] = (Object) "m";
      objectArray0[2] = (Object) (byte) (-11);
      objectArray0[3] = (Object) "m";
      Utility.printArray(objectArray0, false, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 117, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")0Su7+nnC,;", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$v0Su7$xnnC$y$3b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte) (-120);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("goto\t\t#20126", string1);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)18;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1668, (int) (byte)17, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.compactClassName("if_icmpne");
      Utility.compactClassName("{");
      Utility.searchOpcode("V@;");
      Utility.classOrInterface((byte)0);
      MockFile mockFile0 = new MockFile("V@;");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "if_icmpne");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // if_icmpne
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.isJavaIdentifierPart('&');
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-108);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Fnr_+E.BsWUMT", false);
      Utility.replace("float", "lookupswitch", "j");
      Object object3 = new Object();
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-76);
      objectArray0[1] = (Object) "P$b4$cd$b4u$94";
      objectArray0[2] = (Object) "j";
      objectArray0[3] = (Object) (byte)117;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object3;
      Object object4 = new Object();
      objectArray0[7] = object4;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (int) (byte) (-76), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('S');
      Object object1 = new Object();
      try { 
        Utility.methodSignatureReturnType("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "iconst_1";
      stringArray0[1] = "q&v_%\" MA~n";
      String string0 = Utility.methodTypeToSignature("iconst_1", stringArray0);
      assertEquals("(Liconst_1;Lq&v_%\";)Liconst_1;", string0);
      
      String string1 = Utility.convertString("U6>r}zf&F[DoyuM");
      assertEquals("U6>r}zf&F[DoyuM", string1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-65), (byte) (-115));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Ldsub;V";
      objectArray0[1] = (Object) "Ldsub;V";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of names must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      Utility.getSignature("$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q669I7#1pza", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q669I7#1pza'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (-2779));
      assertEquals("1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = Utility.compactClassName("PeuF~[#+Rq'r;vqG8\"");
      assertEquals("PeuF~[#+Rq'r;vqG8\"", string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = "PYlky{P:!YoHq3";
      try { 
        Utility.typeOfSignature("PYlky{P:!YoHq3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PYlky{P:!YoHq3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-83);
      Utility.encode(byteArray0, false);
      Object object1 = new Object();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)124;
      Utility.encode(byteArray1, false);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte) (-83), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("9uF~[#+RqrvqG8\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9uF~[#+RqrvqG8\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2139), (-1053));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)19;
      objectArray0[1] = (Object) "13 13 13 00";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) "13 13 13 00";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (byte)19;
      objectArray0[7] = (Object) (byte)19;
      objectArray0[8] = (Object) "13 13 13 00";
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1115), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-45);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        Utility.typeOfSignature("H,Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H,Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        Utility.methodSignatureReturnType("Warning: Paddig byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Paddig byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.searchOpcode(">\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "S'_mOx`,?k*";
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-3);
      byte byte0 = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-74);
      Utility.encode(byteArray0, true);
      Utility.replace("*(a", ":N$S[ej4,ck", "ret");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.signatureToString("CONSTANT_Long", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("KiRRA6o}#&p>9hc1tqV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KiRRA6o}#&p>9hc1tqV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Utility.fillup("u#m", 0, true, '*');
      String string0 = "";
      Utility.compactClassName("");
      Utility.isJavaIdentifierPart('*');
      Utility.accessToString(1, false);
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("fload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LocalVariable");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-62);
      String string0 = Utility.replace("dyBR;4!ON]!&%E", "dyBR;4!ON]!&%E", "fstore_0");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I> alKd signaturb: `");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-553), 2046, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("HwD4zyAk5DRfgz?r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HwD4zyAk5DRfgz?r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("u^?atmRcR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u^?atmRcR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)15;
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-91);
      Utility.encode(byteArray0, true);
      String string0 = "%;^A3_Th#H|";
      try { 
        Utility.typeOfSignature("%;^A3_Th#H|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %;^A3_Th#H|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")0Su7+nnC,;", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (-1996191921));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      try { 
        Utility.typeOfSignature("#F(AIt'O=73T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #F(AIt'O=73T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Utility.searchOpcode("?,;!");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)29;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-65), (byte) (-115));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[9];
      Utility.toHexString(byteArray1);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("7rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7rE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[3] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-122);
      objectArray0[1] = (Object) (byte) (-122);
      objectArray0[2] = (Object) "CONSTANT_Long";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, false, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1508), (int) (byte) (-122), true);
      try { 
        Utility.typeOfSignature("\"-122\", \"-122\", \"CONSTANT_Long\", \"java.lang.Object@50ad3fd0\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"-122\", \"-122\", \"CONSTANT_Long\", \"java.lang.Object@50ad3fd0\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      try { 
        Utility.typeOfSignature("p%lzY(T&=dPTew6;9y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p%lzY(T&=dPTew6;9y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      String string0 = Utility.encode(byteArray0, true);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte) (-65);
      byteArray1[2] = (byte) (-65);
      byteArray1[3] = (byte) (-65);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("Ry!L]&&'", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Ry$nL$5d$s$s$t", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      short short0 = Utility.searchOpcode("dload_0");
      assertEquals((short)38, short0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)24;
      Utility.encode(byteArray0, true);
      Utility.replace("Z3ZgK0bhjR]x^VH_}", "g`C\"=A)5x:z&< ZluP", "7");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("$\"z%Dn:ehO*>[*$k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[*$k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)64;
      Utility.encode(byteArray0, false);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray((Object[]) null, false, false);
      Utility.accessToString((int) (byte)64, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("volatile", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-56);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)50;
      byteArray1[3] = (byte) (-56);
      Utility.encode(byteArray1, true);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Z=U6IYL}m7j.>";
      objectArray0[1] = (Object) (byte)50;
      objectArray0[2] = (Object) (byte) (-56);
      objectArray0[3] = (Object) (byte)50;
      objectArray0[4] = (Object) "S'_mOx`,?k*";
      objectArray0[5] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) (byte) (-56);
      objectArray0[8] = (Object) (byte)50;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 79, (int) (byte)50, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charArrayWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(65, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("fcmpg");
      assertTrue(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("fcmpg");
      assertEquals((short)150, short0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Utility.searchOpcode(">\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      Utility.getSignature("FEripga4+$5");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)113;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)68;
      byteArray1[6] = (byte)113;
      Utility.compactClassName("Dont call getValueDouble() on a non DOUBLE ElementValue", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.replace("Dont call getValueDouble() on a non DOUBLE ElementValue", "Dont call getValueDouble() on a non DOUBLE ElementValue", "ireturn");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (-803));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      int int0 = Utility.clearBit(106, 106);
      assertEquals(106, int0);
      
      String string0 = Utility.accessToString(106);
      assertEquals("private static synchronized volatile", string0);
      
      String string1 = Utility.methodTypeToSignature("lxor", (String[]) null);
      assertEquals("()Llxor;", string1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Utility.searchOpcode("");
      boolean boolean0 = true;
      Utility.format((short) (-1), 4, true, 'U');
      Utility.setBit((short) (-1), (short) (-1));
      boolean boolean1 = true;
      Utility.printArray((Object[]) null, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-1UU";
      stringArray0[2] = null;
      stringArray0[3] = "2a`$iUM_wf2|G,^t p|";
      stringArray0[4] = "2a`$iUM_wf2|G,^t p|";
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("2a`$iUM_wf2|G,^t p|", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
      
      String string1 = Utility.getSignature("LocalVariable");
      assertEquals("LLocalVariable;", string1);
      
      byte byte0 = Utility.typeOfSignature("Z*4)xF&S7s'@");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%z'+ 3VRMJ_w$$1kdZQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %z'+ 3VRMJ_w$$1kdZQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = Utility.replace("imul", "CvluK\"fL0n]", "CvluK\"fL0n]");
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("(class_index = ", false);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$uclass_index$m$3d$m", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_2", string1);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      short short0 = Utility.searchOpcode(">\t");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("~:gT.,Y*pMh!?", "java.lang.Class", "m");
      assertEquals("~:gT.,Y*pMh!?", string0);
      
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)118;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$80$Vv", string1);
      
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      Object object2 = new Object();
      objectArray0[0] = object2;
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = object0;
      Utility.printArray(objectArray0, false, true);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 130, true);
      assertEquals("0:    ior\n1:    iload\t\t%118\n", string2);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")0Su7+nnC,;", false);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("lstore\t\t%43", string0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[2] = (byte)64;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)47;
      byteArray0[5] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 80, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = "Y3\\q>";
      Utility.compactClassName("Y3q>", "Y3q>", true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte)43);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)43, (byte) (-100));
      Constant constant0 = constantInteger0.copy();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)81;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 491, true);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      try { 
        Utility.typeOfSignature("(4Fm>o{6Iiqx[5de");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (4Fm>o{6Iiqx[5de
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      String string0 = ">\t";
      Utility.searchOpcode(">\t");
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteArray0, constantPool0, (-4037), 78, false);
      try { 
        Utility.typeOfSignature("static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "74 93 00 13";
      objectArray0[1] = (Object) (byte) (-109);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "74 93 00 13";
      objectArray0[4] = (Object) (byte)116;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)19;
      objectArray0[7] = (Object) "74 93 00 13";
      Utility.printArray(objectArray0);
      Utility.clearBit(159, (byte)19);
      char char0 = 'U';
      Utility.isJavaIdentifierPart('U');
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)116);
      try { 
        Utility.methodSignatureReturnType("protected final synchronized volatile", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected final synchronized volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      Utility.toHexString(byteArray0);
      Utility.setBit(103, (byte)19);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2a`$iUM_wf2|G,^t p|";
      stringArray0[1] = "74 93 00 13";
      stringArray0[2] = "7Gi";
      stringArray0[3] = "2a`$iUM_wf2|G,^t p|";
      stringArray0[5] = "74 93 00 13";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("74 93 00 13", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Utility.searchOpcode(">\t");
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      Utility.signatureToString("S'_mOx`,?k*", false);
      Utility.replace("$A$A$A$A$A$A$A$A$A$A$A$A", "short", (String) null);
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, 78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte) (-105));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Utility.clearBit(123, 123);
      String string0 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_1", string0);
      
      String string1 = Utility.getSignature("lstore_1");
      assertEquals("Llstore_1;", string1);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 85, (int) (byte)53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload\t\t%25", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload\t\t%25'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = "&";
      Utility.compactClassName("HI|}]&y%):DTf<o'f", "&", false);
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true, true);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpne\t\t#-24416", string0);
      
      String string1 = Utility.getSignature("monitorexit");
      assertEquals("Lmonitorexit;", string1);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = Utility.convertString("u[*'|e.</");
      assertEquals("u[*\\'|e.</", string0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2086, 2086);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("ixor", false);
      try { 
        Utility.typeOfSignature("$\"+ah9]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $\"+ah9]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("Illegal signature: ", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "Illegal signature: ");
      Utility.printArray(printWriter0, (Object[]) null);
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.getSignature("LocalVariable");
      Utility.typeOfSignature("Z*4)xF&S7s'@");
      String string1 = Utility.format((byte) (-124), 1506, true, '/');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Ldsub;V";
      objectArray0[1] = (Object) "Ldsub;V";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{Ldsub;V, Ldsub;V}", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-469), (-1863), true);
      assertEquals("0:    iload_1\n1:    nop\n", string1);
      
      String string2 = Utility.accessToString(15);
      assertEquals("public private protected static", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = Utility.convertString("if_icmple");
      assertEquals("if_icmple", string0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "_&LjfQr", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      boolean boolean0 = Utility.isSet(6, 6);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2275), (byte)93);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2275), (int) (byte)93);
      assertEquals("0:    dup2_x1\n", string0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte)64;
      byteArray1[4] = (byte) (-116);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(HPf@&H10]T$qYP];K@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (HPf@&H10]T$qYP];K@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")0Su7+nnC,;", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$v0Su7$xnnC$y$3b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%43", string1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fdiv", string2);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.methodSignatureReturnType("ZGJ-~fv<+dj]");
      assertEquals("boolean", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "P";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ior", string1);
      
      String string2 = Utility.getSignature("P");
      assertEquals("LP;", string2);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[3] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)50;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 254);
      Utility.isJavaIdentifierPart('w');
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)50, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Utility.searchOpcode("!");
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String string0 = "+){~tK&qUr<4{x=";
      Utility.replace("+){~tK&qUr<4{x=", "+){~tK&qUr<4{x=", "+){~tK&qUr<4{x=");
      Utility.convertString("+){~tK&qUr<4{x=");
      String string1 = "[Tg.Bw+oPBVGf!";
      try { 
        Utility.decode("[Tg.Bw+oPBVGf!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Utility.searchOpcode("!");
      Utility.format((short) (-1), 4, false, '`');
      Utility.compactClassName("``-1", "s", true);
      Utility.compactClassName("d", true);
      try { 
        Utility.typeOfSignature("/3[N0>W4UtSz ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /3[N0>W4UtSz 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-112);
      String string0 = Utility.compactClassName("monitorexit", false);
      assertEquals("monitorexit", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("Dont call getValueDouble() on a non DOUBLE ElementValue");
      assertEquals((byte)7, byte0);
      
      String string1 = Utility.format((byte)7, 33, false, '{');
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{7", string1);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Utility.isJavaIdentifierPart('v');
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), (-1259), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Utility.setBit((-752), (-752));
      boolean boolean0 = true;
      char char0 = 'Z';
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 767, true, 'Z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Double");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Object object0 = new Object();
      Utility.printArray((Object[]) null);
      Utility.clearBit(106, (byte)0);
      Utility.accessToString((int) (byte)0);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", ", "", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Utility.setBit(4, 4);
      String string0 = "N";
      try { 
        Utility.typeOfSignature("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), 5302);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String string0 = "tableswitch";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tableswitch";
      stringArray0[0] = "q&v_%\" MA~n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("q&v_%\" MA~n", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Utility.isSet(6, 6);
      String string0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-25);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("2$c2$q$c2$m$e7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2$c2$q$c2$m$e7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      Object object1 = new Object();
      Object object2 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.available();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = Utility.compactClassName("2UK4^STE", "2UK4^STE", true);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "2UK4^STE";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)119;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      Utility.replace("java.lang.Object@62f5fd2f, 2UK4^STE", "impdep2", "tn.z#X&LiT=G4");
      String string2 = Utility.toHexString(byteArray1);
      assertEquals("77 7d 77", string2);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "M[";
      // Undeclared exception!
      try { 
        Utility.signatureToString("M[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      short short0 = Utility.searchOpcode(">\t");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)23;
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      Utility.printArray((Object[]) null, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">\t";
      String string0 = Utility.methodTypeToSignature("]A?gT}{{)rR", stringArray0);
      assertEquals("(L>;)L]A?gT}{{)rR;", string0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$JavaReader");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("CXESVXn,wg-$I's");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("kCiKr%`<s~0", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-27);
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.fillup("90%*&hTlZLlFeAo21;)", 135, true, '%');
      assertEquals("90%*&hTlZLlFeAo21;)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string1);
      
      String string2 = Utility.accessToString(1457);
      assertEquals("public final synchronized transient native abstract", string2);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-62);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      try { 
        Utility.typeOfSignature("0:    nop\n1:    monitorenter\n2:    nop\n3:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    monitorenter
         // 2:    nop
         // 3:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("}Cc:Im4.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }Cc:Im4.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = "&b:EU YE)#Y&i%";
      try { 
        Utility.typeOfSignature("&b:EU YE)#Y&i%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &b:EU YE)#Y&i%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      byte[] byteArray0 = Utility.decode("XD8D[KR =.tq*+@Q%", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2861, 210);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Utility.methodSignatureReturnType("V", true);
      Utility.format(83, 83, true, 'a');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V", "{c{[", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;)L;", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, true);
      assertEquals("{, }", string1);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      int int0 = Utility.setBit(50, 50);
      assertEquals(262194, int0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = ">\t";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 85, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-69);
      try { 
        Utility.typeOfSignature("AnnotationDefault");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AnnotationDefault
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      Utility.encode(byteArray0, false);
      Object object0 = new Object();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$R$R$R$A$A$A$A$A", string0);
      
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte)108;
      byteArray1[3] = (byte)108;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)17;
      byteArray1[6] = (byte)47;
      byteArray1[7] = (byte)47;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-473), (int) (byte)47);
      assertEquals("0:    sipush\t\t4460\n3:    idiv\n4:    iconst_2\n5:    sipush\t\t12079\n", string1);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("lreturn", "bihc2o+Z`", "'");
      Object object1 = new Object();
      byte byte0 = (byte)118;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)118;
      Utility.encode(byteArray0, false);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128), false);
      try { 
        Utility.typeOfSignature("Qa  lOFq|elRo$ KSm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qa  lOFq|elRo$ KSm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("Q 8&:)0#,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q 8&:)0#,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9$!7D1&v");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byte[] byteArray1 = Utility.decode("9$!7D1&v", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 139, (-1996191921));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('S');
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)33, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('n');
      // Undeclared exception!
      try { 
        Utility.signatureToString("E_-QR%.QKb2e3nJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E_-QR%.QKb2e3nJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)122;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$92z", string0);
      
      String string1 = Utility.replace("$92z", "$92z", "\t<");
      assertEquals("\t<", string1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$be$i$c1$c1$c1", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("arraylength", string1);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("Dont call getValueDouble() on a non DOUBLE ElementValue", false);
      String string0 = "EG\"W_e[?rK_ReF";
      try { 
        Utility.typeOfSignature("EG\"W_e[?rK_ReF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EG\"W_e[?rK_ReF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{null, null, null, null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U!s5 HVuS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U!s5 HVuS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      Utility.decode("XD8D[KR =.tq*+@Q%", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)65;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("B");
      constantPool0.constantToString((Constant) constantUtf8_0);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-66);
      try { 
        Utility.typeOfSignature("XD8D[KR =.tq*+@Q%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XD8D[KR =.tq*+@Q%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true, true);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream1.append('v');
      Utility.printArray(printStream0, (Object[]) null);
      Utility.format(78, 93, true, 's');
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      byte[] byteArray0 = new byte[5];
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("isub", string1);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)24, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 194, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = Utility.convertString("dsub");
      assertEquals("dsub", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)102;
      Object object0 = new Object();
      String string1 = Utility.methodSignatureReturnType("JsKC@_h^+\"(iT-6enP");
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("kriKr%`Is~0", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iaload", string0);
      
      String string1 = Utility.replace("iaload", "iaload", "u=Y>< CR");
      assertEquals("u=Y>< CR", string1);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      Utility.decode("XD8D[KR =.tq*+@Q%", false);
      Utility.typeOfSignature("B");
      try { 
        Utility.typeOfSignature("monitorenter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object2;
      Object object3 = new Object();
      objectArray0[2] = object3;
      objectArray0[3] = object1;
      Object object4 = new Object();
      objectArray0[4] = object4;
      objectArray0[5] = object0;
      objectArray0[6] = object2;
      objectArray0[7] = object2;
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 4682, 79, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-65);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("Invalid signature: `", false);
      Utility.typeOfSignature("Invalid signature: `");
      Utility.methodSignatureReturnType("Invalid signature: `");
      try { 
        Utility.methodSignatureToString("\t", "int", "Invalid signature: `", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("? super ", "{java.lang.Object@3eaf00bd, java.lang.Object@351c90ac, java.lang.Object@56f5a720, java.lang.Object@68c760c4, java.lang.Object@2eab3f89, java.lang.Object@7fe35300, java.lang.Object@4d4277b, java.lang.Object@57c6a665}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // {java.lang.Object@3eaf00bd, java.lang.Object@351c90ac, java.lang.Object@56f5a720, java.lang.Object@68c760c4, java.lang.Object@2eab3f89, java.lang.Object@7fe35300, java.lang.Object@4d4277b, java.lang.Object@57c6a665}
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kriKr%`Is~0");
      byte[] byteArray0 = Utility.decode("kriKr%`Is~0", false);
      Utility.clearBit((-2686), (-2686));
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)104;
      byteArray0[6] = (byte)45;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-74);
      boolean boolean0 = Utility.isJavaIdentifierPart('>');
      assertFalse(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("21 2e 68 00 09 c5 b6", string0);
      
      String string1 = Utility.replace("!O%JH\"_", "7", "7");
      assertEquals("!O%JH\"_", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_3", string2);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      Utility.encode(byteArray0, true);
      Object object1 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4yZc5&)?x;NYs@0pF+k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4yZc5&)?x;NYs@0pF+k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2456), (-2456));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-15);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)121, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
      
      Utility.getSignature("fstore_2");
      String string1 = Utility.getSignature("GV~D");
      assertEquals("LGV~D;", string1);
      
      String string2 = Utility.classOrInterface((byte)69);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)83;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("FS", string0);
      
      byte byte0 = Utility.typeOfSignature("FS");
      assertEquals((byte)6, byte0);
      
      Integer integer0 = new Integer(380);
      Utility.signatureToString("FS");
      String string1 = Utility.signatureToString("FS");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      Utility.isJavaIdentifierPart('n');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 180, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.methodSignatureReturnType("FG", false);
      assertEquals("float", string0);
      
      String string1 = Utility.accessToString(5498, true);
      assertEquals("private static final volatile native abstract synthetic", string1);
      
      short short0 = Utility.searchOpcode("FG");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")0Su7+nnC,;", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$v0Su7$xnnC$y$3b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aastore", string1);
      
      String string2 = Utility.compactClassName("boolean");
      assertEquals("boolean", string2);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.isJavaIdentifierPart('v');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) 'v', 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-83);
      Utility.encode(byteArray0, false);
      Object object1 = new Object();
      Utility.decode("$7c$jZ$97$7c$ad", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: ", "breakpoint", "$7c$jZ$97$7c$ad", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Utility.searchOpcode("!");
      String string0 = Utility.format((short) (-1), 4, false, '`');
      String string1 = Utility.compactClassName("``-1", "s", true);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, true, false);
      assertEquals("{}", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-125);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) (byte)52;
      objectArray1[1] = (Object) "s";
      objectArray1[2] = (Object) (byte) (-35);
      objectArray1[3] = (Object) (byte)102;
      String string3 = Utility.printArray(objectArray1, false, true);
      assertEquals("\"52\", \"s\", \"-35\", \"102\"", string3);
      
      Utility.decode("", false);
      boolean boolean0 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('l');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string1);
      
      String string2 = Utility.getSignature(" fields:\n");
      assertEquals("Lfields:;", string2);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      String string0 = "kriKr%`Is~0";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kriKr%`Is~0");
      byte[] byteArray0 = Utility.decode("kriKr%`Is~0", false);
      Utility.clearBit((-2686), (-2686));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.accessToString((-1847522538), false);
      String string1 = "bytes must not be null!";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dmul", "breakpoint", "bytes must not be null!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dmul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Utility.replace("Qp39Kr{f@^E", "Qp39Kr{f@^E", "Qp39Kr{f@^E");
      Object object0 = new Object();
      try { 
        Utility.methodSignatureReturnType("Qp39Kr{f@^E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qp39Kr{f@^E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(")>iS>T.", false);
      assertArrayEquals(new byte[] {(byte)41, (byte)62, (byte)105, (byte)83, (byte)62, (byte)84, (byte)46}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)83;
      Utility.encode(byteArray0, false);
      Utility.signatureToString("CONSTANT_Long", false);
      Utility.replace("dsub", "short", "dsub");
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-69);
      Utility.encode(byteArray0, true);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(5, byteSequence0.getIndex());
      
      int int0 = Utility.setBit((byte)114, (byte)114);
      assertEquals(262258, int0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('S');
      try { 
        Utility.typeOfSignature("WXE)u2>RvQMjK(:is56");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WXE)u2>RvQMjK(:is56
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = Utility.format((-391), (-391), true, 's');
      assertEquals("-391", string0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String string0 = "U!s5 H\\kS";
      try { 
        Utility.typeOfSignature("U!s5 HkS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U!s5 HkS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.methodSignatureReturnType("ZGJ-~fv<+dj]");
      assertEquals("boolean", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "P";
      stringArray0[1] = "boolean";
      stringArray0[2] = "P";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_3", string1);
      
      String string2 = Utility.getSignature("fstore_3");
      assertEquals("Lfstore_3;", string2);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[20];
      byteArray0[4] = (byte) (-86);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)64;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte) (-112);
      String string0 = Utility.convertString("{jyp_TF\"b:CoQVc");
      assertEquals("{jyp_TF\\\"b:CoQVc", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{jyp_TF\"b:CoQVc";
      stringArray0[1] = "{jyp_TF\"b:CoQVc";
      stringArray0[2] = "{jyp_TF\"b:CoQVc";
      stringArray0[3] = "a),gmTM9";
      stringArray0[4] = "{jyp_TF\"b:CoQVc";
      Utility.methodTypeToSignature("{jyp_TF\"b:CoQVc", stringArray0);
      String string1 = Utility.methodTypeToSignature("IeWW+\u0007", stringArray0);
      assertEquals("(L{jyp_TF\"b:CoQVc;L{jyp_TF\"b:CoQVc;L{jyp_TF\"b:CoQVc;La),gmTM9;L{jyp_TF\"b:CoQVc;)LIeWW+\u0007;", string1);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)33;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-59);
      byteArray0[4] = (byte) (-113);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
