/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:52:52 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.toString();
      buffer0.clear();
      buffer0.timeout();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(1282L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.write((Source) buffer0, 1282L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)14;
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.snapshot((int) (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=14
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip(0L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.readByteArray();
      buffer1.readUnsafe();
      buffer0.sha256();
      int int0 = 1;
      try { 
        realBufferedSource0.readByteString(1050L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)14, (-1273L), (-1273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1273 toIndex=-1273
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      try { 
        buffer0.skip(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.equals((Object) null);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.write(byteString0);
      assertEquals(1L, buffer0.size());
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      buffer1.writeShort(0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.selectPrefix(options0);
      assertEquals(3L, buffer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)0);
      try { 
        buffer0.skip(29L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1L);
      assertEquals(1L, buffer0.size());
      
      long long0 = buffer1.readDecimalLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1945);
      Buffer buffer1 = buffer0.writeTo((OutputStream) bufferedOutputStream0);
      ByteString byteString0 = buffer1.md5();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-494));
      buffer0.readAndWriteUnsafe();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(1481);
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, 1066L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.inputStream();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-19);
      byteArray0[0] = (byte) (-19);
      Buffer buffer1 = buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.snapshot((int) (byte) (-19));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=0 byteCount=-19
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      int int0 = 0;
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1789L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1788 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)0, (long) (byte)0, 689L);
      ByteString[] byteStringArray0 = new ByteString[6];
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteString byteString2 = new ByteString(byteArray0);
      byteStringArray0[2] = byteString2;
      byte[] byteArray1 = new byte[0];
      ByteString byteString3 = new ByteString(byteArray1);
      byteStringArray0[3] = byteString3;
      ByteString byteString4 = realBufferedSource0.readByteString((long) (byte)0);
      byteStringArray0[4] = byteString4;
      // Undeclared exception!
      try { 
        HashingSink.hmacSha1(realBufferedSource0.buffer, byteString3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer_UnsafeCursor0.next();
      long long0 = buffer0.writeAll(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      buffer2.readUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.writeInt((byte)0);
      byteArray0[0] = (byte)0;
      Buffer buffer2 = buffer0.write(byteArray0);
      buffer2.inputStream();
      boolean boolean0 = buffer1.request((byte)0);
      assertEquals(5L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = buffer0.request(2373L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.writeString("8fi", 55296, 55296, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 55296 > 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer1.readByteArray();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer2, inflater0);
      inflaterSource0.refill();
      realBufferedSource0.indexOf((byte) (-104));
      realBufferedSource0.buffer.emit();
      buffer1.toString();
      // Undeclared exception!
      try { 
        buffer1.readByteString((long) (byte) (-104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-104
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, (-820L), (-820L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 99;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(99);
      buffer1.head = null;
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Pipe pipe0 = new Pipe(1891L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.flush();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)1;
      byteString0.indexOf(byteArray0, 52);
      buffer0.hmacSha512(byteString0);
      buffer0.equals((Object) null);
      // Undeclared exception!
      try { 
        buffer0.snapshot((int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2L);
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer1.readUtf8Line();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      Buffer buffer2 = buffer0.writeInt((byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      buffer2.write(byteArray0);
      buffer0.inputStream();
      buffer0.readUtf8Line((long) (byte)5);
      buffer0.request(4275L);
      buffer1.indexOf((byte)0, 2147483647L);
      assertEquals(4L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer0.hashCode();
      buffer_UnsafeCursor0.buffer.inputStream();
      buffer1.indexOf((byte)10, 1892L);
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, 1409L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeByte(32);
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("x", charset0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      buffer1.write(byteArray0);
      buffer0.inputStream();
      buffer0.readUtf8Line((long) (byte)5);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      pipe0.sinkClosed = false;
      buffer0.read(buffer1, 8L);
      buffer0.writeLong((-1L));
      buffer1.writeDecimalLong(355L);
      buffer1.inputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("9U6b~U/L{w(:uWl");
      buffer0.writeUtf8("9U6b~U/L{w(:uWl");
      mockPrintStream0.print('l');
      mockPrintStream0.println((-1374L));
      mockPrintStream0.print("9U6b~U/L{w(:uWl");
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) mockPrintStream0, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=26 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      buffer0.writeUtf8("Zs");
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(1481);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-2530L));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)55;
      pipe0.sinkClosed = false;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      HashingSource.hmacSha1(hashingSource0, byteString0);
      Inflater inflater1 = new Inflater();
      InflaterSource inflaterSource1 = new InflaterSource(buffer0, inflater1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = pipe0.buffer;
      buffer2.hashCode();
      long long0 = buffer1.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-25);
      inflaterSource0.close();
      byteArray0[5] = (byte)116;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      Inflater inflater1 = new Inflater();
      InflaterSource inflaterSource1 = new InflaterSource(hashingSource0, inflater1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.hashCode();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.require(2436L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(1562L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.clone();
      Buffer buffer1 = buffer0.writeDecimalLong(1562L);
      buffer1.sha1();
      buffer1.sha512();
      try { 
        buffer0.readUtf8LineStrict(1562L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=31353632\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(9);
      buffer1.readByteArray();
      long long0 = new Integer(9);
      assertEquals(9, long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-2147483646));
      buffer0.completeSegmentByteCount();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=02\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-494));
      buffer1.sha256();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.equals((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(1909);
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(15L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=14 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-1109));
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xfffffffb
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.equals((Object) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.rangeEquals(10000000000L, byteString0);
      long long0 = realBufferedSource0.buffer.readAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = buffer0.rangeEquals(10L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = buffer0.write((Source) buffer1, (long) (-1));
      assertSame(bufferedSink0, buffer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip(0L);
      // Undeclared exception!
      try { 
        buffer0.write((Source) null, 2499L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-1713L));
      buffer0.readByteArray();
      ByteString[] byteStringArray0 = new ByteString[6];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-1713L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1713
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(2L);
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.completeSegmentByteCount();
      buffer0.writeHexadecimalUnsignedLong(0L);
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeShort((-12));
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(156L);
      // Undeclared exception!
      try { 
        buffer3.readByteString((long) (-12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-12
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(98);
      Buffer buffer2 = new Buffer();
      try { 
        buffer1.readFully(buffer2, 1450L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)41;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.write(byteString0);
      realBufferedSource0.buffer.readAll(buffer0);
      Buffer buffer1 = buffer0.writeShort(56);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource1.buffer.selectPrefix(options0);
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      CharBuffer charBuffer0 = charset1.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString((long) 56, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=56
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        buffer0.readFully(buffer1, 100000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      Buffer buffer2 = buffer1.writeShort(0);
      buffer0.readFully(byteArray0);
      buffer0.rangeEquals((long) (byte) (-23), (ByteString) null, 31, (int) (byte)32);
      Buffer buffer3 = buffer2.writeIntLe(31);
      buffer3.indexOfElement(byteString0);
      Buffer buffer4 = buffer1.emitCompleteSegments();
      buffer4.writeUtf8CodePoint(1);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-922337L));
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOfElement(byteString0, 9223L);
      assertEquals(7L, buffer0.size());
      
      long long0 = buffer0.readDecimalLong();
      assertEquals((-922337L), long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("g#;M/(@C/$w^*&Ex)");
      buffer1.toString();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0, 0L);
      assertEquals(18L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOfElement((ByteString) null);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)121;
      buffer0.hmacSha1(byteString0);
      boolean boolean0 = buffer1.request(71776119061217280L);
      assertFalse(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 1909;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.writeIntLe((-2147483625));
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSink1.buffer.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8Line(15L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=14 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      Buffer buffer2 = buffer1.writeShort(0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      Buffer buffer3 = buffer1.writeByte(5);
      buffer3.md5();
      buffer0.selectPrefix(options0);
      buffer2.indexOf(byteString0, 10L);
      buffer2.readLong();
      buffer0.writeShortLe(514);
      assertEquals(16L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775798L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      long long0 = buffer_UnsafeCursor0.offset;
      long long1 = buffer1.readLong();
      assertEquals(11L, buffer0.size());
      assertEquals(4121411804481401392L, long1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.equals(buffer1);
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2114946015));
      assertFalse(buffer0.exhausted());
      
      buffer1.readShortLe();
      buffer1.emit();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.equals(buffer1);
      buffer1.writeShort(7);
      buffer1.readShort();
      // Undeclared exception!
      try { 
        buffer1.getByte(100000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=100000000 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1945);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffff99
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((byte)0);
      buffer0.indexOf((byte)0);
      buffer0.skip(0L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-43);
      buffer0.read(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.hash();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)124;
      byteArray1[2] = (byte) (-105);
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte)124;
      byteArray1[6] = (byte)124;
      buffer0.request((-2179L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qN!b<eDS?kM'|");
      buffer0.hmacSha512(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1633L);
      buffer1.clone();
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 4L, (-2504L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*xy7-7O");
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockFileOutputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("j");
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x6a
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)51);
      Buffer buffer1 = buffer0.writeIntLe((byte)51);
      buffer1.readDecimalLong();
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8();
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1496L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(2104533975);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        realBufferedSink1.buffer.write((Source) realBufferedSink0.buffer, 1872L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Pipe pipe0 = new Pipe(1871L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      buffer1.flush();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((-957));
      buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("SHA-1");
      int int0 = buffer0.readIntLe();
      assertEquals(1L, buffer0.size());
      assertEquals(759253075, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WV4r7");
      buffer0.writeUtf8CodePoint((-1250));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1250));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)51);
      Buffer buffer1 = buffer0.writeIntLe(65);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x41
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeUtf8("*fh--Z&}dy<;fLb");
      buffer0.readShort();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.exhausted();
      assertEquals(13L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((byte)0);
      buffer1.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1209L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 4L;
      try { 
        buffer0.readUtf8LineStrict(1336L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=2d31323039\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1978));
      assertFalse(buffer0.exhausted());
      
      buffer1.readByte();
      buffer0.hashCode();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(999);
      Buffer buffer2 = buffer1.writeShort((-1471));
      buffer2.completeSegmentByteCount();
      byte byte0 = buffer0.readByte();
      assertFalse(buffer0.exhausted());
      assertEquals((byte) (-25), byte0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)51);
      Buffer buffer1 = buffer0.writeIntLe((byte)51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        buffer0.readFrom(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeByte((byte)51);
      long long0 = realBufferedSource0.buffer.readHexadecimalUnsignedLong();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854762475L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(19L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      buffer0.writeDecimalLong(1000000000L);
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor1.resizeBuffer(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor1.buffer.readByteArray();
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(3328);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(3333);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1610612736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 60000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.resizeBuffer(1828L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(84L);
      buffer0.writeByte((-1109));
      ByteString[] byteStringArray0 = new ByteString[4];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-115);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer1, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[0] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (byte) (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(8230);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.resizeBuffer(9223372036854775807L);
      buffer_UnsafeCursor1.buffer.readByteArray();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(4415);
      buffer1.writeDecimalLong(4415);
      buffer0.completeSegmentByteCount();
      Integer integer0 = new Integer(4415);
      buffer0.sha256();
      buffer0.readShortLe();
      long long0 = 1628L;
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=34343135\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("g#;M/(@C/$w^*&Ex)");
      buffer0.completeSegmentByteCount();
      try { 
        buffer1.readUtf8LineStrict(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8 content=7f67233b4d2f2840432f24775e2a26457829\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeUtf8("g#;M/(@C/$w^*&Ex)");
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0, 112L);
      assertEquals(18L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      Buffer buffer2 = buffer1.writeShort(0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.readByteString();
      Buffer buffer3 = buffer1.writeByte(5);
      buffer3.md5();
      buffer0.selectPrefix(options0);
      buffer2.indexOf(byteString0, 10L);
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-494));
      buffer1.writeHexadecimalUnsignedLong(100000000000L);
      buffer0.writeShortLe(1830);
      // Undeclared exception!
      try { 
        buffer1.indexOfElement((ByteString) null, 922337L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1282L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(3316L);
      assertEquals(3L, buffer2.size());
      
      long long0 = buffer3.readHexadecimalUnsignedLong();
      assertEquals(3316L, long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(99);
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer1.size());
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.writeShort((-1431655764));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      
      buffer_UnsafeCursor0.buffer.writeLongLe((-1));
      buffer_UnsafeCursor1.resizeBuffer((byte)0);
      buffer_UnsafeCursor1.buffer.exhausted();
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(4415);
      Buffer buffer2 = buffer1.writeDecimalLong(4415);
      buffer0.completeSegmentByteCount();
      Integer integer0 = new Integer(4415);
      buffer0.sha256();
      buffer0.readShortLe();
      buffer2.writeByte(715);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      long long0 = buffer2.readHexadecimalUnsignedLong();
      assertEquals(1L, buffer1.size());
      assertEquals(17429L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854762503L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 1431655765;
      realBufferedSink0.writeByte(1431655765);
      Buffer buffer2 = realBufferedSink0.buffer;
      try { 
        realBufferedSink0.buffer.write((Source) buffer1, 3404L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-802));
      Buffer buffer1 = buffer0.writeDecimalLong((-802));
      MockPrintStream mockPrintStream0 = new MockPrintStream(" hex=");
      buffer1.copyTo((OutputStream) mockPrintStream0);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(3328);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer.writeByte((-2204));
      MockFile mockFile0 = new MockFile("Rt*t?X7I-", "Rt*t?X7I-");
      MockFile mockFile1 = new MockFile(mockFile0, "Rt*t?X7I-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      buffer2.copyTo((OutputStream) mockPrintStream0);
      assertEquals(1L, mockFile1.length());
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.writeShort((-2147483646));
      Buffer buffer2 = buffer0.writeDecimalLong((-2147483646));
      buffer1.completeSegmentByteCount();
      buffer2.readIntLe();
      Integer integer0 = new Integer(55296);
      buffer1.sha256();
      short short0 = buffer2.readShortLe();
      assertEquals(7L, buffer2.size());
      assertEquals((short)13361, short0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      HashingSource.sha256(buffer1);
      buffer1.completeSegmentByteCount();
      buffer0.buffer();
      Buffer buffer2 = buffer0.writeShortLe(45);
      long long0 = buffer2.indexOf(byteString0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      Buffer buffer2 = buffer0.writeShort(2166);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.writeByte((byte)0);
      buffer1.selectPrefix(options0);
      buffer1.indexOf(byteString0, (long) (byte)0);
      int int0 = buffer2.readUtf8CodePoint();
      assertEquals(5L, buffer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-2698));
      ((RealBufferedSink) bufferedSink0).buffer.writeUtf8("source exhausted prematurely");
      Buffer buffer1 = realBufferedSink0.buffer;
      Pipe pipe0 = new Pipe(10L);
      pipe0.source();
      Buffer buffer2 = realBufferedSink0.buffer.writeByte(98);
      buffer1.writeHexadecimalUnsignedLong(98);
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x76
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(112);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x70
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1978));
      buffer0.hashCode();
      MockFile mockFile0 = new MockFile("already attached to a buffe");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) buffer1;
      PrintStream printStream0 = mockPrintStream0.printf("already attached to a buffe", objectArray0);
      buffer1.writeTo((OutputStream) printStream0);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(71776119061217280L);
      buffer1.readAndWriteUnsafe();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.rangeEquals(8L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(9223372036854775L);
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertEquals(9223372036854775L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertEquals(2L, buffer0.size());
      
      long long0 = buffer1.readDecimalLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeDecimalLong((-802));
      Buffer buffer3 = buffer2.writeShort((-2147483646));
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.hex();
      buffer3.rangeEquals(0L, byteString0, (-802), 2600);
      Buffer buffer4 = buffer1.writeDecimalLong((-802));
      buffer4.completeSegmentByteCount();
      buffer1.writeUtf8("");
      long long0 = buffer4.readDecimalLong();
      assertTrue(buffer4.exhausted());
      assertEquals((-802L), long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      Object object1 = new Object();
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 280375465082880L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(280375465082880L);
      buffer0.completeSegmentByteCount();
      Integer integer0 = new Integer(10);
      Pipe pipe0 = new Pipe(922337L);
      pipe0.source();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer3 = realBufferedSink0.buffer.writeTo(outputStream0);
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(9223372036854L);
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertEquals(9223372036854L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)17;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer2 = buffer1.write(byteString0);
      buffer0.writeShort(55);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.writeByte(67);
      buffer0.selectPrefix(options0);
      long long0 = buffer2.indexOf(byteString0, 0L);
      assertEquals(4L, buffer1.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.writeByte((-854));
      int int0 = buffer0.readUtf8CodePoint();
      assertTrue(buffer0.exhausted());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeDecimalLong((-802));
      Buffer buffer3 = buffer2.writeShort((-2147483622));
      Buffer buffer4 = new Buffer();
      Buffer buffer5 = buffer4.writeShort((-2271));
      buffer3.writeDecimalLong((-1166L));
      buffer1.completeSegmentByteCount();
      buffer0.readIntLe();
      Integer integer0 = new Integer((-1290));
      buffer5.sha256();
      try { 
        buffer4.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff7)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(65280L);
      // Undeclared exception!
      try { 
        buffer1.rangeEquals(1016L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-1824));
      buffer0.writeDecimalLong(21474L);
      buffer1.readIntLe();
      Integer integer0 = new Integer((-1824));
      buffer1.sha256();
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      buffer1.hashCode();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      HashingSource.sha256(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.hashCode();
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 65536L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (-634L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -634
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " $^");
      buffer0.writeUtf8CodePoint(1520);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeShort(2144924072);
      buffer2.writeDecimalLong((-1166L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer;
      SegmentPool.byteCount = 83L;
      buffer3.completeSegmentByteCount();
      Integer integer0 = new Integer((byte)0);
      buffer0.sha256();
      buffer2.readUtf8CodePoint();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer3.writeString("okio.ByteString", 2144924072, (int) (byte)0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 0 < 2144924072
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("g#;M/(@C/$w^*&Ex)");
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(815L);
      buffer2.completeSegmentByteCount();
      buffer1.buffer();
      assertEquals(21L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) buffer0;
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(7L, buffer0.size());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(1);
      Buffer buffer2 = buffer1.writeDecimalLong(1000000L);
      buffer2.completeSegmentByteCount();
      Integer integer0 = new Integer((-1563));
      buffer2.sha256();
      buffer2.readShortLe();
      try { 
        buffer1.readUtf8LineStrict(2548L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=7 content=31303030303030\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      HashingSource.sha256(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer.writeShortLe(1950);
      buffer2.indexOf((byte)15);
      buffer2.indexOf(byteString0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = realBufferedSink0.buffer.readString(charset0);
      assertEquals("\uFFFD\u0007", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("g#;M/(@C/$w^*&Ex)");
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(815L);
      buffer1.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(21L, buffer0.size());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(57);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1L, buffer0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-1431655764));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.writeLongLe((-1));
      buffer_UnsafeCursor1.seek((byte)0);
      buffer_UnsafeCursor1.resizeBuffer((byte)0);
      buffer_UnsafeCursor1.buffer.exhausted();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-1431655764));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer.writeLongLe((-922337203685477580L));
      buffer_UnsafeCursor1.seek(4L);
      buffer_UnsafeCursor1.resizeBuffer(6);
      // Undeclared exception!
      try { 
        buffer0.write(buffer2, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(1);
      Buffer buffer2 = buffer1.writeDecimalLong(999998L);
      buffer2.completeSegmentByteCount();
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(22L);
      buffer0.completeSegmentByteCount();
      buffer3.buffer();
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      long long0 = realBufferedSource0.buffer.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      Integer integer0 = new Integer((-2114946015));
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = buffer0.rangeEquals(0L, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2144924094);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.completeSegmentByteCount();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      buffer0.read(byteArray0);
      Integer integer0 = new Integer((byte)0);
      ByteString byteString0 = realBufferedSource0.readByteString((long) (byte)0);
      buffer0.rangeEquals(0L, byteString0);
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.write(byteString0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        buffer0.readFrom((InputStream) sequenceInputStream0, 100000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      HashingSource.sha256(buffer1);
      buffer1.completeSegmentByteCount();
      Buffer buffer2 = buffer0.buffer();
      buffer2.readUtf8CodePoint();
      Buffer buffer3 = buffer0.writeShortLe(45);
      long long0 = buffer3.indexOf(byteString0);
      assertEquals(20L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.writeLongLe((-1));
      buffer_UnsafeCursor1.seek((byte) (-1));
      buffer0.writeHexadecimalUnsignedLong(0L);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer buffer1 = buffer0.writeShort(2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writeDecimalLong((-1796L));
      buffer2.write((Source) buffer1, (long) 2);
      assertEquals(7L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeShort((-1431655764));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.buffer.writeTo(outputStream0);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      buffer0.readFrom(inputStream0);
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-375));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.writeDecimalLong(717761190612L);
      buffer0.completeSegmentByteCount();
      Buffer buffer2 = buffer1.writeUtf8("qyA6Wc&8");
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x71
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(922337203685L);
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(11L, buffer1.size());
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.toString();
      realBufferedSink0.buffer.writeDecimalLong(16711680L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(16711680L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(4);
      Buffer buffer1 = buffer0.writeDecimalLong(1L);
      buffer1.completeSegmentByteCount();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      buffer1.readFrom((InputStream) sequenceInputStream0, 0L);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      buffer1.completeSegmentByteCount();
      buffer0.writeUtf8("qyA6Wc&8");
      buffer0.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      buffer1.writeUtf8("");
      buffer1.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("size=%s fromIndex=%s toIndex=%s");
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer2 = buffer1.write(byteString0);
      buffer0.completeSegmentByteCount();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      HashingSource hashingSource0 = HashingSource.sha1(buffer2);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.writeByte(100);
      buffer2.indexOfElement(byteString1, (long) 8192);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("size=%s fromIndex=%s toIndex=%s");
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.write(byteString0);
      buffer0.completeSegmentByteCount();
      buffer0.rangeEquals(0L, byteString0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeShort(0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      buffer2.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(51);
      Buffer buffer2 = buffer0.writeUtf8("-?u1k3[{T.PCf[5u08");
      buffer2.readDecimalLong();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) pipedOutputStream0, 32L, 313L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=18 offset=32 byteCount=313
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor1.buffer.writeShort(47);
      buffer_UnsafeCursor1.next();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) buffer0;
      objectArray0[1] = (Object) buffer2;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.write(byteString0);
      buffer2.completeSegmentByteCount();
      try { 
        realBufferedSource0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-1247));
      Buffer buffer1 = buffer0.writeUtf8("size=%s fromIndex=%s toIndex=%s");
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.hmacSha1(byteString1);
      Buffer buffer2 = buffer0.write(byteString0);
      buffer0.completeSegmentByteCount();
      buffer2.rangeEquals(0L, byteString0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffcf
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(5);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte)85;
      ByteString byteString1 = new ByteString(byteArray1);
      buffer0.write(byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeShort(104);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer2 = new Buffer();
      buffer0.indexOfElement(byteString0, (long) (byte)32);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(5);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[10];
      byteArray1[1] = (byte)32;
      byteArray1[4] = (byte)121;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte)108;
      ByteString byteString1 = new ByteString(byteArray1);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer0.indexOfElement(byteString0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(1932735283);
      Buffer buffer2 = buffer1.writeUtf8(": ");
      HashingSink hashingSink0 = HashingSink.sha512(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer3 = buffer1.write(byteString0);
      buffer3.completeSegmentByteCount();
      buffer2.buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)37;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer2.indexOf(byteString1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer_UnsafeCursor0.buffer.clone();
      buffer_UnsafeCursor0.next();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775799L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 9223372036854775799
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[10];
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte) (-28);
      ByteString byteString1 = new ByteString(byteArray1);
      byteString1.base64Url();
      buffer0.size = 71776119061217280L;
      Buffer buffer1 = buffer0.write(byteString1);
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      buffer1.readLong();
      // Undeclared exception!
      buffer1.indexOf((byte) (-108), 4278190080L);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[10];
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte) (-28);
      ByteString byteString1 = new ByteString(byteArray1);
      byteString1.base64Url();
      buffer0.size = 71776119061217280L;
      Buffer buffer1 = buffer0.write(byteString1);
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      buffer1.readLong();
      // Undeclared exception!
      buffer1.indexOf((byte) (-108), 4278190080L);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeUtf8CodePoint(65533);
      buffer2.hashCode();
      buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, 910L, 100000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=910 byteCount=100000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      Object object1 = new Object();
      buffer2.readFully(buffer1, 1L);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      buffer1.readFully(buffer2, 1L);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-6));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[10];
      byteArray1[1] = (byte)32;
      byteArray1[4] = (byte)121;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte)108;
      ByteString byteString1 = new ByteString(byteArray1);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(13);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) buffer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      buffer1.writeTo((OutputStream) mockPrintStream0, 1L);
      buffer1.writeDecimalLong(1L);
      buffer1.completeSegmentByteCount();
      try { 
        buffer1.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0d31\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) buffer0;
      objectArray0[1] = (Object) buffer2;
      Object object0 = new Object();
      Object object1 = new Object();
      Buffer buffer3 = new Buffer();
      buffer2.readFully(buffer3, 1L);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1114111);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer1, byteString0);
      Source source0 = hashingSource1.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(5);
      Buffer buffer1 = buffer0.clone();
      Locale locale0 = Locale.KOREAN;
      Object object0 = new Object();
      Object object1 = new Object();
      buffer0.writeDecimalLong(1L);
      buffer0.readFully(buffer1, 1L);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<a(KCR}p5g'M<-i");
      buffer2.writeDecimalLong(100000000000L);
      buffer0.writeUtf8CodePoint(1689);
      try { 
        buffer2.readUtf8LineStrict((long) 5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=5 content=0005313030303030303030303030\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      buffer0.clear();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) buffer0;
      objectArray0[1] = (Object) buffer2;
      Object object0 = new Object();
      Object object1 = new Object();
      Buffer buffer3 = buffer0.writeDecimalLong(1L);
      buffer2.readFully(buffer3, 1L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)33, 1262);
      buffer2.readFrom((InputStream) byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeShort(5);
      Buffer buffer2 = buffer1.clone();
      buffer2.equals(buffer0);
  }
}
