/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 03:41:31 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Integer>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>(hashMap0, class0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<HashMap<String, Integer>, Object> hashMap2 = new HashMap<HashMap<String, Integer>, Object>(0);
      hashMap2.put(hashMap1, hashMap1);
      hashMap0.put("Wus", hashMap2);
      doubleKeyMap0.remove("Wus", hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Integer>, Object>>();
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>(hashMap0, class0);
      HashMap<HashMap<String, Integer>, Object> hashMap1 = new HashMap<HashMap<String, Integer>, Object>(1);
      hashMap0.put("Wus", hashMap1);
      Map<HashMap<String, Integer>, Object> map0 = doubleKeyMap0.remove("Wus");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Integer, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = doubleKeyMap0.remove((Integer) null, object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Integer integer0 = new Integer(709);
      Object object0 = doubleKeyMap0.remove((Object) integer0, integer0);
      DoubleKeyMap<Integer, Object, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<Object, String>>();
      HashMap<Object, String> hashMap1 = doubleKeyMap1.remove((Integer) null, object0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0);
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap1);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, "2J6");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Map<String, Object> map1 = doubleKeyMap1.remove((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      DoubleKeyMap<Object, HashMap<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Integer>, Object>();
      Map<HashMap<String, Integer>, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Integer integer0 = new Integer(2802);
      Object object0 = doubleKeyMap0.put((Object) null, (Object) integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Map<Map<Integer, Object>, Map<Integer, HashMap<Integer, Map<Integer, Object>>>>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Map<Integer, Object>, Map<Integer, HashMap<Integer, Map<Integer, Object>>>>, Integer>(class0);
      DoubleKeyMap<String, HashMap<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Object, String>, Object>(class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(1056, 1056);
      Object object0 = doubleKeyMap1.put("u#$G{:TyUZ%g}", hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0);
      DoubleKeyMap<String, Object, Map<Map<Integer, Object>, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<Map<Integer, Object>, String>>();
      HashMap<Map<Integer, Object>, String> hashMap1 = new HashMap<Map<Integer, Object>, String>();
      Map<Map<Integer, Object>, String> map0 = doubleKeyMap1.put("", (Object) doubleKeyMap0, (Map<Map<Integer, Object>, String>) hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
      Integer integer0 = new Integer(267);
      Object object0 = new Object();
      Integer integer1 = doubleKeyMap0.put(object0, "Q~T5d&GL=~Q/", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
      HashMap<Object, Map<Object, Map<Integer, Object>>> hashMap0 = new HashMap<Object, Map<Object, Map<Integer, Object>>>();
      DoubleKeyMap<Object, Object, Map<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Integer, Object>>(hashMap0);
      Map<Integer, Object> map0 = doubleKeyMap1.get((Object) "us.codecraft.webmagic.utils.DoubleKeyMap", (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Object object0 = new Object();
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class0);
      Integer integer0 = doubleKeyMap0.get(object0, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Map<String, String> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      DoubleKeyMap<Object, String, HashMap<String, Map<Integer, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, Map<Integer, Object>>>();
      Map<String, HashMap<String, Map<Integer, Object>>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<String, HashMap<Object, Integer>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Object, Integer>>>();
      DoubleKeyMap<Object, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Integer>>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, "D_AIf:msJOI{-w*N:?", hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<String, String>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, String>>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, integer0, hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>((Map<String, Map<HashMap<String, Integer>, Object>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Integer, Map<Integer, Object>>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Map<Integer, Object>>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Integer integer0 = new Integer(2802);
      doubleKeyMap0.put((Object) integer0, (Object) integer0, (Object) integer0);
      doubleKeyMap0.remove((Object) integer0, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Integer integer0 = new Integer(709);
      Object object0 = doubleKeyMap0.remove((Object) integer0, integer0);
      HashMap<Object, Map<String, Integer>> hashMap1 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(hashMap1, class0);
      Integer integer1 = doubleKeyMap1.get(object0, "");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Map<Map<Integer, Object>, Object>, Map<String, Integer>> hashMap0 = new HashMap<Map<Map<Integer, Object>, Object>, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Map<Integer, Object>, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Integer, Object>, Object>, String, Integer>(hashMap0, class0);
      HashMap<Map<Integer, Object>, Object> hashMap1 = new HashMap<Map<Integer, Object>, Object>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      Integer integer0 = doubleKeyMap0.get((Map<Map<Integer, Object>, Object>) hashMap1, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Object, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, String>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(hashMap1, hashMap1);
      doubleKeyMap0.put(hashMap1, (Object) null, "Wus");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Integer>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>(hashMap0, class0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<HashMap<String, Integer>, Object> hashMap2 = new HashMap<HashMap<String, Integer>, Object>();
      hashMap0.put("X5x", hashMap2);
      doubleKeyMap0.remove("X5x", hashMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }
}
