/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:53:40 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.engine.Mode;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.table.MetaTable;
import org.h2.table.Table;
import org.h2.value.CompareMode;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowInputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("~W'!^", "~W'!^", "~W'!^");
      assertEquals("'~W'!^'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("getArray(String)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("Z8U3ku1ACi-k<JjZL&");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.isProcedureCall("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(357);
      SQLUtil.addRequiredCondition("SELECT * FROM ", stringBuilder0);
      assertEquals("SELECT * FROM ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.isQuery("truncatedelete");
      DBDataType dBDataType0 = DBDataType.getInstance(40, "[43g&w2t}<rb( ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      RowInputText rowInputText0 = new RowInputText("gel\"em!c", "=@", "truncatedelete", false);
      assertEquals(0, rowInputText0.readType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("drop materialized view");
      SQLUtil.normalize("drop tabledrop materialized view", false);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      SQLUtil.innerJoin((String) null, stringArray0, (String) null, stringArray0[3], stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer.toUnsignedLong((-2083));
      SQLUtil.parseColumnTypeAndSize("SELECT * FROM ");
      SQLUtil.removeComments("drop");
      SQLUtil.normalize("wJVVMKMB", false);
      SQLUtil.parseColumnTypeAndSize("^)avhcgnM'");
      SQLUtil.isDML("drop materialized viewdrop materialized viewconstraint t'`&mj@ss\";33:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wJVVMKMB");
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME;
      assertEquals("SYSIBM", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.normalize("$", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = FBConnectionProperties.PASSWORD_PROPERTY;
      SQLUtil.parseColumnTypeAndSize("password");
      String string1 = SQLUtil.renderColumnListWithTableName("password", stringArray0);
      assertEquals("password.null, password.null, password.null, password.null", string1);
      
      String string2 = SQLUtil.leftJoin("password", stringArray0, "select", "password", stringArray0);
      assertEquals("left join select as password on password.null = password.null and password.null = password.null and password.null = password.null and password.null = password.null", string2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("tx`um{2)%+3lXr", true);
      assertEquals("tx ` um { 2) % + 3lXr", string0);
      
      boolean boolean0 = SQLUtil.isDML("tx ` um { 2) % + 3lXr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("SELECT R* FROM ");
      assertTrue(boolean0);
      
      long long0 = MetaTable.ROW_COUNT_APPROXIMATION;
      SQLUtil.parseColumnTypeAndSize("SELECT R* FROM ");
      String string0 = SQLUtil.normalize("SELECT R* FROM ", true);
      assertEquals("SELECT R * FROM", string0);
      
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`", defaultDBTable0, 4776, "CREATE_INDEX");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("` CREATE_INDEX NULL", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SELECT R * FROM";
      stringArray0[1] = "CREATE_INDEX";
      stringArray0[2] = "updatedelete";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "GRANTEETYPE", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (SELECT R * FROM, CREATE_INDEX, updatedelete, )", string2);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SELECT R* FROM ");
      Locale locale0 = Locale.CANADA;
      String string3 = SQLUtil.renderColumnListWithTableName("JwO", stringArray0);
      assertEquals("JwO.SELECT R * FROM, JwO.CREATE_INDEX, JwO.updatedelete, JwO.null", string3);
      
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string4 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("`, `, `, `, `, `", string4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      StringReader stringReader0 = new StringReader("x3G_//~)KSm.#UB=~");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      MockFile mockFile0 = new MockFile("nOeXhlaSV\")Q");
      MockFile.createTempFile("/org/apache/derby/loc/m", (String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "x3G_//~)KSm.#UB=~";
      stringArray0[1] = "/org/apache/derby/loc/m";
      stringArray0[2] = null;
      stringArray0[3] = "/org/apache/derby/loc/m";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBUniqueConstraint1.isIdentical(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      assertEquals("UNIQUE (x3G_//~)KSm.#UB=~, /org/apache/derby/loc/m, , /org/apache/derby/loc/m)", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("###rowloca");
      Locale locale0 = Locale.CANADA;
      String string1 = SQLUtil.renderColumnListWithTableName("c", stringArray0);
      assertEquals("c.x3G_//~)KSm.#UB=~, c./org/apache/derby/loc/m, c.null, c./org/apache/derby/loc/m", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = " DEFAULT ";
      String string0 = Mode.REGULAR;
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~LqauZwdQsT)@", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "oU7[ ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "jkFp", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("jkFp", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.isProcedureCall("cannot instantiate conn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(354);
      stringBuilder0.appendCodePoint(354);
      SQLUtil.addRequiredCondition("cannot instantiate conn", stringBuilder0);
      assertEquals("\u0162 and cannot instantiate conn", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Kg!HkfFi");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "h2.maxQueryTimeout", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IXuzbE@,z4C: cq{F@!", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DBSchema dBSchema0 = new DBSchema("renamedefault null");
      SQLUtil.isQuery("CONSTRAINT \"IXuzbE@,z4C: cq{F@!\" ");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("SELECT * FROM ");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+o;$FJ<";
      stringArray0[1] = "S6@1w,OW";
      stringArray0[2] = "\"qXy";
      stringArray0[3] = "";
      stringArray0[4] = "IXuzbE@,z4C: cq{F@!";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UNIQUE ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\"qXy", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("+o;$FJ<", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, dBTable0, stringArray0, dBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = CompareMode.OFF;
      VersionNumber.valueOf("OFF");
      String string1 = TypeId.NCLOB_NAME;
      DBSchema dBSchema0 = new DBSchema("NCLOB", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Y1 <_0&)%", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1555), "UNIQUE ");
      Integer integer0 = new Integer((-1555));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", defaultDBTable0, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("UNIQUE (-1555)", string2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.isQuery("");
      SQLUtil.parseColumnTypeAndSize("42821");
      SQLUtil.removeComments("wJVVMKMB");
      SQLUtil.normalize("deletex3g_//~)ksm.#ub=~", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("42821");
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = Page.DIAG_ROWSIZE;
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0M(]iNbldazzq");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deleteixuzbe@,z4c: cq{f@!", defaultDBTable0, (-2326), "6RbF/>dl9rv3NiL$");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "callselect r* from", false, stringArray0);
      Boolean boolean0 = new Boolean(false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, )", string1);
      
      Locale locale0 = Locale.CANADA;
      String string2 = SQLUtil.normalize("42602", false);
      assertEquals("42602", string2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N3i-JGVC\"Tlj");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N3i-JGVC\"Tlj", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("N3i-JGVC\"Tlj", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("pl*(a", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBUniqueIndex0.setName("N3i-JGVC\"Tlj");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "KeLz-OR#12Bqn", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.toString();
      ((DefaultDBTable) dBTable0).getColumnNames();
      String string0 = "X0Y30.S";
      dBPrimaryKeyConstraint1.setDoc("X0Y30.S");
      SQLUtil.removeComments("N3i-JGVC\"Tlj");
      SQLUtil.isQuery("truncateorg.databene.jdbacl.sqlutil");
      Boolean boolean0 = new Boolean("KeLz-OR#12Bqn");
      StringBuilder stringBuilder0 = new StringBuilder(66);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("pl*(a", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1162), (Object) defaultDBTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1162
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("n3>&.C4()XBEGJMT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isQuery("otth)q");
      StringBuilder stringBuilder0 = new StringBuilder("alter index###rowlocationtoupdate");
      StringBuilder stringBuilder1 = stringBuilder0.insert(15, "otth)q");
      SQLUtil.addOptionalCondition("otth)q", stringBuilder1);
      assertEquals("alter index###rotth)qowlocationtoupdate or otth)q", stringBuilder1.toString());
      assertEquals("alter index###rotth)qowlocationtoupdate or otth)q", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = SQLUtil.join((String) null, "dQNM>IvjK+CW!wR*\"#r", stringArray0, stringArray0[2], stringArray0[2], stringArray0);
      assertEquals("null as null on dQNM>IvjK+CW!wR*\"#r.null = null.null and dQNM>IvjK+CW!wR*\"#r.null = null.null and dQNM>IvjK+CW!wR*\"#r.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.removeComments("deleem!c");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "deleem!c");
      boolean boolean1 = SQLUtil.isQuery("truncatedelete");
      assertFalse(boolean1);
      
      Integer.toUnsignedLong(41);
      defaultDBTable0.getCheckConstraints();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("truncatedelete", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT truncatedelete FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = TypeId.REAL_NAME;
      SQLUtil.removeComments("truncate$");
      SQLUtil.isProcedureCall("drop index#8^`q]f?ghf;kqk");
      boolean boolean0 = SQLUtil.isDML("truncate$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("REAL");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "truncate$";
      boolean boolean1 = SQLUtil.isProcedureCall("ANY");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      VersionNumber.valueOf("catalog null");
      String string0 = Page.DIAG_ROWSIZE;
      SQLUtil.removeComments("V |7W$X/k|X&gzlkS");
      SQLUtil.normalize("drop materialized viewconstraint t'`&mj@ss\";33:", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R");
      String string1 = Optimizer.MAX_MEMORY_PER_TABLE;
      String string2 = Table.EXTERNAL_TABLE_ENGINE;
      assertEquals("EXTERNAL", string2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.mutatesStructure("execute");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("execute");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N3i-JGVC\"Tlj";
      stringArray0[1] = "N3i-JGVC\"Tlj";
      stringArray0[3] = "pl*(a";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      String string0 = RawStoreFactory.PAGE_RESERVED_ZERO_SPACE_STRING;
      jdbcDataSource0.getLogWriter();
      Boolean.valueOf("N3i-JGVC\"Tlj");
      SQLUtil.isQuery("0");
      SQLUtil.isQuery("drop table");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("pl*(a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: pl*(a
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N3i-JGVC\"Tlj";
      stringArray0[1] = "N3i-JGVC\"Tlj";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getPassword();
      jdbcDataSource0.getLogWriter();
      Boolean.valueOf(" AND ");
      SQLUtil.isQuery("N3i-JGVC\"Tlj");
      SQLUtil.isQuery("k$X0R]?T4nh7");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("select into( drop table(3,3) null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"drop table(3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.isQuery("truncatedelete");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r*");
      boolean boolean0 = SQLUtil.isQuery("truncateexec");
      assertFalse(boolean0);
      
      Integer.toUnsignedLong(41);
      String string0 = SQLUtil.normalize("truncatedelete", true);
      assertEquals("truncatedelete", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getCheckConstraints();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "truncatedelete";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("truncateexec", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FROM ", false, stringArray0);
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" PRIMARY KEY (truncatedelete)", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      StringReader stringReader0 = new StringReader("x3G_//~)KSm.#UB=~");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      MockFile mockFile0 = new MockFile("nOeXhlaSV\")Q");
      MockFile.createTempFile("/org/apache/derby/loc/m", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = Mode.REGULAR;
      HashSet<DBForeignKeyConstraint> hashSet0 = new HashSet<DBForeignKeyConstraint>();
      DBDataType.getInstance(90096, "rename");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.mutatesDataOrStructure("--   empty: ");
      FBClob fBClob0 = new FBClob();
      PipedReader pipedReader0 = new PipedReader(90096);
      System.setCurrentTimeMillis(90096);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer2);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Character character0 = Character.valueOf('B');
      SQLUtil.substituteMarkers("zj67Rx}DU/T|", "REGULAR", character0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("CHARACTER_SET_NAME");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'CHARACTER_SET_NAME' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.isQuery("truncatedelete");
      long long0 = Long.MAX_VALUE;
      SQLUtil.parseColumnTypeAndSize("SELECT * FROM ");
      SQLUtil.normalize("SELECT * FROM ", true);
      SQLUtil.removeComments("wJVVMKMB");
      SQLUtil.normalize("wJVVMKMB", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wJVVMKMB");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.mutatesDataOrStructure("SELECT * FROM");
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      DBDataType dBDataType0 = DBDataType.getInstance(90126, "drotale");
      defaultDBTable0.toString();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = TypeId.NATIONAL_LONGVARCHAR_NAME;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("LONG NVARCHAR", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter1.append((CharSequence) "(");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      StringReader stringReader0 = new StringReader("callxl:.");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pushbackReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("SELECT R* FROM ");
      assertTrue(boolean0);
      
      long long0 = MetaTable.ROW_COUNT_APPROXIMATION;
      SQLUtil.parseColumnTypeAndSize("SELECT R* FROM ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("EMBEDDED", defaultDBTable0, 1812, "upda_edecete");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("EMBEDDED UPDA_EDECETE NULL", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[5] = "-@d<Z/EAk";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-@d<Z/EAk", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String string1 = TypeId.VARBINARY_NAME;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EMBEDDED");
      Locale locale0 = Locale.CANADA;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.removeComments("&.vZe$9w1O>|d~Q");
      String string2 = SQLUtil.normalize("_am~q3", false);
      assertEquals("_am ~ q3", string2);
      
      String string3 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT -@d<Z/EAk ", string3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.removeComments("deleem!c");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      StringReader stringReader0 = new StringReader("x3G_//~)KSm.#UB=~");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis((-4));
      MockFile mockFile0 = new MockFile("nOeXhlaSV\")Q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "deleem!c");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N3i-JGVC\"Tlj");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N3i-JGVC\"Tlj", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("N3i-JGVC\"Tlj", true, dBUniqueConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("pl*(a");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("pl*(a", true, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      dBUniqueIndex0.setName("N3i-JGVC\"Tlj");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "KeLz-OR#12Bqn", true, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.mutatesStructure("pl*(a");
      String string0 = "_Kui";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_Kui", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "N3i-JGVC\"Tlj");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, printWriter0);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("SELECT R* FROM ");
      long long0 = MetaTable.ROW_COUNT_APPROXIMATION;
      SQLUtil.parseColumnTypeAndSize("SELECT R* FROM ");
      String string0 = SQLUtil.normalize("EMBEDDED", false);
      assertEquals("EMBEDDED", string0);
      
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("EMBEDDED", defaultDBTable0, 1812, "updatedelete");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[6];
      stringArray0[3] = "EMBEDDED";
      stringArray0[4] = "EMBEDDED";
      stringArray0[5] = "-@d<Z/EAk";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("IOE ", defaultDBTable0, 1812, "R)g^b YrS8");
      String string1 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("IOE  R)G^B YRS8 NULL", string1);
      
      File file0 = FileUtil.canonicalFile("IOE ");
      MockFile mockFile0 = new MockFile(file0, "$/i;~dOae+(H's4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockFile0.setReadable(true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean1 = SQLUtil.isProcedureCall("executeconstraint \"selectcatalog null\" unique ()");
      assertTrue(boolean1 == boolean0);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , EMBEDDED, EMBEDDED, -@d<Z/EAk)", string2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[2];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.mutatesDataOrStructure("create materialized viewdeletem ! c");
      FBClob fBClob0 = new FBClob();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("delete");
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      VersionNumber.valueOf("catalog null");
      String string0 = Page.DIAG_ROWSIZE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = " as ";
      stringArray0[1] = "rowSize";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      BTreeController bTreeController0 = new BTreeController();
      boolean boolean0 = false;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rowSize", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "rowSize");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "[-=v.8#f", false, "catalog null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'catalog null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[2];
      String string0 = " as";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.mutatesDataOrStructure("alter session");
      FBClob fBClob0 = new FBClob();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " as");
      SQLUtil.mutatesDataOrStructure(" as");
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex((String) null, false, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("SELECT R* FROM ");
      assertTrue(boolean0);
      
      Integer.toUnsignedLong(1382);
      SQLUtil.parseColumnTypeAndSize("drop materialized viewbxsdi810\"-a|");
      String string0 = SQLUtil.normalize("SELECT R* FROM ", false);
      assertEquals("SELECT R * FROM", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x4ql=AH[-@");
      SQLUtil.removeComments("\u0001\u0106\u0003\uFFFF\u0001\u0105");
      String string1 = SQLUtil.normalize("`bku<9p+n,[VA~\"vNk", false);
      assertEquals("` bku < 9p + n, [ VA ~ \"vNk\"", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      VersionNumber.valueOf("catalog null");
      String string0 = Page.DIAG_ROWSIZE;
      String[] stringArray0 = new String[2];
      String string1 = " as ";
      stringArray0[0] = " as ";
      stringArray0[0] = "rowSize";
      System.setCurrentTimeMillis(2705L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = "exec";
      BTreeController bTreeController0 = new BTreeController();
      String string3 = "select into";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[1], false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "catalog null");
      String string4 = "org.apache.derby.iapi.sql.Row";
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      boolean boolean0 = false;
      String string5 = ">zx=xw";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, ">zx=xw", false, "insertnfsi4al#o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'insertnfsi4al#o' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.isProcedureCall("drop table");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "drop table";
      stringArray0[1] = "drop table";
      stringArray0[2] = "drop table";
      stringArray0[3] = "ev(@mhv'Nte";
      stringArray0[4] = "drop table";
      stringArray0[5] = "drop table";
      stringArray0[6] = "drop table";
      SQLUtil.normalize("ev(@mhv'Nte", false);
      String string0 = "alter sessionconstraint t'`&mj@ss\";33:";
      DBSchema dBSchema0 = new DBSchema(")43=Ocd9-QH~G-:");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter sessionconstraint t'`&mj@ss\";33:", dBSchema0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("drop table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">yT/MtDs";
      stringArray0[1] = ">yT/MtDs";
      stringArray0[2] = ">yT/MtDs";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FOREIGN KEY ");
      stringArray0[3] = ")wv1JT%UKpZlf0cD4S";
      String string0 = SQLUtil.leftJoin(">yT/MtDs", stringArray0, ">yT/MtDs", "inner", stringArray0);
      assertEquals("left join >yT/MtDs as inner on >yT/MtDs.>yT/MtDs = inner.>yT/MtDs and >yT/MtDs.>yT/MtDs = inner.>yT/MtDs and >yT/MtDs.>yT/MtDs = inner.>yT/MtDs and >yT/MtDs.)wv1JT%UKpZlf0cD4S = inner.)wv1JT%UKpZlf0cD4S", string0);
      
      boolean boolean0 = SQLUtil.isQuery("FOREIGN KEY ");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.normalize("|QkLKJ]GJGjAEm-", true);
      assertEquals("| QkLK  J ] GJGjAEm -", string1);
      
      DBSequence dBSequence0 = new DBSequence("{]", ")wv1JT%UKpZlf0cD4S", ">yT/MtDs");
      String string2 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence {]", string2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      VersionNumber.valueOf("catalog null");
      String string0 = Page.DIAG_ROWSIZE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("catalog null");
      Set<DBForeignKeyConstraint> set0 = defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.isQuery("truncatedelete");
      Integer.toUnsignedLong(41);
      SQLUtil.parseColumnTypeAndSize("rowSize");
      SQLUtil.isQuery("drop materialized viewbxsdi810\"-a|");
      SQLUtil.parseColumnTypeAndSize("call");
      SQLUtil.normalize("drop materialized viewbxsdi810\"-a|", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("InternalTransaction");
      Locale locale0 = Locale.CANADA;
      String string1 = Table.TABLE_LINK;
      SQLUtil.normalize("org.hsqldb.persist.HsqlProperties", true);
      SQLUtil.substituteMarkers("", "E(&", set0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop materialized viewbxsdi810 \"-a|\"";
      stringArray0[1] = "InternalTransaction";
      stringArray0[2] = "rowSize";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("TABLE LINK", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("SELECT R* FROM ");
      long long0 = MetaTable.ROW_COUNT_APPROXIMATION;
      SQLUtil.parseColumnTypeAndSize("SELECT R* FROM ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("EMBEDDED", defaultDBTable0, 1812, "EMBEDDED");
      defaultDBColumn0.setDefaultValue("it was not registered as output parameter.");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "-@d<Z/EAk";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-@d<Z/EAk", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EMBEDDED");
      Locale locale0 = Locale.CANADA;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      SQLUtil.removeComments(",lr(is&kag");
      SQLUtil.normalize("-@d<Z/EAk", true);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("H/F|wH,<8:VqV'IM^z", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      VersionNumber.valueOf("catalog null");
      String string0 = Page.DIAG_ROWSIZE;
      SQLUtil.isQuery("rowSize");
      SQLUtil.normalize("SELECT * FROM ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      BTreeController bTreeController0 = new BTreeController();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM", false, defaultDBTable0, "SELECT * FROM ");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DBDataType dBDataType0 = DBDataType.getInstance(40, "rowSize");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable1, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      RowInputText rowInputText0 = null;
      try {
        rowInputText0 = new RowInputText("left", "SELECT * FROM ", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.rowio.RowInputText", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      VersionNumber.valueOf("catalog null");
      String string0 = Page.DIAG_ROWSIZE;
      SQLUtil.isQuery("rowSize");
      SQLUtil.normalize("SELECT * FROM ", false);
      System.setCurrentTimeMillis((-1451L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      BTreeController bTreeController0 = new BTreeController();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM", false, defaultDBTable0, "SELECT * FROM ");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m[\"{.G**by|");
      Locale locale0 = Locale.CANADA;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NOT", 41);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.removeComments("y}2p4.K;y$,=?dFT4/");
      String string1 = SQLUtil.normalize("CONSTRAINT \"SELECT * FROM\" CHECK SELECT * FROM ", true);
      assertEquals("CONSTRAINT \"SELECT * FROM\" CHECK SELECT * FROM", string1);
      
      String string2 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELECT * FROM\" ", string2);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("y}2p4.K;y$,=?dFT4/");
      assertNull(boolean0);
      
      String string3 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM\" CHECK SELECT * FROM ", string3);
      
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string4 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.isQuery("SELECT * FROM ");
      Boolean boolean0 = new Boolean(true);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("alter table");
      DBSchema dBSchema1 = new DBSchema("DWu");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table", dBSchema0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "");
      dBSchema0.isIdentical(defaultDBTable0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      Integer integer7 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer9 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, dBDataType0, integer8, integer9);
      vector0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("date", false, defaultDBTable0, "S'u]si)gcl?H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      String string1 = LogToFile.DUMP_LOG_FROM_LOG_FILE;
      Integer integer0 = RawTransaction.COMMIT;
      StringReader stringReader0 = new StringReader(".&}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "catalog null");
      SQLUtil.renderNumber(streamTokenizer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "HwGBnvYcm#L*`";
      stringArray0[1] = "<l";
      stringArray0[2] = "<l";
      stringArray0[3] = "- 0";
      stringArray0[4] = null;
      String string2 = SQLUtil.leftJoin("RZ?Yid)wfp k$vy", stringArray0, "Q<", (String) null, stringArray0);
      assertEquals("left join Q< as null on RZ?Yid)wfp k$vy.HwGBnvYcm#L*` = null.HwGBnvYcm#L*` and RZ?Yid)wfp k$vy.<l = null.<l and RZ?Yid)wfp k$vy.<l = null.<l and RZ?Yid)wfp k$vy.- 0 = null.- 0 and RZ?Yid)wfp k$vy.null = null.null", string2);
      
      String string3 = SQLUtil.innerJoin("catalog null", stringArray0, "RZ?Yid)wfp k$vy", "catalog null", stringArray0);
      assertEquals("RZ?Yid)wfp k$vy as catalog null on catalog null.HwGBnvYcm#L*` = catalog null.HwGBnvYcm#L*` and catalog null.<l = catalog null.<l and catalog null.<l = catalog null.<l and catalog null.- 0 = catalog null.- 0 and catalog null.null = catalog null.null", string3);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string4 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string4);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }
}
