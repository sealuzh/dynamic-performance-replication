/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:32:26 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(243, 243, fieldTypeShort0, 243, 243, byteArray0, byteOrder0, 243);
      tiffField0.dump();
      assertEquals(243, tiffField0.getTag());
      assertEquals(243, tiffField0.getSortHint());
      assertEquals(243L, tiffField0.getCount());
      assertEquals(486, tiffField0.getBytesLength());
      assertEquals(243, tiffField0.getDirectoryType());
      assertEquals(243, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(15, 15, fieldTypeShort0, 15, 15, byteArray0, byteOrder0, 15);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(15, tiffField0.getSortHint());
      assertEquals(15, tiffField0.getTag());
      assertEquals(15, tiffField0.getOffset());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[19];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2196, 2196, fieldTypeFloat0, 2196, 2196, byteArray0, byteOrder0, 2196);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@2039bc5e for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(243, 243, fieldTypeShort0, 243, 243, byteArray0, byteOrder0, 243);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, int0);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(243, tiffField0.getSortHint());
      assertEquals(243, tiffField0.getTag());
      assertEquals(243, tiffField0.getDirectoryType());
      assertEquals(243L, tiffField0.getCount());
      assertEquals(486, tiffField0.getBytesLength());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(243, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[81];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(6, 6, fieldTypeFloat0, 6, 6, byteArray0, byteOrder0, 6);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      assertEquals(6, tiffField0.getSortHint());
      assertEquals(6, tiffField0.getTag());
      assertEquals(6L, tiffElement0.offset);
      assertEquals(6, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(243, 243, fieldTypeShort0, 243, 243, byteArray0, byteOrder0, 243);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(14, 14);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals(243, tiffField0.getOffset());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: SShort", string0);
      assertEquals(243, tiffField0.getDirectoryType());
      assertEquals(243, tiffField0.getTag());
      assertEquals(243, tiffField0.getSortHint());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((-830), (-830), fieldTypeFloat0, (-830), (-830), byteArray0, byteOrder0, (-830));
      tiffField0.getFieldType();
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals((-830), tiffField0.getOffset());
      assertEquals((-830), tiffField0.getSortHint());
      assertEquals((-830), tiffField0.getDirectoryType());
      assertNull(tiffElement0);
      assertEquals((-830), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[5];
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      TiffField tiffField0 = new TiffField(726, 24, fieldTypeLong0, 726, 112L, byteArray0, byteOrder0, 726);
      tiffField0.getIntValueOrArraySum();
      assertEquals(24, tiffField0.getDirectoryType());
      assertEquals(2904, tiffField0.getBytesLength());
      assertEquals(726, tiffField0.getTag());
      assertEquals(726, tiffField0.getSortHint());
      assertEquals(112, tiffField0.getOffset());
      assertEquals(726L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[81];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(6, 6, fieldTypeFloat0, 6, 6, byteArray0, byteOrder0, 6);
      tiffField0.dump();
      assertEquals(6, tiffField0.getDirectoryType());
      assertEquals(24, tiffField0.getBytesLength());
      assertEquals(6, tiffField0.getOffset());
      assertEquals(6, tiffField0.getSortHint());
      assertEquals(6, tiffField0.getTag());
      assertEquals(6L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[182];
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      TiffField tiffField0 = new TiffField(34, 34, fieldTypeLong0, 34, 34, byteArray0, byteOrder0, 34);
      tiffField0.dump();
      assertEquals(34, tiffField0.getOffset());
      assertEquals(34, tiffField0.getTag());
      assertEquals(34, tiffField0.getDirectoryType());
      assertEquals(34, tiffField0.getSortHint());
      assertEquals(34L, tiffField0.getCount());
      assertEquals(136, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[81];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(6, 6, fieldTypeFloat0, 6, 6, byteArray0, byteOrder0, 6);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      tiffField0.dump((PrintWriter) mockPrintWriter0, " b3: ");
      assertEquals(" b3: : 6 (0x6: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (6 Float)\n", charArrayWriter0.toString());
      assertEquals(68, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[358];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(2210, 2210, fieldTypeAscii0, 2210, 2210, byteArray0, byteOrder0, 2210);
      tiffField0.dump();
      assertEquals(2210, tiffField0.getTag());
      assertEquals(2210, tiffField0.getBytesLength());
      assertEquals(2210, tiffField0.getDirectoryType());
      assertEquals(2210L, tiffField0.getCount());
      assertEquals(2210, tiffField0.getOffset());
      assertEquals(2210, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[218];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65551, 65551, fieldTypeDouble0, 65551, 65551, byteArray0, byteOrder0, 65551);
      int int0 = tiffField0.getSortHint();
      assertEquals(65551, tiffField0.getTag());
      assertEquals(65551, int0);
      assertEquals(65551, tiffField0.getOffset());
      assertEquals(65551, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[1];
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(55, 55, fieldTypeRational0, 55, 55, byteArray0, byteOrder0, 55);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(55, tiffField0.getOffset());
      assertEquals(55L, tiffField0.getCount());
      assertEquals(55, tiffField0.getDirectoryType());
      assertEquals(55, tiffField0.getSortHint());
      assertEquals(55, tiffField0.getTag());
      assertEquals(0, int0);
      assertEquals(440, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(58, 58, fieldTypeFloat0, 58, 58, byteArray0, byteOrder0, 58);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@4f990f5e for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[76];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2257, (-807), fieldTypeFloat0.IFD, 1504, 1504, byteArray0, byteOrder0, 2257);
      tiffField0.dump();
      tiffField0.getIntArrayValue();
      assertEquals(1504L, tiffField0.getCount());
      assertEquals(2257, tiffField0.getTag());
      assertEquals(6016, tiffField0.getBytesLength());
      assertEquals(2257, tiffField0.getSortHint());
      assertEquals((-807), tiffField0.getDirectoryType());
      assertEquals(1504, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[59];
      TiffField tiffField0 = new TiffField(1640, 1640, fieldTypeShort0.SRATIONAL, 255L, 1640, byteArray0, byteOrder0, 1640);
      tiffField0.dump();
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[4];
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      TiffField tiffField0 = new TiffField(28, 28, fieldTypeRational0, 28, 1923L, byteArray0, byteOrder0, 28);
      tiffField0.dump();
      tiffField0.getIntArrayValue();
      assertEquals(28, tiffField0.getTag());
      assertEquals(28, tiffField0.getDirectoryType());
      assertEquals(28, tiffField0.getSortHint());
      assertEquals(1923, tiffField0.getOffset());
      assertEquals(28L, tiffField0.getCount());
      assertEquals(224, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(243, 243, fieldTypeShort0, 243, 243, byteArray0, byteOrder0, 243);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(243, 243);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(243, tiffField0.getSortHint());
      assertEquals(243, tiffField0.getTag());
      assertEquals(243, tiffField0.getOffset());
      assertNull(string0);
      assertEquals(243, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(243, 243, fieldTypeShort0, 243, 243, byteArray0, byteOrder0, 243);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [S cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[19];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2207, 2207, fieldTypeFloat0, 2207, 2207, byteArray0, byteOrder0, 2207);
      tiffField0.getDoubleArrayValue();
      assertEquals(2207L, tiffField0.getCount());
      assertEquals(2207, tiffField0.getSortHint());
      assertEquals(2207, tiffField0.getTag());
      assertEquals(2207, tiffField0.getDirectoryType());
      assertEquals(2207, tiffField0.getOffset());
      assertEquals(8828, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[107];
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      TiffField tiffField0 = new TiffField(1, (-1188), fieldTypeLong0, 90, (-1188), byteArray0, byteOrder0, 1);
      tiffField0.dump();
      tiffField0.getDoubleArrayValue();
      assertEquals(1, tiffField0.getTag());
      assertEquals((-1188), tiffField0.getOffset());
      assertEquals(90L, tiffField0.getCount());
      assertEquals(360, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals((-1188), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[1];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(50972, 50972, fieldTypeFloat0, 50972, 50972, byteArray0, byteOrder0, 50972);
      tiffField0.getTagName();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(50972 (0xc71c: RawImageDigest): ): [F@36a4a6f6
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational((-2972), " (0x");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[2] = (byte)26;
      TiffField tiffField0 = new TiffField((-4622), 34023, fieldTypeRational0, 34023, 948L, byteArray0, (ByteOrder) null, (byte)0);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[1];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2244, 39, fieldTypeFloat0.ASCII, 2244, 39, byteArray0, byteOrder0, 39);
      tiffField0.dump();
      String string0 = tiffField0.getStringValue();
      assertEquals(2244, tiffField0.getTag());
      assertEquals(2244, tiffField0.getBytesLength());
      assertEquals(39, tiffField0.getSortHint());
      assertEquals(39, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(39, tiffField0.getDirectoryType());
      assertEquals(2244L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[225];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2744, 1, fieldTypeDouble0, 1, 1, byteArray0, byteOrder0, 1);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getIntValueOrArraySum();
      tiffField0.dump();
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals("2744 (0xab8: Unknown Tag): ", string0);
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[60];
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(1640, 1640, fieldTypeByte0, 1640, 1640, byteArray0, byteOrder0, 1640);
      tiffField0.dump();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [B@4fcdbe65
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[76];
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(50, 1640, fieldTypeByte0, 50, 4L, byteArray0, byteOrder0, 1640);
      tiffField0.dump();
      assertEquals(1640, tiffField0.getDirectoryType());
      assertEquals(1640, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getTag());
      assertEquals(4, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2752, 2752, fieldTypeDouble0, 2752, 2752, byteArray0, byteOrder0, 2752);
      tiffField0.dump();
      tiffField0.getDoubleArrayValue();
      assertEquals(22016, tiffField0.getBytesLength());
      assertEquals(2752, tiffField0.getOffset());
      assertEquals(2752, tiffField0.getSortHint());
      assertEquals(2752, tiffField0.getTag());
      assertEquals(2752, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[81];
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField(6, 6, fieldTypeByte0, 6, 6, byteArray0, byteOrder0, 6);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@5f3fd964 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-4050), (-4050), fieldTypeRational0, 2443, (-4050), byteArray0, byteOrder0, 2443);
      tiffField0.getDoubleArrayValue();
      tiffField0.getValue();
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0xfffff02e)", string0);
      
      tiffField0.getFieldTypeName();
      assertEquals((-4050), tiffField0.getOffset());
      assertEquals(2443, tiffField0.getSortHint());
      assertEquals((-4050), tiffField0.getDirectoryType());
      assertEquals(19544, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeShort0, 243, 50, byteArray0, byteOrder0, 243);
      tiffField0.getDoubleArrayValue();
      assertEquals(50, tiffField0.getTag());
      assertEquals(243, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(486, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2584, 2584, fieldTypeShort0, 1L, 1L, byteArray0, byteOrder0, 2584);
      tiffField0.getIntArrayValue();
      assertEquals(2584, tiffField0.getTag());
      assertEquals(2584, tiffField0.getDirectoryType());
      assertEquals(2584, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(2, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[19];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(2521, 2521, fieldTypeFloat0, 1L, 1L, byteArray0, byteOrder0, (-2086));
      tiffField0.getDoubleArrayValue();
      tiffField0.getIntValue();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): 0.0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[166];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(1634, 1634, fieldTypeDouble0, 1634, 1634, byteArray0, byteOrder0, 1634);
      tiffField0.dump();
      assertEquals(1634, tiffField0.getOffset());
      assertEquals(1634, tiffField0.getDirectoryType());
      assertEquals(1634, tiffField0.getTag());
      assertEquals(1634, tiffField0.getSortHint());
      assertEquals(13072, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(32, "P");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65535, 32, fieldTypeRational0, 32, 32, byteArray0, byteOrder0, 1725);
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(256, tiffField0.getBytesLength());
      assertEquals(1725, tiffField0.getSortHint());
      assertEquals(32, tiffField0.getDirectoryType());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(32, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[113];
      ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(37133, "s&s;");
      TiffField tiffField0 = new TiffField(37133, 37133, fieldTypeShort0, 37133, 37133, byteArray0, byteOrder0, 55);
      tiffField0.dump();
      assertEquals(37133, tiffField0.getOffset());
      assertEquals(55, tiffField0.getSortHint());
      assertEquals(74266, tiffField0.getBytesLength());
      assertEquals(37133, tiffField0.getDirectoryType());
      assertEquals(37133, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[225];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(69, 69, fieldTypeFloat0, 69, 69, byteArray0, byteOrder0, 69);
      tiffField0.dump();
      assertEquals(69, tiffField0.getOffset());
      assertEquals(276, tiffField0.getBytesLength());
      assertEquals(69, tiffField0.getDirectoryType());
      assertEquals(69, tiffField0.getTag());
      assertEquals(69, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[208];
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1920), 2, fieldTypeLong0, 1267L, 1267L, byteArray0, byteOrder0, (-1920));
      tiffField0.dump();
      assertEquals(5068, tiffField0.getBytesLength());
      assertEquals((-1920), tiffField0.getTag());
      assertEquals((-1920), tiffField0.getSortHint());
      assertEquals(1267, tiffField0.getOffset());
      assertEquals(2, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[423];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TiffField tiffField0 = new TiffField(2112, 2112, fieldTypeDouble0, 2112, 2446L, byteArray0, byteOrder0, 1809);
      String string0 = tiffField0.getValueDescription();
      assertEquals(2446, tiffField0.getOffset());
      assertEquals(16896, tiffField0.getBytesLength());
      assertEquals(1809, tiffField0.getSortHint());
      assertEquals(2112, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(2112, tiffField0.getDirectoryType());
  }
}
