/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 08:51:25 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.containsAll(jSONArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(381);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 381, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray1.set(2958, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      jSONArray0.sort(comparator0);
      jSONArray3.getRelatedArray();
      jSONArray2.removeAll(jSONArray3);
      Class<Integer> class0 = Integer.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      jSONArray0.listIterator();
      jSONArray3.removeAll(jSONArray0);
      jSONArray1.remove((Object) null);
      jSONArray2.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray0.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.fluentRetainAll(jSONArray2);
      byte byte0 = (byte) (-1);
      byte byte1 = (byte) (-71);
      byte byte2 = (byte)0;
      byte byte3 = (byte) (-1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        uTF8Decoder0.replaceWith("`.^pk&Q\"%k]O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Replacement too long
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      jSONArray0.getLong(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.contains(bigDecimal0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(1771);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1771, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray1.set(2958, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      JSON.toJSONString((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory3);
      jSONArray0.getString(1034);
      assertEquals(1035, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      classLoader0.setClassAssertionStatus("", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONArray0.set(88, parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.ParserConfig@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1034, "O]d]3|");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      jSONArray0.getIntValue(135);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 1035
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2298);
      jSONArray0.set(1607, integer0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1034, (Collection<?>) jSONArray2);
      jSONArray3.getString(104);
      boolean boolean0 = jSONArray2.remove((Object) null);
      boolean boolean1 = jSONArray1.removeAll(jSONArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1323);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1323, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      JSON.toJSON((Object) jSONArray0, parserConfig0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("sT]7SUP'yfG|", treeMap0);
      jSONArray1.set(3051, (Object) null);
      jSONArray1.getDate(116);
      assertEquals(3052, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 989);
      jSONArray0.containsAll(linkedList0);
      Object object0 = jSONArray0.clone();
      assertNotSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -360
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) jSONArray0, parserConfig0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getRelatedArray();
      jSONArray1.removeAll(jSONArray2);
      Class<Integer> class0 = Integer.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      jSONArray0.listIterator();
      jSONArray2.removeAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4586);
      JSONArray jSONArray1 = jSONArray0.fluentSet(46, integer0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        JSON.parseArray("0000-00-00T00:00:00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(2958);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(50900, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50900, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      int int0 = 887;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getDate(1034);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      assertEquals(2959, jSONArray0.size());
      
      jSONArray1.getObject(989, (Type) null);
      JSON.defaultLocale = jSONArray0.defaultLocale;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1027));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "O]d]3|";
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("O]d]3|", (Type) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : O]d]3|
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Class<String> class0 = String.class;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSON.parseArray((String) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(2958);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      String string0 = JSON.VERSION;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.subList(6968, 107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFFAULT_DATE_FORMAT = "0000-00-00T00:00:00";
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      JSONArray jSONArray2 = new JSONArray(989);
      jSONArray1.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      jSONArray0.indexOf((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-2956));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2958, 989);
      assertEquals(2959, jSONArray0.size());
      
      jSONArray0.contains((Object) null);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) "1.2.46");
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getString(3067);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3067, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        jSONArray0.getString((-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1026, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-928));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1024, "@type");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1024);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "d]3|";
      int int0 = 1015;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1015, "d]3|");
      jSONArray1.fluentRemoveAll(jSONArray0);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "can not cast to char[]";
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.toArray();
      jSONArray1.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(28);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray0.fluentSet(2232, jSONArray2);
      Date date0 = null;
      try {
        date0 = new MockDate("@type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1793);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      LinkedHashSet<ParameterizedTypeImpl> linkedHashSet0 = new LinkedHashSet<ParameterizedTypeImpl>();
      jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray0.iterator();
      JSON.parseObject("");
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1034;
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.getJSONObject("checkValue");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1034, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1034, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(2845);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2845, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.contains(jSONArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-2014));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-4079));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4079
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2958);
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      int int0 = 352;
      JSONArray jSONArray1 = jSONArray0.fluentSet(352, serializerFeature0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort(352);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : DisableCheckSpecialChar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3280;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", concurrentHashMap0);
      jSONArray0.add((Object) null);
      LinkedHashSet<BigDecimal> linkedHashSet0 = new LinkedHashSet<BigDecimal>();
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray0.set(3280, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-997));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4558;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(4558);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4558, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      long long0 = jSONArray0.getLongValue(1018);
      assertEquals(1035, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(2958, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3146));
      JSONArray jSONArray1 = jSONArray0.fluentSet(10, integer0);
      jSONArray0.isEmpty();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-3146));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-217), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.indexOf(parameterizedTypeImpl0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = new JSONArray();
      JSONArray jSONArray4 = new JSONArray();
      JSONArray jSONArray5 = jSONArray2.fluentAddAll((Collection<?>) jSONArray4);
      boolean boolean0 = jSONArray5.retainAll(jSONArray3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      jSONArray0.parallelStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d]3|");
      jSONArray1.getFloat(989);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3087);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3087, Size: 2959
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2958, 989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3078, (Object) null);
      Class<Integer> class0 = Integer.class;
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      jSONArray2.toJavaList(class0);
      jSONArray1.isEmpty();
      jSONArray2.getComponentType();
      assertEquals(3078, jSONArray1.size());
      assertEquals(3078, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3954, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3954, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader2 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader2);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1034);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(17);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(989, "@type");
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*pQ22l4DRXC4%");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1034;
      jSONArray0.iterator();
      jSONArray0.fluentSet(1034, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1034);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(2958);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.subList(989, 181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(989) > toIndex(181)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      jSONArray0.set(2958, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-1143));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      Class<Integer> class0 = Integer.class;
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.toJavaList(class0);
      jSONArray0.get(1034);
      jSONArray0.get(989);
      jSONArray1.fluentRemove(989);
      assertEquals(1034, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(2958);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1001, "@type");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray0.set(1001, jSONArray2);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("VKR&d%Dj}d<9hayA#pZ", hashMap0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(726, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONObject(3038);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3038, Size: 1003
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(127, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-39));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2958);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, integer0);
      jSONArray0.stream();
      jSONArray1.isEmpty();
      jSONArray0.remove((Object) jSONArray1);
      jSONArray0.getSqlDate(989);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "@type");
      jSONArray1.getBoolean(0);
      assertEquals(2959, jSONArray0.size());
      
      jSONArray0.getJSONArray(0);
      jSONArray0.getLong(0);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      jSONArray0.isEmpty();
      jSONArray0.getBooleanValue(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = jSONArray0.remove((Object) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1124075009);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1053, "d]3|");
      JSONArray jSONArray2 = new JSONArray(1053);
      jSONArray2.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getFloat(1019);
      jSONArray0.getComponentType();
      jSONArray1.addAll(1053, (Collection<?>) jSONArray2);
      assertEquals(1054, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2958, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3069);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3069, Size: 2959
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      Class<Integer> class0 = Integer.class;
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.toJavaList(class0);
      jSONArray0.get(1034);
      Class<Object> class1 = Object.class;
      jSONArray0.toJavaList(class1);
      assertEquals(1035, jSONArray0.size());
      
      jSONArray0.setComponentType(class0);
      assertEquals(1035, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2958, 989);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(2958);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.lastIndexOf("");
      String string0 = "tU@A\"{1}EN0Sj";
      Class<Annotation> class0 = Annotation.class;
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'g';
      charArray0[2] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 989, 50);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class1, (Type) class1, (PropertyNamingStrategy) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("");
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>((Map<? extends String, ? extends Field>) concurrentSkipListMap0);
      ParserConfig.getFieldFromCache("@type", treeMap0);
      jSONObject0.putIfAbsent("Gr#bq]Hapbc9RehmcU", (Object) null);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(2958, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3054, "1.2.46");
      jSONArray1.getFloat(989);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(3054);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2.46\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray1.set(2958, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray2.getRelatedArray();
      jSONArray1.add((Object) parserConfig0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray3.isEmpty();
      JSONArray jSONArray4 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      JSONArray jSONArray2 = jSONArray0.fluentSet(2958, jSONArray1);
      jSONArray1.removeAll(jSONArray0);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue((-1807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.remove(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.set((-2225), jSONArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, byteArrayOutputStream0);
      Class<String> class0 = String.class;
      JSON.parseObject("", class0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(2958, (Object) null);
      JSONObject jSONObject0 = new JSONObject(1634);
      jSONArray2.fluentAdd((Object) jSONObject0);
      jSONArray2.isEmpty();
      jSONArray2.getComponentType();
      jSONArray1.setRelatedArray("@type");
      jSONArray2.listIterator(2958);
      assertEquals(2960, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "@type");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray1.getTimestamp(1150);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      boolean boolean0 = jSONArray0.contains(jSONArray1);
      assertEquals(2959, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.createJavaBeanSerializer(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 989;
      integerArray0[1] = (Integer) 2958;
      integerArray0[2] = (Integer) 989;
      Integer[] integerArray1 = jSONArray0.toArray(integerArray0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.getComponentType();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      boolean boolean0 = jSONArray0.addAll((Collection<?>) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSON.parseArray("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig.global = parserConfig0;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(989);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      jSONArray1.getObject(1018, (Type) null);
      jSONArray1.getJSONObject(1018);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.add(2885, (Object) "d]3|");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2885, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-320);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-320));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "@type");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray1.fluentSet(989, bigDecimal0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(2958);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray0.setComponentType((Type) null);
      jSONArray0.set(2958, 989);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1034, "d]3|");
      jSONArray0.fluentAdd((Object) "d]3|");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) parserConfig0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1034);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) jSONArray0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      Class<Integer> class0 = Integer.class;
      JSONArray jSONArray2 = new JSONArray();
      List<Integer> list0 = jSONArray2.toJavaList(class0);
      jSONArray0.get(1034);
      boolean boolean0 = jSONArray1.retainAll(list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.removeAll(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedHashSet0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) jSONArray0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      jSONArray0.getShort(1002);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray1.getFloat(1002);
      jSONArray0.getComponentType();
      jSONArray1.getLong(1002);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.getObject(1002, class0);
      jSONArray1.getRelatedArray();
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = "zjcX'}";
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1974));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-74);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        jSONArray0.add(2958, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory3);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      jSONArray1.getString(515);
      jSONArray0.clear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Collection<JSONObject> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      Class<String> class0 = String.class;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.UseObjectArray;
      // Undeclared exception!
      try { 
        jSONArray1.getLong(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2958, "d]3|");
      boolean boolean0 = jSONArray0.getBooleanValue(989);
      assertEquals(2959, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) serializerFeature2);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, byteArrayOutputStream0);
      jSONArray2.getShort(11);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3600);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3600, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1143);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONArray1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      stringArray0[4] = "@type";
      stringArray0[5] = "@type";
      stringArray0[6] = "@type";
      stringArray0[7] = "illegal stat, textLength is zero";
      stringArray0[8] = "@type";
      String[] stringArray1 = jSONArray2.toArray(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ParserConfig> linkedList0 = new LinkedList<ParserConfig>();
      LinkedHashSet<ParserConfig> linkedHashSet0 = new LinkedHashSet<ParserConfig>(linkedList0);
      jSONArray0.set(993, linkedHashSet0);
      LinkedHashSet<ParameterizedTypeImpl> linkedHashSet1 = new LinkedHashSet<ParameterizedTypeImpl>();
      JSONArray jSONArray1 = new JSONArray(1026);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedHashSet1);
      JSONArray jSONArray4 = jSONArray3.fluentSet(989, jSONArray0);
      jSONArray4.getInteger(125);
      assertEquals(990, jSONArray3.size());
      assertEquals(994, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2958, "d]3|");
      jSONArray0.getShort(1002);
      jSONArray0.getDouble(110);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1026;
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1026);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1026, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(114);
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(568, 2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2958
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1034, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(3169);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3169, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(208);
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      jSONArray2.fluentRemove((Object) jSONArray1);
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0, 37);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.add((Object) "d]3|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray0.getShort(1002);
      int int0 = (-274);
      // Undeclared exception!
      try { 
        jSONArray1.set((-274), "@type");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.set((-1613), 989);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(626, linkedHashSet0);
      jSONArray1.contains(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(626);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(989, (Object) "@type");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4586);
      JSONArray jSONArray1 = jSONArray0.fluentSet(46, integer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader2 = aSMDeserializerFactory2.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader2);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory3);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue((-1337));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getDoubleValue(1012);
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertEquals(1035, jSONArray0.size());
      assertTrue(boolean0);
      
      jSONArray0.fluentAdd((Object) "O]d]3|");
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1034);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O]d]3|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(2958);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(2045);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2045, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4558);
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = bigDecimal0.abs(mathContext0);
      bigDecimal1.toBigInteger();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      RoundingMode roundingMode1 = RoundingMode.HALF_UP;
      bigDecimal0.divide(bigDecimal1, 22, roundingMode1);
      Class<Integer> class0 = Integer.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.toJSON((Object) jSONArray0, parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1024, "@type");
      JSONArray jSONArray2 = jSONArray0.fluentSet(3064, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getDoubleValue(996);
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.fluentAdd((Object) null);
      byte byte0 = jSONArray1.getByteValue(988);
      assertEquals(1036, jSONArray1.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 379;
      JSONObject jSONObject0 = new JSONObject(379);
      jSONObject0.getJSONArray("'8}");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet(379, "'8}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1026, "@type");
      List<Integer> list0 = new LinkedList<Integer>();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = null;
      JSON.parseArray((String) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(2958);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) null, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      String string1 = "";
      JSON.parseArray("");
      // Undeclared exception!
      try { 
        jSONArray0.getByte(989);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1034);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1034, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.contains(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory2.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      jSONArray1.getIntValue(7);
      jSONArray0.getFloatValue(0);
      jSONArray1.fluentRetainAll(jSONArray0);
      double double0 = jSONArray0.getDoubleValue(0);
      assertEquals(1035, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature serializerFeature2 = SerializerFeature.UseSingleQuotes;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature3;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature3;
      serializerFeatureArray0[6] = serializerFeature0;
      JSON.toJSONString((Object) serializerFeature0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.isEmpty();
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getBooleanValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedHashSet0);
      jSONArray1.getComponentType();
      int int0 = jSONArray0.lastIndexOf(linkedHashSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      JSONArray jSONArray2 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSONString((Object) jSONArray0, false);
      jSONArray0.contains(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-959));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4558);
      JSONArray jSONArray1 = jSONArray0.fluentSet(22, integer0);
      jSONArray1.removeAll(jSONArray0);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.subList(4558, 574);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 574
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.fluentSet(1634, byteArrayOutputStream0);
      Class<String> class0 = String.class;
      JSON.parseObject("", class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, (Object) null);
      jSONArray1.isEmpty();
      jSONArray1.getComponentType();
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-2244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1034;
      jSONArray0.fluentSet(1034, "O]d]3|");
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1034, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.indexOf(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.addAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      jSONArray0.isEmpty();
      jSONArray0.getFloatValue(0);
      // Undeclared exception!
      try { 
        JSON.parseArray("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.SerializerFeature
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      assertNotSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2958, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "@type");
      jSONArray1.getBoolean(0);
      jSONArray0.getJSONArray(0);
      jSONArray1.getShortValue(0);
      jSONArray0.remove((Object) null);
      assertEquals(2958, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(1034);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      Integer integer0 = new Integer(2958);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.createJavaBeanSerializer(class0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) integer0, serializeConfig0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(1133, (Object) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1133, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, (Object) null);
      jSONArray0.isEmpty();
      jSONArray0.getFloatValue(989);
      JSON.defaultLocale = jSONArray0.defaultLocale;
      jSONArray0.setRelatedArray("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.subList(553, 2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2958
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2958);
      jSONArray0.fluentSet(0, integer0);
      jSONArray0.contains(integer0);
      jSONArray0.listIterator();
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, jSONArray1);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      jSONArray2.toJavaList(class0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray2.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory2.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      int int0 = jSONArray1.getIntValue(7);
      assertEquals(1035, jSONArray0.size());
      assertEquals(0, int0);
      
      jSONArray0.getFloatValue(0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1035, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSON.parseArray((String) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(2958);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) null, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = jSONArray0.containsAll(linkedList0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Object object0 = JSON.toJSON((Object) linkedList0, parserConfig0);
      boolean boolean1 = jSONArray1.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      JSON.toJSON((Object) jSONArray0);
      jSONArray0.set(989, jSONArray1);
      // Undeclared exception!
      jSONArray1.getFloatValue(989);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory3);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      jSONArray0.getIntValue(0);
      jSONArray0.getByte(0);
      assertEquals(1035, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.remove(165);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 165, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSON.parseArray("NULL");
      Class<ParserConfig> class0 = ParserConfig.class;
      Class<BigDecimal> class1 = BigDecimal.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1CD`%(", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class1, class1, (Field) null, 2958, 1199, 711);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1822), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1822, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory((ClassLoader) null);
      jSONArray1.getFloatValue(989);
      jSONArray1.fluentRetainAll(jSONArray1);
      assertEquals(1035, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(59);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      Integer integer0 = new Integer((-717));
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<JSONArray> class0 = JSONArray.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      SerializeConfig serializeConfig1 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) linkedHashSet0, serializeConfig1, serializerFeatureArray0);
      jSONArray0.fluentAdd(0, (Object) serializeConfig1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2495, serializerFeature0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "");
      jSONArray2.fluentRemove(2175);
      jSONArray2.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.get(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 2496
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-115), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      Integer integer0 = new Integer(989);
      jSONArray0.contains(integer0);
      jSONArray0.getShort(0);
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      jSONArray0.fluentAdd((Object) serializerFeature0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), class0);
      Type type0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(314, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 314, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 100;
      JSONArray jSONArray0 = new JSONArray(100);
      Class<Field> class0 = Field.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(100, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getBooleanValue(887);
      jSONArray1.iterator();
      assertEquals(1035, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 0;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stream<Object> stream0 = jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory3);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      jSONArray1.getComponentType();
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) classLoader1);
      jSONArray2.fluentAdd((Object) stream0);
      assertEquals(1036, jSONArray1.size());
      assertEquals(1036, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set((-1), (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getObject(989, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      JSONObject[] jSONObjectArray0 = new JSONObject[3];
      JSONObject jSONObject0 = new JSONObject(2958);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentHashMap0);
      jSONObjectArray0[0] = jSONObject1;
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObjectArray0[1] = jSONObject2;
      jSONArray1.getJSONObject(989);
      jSONObjectArray0[2] = null;
      // Undeclared exception!
      try { 
        jSONArray1.toArray(jSONObjectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "";
      Class<Object> class0 = Object.class;
      JSON.parseArray("", class0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1019, "O]d]3|");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      jSONArray0.getIntValue(135);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1019);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O]d]3|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hW%|Lu oP?#o,C1vk");
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      jSONArray1.getFloat(23);
      // Undeclared exception!
      try { 
        jSONArray0.getString(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 1035
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      jSONArray0.getBoolean(199);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      jSONArray0.get(1018);
      assertEquals(2070, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(2958, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.removeIf(predicate0);
      jSONArray0.set(0, 989);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((int)  (-12), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      System.setCurrentTimeMillis((-329L));
      JSONArray jSONArray0 = new JSONArray(1669);
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1669, serializerFeature0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(2958, 989);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2958) > toIndex(989)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-66));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 0;
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      int int1 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(2958, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-93));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray1.set(2958, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray3.getRelatedArray();
      jSONArray2.removeAll(jSONArray3);
      Class<Integer> class0 = Integer.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      jSONArray0.listIterator();
      jSONArray3.removeAll(jSONArray0);
      jSONArray2.iterator();
      jSONArray1.fluentRetainAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.getString(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MathContext mathContext0 = MathContext.UNLIMITED;
      // Undeclared exception!
      try { 
        jSONArray1.subList((-2423), (-2423));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2423
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray1.set(2958, jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(989, 3044, 2958, (-261), 989).when(comparator0).compare(any() , any());
      jSONArray0.sort(comparator0);
      jSONArray3.getRelatedArray();
      // Undeclared exception!
      jSONArray2.removeAll(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1002, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      aSMDeserializerFactory0.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory3);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(1034);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : d]3|
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      jSONArray0.containsAll(set0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(989);
      LinkedHashSet<SerializerFeature> linkedHashSet0 = new LinkedHashSet<SerializerFeature>();
      jSONArray0.fluentSet(1024, linkedHashSet0);
      jSONArray0.getBigDecimal(989);
      assertEquals(1025, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1019, "O]d]3|");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader1.getParent();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1019);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O]d]3|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      jSONArray0.getBoolean(199);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(862, (Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      assertTrue(jSONArray3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-2229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getDoubleValue(21);
      jSONArray1.remove(1014);
      jSONArray0.containsAll(jSONArray1);
      jSONArray0.getBigInteger(989);
      assertEquals(1034, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-205);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-205), (-1985));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -205
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getDoubleValue(1012);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      assertEquals(8280, jSONArray1.size());
      assertEquals(8280, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory3);
      jSONArray0.getIntValue(989);
      jSONArray1.getByte(0);
      jSONArray0.fluentRetainAll(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4902, "O]d]3|");
      jSONArray1.remove(4902);
      jSONArray1.getObject(16, (Type) null);
      jSONArray1.getBoolean(2958);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.get(8);
      assertEquals(4902, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-3234));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1819);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1819
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray1.set(2958, parserConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(989, 138, 2958, (-1999), 99999).when(comparator0).compare(any() , any());
      jSONArray0.sort(comparator0);
      jSONArray3.getRelatedArray();
      jSONArray2.removeAll(jSONArray3);
      Class<Integer> class0 = Integer.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      jSONArray0.listIterator();
      jSONArray3.removeAll(jSONArray0);
      jSONArray1.remove((Object) jSONArray0);
      jSONArray2.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(2209);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2209, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      String string0 = "";
      JSON.parseObject("");
      String string1 = null;
      Type type0 = null;
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = 'C';
      charArray0[2] = 'L';
      charArray0[3] = '9';
      charArray0[4] = '6';
      charArray0[5] = 'U';
      charArray0[6] = 'B';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 989);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2958);
      jSONArray0.fluentSet(0, integer0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.clone();
      boolean boolean0 = jSONArray1.contains(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(208);
      JSONArray jSONArray1 = new JSONArray(989);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      jSONArray2.fluentRemove((Object) jSONArray1);
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0, 37);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1034;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("O]d]3|", concurrentSkipListMap0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1313), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3060);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3060, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4321;
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(4321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4321, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      jSONArray1.getObject(989, (Type) null);
      jSONArray1.containsAll(jSONArray0);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(86);
      bigDecimalArray0[1] = bigDecimal1;
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal2 = new BigDecimal((double) 2958, mathContext0);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ZERO;
      bigDecimalArray0[3] = bigDecimal3;
      // Undeclared exception!
      try { 
        jSONArray1.toArray(bigDecimalArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      jSONArray0.listIterator();
      jSONArray1.getObject(989, (Type) null);
      jSONArray1.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(2958);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature2;
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray0.containsAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.get(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-7664));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2958, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      jSONArray1.getObject(1018, (Type) null);
      jSONArray1.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(2958);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2958);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "O]d]3|");
      jSONArray1.getDoubleValue(1012);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue((-103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4558);
      JSONArray jSONArray1 = jSONArray0.fluentSet(22, integer0);
      jSONArray1.removeAll(jSONArray0);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(4558);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4558, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 989);
      boolean boolean0 = jSONArray0.containsAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1032);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1032, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      int int0 = 1767;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1767);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1767, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSON.parseArray((String) null);
      int int0 = 1;
      SerializeWriter serializeWriter0 = new SerializeWriter(2958);
      SerializeWriter serializeWriter1 = serializeWriter0.append('S');
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.writeJSONString((Writer) serializeWriter1, (Object) null, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(181, true);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[9];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      Class<SerializerFeature> class0 = SerializerFeature.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      Class<ParserConfig> class1 = ParserConfig.class;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter4;
      SimplePropertyPreFilter simplePropertyPreFilter5 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[6] = (SerializeFilter) simplePropertyPreFilter5;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[7] = (SerializeFilter) pascalNameFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter6 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[8] = (SerializeFilter) simplePropertyPreFilter6;
      JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, serializeFilterArray0, 989, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentClear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "]3");
      jSONArray1.getBooleanValue(887);
      jSONArray1.iterator();
      jSONArray1.addAll(989, (Collection<?>) jSONArray0);
      assertEquals(2070, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) jSONArray0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      jSONArray0.getShort(1002);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray1.getFloat(1002);
      jSONArray0.getComponentType();
      jSONArray1.getLong(1002);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2958, 989);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 65536;
      jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      jSONArray0.set(65536, (Object) null);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray1.contains(jSONArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1034, "@type");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray0.getComponentType();
      jSONArray0.getInteger(989);
      assertEquals(1035, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      int int1 = (-1961);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.stream();
      jSONArray1.getObject(1018, (Type) null);
      jSONArray0.getBoolean(199);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(862, (Object) jSONArray1);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getString(997);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 997, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.remove(1014);
      jSONArray1.getObject(81, (Type) null);
      jSONArray1.getBoolean(0);
      jSONArray0.getJSONArray(0);
      jSONArray1.getShortValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((-1213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getDoubleValue(21);
      jSONArray1.remove(1014);
      jSONArray1.getObject(81, (Type) null);
      jSONArray0.getJSONArray(0);
      jSONArray1.getShortValue(0);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      Class<Integer> class0 = Integer.class;
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = jSONArray0.fluentRemove((Object) "d]3|");
      jSONArray3.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.get(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 1034
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      jSONArray0.isEmpty();
      jSONArray0.size();
      jSONArray0.getDouble(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      int int0 = jSONArray1.lastIndexOf(jSONArray0);
      assertEquals(990, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-3146));
      jSONArray0.fluentSet(10, integer0);
      jSONArray0.isEmpty();
      jSONArray0.getComponentType();
      jSONArray0.getShort(10);
      assertEquals(11, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(0, 989);
      // Undeclared exception!
      try { 
        JSON.parseArray("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      boolean boolean0 = jSONArray1.addAll((Collection<?>) jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "@type");
      jSONArray1.getJSONObject(1018);
      jSONArray0.getDouble(989);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) jSONArray0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "1.2.46");
      jSONArray0.getShort(1002);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray1.getFloat(1002);
      jSONArray1.fluentAdd((Object) serializerFeature2);
      jSONArray0.getComponentType();
      jSONArray1.getLong(1002);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONArray1.equals(parserConfig0);
      assertEquals(2960, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3054, "1.2.46");
      jSONArray1.getShort(989);
      jSONArray1.getFloat(989);
      jSONArray1.getComponentType();
      int int0 = 32;
      jSONArray1.getLong(32);
      jSONArray0.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray1.subList((-270), (-270));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -270
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      jSONArray0.getBoolean(199);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.get(1018);
      jSONArray0.getJSONArray(1018);
      assertEquals(1035, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      jSONArray0.set((-1), 989);
      jSONArray0.isEmpty();
      List<SerializerFeature> list0 = new LinkedList<SerializerFeature>();
      boolean boolean0 = jSONArray0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.toJSONString((Object) jSONArray0, (-1), serializerFeatureArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)32;
      jSONArray0.clone();
      byteArray0[7] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "@type");
      jSONArray1.retainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int int0 = 0;
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray0 = new JSONArray(0);
      int int1 = (-236);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-236), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -236, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2958, 989);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1275));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      jSONArray0.getBoolean(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory3);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      long long0 = jSONArray0.getLongValue(1018);
      assertEquals(1035, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.parallelStream();
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader.getSystemClassLoader();
      jSONArray0.add(989, (Object) "d]3|");
      Class<Integer> class0 = Integer.class;
      JSON.parseArray((String) null, class0);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(2958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2958, Size: 1036
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2958, "d]3|");
      BigDecimal bigDecimal0 = new BigDecimal(989);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(2958);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : d]3|
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      jSONArray0.getBoolean(199);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.get(1018);
      int int0 = jSONArray1.size();
      assertEquals(1035, int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSON.parseArray((String) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(2958);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) null, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      JSON.parseArray("");
      // Undeclared exception!
      try { 
        jSONArray0.getByte(989);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      // Undeclared exception!
      try { 
        jSONArray0.add(3071, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3071, Size: 2959
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
      try { 
        jSONArray0.set((-1190), bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      // Undeclared exception!
      try { 
        jSONArray0.get((-3943));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2958, "d]3|");
      jSONArray1.getObject(1018, (Type) null);
      jSONArray1.getJSONObject(1018);
      jSONArray0.toArray();
      jSONArray0.remove(2958);
      assertEquals(2958, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1034;
      Integer integer0 = new Integer(2298);
      jSONArray0.set(0, integer0);
      Class<String> class0 = String.class;
      JSON.parseObject("", class0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(2298, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2298, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray1 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory2.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory3);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2637), aSMDeserializerFactory1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      Class<JSONArray> class0 = JSONArray.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(0, (Type) null);
      jSONArray0.iterator();
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1024);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1908));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.remove(989);
      jSONArray1.getObject(1018, (Type) null);
      jSONArray0.getBoolean(199);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.get(1018);
      assertEquals(1034, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2958, 989);
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = ">y52Ea`pS$uUn&Eo";
      // Undeclared exception!
      try { 
        JSON.parseArray(">y52Ea`pS$uUn&Eo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(2958, "@type");
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(2959, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      serializeConfig0.createJavaBeanSerializer(class0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = jSONArray0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.isEmpty();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = new JSONArray(2958);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-234), (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -234, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "O]d]3|";
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "O]d]3|");
      jSONArray1.getObject(1018, (Type) null);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      featureArray0[0] = feature0;
      JSONArray jSONArray2 = jSONArray0.fluentAdd(989, (Object) "1.2.46");
      jSONArray2.getBoolean(199);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<String> class0 = String.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "@type");
      jSONArray1.getBooleanValue(887);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentHashMap0);
      // Undeclared exception!
      jSONArray0.fluentSet(52429, (Object) null);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4586);
      JSONArray jSONArray1 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentSkipListMap0);
      jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray2.subList(989, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(989) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(989, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(2958, 989);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      assertEquals(2959, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray1.iterator();
      // Undeclared exception!
      try { 
        jSONArray1.addAll(80, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, 989);
      LinkedHashSet<ParameterizedTypeImpl> linkedHashSet0 = new LinkedHashSet<ParameterizedTypeImpl>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      Integer integer0 = new Integer(989);
      boolean boolean0 = jSONArray1.add((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.VERSION;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSON.parseArray("");
      // Undeclared exception!
      try { 
        jSONArray1.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1034, "d]3|");
      jSONArray1.getObject(1018, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      jSONArray1.getObject(1018, (Type) null);
      jSONArray0.getBoolean(193);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.get(0);
      jSONArray0.hashCode();
      assertEquals(1035, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      Class<JSONObject> class1 = JSONObject.class;
      Class<ParameterizedTypeImpl> class2 = ParameterizedTypeImpl.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fx#)3[?qLhL!", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@type", class0, class2, class2, (Field) null, 7, 0, 2965);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      boolean boolean0 = jSONArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
