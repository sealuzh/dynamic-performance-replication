/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:38:26 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.Calendar;
import javolution.util.FastComparator;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Excecutable;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      login0.check_ip(inetAddress0);
      Login.mmo_auth_initXML();
      // Undeclared exception!
      try { 
        login0.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      Login.mmo_auth_initXML();
      Login.display_title();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      login0.check_ip((InetAddress) null);
      UserManagement.addAccountIdCount(50);
      UserManagement.addUserTXT((String) null, (String) null, "1m[2wG0^S", 'h');
      MockFile mockFile0 = new MockFile("conf/subnet_athena.conf");
      login0.check_auth_sync();
      UserManagement.setAccountIdCount(1549);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      login0.auth_max = (-651);
      login0.getServer_fd();
      Login.setPASSWORDENC((-651));
      // Undeclared exception!
      try { 
        Login.login_log("conf/subnet_athena.conf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = Login.getPASSWORDENC();
      assertEquals(2, int0);
      
      Login login0 = new Login();
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addAccountIdCount();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      login0.getAuth_num();
      MockSocket mockSocket0 = new MockSocket();
      FromAdmin fromAdmin0 = new FromAdmin();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromAdmin0);
      Login.logUnknownPackets(socket_data0);
      Login.mmo_auth_syncTXT();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      byte[] byteArray0 = new byte[1];
      Login.showTab(byteArray0);
      // Undeclared exception!
      try { 
        login0.save_config_in_log();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(50);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allow("conf/subnet_athena.conf");
      login0.getAuth_max();
      Login.mmo_auth_syncXML();
      login0.getAuth_num();
      ConfigurationManagement.setAccess_denynum(0);
      FromAdmin fromAdmin0 = new FromAdmin();
      FromClient fromClient0 = new FromClient();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      login0.check_ip(inetAddress0);
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      login0.check_ip((InetAddress) null);
      UserManagement.addAccountIdCount(50);
      UserManagement.addUserTXT((String) null, (String) null, "1m[2wG0^S", 'h');
      MockFile mockFile0 = new MockFile("conf/subnet_athena.conf");
      login0.check_auth_sync();
      UserManagement.setAccountIdCount(1549);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      // Undeclared exception!
      try { 
        login0.parse_console("int");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Socket_data socket_data1 = new Socket_data((Socket) null);
      socket_data1.getFunc_recv();
      socket_data0.setFunc_send((Excecutable) null);
      Login.logUnknownPackets(socket_data0);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = login0.getServer_fd();
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_max());
      
      MockSocket mockSocket0 = new MockSocket();
      FromAdmin fromAdmin0 = new FromAdmin();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromAdmin0);
      Login.getMd5Data(socket_data0);
      assertEquals(0, socket_data0.getEof());
      assertEquals("2345678910111213", socket_data0.getMd5key());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = Login.mmo_auth_initXML();
      Login login0 = new Login();
      Login.auth_num = 30;
      login0.getLog_fp();
      login0.getOut();
      int int1 = login0.check_ipmask(0, "                        (c)2005-2010 Darksid_1 presents                      ");
      assertTrue(int1 == int0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login.setPASSWORDENC(31034);
      Login login0 = new Login();
      int int0 = login0.check_ipmask(12, "INT");
      assertEquals(0, int0);
      assertEquals(31034, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      login0.getServer_fd();
      Login.mmo_auth_initTXT();
      Login.mmo_auth_syncXML();
      Login.setPASSWORDENC(486);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alive");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("%mCv", 18);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Login.login_log(" dRd-");
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.setAccountIdCount((-2422));
      int[] intArray0 = login0.getServer_fd();
      assertNotNull(intArray0);
      
      login0.getOut();
      login0.setOut((PrintWriter) null);
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      FromAdmin fromAdmin0 = new FromAdmin();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromAdmin0);
      Login login1 = new Login();
      // Undeclared exception!
      try { 
        login0.parse_admin(100000000, socket_data0, login1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FromClient fromClient0 = new FromClient();
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("//");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      UserManagement.addAccountIdCount(50);
      login0.getLog_fp();
      login0.check_auth_sync();
      Login.mmo_auth_syncTXT();
      Login.mmo_auth_initXML();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("BM7),", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        login0.parse_console("conf/subnet_athena.conf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FromChar fromChar0 = new FromChar();
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertNotNull(fromChar0);
      
      Socket_data socket_data0 = new Socket_data((Socket) null, fromChar0);
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertNull(socket_data0.getName());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertNotNull(socket_data0);
      
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 100000000;
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("V`f", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      Proxy proxy1 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy1.toString());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertNotNull(proxy1);
      assertSame(proxy1, proxy0);
      
      ConfigurationManagement.setSubneti(intArray0);
      assertArrayEquals(new int[] {100000000, 0, 0, 0}, intArray0);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      UserManagement.setAccountIdCount(52);
      int int0 = login0.parse_console("OFF");
      assertEquals(0, int0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      boolean boolean1 = login0.yesNoOnOffToBoolean("OFF");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      int int1 = Login.mmo_auth_initXML();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Login.login_log("OFF");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      byte[] byteArray0 = new byte[1];
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getType());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getEof());
      assertNotNull(socket_data0);
      
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login0);
      
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      
      int[] intArray0 = new int[4];
      ConfigurationManagement.setSubneti(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      
      int int0 = login0.parse_console("alive");
      assertEquals(0, int0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertNotNull(fromClient0);
      
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("alive");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      byte[] byteArray0 = new byte[1];
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      PrintWriter printWriter0 = login0.getOut();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(printWriter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PrintWriter printWriter0 = Login.loginLogOut;
      assertNull(printWriter0);
      
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      ConfigurationManagement.setAccess_allownum(28);
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      // Undeclared exception!
      try { 
        Login.showTab((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      
      Login.mmo_auth_syncTXT();
      UserManagement.setAccountIdCount(2000000);
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getName());
      assertNull(socket_data0.getMd5key());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getType());
      assertNotNull(socket_data0);
      
      byte[] byteArray0 = Login.getMd5Data(socket_data0);
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getName());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getType());
      assertNotNull(byteArray0);
      
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      byte[] byteArray0 = new byte[3];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("-", 31052);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      int int0 = login0.parse_console("status");
      assertEquals(0, int0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      UserManagement.setAccountIdCount((-549));
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login1);
      
      // Undeclared exception!
      try { 
        login1.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      login0.setAuth_max(68);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(68, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      int int0 = login0.parse_console("help");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      Login.mmo_auth_syncTXT();
      int int1 = Login.mmo_auth_initXML();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("BM7),", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      int int2 = login0.parse_console("]");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      Proxy proxy1 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertNotNull(proxy1);
      assertSame(proxy1, proxy0);
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertNotNull(mockSocket0);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      
      UserManagement.setAccountIdCount(4407);
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = Login.getPASSWORDENC();
      assertEquals(2, int0);
      
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
      
      IDBManagementLogin iDBManagementLogin1 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin1);
      
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      int int1 = login0.check_ipmask(10, "|V|g<S/xD");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.setAccess_denynum(30);
      byte[] byteArray0 = new byte[20];
      Login.showTab(byteArray0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("WARNING_43", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        login0.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      int int0 = login0.parse_console("ON");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("ON");
      assertTrue(boolean0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      FastMap<Integer, Auth_data> fastMap0 = FastMap.newInstance();
      assertTrue(fastMap0.isEmpty());
      assertFalse(fastMap0.isShared());
      assertEquals(0, fastMap0.size());
      assertNotNull(fastMap0);
      
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null, (Integer) null).when(auth_data0).getAccount_id();
      doReturn((String) null).when(auth_data0).getUserid();
      Auth_data auth_data1 = fastMap0.put((Integer) 2000000, auth_data0);
      assertFalse(fastMap0.isShared());
      assertFalse(fastMap0.isEmpty());
      assertEquals(1, fastMap0.size());
      assertNull(auth_data1);
      
      FastMap<Integer, Auth_data> fastMap1 = fastMap0.setShared(true);
      assertTrue(fastMap0.isShared());
      assertFalse(fastMap0.isEmpty());
      assertEquals(1, fastMap0.size());
      assertFalse(fastMap1.isEmpty());
      assertEquals(1, fastMap1.size());
      assertTrue(fastMap1.isShared());
      assertNotNull(fastMap1);
      assertSame(fastMap0, fastMap1);
      assertSame(fastMap1, fastMap0);
      
      FastMap<Integer, Auth_data> fastMap2 = fastMap0.setKeyComparator((FastComparator<? super Integer>) null);
      assertTrue(fastMap0.isShared());
      assertFalse(fastMap0.isEmpty());
      assertEquals(1, fastMap0.size());
      assertEquals(1, fastMap2.size());
      assertFalse(fastMap2.isEmpty());
      assertTrue(fastMap2.isShared());
      assertNotNull(fastMap2);
      assertSame(fastMap0, fastMap1);
      assertSame(fastMap0, fastMap2);
      assertSame(fastMap2, fastMap1);
      assertSame(fastMap2, fastMap0);
      
      UserManagement.setAuth_dats(fastMap2);
      assertTrue(fastMap0.isShared());
      assertFalse(fastMap0.isEmpty());
      assertEquals(1, fastMap0.size());
      assertEquals(1, fastMap2.size());
      assertFalse(fastMap2.isEmpty());
      assertTrue(fastMap2.isShared());
      assertSame(fastMap0, fastMap1);
      assertSame(fastMap0, fastMap2);
      assertSame(fastMap2, fastMap1);
      assertSame(fastMap2, fastMap0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertNotNull(mockSocket0);
      
      mockSocket0.setSendBufferSize(30);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      MockSocket mockSocket1 = new MockSocket(proxy0);
      assertFalse(mockSocket1.equals((Object)mockSocket0));
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(mockSocket1.isConnected());
      assertFalse(mockSocket1.isClosed());
      assertFalse(mockSocket1.isOutputShutdown());
      assertFalse(mockSocket1.isInputShutdown());
      assertFalse(mockSocket1.isBound());
      assertEquals("Socket[unconnected]", mockSocket1.toString());
      assertNotNull(mockSocket1);
      
      InetAddress inetAddress0 = mockSocket0.getLocalAddress();
      assertFalse(mockSocket0.equals((Object)mockSocket1));
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertNotNull(inetAddress0);
      assertNotSame(mockSocket0, mockSocket1);
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertFalse(mockSocket0.equals((Object)mockSocket1));
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getType());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getEof());
      assertNotNull(socket_data0);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(30000, FromClient.VERSION);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertNotNull(fromClient0);
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      FromClient fromClient1 = new FromClient();
      assertFalse(fromClient1.equals((Object)fromClient0));
      assertEquals(30000, FromClient.VERSION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertNotNull(fromClient1);
      
      MockSocket mockSocket2 = new MockSocket();
      assertFalse(mockSocket2.equals((Object)mockSocket0));
      assertFalse(mockSocket2.equals((Object)mockSocket1));
      assertFalse(mockSocket2.isClosed());
      assertFalse(mockSocket2.isBound());
      assertFalse(mockSocket2.isOutputShutdown());
      assertFalse(mockSocket2.isConnected());
      assertEquals("Socket[unconnected]", mockSocket2.toString());
      assertFalse(mockSocket2.isInputShutdown());
      assertNotNull(mockSocket2);
      
      Socket_data socket_data1 = new Socket_data(mockSocket2, fromAdmin0);
      assertFalse(mockSocket2.equals((Object)mockSocket0));
      assertFalse(mockSocket2.equals((Object)mockSocket1));
      assertFalse(socket_data1.equals((Object)socket_data0));
      assertFalse(mockSocket2.isClosed());
      assertFalse(mockSocket2.isBound());
      assertFalse(mockSocket2.isOutputShutdown());
      assertFalse(mockSocket2.isConnected());
      assertEquals("Socket[unconnected]", mockSocket2.toString());
      assertFalse(mockSocket2.isInputShutdown());
      assertEquals(0L, socket_data1.scheduledExecutionTime());
      assertNull(socket_data1.getType());
      assertNull(socket_data1.getName());
      assertEquals(0, socket_data1.getEof());
      assertEquals(0, socket_data1.getNew_());
      assertEquals(0, socket_data1.getListenPort());
      assertEquals(0, socket_data1.getMaintenance());
      assertEquals(0, (int)socket_data1.getAccount_id());
      assertNull(socket_data1.getMd5key());
      assertEquals(0, socket_data1.getUsers());
      assertNotNull(socket_data1);
      
      Login.logUnknownPackets(socket_data0);
      assertFalse(mockSocket0.equals((Object)mockSocket2));
      assertFalse(mockSocket0.equals((Object)mockSocket1));
      assertFalse(socket_data0.equals((Object)socket_data1));
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getType());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getEof());
      assertNotSame(mockSocket0, mockSocket2);
      assertNotSame(mockSocket0, mockSocket1);
      assertNotSame(socket_data0, socket_data1);
      
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("-", 31052);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      ConfigurationManagement.setAccess_denynum(30);
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getListenPort());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getEof());
      assertNotNull(socket_data0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2lk+q_Z<S^B");
      assertNotNull(mockPrintWriter0);
      
      ConfigurationManagement.setSubneti((int[]) null);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      
      login_ConnectionListener0.close();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      int int0 = login0.parse_console("2lk+q_Z<S^B");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Login.mmo_auth_syncTXT();
      int int1 = Login.mmo_auth_initXML();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("//", 4000);
      boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      assertTrue(boolean1 == boolean0);
      assertFalse(evoSuiteRemoteAddress1.equals((Object)evoSuiteRemoteAddress0));
      assertTrue(boolean1);
      assertNotSame(evoSuiteRemoteAddress1, evoSuiteRemoteAddress0);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login1);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login2);
      
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login2));
      assertEquals(0, login3.getAuth_num());
      assertEquals(0, login3.getAuth_max());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login3);
      
      boolean boolean2 = login3.yesNoOnOffToBoolean("NO");
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, login3.getAuth_num());
      assertEquals(0, login3.getAuth_max());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login3, login0);
      assertNotSame(login3, login1);
      assertNotSame(login3, login2);
      
      int int2 = Login.mmo_auth_initXML();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      Login.login_log("(");
      Login login4 = new Login();
      assertFalse(login4.equals((Object)login2));
      assertFalse(login4.equals((Object)login0));
      assertFalse(login4.equals((Object)login1));
      assertFalse(login4.equals((Object)login3));
      assertEquals(2, login4.getPASSWORDENC());
      assertEquals(0, login4.getAuth_max());
      assertEquals(0, login4.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login4);
      
      // Undeclared exception!
      try { 
        login4.do_final();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("-", 31052);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      ConfigurationManagement.setAccess_denynum(30);
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getType());
      assertNotNull(socket_data0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ConfigurationManagement.setSubneti(intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      ConfigurationManagement.setSubneti(intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      
      login_ConnectionListener0.close();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      int int0 = login0.parse_console("red");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Login.mmo_auth_syncTXT();
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      assertFalse(fastMap0.isShared());
      assertTrue(fastMap0.isEmpty());
      assertEquals(0, fastMap0.size());
      assertNotNull(fastMap0);
      
      Integer integer0 = new Integer((-2034903810));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2034903810), (int)integer0);
      assertNotNull(integer0);
      
      Auth_data auth_data0 = fastMap0.put(integer0, (Auth_data) null);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(fastMap0.isShared());
      assertFalse(fastMap0.isEmpty());
      assertEquals(1, fastMap0.size());
      assertNull(auth_data0);
      
      FastMap<Integer, Auth_data> fastMap1 = fastMap0.setShared(true);
      assertEquals(1, fastMap1.size());
      assertFalse(fastMap1.isEmpty());
      assertTrue(fastMap1.isShared());
      assertFalse(fastMap0.isEmpty());
      assertTrue(fastMap0.isShared());
      assertEquals(1, fastMap0.size());
      assertNotNull(fastMap1);
      assertSame(fastMap1, fastMap0);
      assertSame(fastMap0, fastMap1);
      
      // Undeclared exception!
      try { 
        UserManagement.setAuth_dats(fastMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.UserManagement", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Socket socket0 = null;
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getNew_());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getType());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getName());
      assertNotNull(socket_data0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      int[] intArray0 = new int[4];
      byte[] byteArray0 = Login.getMd5Data(socket_data0);
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getType());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getName());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertNotNull(byteArray0);
      
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      assertTrue(fastMap0.isEmpty());
      assertEquals(0, fastMap0.size());
      assertFalse(fastMap0.isShared());
      assertNotNull(fastMap0);
      
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = Login.getMd5Data(socket_data0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getUsers());
      assertNull(socket_data0.getType());
      assertEquals("15161718192021222324252627", socket_data0.getMd5key());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(1, socket_data0.getEof());
      assertNull(socket_data0.getName());
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = new Integer(13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      Proxy proxy1 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertNotNull(proxy1);
      assertSame(proxy1, proxy0);
      
      MockSocket mockSocket0 = new MockSocket(proxy1);
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertNotNull(mockSocket0);
      
      MockSocket mockSocket1 = new MockSocket();
      assertFalse(mockSocket1.equals((Object)mockSocket0));
      assertEquals("Socket[unconnected]", mockSocket1.toString());
      assertFalse(mockSocket1.isInputShutdown());
      assertFalse(mockSocket1.isClosed());
      assertFalse(mockSocket1.isBound());
      assertFalse(mockSocket1.isOutputShutdown());
      assertFalse(mockSocket1.isConnected());
      assertNotNull(mockSocket1);
      
      InetAddress inetAddress0 = mockSocket0.getLocalAddress();
      assertFalse(mockSocket0.equals((Object)mockSocket1));
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertNotNull(inetAddress0);
      assertSame(proxy1, proxy0);
      assertNotSame(mockSocket0, mockSocket1);
      
      Socket_data socket_data1 = new Socket_data(mockSocket1);
      assertFalse(mockSocket1.equals((Object)mockSocket0));
      assertFalse(socket_data1.equals((Object)socket_data0));
      assertEquals("Socket[unconnected]", mockSocket1.toString());
      assertFalse(mockSocket1.isInputShutdown());
      assertFalse(mockSocket1.isClosed());
      assertFalse(mockSocket1.isBound());
      assertFalse(mockSocket1.isOutputShutdown());
      assertFalse(mockSocket1.isConnected());
      assertEquals(0, socket_data1.getMaintenance());
      assertEquals(0, socket_data1.getListenPort());
      assertNull(socket_data1.getMd5key());
      assertEquals(0, socket_data1.getEof());
      assertNull(socket_data1.getName());
      assertEquals(0, (int)socket_data1.getAccount_id());
      assertEquals(0, socket_data1.getNew_());
      assertEquals(0L, socket_data1.scheduledExecutionTime());
      assertNull(socket_data1.getType());
      assertEquals(0, socket_data1.getUsers());
      assertNotNull(socket_data1);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertNotNull(fromClient0);
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      FromClient fromClient1 = new FromClient();
      assertFalse(fromClient1.equals((Object)fromClient0));
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertNotNull(fromClient1);
      
      // Undeclared exception!
      try { 
        fromClient1.parse(socket_data1, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.parse.FromClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      PrintWriter printWriter0 = Login.loginLogOut;
      assertNull(printWriter0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login1);
      
      ConfigurationManagement.setAccess_allownum(30);
      login1.do_initTXT();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotSame(login1, login0);
      
      Socket_data socket_data0 = new Socket_data((Socket) null);
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getName());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getUsers());
      assertNotNull(socket_data0);
      
      byte[] byteArray0 = Login.getMd5Data(socket_data0);
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getEof());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertNull(socket_data0.getName());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getUsers());
      assertNotNull(byteArray0);
      
      int int0 = login0.parse_console("conf/subnet_athena.conf");
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login2);
      
      login2.save_config_in_log();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login2, login1);
      assertNotSame(login2, login0);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertNotNull(fromClient0);
      
      String string0 = "xiM";
      boolean boolean0 = login2.yesNoOnOffToBoolean("YES");
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertTrue(boolean0);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login2, login1);
      assertNotSame(login2, login0);
      
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertNotNull(mockSocket0);
      
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertEquals(0, login3.getAuth_max());
      assertEquals(0, login3.getAuth_num());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login3);
      
      // Undeclared exception!
      try { 
        login3.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.ALLOW_DENY;
      UserManagement.setAccountIdCount(8);
      ConfigurationManagement.setAccess_order(aCO0);
      byte[] byteArray0 = new byte[1];
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PrintWriter printWriter0 = Login.loginLogOut;
      assertNull(printWriter0);
      
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "conf/subnet_athena.conf");
      assertFalse(boolean0);
      
      ConfigurationManagement.setAccess_allownum(28);
      InetAddress inetAddress0 = MockInetAddress.getByName("ShaU`nqV!c#ljVmy]");
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("ShaU`nqV!c#ljVmy]/200.42.42.0", inetAddress0.toString());
      assertNotNull(inetAddress0);
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.save_config_in_log();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
      
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress1.equals((Object)inetAddress0));
      assertFalse(inetAddress1.isMCSiteLocal());
      assertTrue(inetAddress1.isSiteLocalAddress());
      assertFalse(inetAddress1.isAnyLocalAddress());
      assertFalse(inetAddress1.isMCOrgLocal());
      assertFalse(inetAddress1.isMulticastAddress());
      assertEquals("/192.168.1.42", inetAddress1.toString());
      assertFalse(inetAddress1.isMCLinkLocal());
      assertFalse(inetAddress1.isMCGlobal());
      assertFalse(inetAddress1.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress1.getHostAddress());
      assertFalse(inetAddress1.isLoopbackAddress());
      assertFalse(inetAddress1.isMCNodeLocal());
      assertNotNull(inetAddress1);
      assertNotSame(inetAddress1, inetAddress0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress1, 10, inetAddress1, 1907);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7e7d6601
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PrintWriter printWriter0 = Login.loginLogOut;
      assertNull(printWriter0);
      
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "conf/subnet_athena.conf");
      assertFalse(boolean0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      
      int int0 = login0.parse_console("stat");
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      
      UserManagement.setAccountIdCount(959);
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      
      Login.ConnectionListener login_ConnectionListener0 = login1.new ConnectionListener();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_ConnectionListener0);
      
      login_ConnectionListener0.close();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login1, login0);
      
      // Undeclared exception!
      try { 
        login0.parse_console("end");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      Login.mmo_auth_syncXML();
      Login.mmo_auth_syncTXT();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("log/login.log", 500);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      ConfigurationManagement.setAccess_allownum(2);
      int[] intArray0 = null;
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'h');
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0, auth_data0.getLevel());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals("-", auth_data0.getEmail());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals((-1), auth_data0.getCharserver());
      assertNull(auth_data0.getLast_ip());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals('h', auth_data0.getSex());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getVersion());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertNotNull(auth_data0);
      
      MockFile mockFile0 = new MockFile(":Q>;O+2LGZ1cOL>%]");
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(":Q>;O+2LGZ1cOL>%]", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(":Q>;O+2LGZ1cOL>%]", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
