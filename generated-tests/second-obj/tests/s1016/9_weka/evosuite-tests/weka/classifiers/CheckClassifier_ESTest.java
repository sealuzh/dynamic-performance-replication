/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:41:22 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GreedyStepwise;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.meta.Stacking;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.trees.M5P;
import weka.core.Capabilities;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.estimators.DiscreteEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, true, false, true, false, true, 87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '87' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(true, true, true, true, true, true, 879);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '879' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T;X%Dq-";
      stringArray0[1] = "=== Train1 Dataset ===\n";
      stringArray0[2] = "";
      CheckClassifier.main(stringArray0);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, true, true, false, false, true, 18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '18' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setWordSeparators((String) null);
      checkClassifier0.setDebug(false);
      checkClassifier0.canTakeOptions();
      M5P m5P0 = new M5P();
      TestInstances testInstances0 = new TestInstances();
      checkClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, true, true, false, (-2547));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2547' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      int int0 = 3037;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, true, false, false, false, 3037);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '3037' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(true, false, true, false, false, false, 630);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '630' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(2946);
      checkClassifier0.listOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, true, true, false, 2946);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2946' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(false, true, false, true, false, true, (-526));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-526' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, true, false, true, true, false, (-1457), false, true, (-1457));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1457' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      M5P m5P0 = new M5P();
      checkClassifier0.setClassifier(m5P0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, false, true, true, true, (-2253), true, false, (-2253));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2253' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, true, true, false, false, true, (byte)87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '87' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier0.printAttributeSummary(false, true, false, true, false, true, (-382));
      DecisionTable decisionTable0 = new DecisionTable();
      checkClassifier0.setClassifier(decisionTable0);
      String[] stringArray0 = new String[1];
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        checkClassifier0.testWRTZeroR(classifier0, evaluation0, instances0, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)29;
      byteArray0[4] = (byte)1;
      byteArray0[0] = (byte)87;
      byteArray0[6] = (byte)19;
      byteArray0[8] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.getClassifier();
      boolean[] booleanArray0 = checkClassifier0.instanceWeights(true, false, false, true, true, false, (byte)1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      CheckClassifier checkClassifier1 = new CheckClassifier();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier2.setNumInstances((byte)18);
      boolean[] booleanArray1 = checkClassifier2.testToString();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      Classifier classifier0 = AbstractClassifier.makeCopy(decisionTable0);
      checkClassifier0.setClassifier(classifier0);
      checkClassifier0.doTests();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      int int0 = 1492;
      int int1 = 820;
      checkClassifier0.canHandleClassAsNthAttribute(boolean0, boolean0, boolean1, boolean2, boolean3, boolean1, int0, int1);
      checkClassifier0.declaresSerialVersionUID();
      GreedyStepwise greedyStepwise0 = new GreedyStepwise();
      decisionTable0.setSearch(greedyStepwise0);
      byte[] byteArray0 = new byte[8];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      checkClassifier0.getClassifier();
      boolean boolean4 = true;
      boolean boolean5 = true;
      boolean boolean6 = false;
      boolean boolean7 = true;
      boolean boolean8 = false;
      int int2 = 24;
      checkClassifier0.doesntUseTestClassVal(boolean4, boolean2, boolean5, boolean6, boolean7, boolean8, int2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(3, false, true, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      checkClassifier0.setClassifier(decisionTable0);
      checkClassifier0.setNumNominal((-3441));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, false, false, true, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: weka.classifiers.rules.DecisionTable: Cannot handle relational attributes!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.getClassifier();
      checkClassifier0.instanceWeights(false, false, false, false, false, false, (byte)1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T;X%Dq-";
      stringArray0[1] = "=== Train1 Dataset ===\n";
      stringArray0[2] = "";
      CheckClassifier.main(stringArray0);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canHandleNClasses(false, false, false, false, false, true, 3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f*W2Ep-#";
      stringArray0[1] = "";
      checkClassifier0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, true, false, true, true, 0, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setDebug(true);
      checkClassifier0.canTakeOptions();
      M5P m5P0 = new M5P();
      checkClassifier0.updatingEquality(true, true, true, true, true, true, 0);
      checkClassifier0.canHandleZeroTraining(false, false, false, true, true, true, 0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.printAttributeSummary(true, false, false, true, false, false, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstancesRelational((-1139));
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, false, false, true, false, (-222), (-222));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-222' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, true, true, true, (byte)3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, false, false, true, 159);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '159' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = true;
      boolean boolean4 = true;
      int int0 = 9;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, false, true, true, false, true, 9, false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '9' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Utils.SMALL = (-808.8339196914758);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, false, false, false, true, true, 1200, false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1200' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[2];
      checkClassifier0.multiInstanceHandler();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, false, true, true, (-3573));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-3573' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = false;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f*W2Ep-#";
      boolean boolean1 = false;
      boolean boolean2 = true;
      int int0 = 52;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, true, false, true, false, 52);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '52' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Utils.SMALL = (-808.8339196914758);
      boolean boolean0 = true;
      byte byte0 = (byte)18;
      byte byte1 = (byte)1;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, true, true, false, false, (byte)87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '87' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(false, false, false, false, false, (-2353));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2353' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")@wkb:m|w!j>'<y";
      stringArray0[1] = "5%";
      stringArray0[2] = "(|&mf`";
      stringArray0[3] = "Wb<xl(1";
      stringArray0[4] = "'";
      checkClassifier0.setNumString(2);
      stringArray0[5] = "not in classpath";
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, false, false, false, 50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '50' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setWordSeparators((String) null);
      checkClassifier0.setDebug(false);
      checkClassifier0.canTakeOptions();
      M5P m5P0 = new M5P();
      TestInstances testInstances0 = new TestInstances();
      checkClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, false, true, true, true, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      checkClassifier0.printAttributeSummary(false, true, true, true, false, true, 1013);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setWordSeparators((String) null);
      checkClassifier0.setDebug(false);
      checkClassifier0.canTakeOptions();
      M5P m5P0 = new M5P();
      checkClassifier0.updatingEquality(true, true, false, false, false, false, 0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getClassifier();
      checkClassifier0.updatingEquality(false, false, false, false, true, false, 0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setWordSeparators((String) null);
      checkClassifier0.setDebug(true);
      checkClassifier0.canTakeOptions();
      M5P m5P0 = new M5P();
      TestInstances testInstances0 = new TestInstances();
      checkClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, true, true, true, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      M5P m5P0 = new M5P();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, true, false, true, false, 11);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '11' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[1];
      int int0 = (-3441);
      checkClassifier0.setNumNominal((-3441));
      stringArray0[0] = "kbB:EcW.1`";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kbB:EcW.1`");
      CheckClassifier.main(stringArray0);
      checkClassifier0.canTakeOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Illegal Capacity: -3440
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.multiInstanceHandler();
      String[] stringArray0 = new String[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      checkClassifier0.setNumNominal((-3441));
      stringArray0[0] = "kbB:EcW.1`";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kbB:EcW.1`");
      checkClassifier0.canTakeOptions();
      checkClassifier0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, true, true, false, true, 20, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '20' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")@wkb:m|w!j>'<y";
      stringArray0[1] = "5%";
      stringArray0[2] = "(|&mf`";
      stringArray0[3] = "Wb<xl(1";
      stringArray0[4] = "";
      checkClassifier0.setNumString(2);
      stringArray0[5] = "not in classpath";
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, false, false, 50, false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '50' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      M5P m5P0 = new M5P();
      checkClassifier0.setClassifier(m5P0);
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = true;
      int int0 = 247;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, false, true, true, 69, true, true, 247);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '69' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      String[] stringArray0 = new String[2];
      checkClassifier0.canHandleNClasses(false, true, true, false, true, false, 0);
      stringArray0[0] = "f*W2Ep-#";
      checkClassifier0.canHandleClassAsNthAttribute(false, true, false, false, false, false, 0, 0);
      stringArray0[1] = "";
      checkClassifier0.setOptions(stringArray0);
      checkClassifier0.correctBuildInitialisation(false, false, false, false, false, false, 0);
      DiscreteEstimator discreteEstimator0 = null;
      try {
        discreteEstimator0 = new DiscreteEstimator((-127), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.estimators.DiscreteEstimator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Utils.SMALL = (-808.8339196914758);
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, true, true, true, true, 1283);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1283' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f*W2Ep-#";
      stringArray0[1] = "";
      checkClassifier0.setOptions(stringArray0);
      checkClassifier0.datasetIntegrity(true, true, false, false, false, true, 0, false, false);
      checkClassifier0.doTests();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.getClassifier();
      checkClassifier1.canHandleMissing(true, false, false, false, true, false, (byte)1, false, false, 116);
      // Undeclared exception!
      try { 
        checkClassifier1.instanceWeights(false, false, true, false, true, true, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '22' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f*W2Ep-#";
      checkClassifier0.doTests();
      checkClassifier0.setOptions(stringArray0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean2 = false;
      boolean boolean3 = false;
      int int0 = 19;
      boolean boolean4 = false;
      checkClassifier0.datasetIntegrity(boolean2, boolean1, boolean0, boolean2, boolean2, boolean3, int0, boolean3, boolean4);
      boolean boolean5 = false;
      boolean boolean6 = true;
      int int1 = 1327;
      checkClassifier0.printAttributeSummary(boolean5, boolean3, boolean6, boolean5, boolean2, boolean1, int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = false;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      boolean boolean4 = false;
      checkClassifier0.canHandleClassAsNthAttribute(false, false, false, false, false, false, 0, 0);
      stringArray0[1] = "";
      checkClassifier0.setOptions(stringArray0);
      boolean boolean5 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, true, true, false, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      boolean boolean3 = false;
      checkClassifier0.canHandleClassAsNthAttribute(false, true, true, false, false, false, 0, 0);
      stringArray0[1] = "";
      checkClassifier0.setOptions(stringArray0);
      checkClassifier0.correctBuildInitialisation(false, false, false, false, true, false, 0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, false, true, false, false, false, (-3978));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: / by zero
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.datasetIntegrity(false, true, true, false, false, true, 0, true, true);
      checkClassifier0.canTakeOptions();
      checkClassifier0.setNumDate(0);
      checkClassifier0.setWordSeparators("p<yV8");
      checkClassifier0.canHandleOnlyClass(true, false, true, false, false, 0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, true, true, true, false, 0, 422);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Index: 422, Size: 2
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Utils.SMALL = (-808.8339196914758);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.getClassifier();
      checkClassifier0.doesntUseTestClassVal(true, true, false, true, true, false, 0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Utils.SMALL = (-808.8339196914758);
      checkClassifier0.updatingEquality(false, true, true, true, false, false, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      checkClassifier0.getClassifier();
      checkClassifier0.doesntUseTestClassVal(true, false, true, true, false, false, 0);
      checkClassifier0.getRevision();
  }
}
