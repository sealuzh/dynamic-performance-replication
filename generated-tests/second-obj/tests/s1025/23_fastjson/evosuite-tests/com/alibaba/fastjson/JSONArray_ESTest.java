/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:37:49 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.ObjectStreamConstants;
import java.io.PipedWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.time.Clock;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(455, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(3563);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3563, Size: 456
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.lastIndexOf((Object) null);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      Object[] objectArray0 = jSONArray0.toArray();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Long long0 = new Long(3089);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.remove((Object) long0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      assertSame(jSONArray1, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(968);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 968, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(15, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(370);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 370, Size: 16
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1317);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockHijrahDate0);
      JSON.defaultLocale = jSONArray1.defaultLocale;
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(1092);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1092, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, jSONArray0);
      jSONArray1.setRelatedArray(jSONArray0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONArray1.toJavaList(class0);
      Object object0 = new Object();
      jSONArray1.fluentRemove(object0);
      boolean boolean0 = jSONArray0.add((Object) class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      linkedList0.removeAll(jSONArray0);
      jSONArray0.indexOf(jSONArray1);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray2.spliterator();
      // Undeclared exception!
      try { 
        jSONArray1.getDouble((-2961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(989, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "@type");
      jSONArray0.fluentRemoveAll(jSONArray1);
      PropertyNamingStrategy[] propertyNamingStrategyArray0 = new PropertyNamingStrategy[0];
      PropertyNamingStrategy[] propertyNamingStrategyArray1 = jSONArray1.toArray(propertyNamingStrategyArray0);
      assertSame(propertyNamingStrategyArray0, propertyNamingStrategyArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.listIterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.fluentRetainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(3089, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(989, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(15, (Object) null);
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = (-1);
      jSONArray0.fluentSet((-1), jSONArray1);
      jSONArray0.fluentRemoveAll(jSONArray1);
      JSONObject jSONObject0 = new JSONObject(9993);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2465), (Object) jSONObject0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2465, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.defaultLocale = jSONArray0.defaultLocale;
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      List<MockThaiBuddhistDate> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte byte0 = ObjectStreamConstants.TC_RESET;
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray0);
      jSONArray0.fluentRemoveAll(jSONArray2);
      jSONArray1.fluentRemove((Object) jSONArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-14);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-14), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray1.fluentSet(989, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(1280);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1280, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.setRelatedArray(mockJapaneseDate0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      jSONArray1.fluentRemoveAll(jSONArray0);
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray1);
      jSONArray0.fluentRemoveAll(jSONArray2);
      jSONArray0.fluentAdd(0, (Object) null);
      jSONArray1.getBoolean(0);
      jSONArray0.clone();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Long long0 = new Long(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1249, long0);
      jSONArray1.remove((Object) long0);
      jSONArray1.getComponentType();
      List<Object> list0 = jSONArray1.subList(1, 1);
      boolean boolean0 = jSONArray1.removeAll(list0);
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Object object0 = new Object();
      jSONArray0.set(947, object0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove((-4354));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray0.fluentRemoveAll(jSONArray1);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.fluentAdd(0, (Object) null);
      Object object0 = new Object();
      jSONArray1.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3054);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3054, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1317);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate1 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-3941));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      jSONArray2.getJSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      MockJapaneseDate.now(clock0);
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>(2865, 3520.8853F);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray0 = new JSONArray();
      Predicate.isEqual((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1190);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1190, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray0.fluentRemoveAll(jSONArray1);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) null);
      Object object0 = new Object();
      jSONArray1.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      int int0 = 0;
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@5eada5c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1169);
      JSON.toJSON((Object) jSONArray0);
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(jSONArray0);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      Object object0 = new Object();
      jSONArray0.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      int int0 = jSONArray1.getIntValue(40);
      assertEquals(990, jSONArray1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray0.getBooleanValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.fluentRemoveAll(jSONArray0);
      Feature[] featureArray0 = new Feature[9];
      JSONObject jSONObject0 = new JSONObject(989);
      Object object0 = new Object();
      jSONArray0.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@14e860b7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      jSONArray1.getBooleanValue(3089);
      double double0 = jSONArray2.getDoubleValue(3080);
      assertEquals(3090, jSONArray1.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      JSONArray jSONArray3 = new JSONArray(3076);
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(757, (Type) null);
      jSONArray1.removeAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.getByte((-2515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.fluentAdd(0, (Object) null);
      Object object0 = new Object();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, (Object) null);
      JSONArray jSONArray3 = new JSONArray(3076);
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(757, (Type) class1);
      jSONArray1.removeAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.getByte((-2515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      Feature[] featureArray0 = new Feature[9];
      jSONArray2.indexOf((Object) null);
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray3 = jSONArray0.fluentAdd(0, (Object) null);
      jSONArray3.toString();
      Object object0 = new Object();
      jSONArray1.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray3.getDoubleValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@daaca83
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Long long0 = new Long(3089);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.remove((Object) long0);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-214748364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(jSONArray0);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) null);
      Object object0 = new Object();
      jSONArray0.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      jSONArray2.getBooleanValue(965);
      int int0 = 3050;
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@37a3b8e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.fluentSet(0, (Object) null);
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      jSONArray0.fluentSet(989, jSONArray1);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      jSONArray1.getJSONArray(989);
      JSONArray jSONArray2 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray3 = new JSONArray(3349);
      int int0 = (-1115);
      JSONArray jSONArray4 = null;
      try {
        jSONArray4 = new JSONArray((-1115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1115
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989);
      Object object0 = new Object();
      jSONArray0.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      JSONObject jSONObject1 = new JSONObject(989, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getIntValue(40);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@2e0b751f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.fluentAdd(0, (Object) null);
      Object object0 = new Object();
      jSONArray1.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(3081);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3081, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.fluentSet(3048, (Object) null);
      jSONArray0.getByteValue(3048);
      jSONArray0.getSqlDate(170);
      jSONArray0.listIterator();
      jSONArray0.spliterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-;`g^0z");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("r", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : r
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3048;
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.fluentSet(3048, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(3048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      jSONArray0.fluentAdd(0, (Object) null);
      Object object0 = new Object();
      jSONArray1.remove(object0);
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(1, jSONArray2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(jSONArray0);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      Object object0 = new Object();
      jSONArray0.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      jSONArray0.toArray();
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      jSONArray1.containsAll(jSONArray0);
      jSONArray0.toArray();
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = new JSONArray();
      Feature[] featureArray0 = new Feature[9];
      JSONObject jSONObject0 = new JSONObject(989);
      Object object0 = new Object();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      JSONObject jSONObject1 = new JSONObject(989);
      jSONArray1.toArray();
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      jSONArray1.containsAll(jSONArray0);
      jSONArray0.toArray();
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.fluentSet(15, (Object) null);
      Feature[] featureArray0 = new Feature[13];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(15, (Object) null);
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.set(989, mockMinguoDate0);
      jSONArray0.getJSONObject(989);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature0;
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) null);
      Object object0 = new Object();
      jSONArray1.remove(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object1 = JSON.toJSON((Object) mockJapaneseDate0);
      JSONArray jSONArray3 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray3.remove((Object) jSONArray1);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      jSONArray2.set(989, object1);
      jSONArray2.getJSONObject(989);
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }
}
