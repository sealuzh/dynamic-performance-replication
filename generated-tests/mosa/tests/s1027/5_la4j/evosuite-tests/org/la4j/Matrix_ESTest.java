/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:31:56 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.power((-2464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2464.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseMatrix sparseMatrix0 = basic2DMatrix0.toSparseMatrix();
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, sparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 9);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = columnMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      boolean boolean0 = sparseMatrix0.equals((Object) "");
      assertFalse(boolean0);
      
      String string0 = sparseMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n3 3 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.fromCSV("");
      basic2DMatrix0.ensureDimensionsAreCorrect(2475, 2475);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.transformRow(0, vectorFunction0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix1.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1765, 1765);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      columnMajorSparseMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(0, (-1395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1395
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transform(matrixFunction0);
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SparseVector.zero(17, 17);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2175, 17);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(17, sparseMatrix0.columns());
      
      Matrix matrix0 = Matrix.identity(17);
      assertEquals(17, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("$L7i`S|p=S7.62");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      basic2DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1765);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transformColumn(1765, vectorFunction0);
      int int0 = 28;
      int int1 = (-3384);
      ColumnMajorSparseMatrix.zero(int0, int1);
      NumberFormat.getIntegerInstance();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SparseVector.zero(17, 17);
      SparseMatrix.zero(2147, 17);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(5, mockRandom0);
      basic1DMatrix0.max();
      // Undeclared exception!
      Matrix.constant(1360739499, 17, 1112.0629);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4, 4);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(4, sparseMatrix0.columns());
      assertEquals(4, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      
      String string0 = "KwaB\\N#\\";
      // Undeclared exception!
      try { 
        Matrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(5, 466, 0);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(466, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix1);
      assertEquals(466, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(466, columnMajorSparseMatrix1.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 17);
      assertNotNull(denseVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(17, denseVector0.length());
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, columnMajorSparseMatrix1);
      assertNotNull(compressedVector0);
      assertEquals(466, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(466, columnMajorSparseMatrix1.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(17, denseVector0.length());
      assertEquals(466, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow(3383, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 17. Should be: 466.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      int int0 = 37;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(37, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(37, rowMajorSparseMatrix0.cardinality());
      assertEquals(37, rowMajorSparseMatrix0.rows());
      assertEquals(0.02702702702702703, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      assertNotNull(cRSMatrix0);
      assertEquals(37, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(37, rowMajorSparseMatrix0.cardinality());
      assertEquals(37, rowMajorSparseMatrix0.rows());
      assertEquals(0.02702702702702703, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(37, cRSMatrix0.cardinality());
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.02702702702702703, cRSMatrix0.density(), 0.01);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.transpose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(37, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 675);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toColumnMajorSparseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.fromCSV("");
      basic2DMatrix0.ensureDimensionsAreCorrect(2475, 2475);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.is(matrixPredicate0);
      basic2DMatrix0.transpose();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      basic2DMatrix0.mkString(numberFormat0);
      basic2DMatrix0.min();
      basic2DMatrix0.divide(44);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(18);
      NumberFormat.getIntegerInstance();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList1);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(32, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 18.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      columnMajorSparseMatrix0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-633), (Random) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      // Undeclared exception!
      try { 
        sparseMatrix0.swapRows(17, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(17, 17);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2147, 17);
      sparseMatrix0.insertRow(17, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      basic2DMatrix0.norm();
      basic2DMatrix0.min();
      NumberFormat.getIntegerInstance();
      basic2DMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      sparseMatrix0.divide(3);
      sparseMatrix0.toRowMajorSparseMatrix();
      sparseMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = 4409;
      CCSMatrix.zero(4409, 4409);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.transformColumn(9, vectorFunction0);
      ColumnMajorSparseMatrix.zero(9, 28);
      NumberFormat.getIntegerInstance();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.setColumn((-452), (double) (-452));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZeroInRow((-1630), vectorProcedure0);
      columnMajorSparseMatrix0.equals((Object) basic2DMatrix0);
      basic2DMatrix0.rows();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SparseVector.zero(17, 17);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2147, 17);
      sparseMatrix0.blankOfRows(1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateColumn(10, vectorFunction0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = sparseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix1.euclideanNorm();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.set(10, 799, (-3968.388));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.getColumn(32);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.equals((Object) basic2DMatrix0);
      basic2DMatrix0.rows();
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfRows((-2983));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2983x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 675);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 640, 0, 2413, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 640, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(17, mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 17;
      doubleArray0[7] = (double) 17;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(34, 17, 17.0);
      Matrix matrix1 = basic2DMatrix0.copyOfRows(4409);
      matrix0.insert(matrix1, 36, (-1233), 15, 36);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(27, 27);
      Integer integer0 = new Integer(27);
      basic2DMatrix0.shuffle();
      basic2DMatrix0.copyOfRows(27);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 27);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      sparseMatrix0.equals((Object) columnMajorSparseMatrix0);
      basic2DMatrix0.rows();
      columnMajorSparseMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix.identity(13);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformColumn((-2993), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2993' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberFormat.getInstance();
      // Undeclared exception!
      Matrix.unit(Integer.MAX_VALUE, 761);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Integer integer0 = new Integer(27);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 27;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(27, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 660;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(660, 660);
      // Undeclared exception!
      basic2DMatrix0.power(660);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Matrix matrix0 = basic2DMatrix0.subtract((double) 1);
      // Undeclared exception!
      try { 
        matrix0.getColumn(3323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3323
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      sparseMatrix0.isColumnMajor();
      Matrix matrix0 = Matrix.random(3, 0, (Random) null);
      matrix0.toCSV();
      matrix0.rowMajorIterator();
      sparseMatrix0.toMatrixMarket();
      sparseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Matrix matrix0 = Matrix.from1DArray(2475, 2505, doubleArray0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        matrix0.rank();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      SparseMatrix.zero(18, 18);
      double[] doubleArray0 = new double[0];
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.update(matrixFunction0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.copyOfLength(18);
      basic2DMatrix0.blankOfShape(18, 1361);
      // Undeclared exception!
      try { 
        basic2DMatrix0.multiply((Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 18.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(17, 17);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 17);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow(17, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      sparseMatrix0.equals((Object) "");
      Matrix matrix0 = ((CCSMatrix) sparseMatrix0).copyOfShape(3, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      sparseMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      matrix0.maxInColumn(700);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      Matrix.from1DArray(18, 18, doubleArray0);
      basic2DMatrix0.euclideanNorm();
      basic2DMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(2, mockRandom0);
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      basic2DMatrix0.min();
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.equals((Object) basic2DMatrix0);
      basic2DMatrix0.rows();
      basic2DMatrix0.toString();
      columnMajorSparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 675);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 15;
      int int2 = 640;
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 0, 675, (-1852), 48, 48, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1852, 48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(37, 37);
      sparseMatrix0.equals((Object) "");
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(37, 37);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) sparseMatrix1, 16, 798, 37, 798, 37, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 37, 798
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4424, 36);
      Matrix matrix0 = Matrix.diagonal(710, 710);
      sparseMatrix0.equals((Object) matrix0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      basic2DMatrix0.removeLastColumn();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(27, 27);
      basic2DMatrix0.shuffle();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(27, 27, 27);
      columnMajorSparseMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3);
      cCSMatrix0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(7, 7);
      sparseMatrix0.equals((Object) "");
      sparseMatrix0.infinityNorm();
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(3834, 3834);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) sparseMatrix1, 3834, 6, (-1727), 798, 16, (-1610612735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 16x-1610612735
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      Matrix matrix0 = sparseMatrix0.blank();
      matrix0.subtract((Matrix) sparseMatrix0);
      sparseMatrix0.equals((Object) ")lXT=u]v`");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.power(4409);
      basic2DMatrix0.insert(matrix0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.fromCSV("");
      basic2DMatrix0.ensureDimensionsAreCorrect(2475, 2475);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, (DenseMatrix) basic2DMatrix0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      CompressedVector compressedVector1 = (CompressedVector)SparseVector.fromCollection(linkedList1);
      basic2DMatrix0.setColumn(2475, (Vector) compressedVector1);
      basic2DMatrix0.hashCode();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(10, 2475);
      // Undeclared exception!
      basic1DMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4424, 4424);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow(0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.fromCSV("");
      basic2DMatrix0.ensureDimensionsAreCorrect(2475, 2475);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
      cCSMatrix0.swapRows((-36), (-36));
      MatrixVectorOperation<Integer> matrixVectorOperation0 = (MatrixVectorOperation<Integer>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-2147482094));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147482093
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4409, 4409);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      sparseMatrix0.transpose();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(13, 20, mockRandom0);
      matrix0.transpose();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("matrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
      NumberFormat.getIntegerInstance();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(2174);
      Matrix matrix0 = basic2DMatrix0.removeLastRow();
      int int0 = 8;
      matrix0.blankOfRows(int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMultiplier(17);
      MockRandom mockRandom0 = new MockRandom((-1574L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(17, mockRandom0);
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      basic2DMatrix0.removeLastColumn();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SparseVector.zero(17, 17);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(17, 17);
      Matrix matrix0 = basic2DMatrix0.removeFirstRow();
      basic2DMatrix0.insert(matrix0);
      NumberFormat.getIntegerInstance();
      // Undeclared exception!
      try { 
        matrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(27, 27);
      Integer integer0 = new Integer(27);
      basic2DMatrix0.shuffle();
      basic2DMatrix0.copyOfRows(27);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 27);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      sparseMatrix0.equals((Object) columnMajorSparseMatrix0);
      basic2DMatrix0.rows();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SparseVector.zero(17, 17);
      int int0 = 2147;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2147, 17);
      NumberFormat.getIntegerInstance();
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(2147, 2147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2147..2147][2147..17].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(18);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      cCSMatrix0.toCSV(numberFormat0);
      Matrix matrix0 = cCSMatrix0.slice(18, 3, 18, 18);
      // Undeclared exception!
      try { 
        cCSMatrix0.hadamardProduct(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 18x18 does not equal to 0x15.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(17, 17);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 549);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertRow((-1), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SparseVector.zero(17, 17);
      SparseMatrix.zero(2147, 17);
      CCSMatrix cCSMatrix0 = new CCSMatrix(113, 113);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows((-1386), 113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1386' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      String string0 = basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(string0);
      Object object0 = new Object();
      columnMajorSparseMatrix0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.power(10);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insertColumn((-2464), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.maxInRow((-1875));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = 4409;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4409, 4409);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      sparseMatrix0.transpose();
      sparseMatrix0.mkString("Wrong", "Wrong");
      String string0 = "SWEEP";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromMatrixMarket(string0);
      int int1 = 800;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.foldColumn(int1, vectorAccumulator0);
      Matrix.block(columnMajorSparseMatrix0, sparseMatrix0, sparseMatrix0, columnMajorSparseMatrix0);
      basic2DMatrix0.blankOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("");
      int int0 = 2475;
      basic2DMatrix0.ensureDimensionsAreCorrect(2475, 2475);
      Matrix matrix0 = basic2DMatrix0.copyOfRows(2475);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      basic2DMatrix0.mkString(numberFormat0);
      basic2DMatrix0.min();
      // Undeclared exception!
      try { 
        matrix0.slice(507, 41, 970, 970);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector.random(17, mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 17;
      doubleArray0[0] = (double) 17;
      doubleArray0[2] = (double) 17;
      doubleArray0[7] = (double) 17;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 17;
      SparseVector.fromArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(34, 17, 17.0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17);
      cCSMatrix0.trace();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1723.0, 17.0, 568.3, (-1444.5475954076), 772.98767477647).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      Matrix.random(34, 17, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.foldColumn(34, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Matrix matrix0 = Matrix.from1DArray(2475, 2505, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.trace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2506
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SparseMatrix.zero(3, 3);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      basic2DMatrix0.non(advancedMatrixPredicate0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(9, (-2045222520), (double) (-2045222520), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic2DMatrix.fromCSV("");
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(893, 893, (double[]) null);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.updateRow(893, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '893' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 4424);
      // Undeclared exception!
      sparseMatrix0.setColumn(719, (double) 6);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseVector sparseVector0 = SparseVector.zero(32, 32);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(32, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(6);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      matrix0.mkString(numberFormat0);
      matrix0.product();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector.random(17, mockRandom0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 17;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) 17;
      doubleArray0[6] = (double) 17;
      doubleArray0[7] = (double) 17;
      SparseVector.fromArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(2594, 2594);
      // Undeclared exception!
      basic2DMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      basic2DMatrix0.mkString(numberFormat0);
      basic2DMatrix0.min();
      // Undeclared exception!
      try { 
        basic2DMatrix0.slice(27, 4424, (-647), 4424);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [27..-647][4424..4424].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2384;
      doubleArray0[1] = (double) 2384;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1233);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = sparseMatrix0.transformRow(10, vectorFunction0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromMatrixMarket("rB@sZ7\"zT");
      columnMajorSparseMatrix0.equals((Object) sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4424, 4);
      Vector vector0 = null;
      int int0 = (-1095);
      // Undeclared exception!
      try { 
        sparseMatrix0.multiplyByItsTranspose();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Matrix.from1DArray(2475, 2505, doubleArray0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix(Integer.MAX_VALUE, 12, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(18);
      NumberFormat.getIntegerInstance();
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 18;
      doubleArray1[1] = (double) 18;
      cCSMatrix0.diagonalProduct();
      doubleArray1[2] = (double) 18;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 18;
      doubleArray3[1] = (double) 18;
      doubleArray3[2] = (double) 18;
      doubleArray3[3] = (double) 18;
      doubleArray3[4] = (double) 18;
      doubleArray3[5] = (double) 18;
      doubleArray3[6] = (double) 18;
      doubleArray3[7] = (double) 18;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 18;
      doubleArray4[1] = (double) 18;
      doubleArray4[2] = (double) 18;
      doubleArray4[3] = (double) 18;
      doubleArray4[4] = (double) 18;
      doubleArray4[5] = (double) 18;
      doubleArray4[6] = (double) 18;
      doubleArray4[7] = (double) 18;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      basic2DMatrix0.mkString(numberFormat0);
      basic2DMatrix0.iteratorOfRow(18);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic2DMatrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        matrix0.diagonalProduct();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 4424);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-5);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)10);
      sparseMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns((byte) (-5), (byte)75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Matrix.zero(4, 4);
      SparseVector.zero(186, 186);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-1309), (-5064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1309x-5064
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 4424);
      sparseMatrix0.swapColumns(4424, 4424);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeColumn((-1994091957));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4423
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.power(4409);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(4409, (-2078209980));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..4409][0..-2078209980].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toColumnMajorSparseMatrix();
      int int0 = (-2028178999);
      Vector vector0 = basic2DMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        vector0.apply((VectorMatrixOperation<String>) null, (Matrix) basic2DMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.DenseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      basic2DMatrix0.mkString(numberFormat0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.is(matrixPredicate0);
      basic2DMatrix0.toMatrixMarket(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic2DMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.equals((Object) basic2DMatrix0);
      basic2DMatrix0.rank();
      NumberFormat.getIntegerInstance();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("");
      int int0 = 2475;
      basic2DMatrix0.ensureDimensionsAreCorrect(2475, 2475);
      basic2DMatrix0.blankOfColumns(6);
      basic2DMatrix0.slice(6, 2475, 2475, 2475);
      // Undeclared exception!
      try { 
        basic2DMatrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 1000, 5);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(5, mockRandom0);
      cCSMatrix0.equals((Matrix) basic2DMatrix0, (double) 1000);
      int int0 = 17;
      HashMap<Integer, Integer> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Integer, Integer>((-674), 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -674
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 18;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(17, mockRandom0);
      basic2DMatrix0.mkString(numberFormat0);
      int int1 = Integer.MAX_VALUE;
      int int2 = 1520461067;
      // Undeclared exception!
      Matrix.zero(17, 1520461067);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      String string0 = basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      basic2DMatrix0.min();
      NumberFormat.getIntegerInstance();
      double[][] doubleArray0 = new double[1][7];
      DenseMatrix.fromCSV(string0);
      mockRandom0.nextBoolean();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 18;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(40, mockRandom0);
      basic2DMatrix0.mkString(numberFormat0);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(40, 40);
      basic2DMatrix1.iteratorOfRow(40);
      basic2DMatrix1.rank();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix1.is(matrixPredicate0);
      NumberFormat.getIntegerInstance();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 8;
      SparseVector.zero(8, 8);
      int int1 = 2147;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(998);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn((-175));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-175' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
      NumberFormat.getInstance();
      basic2DMatrix0.min();
      NumberFormat.getIntegerInstance();
      Matrix matrix0 = null;
      try {
        matrix0 = new Basic1DMatrix((-2439), (-2439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2439x-2439
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(18, mockRandom0);
      basic2DMatrix0.mkString(numberFormat0);
      Matrix matrix0 = basic2DMatrix0.removeLastColumn();
      matrix0.iteratorOfRow(18);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(2174, 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2174, 2174, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.insertColumn(23, sparseVector0);
      matrix0.removeLastColumn();
      NumberFormat.getIntegerInstance();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(5, 5);
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[5] = 5;
      intArray0[6] = 7;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      SparseVector.zero(1396, 1396);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 1396, 1396);
      rowMajorSparseMatrix0.insertColumn(1363, (Vector) null);
      rowMajorSparseMatrix0.removeLastColumn();
      NumberFormat.getIntegerInstance();
  }
}
