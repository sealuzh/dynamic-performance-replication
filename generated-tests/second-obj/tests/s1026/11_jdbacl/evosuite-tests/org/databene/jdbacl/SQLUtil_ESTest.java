/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:07:16 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.store.raw.data.AllocPage;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.engine.SessionRemote;
import org.h2.tools.Recover;
import org.h2.value.ValueNull;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pJFZz[bHQZ_q?Q90j";
      stringArray0[1] = "pJFZz[bHQZ_q?Q90j";
      stringArray0[2] = "pJFZz[bHQZ_q?Q90j";
      SQLUtil.leftJoin("pJFZz[bHQZ_q?Q90j", stringArray0, "*1C?EnUR+", "ojt0\"anW;SM0h", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", stringArray0, "", "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = TypeId.TINYINT_NAME;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop tablese");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TINYINT";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TINYINT");
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("TINYINT = 'TINYINT' AND null = null", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop tableselect into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tableselect into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TINYINT", defaultDBTable0, 1002, "create materialized view~$\"4");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("TINYINT, TINYINT, TINYINT", string2);
      
      String string3 = SQLUtil.renderColumnTypeWithSize(dBColumnArray0[2]);
      assertEquals("CREATE MATERIALIZED VIEW~$\"4", string3);
      
      String string4 = SQLUtil.leftJoin("CREATE MATERIALIZED VIEW~$\"4", stringArray0, "create materialized view~$\"4", "TINYINT", stringArray0);
      assertEquals("left join create materialized view~$\"4 as TINYINT on CREATE MATERIALIZED VIEW~$\"4.TINYINT = TINYINT.TINYINT and CREATE MATERIALIZED VIEW~$\"4.null = TINYINT.null", string4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[19];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "&";
      SQLUtil.removeComments("&");
      int int0 = SessionRemote.SESSION_CANCEL_STATEMENT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kF;9B+vl!Cx{6q'WPc", defaultDBTable0, (-106694528), "O6@>O");
      SQLUtil.parseColumnTypeAndSize("execute");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("Z0nqk;-ILaFK,7F}|gp");
      SQLUtil.removeComments("Z0nqk;-ILaFK,7F}|gp");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop tableselect into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string0 = SchemaDescriptor.IBM_SYSTEM_CAT_SCHEMA_NAME;
      SQLUtil.mutatesDataOrStructure("SYSCAT");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
      
      String string1 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("left join null as null on ", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join(" ADD ", "Nx}!cy>ZV_Ci", (String[]) null, "8_J:?IYL~4$F+wOV,4", "8_J:?IYL~4$F+wOV,4", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n!]N";
      String string0 = SQLUtil.innerJoin("n!]N", stringArray0, "n!]N", "n!]N", stringArray0);
      assertEquals("n!]N as n!]N on n!]N.n!]N = n!]N.n!]N", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE n!]N = 'n!]N'", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "n!]N as n!]N on n!]N.n!]N = n!]N.n!]N");
      byte[] byteArray0 = new byte[0];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "selectupdate", false, stringArray0);
      String string2 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (n!]N)", string2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncate", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("op index", false);
      assertEquals("op index", string0);
      
      String string1 = SQLUtil.substituteMarkers("alter table", "STDDEV_POP", "alter table");
      assertEquals("alter table", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8H]=~TtVXmK7Y";
      stringArray0[1] = "8H]=~TtVXmK7Y";
      stringArray0[2] = "8H]=~TtVXmK7Y";
      stringArray0[3] = "8H]=~TtVXmK7Y";
      stringArray0[4] = "8H]=~TtVXmK7Y";
      String string0 = SQLUtil.innerJoin("8H]=~TtVXmK7Y", stringArray0, "8H]=~TtVXmK7Y", "]N", stringArray0);
      assertEquals("8H]=~TtVXmK7Y as ]N on 8H]=~TtVXmK7Y.8H]=~TtVXmK7Y = ]N.8H]=~TtVXmK7Y and 8H]=~TtVXmK7Y.8H]=~TtVXmK7Y = ]N.8H]=~TtVXmK7Y and 8H]=~TtVXmK7Y.8H]=~TtVXmK7Y = ]N.8H]=~TtVXmK7Y and 8H]=~TtVXmK7Y.8H]=~TtVXmK7Y = ]N.8H]=~TtVXmK7Y and 8H]=~TtVXmK7Y.8H]=~TtVXmK7Y = ]N.8H]=~TtVXmK7Y", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object[] objectArray0 = new Object[1];
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table null", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "NKV+]", (VersionNumber) null);
      defaultDatabase0.getCatalog("CXgk_md");
      DBSchema dBSchema0 = new DBSchema("5L,Ym @E'E@39Toha", (DBCatalog) null);
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X0Y57.S";
      SQLUtil.leftJoin(" NULL", stringArray0, "X0Y57.S", "X0Y57.S", stringArray0);
      DBColumn dBColumn0 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " NULL");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("left join X0Y57.S as X0Y57.S on  NULL.X0Y57.S = X0Y57.S.X0Y57.S", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("X0Y57.S", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(831);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(831, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 831
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S,=#&";
      SQLUtil.innerJoin("S,=#&", stringArray0, "S,=#&", "S,=#&", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("a{$XV1~]'F=GH-");
      SQLUtil.addRequiredCondition("w@C2*_fJ44L", stringBuilder0);
      assertEquals("a{$XV1~]'F=GH- and w@C2*_fJ44L", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      StringReader stringReader0 = new StringReader("op index");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = SessionRemote.SESSION_CANCEL_STATEMENT;
      stringReader0.ready();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "op index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-qc&", defaultDBTable0, 13, "kD;9B+vl!Cx{6q'WPc");
      SQLUtil.removeComments("rename");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
      
      Boolean boolean0 = Boolean.FALSE;
      String string2 = RawStoreFactory.PAGE_RESERVED_ZERO_SPACE_STRING;
      boolean boolean1 = SQLUtil.isProcedureCall("0");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      String string0 = RawStoreFactory.PAGE_CACHE_SIZE_PARAMETER;
      DBSchema dBSchema0 = new DBSchema("alter tablederby.storage.pagereservedspace", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zs[dkl", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zs[dkl";
      stringArray0[2] = "derby.storage.pageCacheSize";
      stringArray0[2] = "zs[dkl";
      stringArray0[3] = "alter tablederby.storage.pagereservedspace";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter tablederby.storage.pagereservedspace", true, stringArray0);
      String string1 = SQLUtil.renderValue(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"alter tablederby.storage.pagereservedspace\" UNIQUE (zs[dkl, , zs[dkl, alter tablederby.storage.pagereservedspace)", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      String string0 = RawStoreFactory.PAGE_CACHE_SIZE_PARAMETER;
      DBSchema dBSchema0 = new DBSchema("alter tablederby.storage.pagereservedspace", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zs[dkl", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zs[dkl";
      stringArray0[1] = "derby.storage.pageCacheSize";
      stringArray0[2] = "derby.stor";
      stringArray0[3] = "alter tablederby.storage.pagereservedspace";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "derby.stor", true, stringArray0);
      String string1 = SQLUtil.renderValue(dBUniqueConstraint0);
      assertEquals("CONSTRAINT derby.stor UNIQUE (zs[dkl, derby.storage.pageCacheSize, derby.stor, alter tablederby.storage.pagereservedspace)", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "%'zd'";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "renamedrop tableselect into";
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "renamedrop tableselect into", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, %'zd', , , renamedrop tableselect into, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("B/!uF", true);
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "table null");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B / ! uF", defaultDBTable0, (-2623), "table null");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("table null");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create unique index(");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string2 = SQLUtil.substituteMarkers("B / ! uF", ".?YIxyFEbG&", mockPrintWriter0);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String string0 = SQLUtil.innerJoin("/@Ucpq#S^bJZ^5", stringArray0, "/@Ucpq#S^bJZ^5", stringArray0[0], stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "&");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("l?$!V?9&hK6k\u0007>@6X", defaultDBTable0, 70, "/@Ucpq#S^bJZ^5 as null on /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("name");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.removeComments("l?$!V?9&hK6k\u0007>@6X");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog(" vN7U6*j[pq /|");
      dBCatalog0.getTable(" vN7U6*j[pq /|", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" vN7U6*j[pq /|", (DBTable) null, 145, "XSLAE.D");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" vN7U6*j[pq /| XSLAE.D NULL", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop index";
      String[] stringArray1 = new String[10];
      SQLUtil.innerJoin("drop index", stringArray1, "create tablealter indexenaSle", "drop index", stringArray1);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("create tablealter indexenaSle", stringBuilder0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create tablealter indexenaSle", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create tablealter indexenaSle", false, dBUniqueConstraint0);
      String string0 = FBConnectionProperties.DATABASE_PROPERTY;
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("create tablealter indexenaSleCONSTRAINT \"create tablealter indexenaSle\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = TypeId.TINYINT_NAME;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TINYINT";
      String string1 = TypeId.NATIONAL_CHAR_NAME;
      String string2 = SQLUtil.normalize("deleteselect into", true);
      assertEquals("deleteselect into", string2);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TINYINT");
      String string3 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("TINYINT = 'TINYINT'", string3);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop tableselect into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tableselect into");
      String string4 = SQLUtil.innerJoin("p(^Le?u{f+t3ogds", stringArray0, "3*t(ak9zviwe_Q", ")x|-Q\"dc:ixK", stringArray0);
      assertEquals("3*t(ak9zviwe_Q as )x|-Q\"dc:ixK on p(^Le?u{f+t3ogds.TINYINT = )x|-Q\"dc:ixK.TINYINT", string4);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "executetinyint join join as join on", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string5 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"executetinyint join join as join on\" PRIMARY KEY (TINYINT)", string5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ", singleScanRowCount == ";
      stringArray0[1] = "truncate";
      stringArray0[2] = ", singleScanRowCount == ";
      String string0 = SQLUtil.renderColumnListWithTableName(", singleScanRowCount == ", stringArray0);
      assertEquals(", singleScanRowCount == ., singleScanRowCount == , , singleScanRowCount == .truncate, , singleScanRowCount == ., singleScanRowCount == ", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("9gsUF");
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.normalize("\".gvsGkqsjyX>+", true);
      assertEquals("\".gvsGkqsjyX>+\"", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "Wx*rX3Rq8`1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("v.$", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop tabletinyint join join as join on", defaultDBTable0, (-2), "");
      String string1 = Optimizer.MODULE;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("qRVm,EEN", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT qRVm,EEN FOREIGN KEY () REFERENCES null()", string2);
      
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "<dIZM}y=nyD$xuT*_M";
      stringArray0[2] = "xX4mwE;";
      stringArray0[4] = "9";
      stringArray0[5] = "truncate";
      String string0 = SQLUtil.join("xX4mwE;", "9", stringArray0, "9", "isGrouped=[", stringArray0);
      assertEquals("xX4mwE; join 9 as isGrouped=[ on 9.null = isGrouped=[.null and 9.<dIZM}y=nyD$xuT*_M = isGrouped=[.<dIZM}y=nyD$xuT*_M and 9.xX4mwE; = isGrouped=[.xX4mwE; and 9.null = isGrouped=[.null and 9.9 = isGrouped=[.9 and 9.truncate = isGrouped=[.truncate and 9.null = isGrouped=[.null", string0);
      
      Boolean boolean0 = new Boolean("<dIZM}y=nyD$xuT*_M");
      VersionNumber.valueOf("\"vR*Po3D,5/\"");
      SQLUtil.removeComments("<dIZM}y=nyD$xuT*_M");
      boolean boolean1 = SQLUtil.isQuery("select");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n]N";
      SQLUtil.innerJoin("n]N", stringArray0, "n]N", "n]N", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("*DCGVwX%W}N");
      StringReader stringReader0 = new StringReader("n]N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      String string0 = AllocPage.TEST_MULTIPLE_ALLOC_PAGE;
      SQLUtil.removeComments("eZQxec");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "42Z97", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 110);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("9gUF");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n]N";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "n]N");
      SQLUtil.addOptionalCondition("n]N", stringBuilder0);
      assertEquals("n]N or n]N", stringBuilder0.toString());
      
      VersionNumber.valueOf((String) null);
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = FBConnectionProperties.USER_NAME_PROPERTY;
      Boolean boolean0 = new Boolean(",+J(6iRW)jYt");
      String string1 = Dependable.TABLE_PERMISSION;
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize(" join ", true);
      String[] stringArray0 = new String[0];
      String string0 = "isGrouped=[";
      SQLUtil.join(" join ", "e+yUERR9Y", stringArray0, "execsyscat", "Bm:&.D\"OJ]FV", stringArray0);
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = DataDictionary.CREATE_DATA_DICTIONARY_VERSION;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("*/", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "drop materialized view", true, "create materialized vieww][bob~.dogh]v03t,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'create materialized vieww][bob~.dogh]v03t,' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("9gsUF");
      String[] stringArray0 = new String[1];
      SQLUtil.innerJoin(" (", stringArray0, " (", stringArray0[0], stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBSequence dBSequence0 = new DBSequence("callop index", "newBootPassword/newEncryptionKey attribute", "newBootPassword/newEncryptionKey attribute");
      dBSequence0.setName(" NOT NULL");
      SQLUtil.normalize("SELECT * FROM null WHERE null = null", true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("newBootPassword/newEncryptionKey attribute");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter materialized viewdrop tableselect into", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create tablealter indexenaSle");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- ", defaultDBTable0, 70, "create tablealter indexenaSle");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("EiMJ}l(xwK)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xwK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("-('QsYsb'#D}D<J3QOU", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("drop index", defaultDBTable0, 46, "-('QsYsb'#D}D<J3QOU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: -('QsYsb'#D}D<J3QOU
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.removeComments("tB8i|dB.J$wW-Sp");
      SQLUtil.normalize("tB8i|dB.J$wW-Sp", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("tB8i|dB.J$wW-Sp");
      String string0 = "2XS~R";
      int int0 = (-2428);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2428));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = TypeId.TINYINT_NAME;
      String[] stringArray0 = new String[0];
      SQLUtil.join("e+yUERR9Y", "e+yUERR9Y", stringArray0, " join ", " join ", stringArray0);
      SQLUtil.normalize("TINYINT", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TINYINT");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLUtil.mutatesDataOrStructure("select into");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string1 = LogToFile.DBG_FLAG;
      ValueNull valueNull0 = ValueNull.DELETED;
      DBDataType.getInstance(8, "TINYINT");
      String string2 = RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER;
      ValueNull valueNull1 = ValueNull.DELETED;
      valueNull0.toString();
      ValueNull valueNull2 = ValueNull.INSTANCE;
      valueNull0.getReader();
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "insertg0mup75>:5b-7");
      String[] stringArray0 = new String[0];
      String string0 = null;
      SQLUtil.isDDL("");
      SQLUtil.isProcedureCall("");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("e+yUERR9Y", stringBuilder0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("d41i[M");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("e+yUERR9Y", "insertg0mup75>:5b-7", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("Uf^p71XkndW1");
      SQLUtil.isProcedureCall("execselect");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      TriggerDescriptor triggerDescriptor0 = new TriggerDescriptor();
      // Undeclared exception!
      try { 
        triggerDescriptor0.getTableDescriptor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean0 = SQLUtil.mutatesStructure("truncate");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "truncate";
      String string0 = SQLUtil.innerJoin("truncate", stringArray0, "exec&", "SFY5E.+8<t", stringArray0);
      assertEquals("exec& as SFY5E.+8<t on truncate.truncate = SFY5E.+8<t.truncate", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("exec& as SFY5E.+8<t on truncate.truncate = SFY5E.+8<t.truncate");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("9gsUF");
      SQLUtil.normalize("\".gvsGkqsjyX>+", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "\".gvsGkqsjyX>+\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("v.$", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop tabletinyint join join as join on", defaultDBTable0, (-2), "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9gsUF");
      String string0 = Optimizer.MODULE;
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("v.$", defaultDBColumn0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("9gsUF");
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("n]N", stringArray0, "n]N", stringArray0[0], stringArray0);
      assertEquals("n]N as null on n]N.null = null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = TypeId.SMALLINT_NAME;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SMALLINT", defaultDBTable0, (-1544), "&");
      DBSequence dBSequence0 = new DBSequence("n]N as null on n]N.null = null.null", "callop index", "`o");
      dBSequence0.setName("SMALLINT");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultDBTable0.isIdentical(dBSequence0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select into", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string2);
      
      String string3 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column SMALLINT", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("& wVH*3,7+1h$#Zzn8");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tabletinyint join join as join on", defaultDBTable0, 70, "alter tabletinyint join join as join on");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.parseColumnTypeAndSize("- ");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("& wVH*3,7+1h$#Zzn8");
      mockPrintWriter0.println(70);
      mockPrintWriter0.println((double) 70);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("org.apache.derby.iapi.store.access.Qualifier[][]", "Ab");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringArray0[3]);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "op index";
      defaultDBTable0.getForeignKeyConstraints();
      VersionNumber.valueOf("op index");
      SQLUtil.isQuery("update");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "op index";
      stringArray1[2] = "alter session";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      SQLUtil.mutatesDataOrStructure("alter session");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", defaultDBTable0, (-1315), "op index");
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = TypeId.BOOLEAN_NAME;
      assertEquals("BOOLEAN", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "op ide";
      String[] stringArray1 = new String[10];
      SQLUtil.innerJoin("op ide", stringArray1, "create tablealter indexenaSle", "op ide", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.CONTAINER_CACHE_SIZE_PARAMETER;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("op ide");
      defaultDBTable1.getIndex("op ide");
      SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      SQLUtil.removeComments("create tablealter indexenaSle as op ide on op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null");
      DBSequence dBSequence0 = new DBSequence("uoOj2e1HA'%", "cFNEQY5`h0#*9hYc)A", "create tablealter indexenaSle as op ide on op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null and op ide.null = op ide.null");
      dBSequence0.setName("EXISTS(");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "op ide");
      SQLUtil.normalize("CDHvZ-dX|NY1 {)6", false);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      List<DBColumn> list0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "op index";
      DBSequence dBSequence0 = new DBSequence("@Bd#MXGM';(D\"", "Illegal column type format: ", "op index");
      dBSequence0.isCycle();
      dBSequence0.setCycle((Boolean) null);
      dBSequence0.setName((String) null);
      dBSequence0.getStartIfNotDefault();
      VersionNumber.valueOf("op index");
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = SQLUtil.isQuery("update");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "op index";
      stringArray1[1] = "sequence null";
      stringArray1[2] = "selectselect into";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT ", defaultDBTable0, (-77866353), "xQCz@");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray1);
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CONSTRAINT  XQCZ@ NULL", string1);
      
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean1 = SQLUtil.isProcedureCall("@Bd#MXGM';(D\"");
      assertTrue(boolean1 == boolean0);
      
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("YT0j.", false, dBUniqueConstraint1);
      String string2 = SQLUtil.constraintName(dBUniqueConstraint1);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n!]N";
      SQLUtil.innerJoin("n!]N", stringArray0, "n!]N", "n!]N", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "n!]N as n!]N on n!]N.n!]N = n!]N.n!]N");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      SQLUtil.mutatesDataOrStructure("select");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+G*GLIc/ybT(NV_!L};", defaultDBTable0, 1641, "n!]N");
      defaultDBColumn0.isEquivalent((DBObject) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("& wVH*3,7+1h$#Zzn8");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- ");
      byte[] byteArray0 = new byte[0];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.normalize("--", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "- ", false, (String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // column name is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("9gsUF");
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("n]N", stringArray0, "n]N", stringArray0[0], stringArray0);
      assertEquals("n]N as null on n]N.null = null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null", string1);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM null WHERE null = null", defaultDBTable0, (-1544), "&");
      SQLUtil.removeComments("&");
      DBSequence dBSequence0 = new DBSequence("n]N", "n]N", (String) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      boolean boolean0 = SQLUtil.isProcedureCall("\u0007|/kX|X&XM5");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1544), "9gsUF");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("fWP4-K!", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.setDoc("drop tablesel");
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("9GSUF(2)", string2);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      String string3 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SELECT * FROM null WHERE null = null & NULL", string3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("9gsUF");
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("/@Ucpq#S^bJZ^5", stringArray0, "/@Ucpq#S^bJZ^5", stringArray0[0], stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM null WHERE null = null", defaultDBTable0, (-1544), "&");
      SQLUtil.removeComments("&");
      StringReader stringReader0 = new StringReader("SELECT * FROM null WHERE null = null");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-1544);
      SQLUtil.renderNumber(streamTokenizer1);
      String string1 = AliasInfo.ALIAS_NAME_SPACE_SYNONYM_AS_STRING;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "9gsUF";
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(275, "drop materialized view");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("9gsUF", defaultDBTable0, dBDataType0, integer0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, (String) null, true, "9gsUF");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- ", defaultDBTable0, 70, "- ");
      defaultDBTable0.setDoc("IYM");
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop <Utable", defaultDBTable0, 70, ".?YIxyFEbG&");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create unique index(");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("table null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("IYM", defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[19];
      SQLUtil.innerJoin("/@Ucpq#S^bJZ^5", stringArray0, "/@Ucpq#S^bJZ^5", stringArray0[0], stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/@Ucpq#S^bJZ^5 as null on /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null", defaultDBTable0, (-1544), "&");
      StringReader stringReader0 = new StringReader("/@Ucpq#S^bJZ^5 as null on /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null and /@Ucpq#S^bJZ^5.null = null.null");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = SessionRemote.SESSION_CANCEL_STATEMENT;
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- 0");
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "/@Ucpq#S^bJZ^5");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop tableselect in", defaultDBTable0, dBDataType0, (Integer) (-4), integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      try { 
        Recover.readBlob("V~F");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("n]N", stringArray0, "n]N", stringArray0[0], stringArray0);
      assertEquals("n]N as null on n]N.null = null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = Page.DIAG_MINROWSIZE;
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("minRowSize", defaultDBTable0, (-1544), "&");
      SQLUtil.removeComments("&");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "n]N as null on n]N.null = null.null", false, stringArray0);
      boolean boolean2 = FBBlob.SEGMENTED;
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.parseColumnTypeAndSize("9gUF");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Xd=AI7I4^0q+3&4");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBColumn0.getForeignKeyConstraint();
      boolean boolean3 = SQLUtil.isDML("minRowSize");
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "drop tablese";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop tablese");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tablese");
      StringReader stringReader0 = new StringReader("drop tablese");
      stringReader0.skip(10000L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = SessionRemote.SESSION_CANCEL_STATEMENT;
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop tablese");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("drop tablese", defaultDBTable0, 70, "atan2(double,double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = FileUtil.canonicalFile("l'/;R'=Qheu");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "l'/;R'=Qheu";
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) nameSpec0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.format("l'/;R'=Qheu", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('u');
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = TypeId.TINYINT_NAME;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop tablese");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tablese");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "drop tablese");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tablese", defaultDBTable0, 70, "yl");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setSize(integer1);
      SQLUtil.parseColumnTypeAndSize(" DEFAULT ");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/%[iTku_6Lwa");
      mockPrintWriter0.println(319);
      mockPrintWriter0.println((long) 319);
      mockPrintWriter0.println(0.25);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBColumn0.getForeignKeyConstraint();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("READ", defaultDBTable0, 537, "TINYINT");
      SQLUtil.typeAndName(defaultDBColumn1);
      SQLUtil.isProcedureCall("xQCz@");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("r0`d7;5|FpPnyxaV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'r0`d7;5|FpPnyxaV' not found in table 'drop tablese'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("9gUF", stringArray0, "9gUF", stringArray0[0], stringArray0);
      assertEquals("9gUF as null on 9gUF.null = null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = Page.DIAG_MINROWSIZE;
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("minRowSize", defaultDBTable0, (-1544), "&");
      SQLUtil.removeComments("&");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "9gUF as null on 9gUF.null = null.null", false, stringArray0);
      String string2 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT \"9gUF as null on 9gUF.null = null.null\" UNIQUE ()", string2);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string3 = Page.DIAG_PAGE_SIZE;
      String string4 = SQLUtil.normalize("V<A[3/=onm%kA9,,+4T", true);
      assertEquals("V < A [ 3 / = onm % kA9,, + 4T", string4);
      
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "/*", true, stringArray0);
      dBUniqueConstraint1.isIdentical(dBUniqueConstraint0);
      String string5 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      String string6 = SQLUtil.ownerDotComponent(dBUniqueConstraint1);
      SQLUtil.removeComments("/*");
      String string7 = SQLUtil.normalize("null./*", false);
      assertTrue(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("B/!uF", true);
      assertEquals("B / ! uF", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&", defaultDBTable0, 65, "drop table]<l`z+$yb|");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "&", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = Page.DIAG_PAGE_SIZE;
      SQLUtil.normalize("B/!uF", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT & UNIQUE ()", string3);
      
      Boolean boolean1 = Boolean.FALSE;
      boolean boolean2 = SQLUtil.isProcedureCall("B / ! uF");
      assertFalse(boolean2);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      String string4 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DROP TABLE]<L`Z+$YB|", string4);
      
      String string5 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint &", string5);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileUtil.canonicalOrAbsolutePath("B/G!uF");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&", defaultDBTable0, 65, "drop table]<l`z+$yb|");
      defaultDBTable0.getColumnNames();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "&", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint1.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Page.DIAG_PAGE_SIZE;
      String string2 = SQLUtil.normalize("B/G!uF", false);
      assertEquals("B / G ! uF", string2);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT & UNIQUE ()", string3);
      
      Boolean boolean1 = Boolean.FALSE;
      boolean boolean2 = SQLUtil.isProcedureCall("CONSTRAINT & UNIQUE ()");
      assertFalse(boolean2);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((-1422), "BLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("pageSize", defaultDBTable1, dBDataType0, integer0);
      defaultDBColumn1.isUnique();
      arrayList0.add((DBColumn) defaultDBColumn1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string4 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("pageSize, &", string4);
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string5 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint &", string5);
  }
}
