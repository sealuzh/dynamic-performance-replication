/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:30:35 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ContainerListener;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.beans.EventSetDescriptor;
import java.beans.beancontext.BeanContext;
import java.beans.beancontext.BeanContextSupport;
import java.io.File;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.core.Attribute;
import weka.core.CheckGOE;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.DatabaseSaver;
import weka.core.converters.JSONLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.beans.WekaOffscreenChartRenderer;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.firePropertyChange("", (byte)12, (byte)76);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      costBenefitAnalysis0.getBeanContext();
      Locale locale0 = Locale.TAIWAN;
      BeanContextSupport beanContextSupport0 = new BeanContextSupport((BeanContext) null, locale0, false);
      substringLabeler0.addVetoableChangeListener(beanContextSupport0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.getFilter();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      Instances instances0 = substringLabeler1.m_outputStructure;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, 865, 2444, (byte)12, 1);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = new BeanVisual("", "3\"%rv:sf:Uj(", "3\"%rv:sf:Uj(");
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      beanVisual0.removeHierarchyListener((HierarchyListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      filter0.addMouseWheelListener((MouseWheelListener) null);
      filter0.setVisual(beanVisual0);
      // Undeclared exception!
      try { 
        filter0.performRequest("\"o;x`Mv4s;']:Qv3b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"o;x`Mv4s;']:Qv3b not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setAlignmentY(826.537F);
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.performRequest("ERROR: Can't process streamed instances; can't continue.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ERROR: Can't process streamed instances; can't continue. not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.setToolTipText("+~:)r$0BtOOv/^");
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetMaker0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getCustomName();
      filter0.stop();
      filter0.setVisual((BeanVisual) null);
      assertFalse(filter0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(modelPerformanceChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.ModelPerformanceChart : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.filters.Filter filter1 = filter0.getFilter();
      filter0.setWrappedAlgorithm(filter1);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getStructure("B|Q&s");
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter1, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("B|Q&s", (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getInheritsPopupMenu();
      filter0.getInputMethodListeners();
      filter0.getWrappedAlgorithm();
      filter0.stop();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      filter0.acceptInstance((InstanceEvent) null);
      String string0 = "XHze1l`(h%)!i5=1";
      Classifier classifier0 = new Classifier();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      trainingSetMaker0.stop();
      classifier0.addMouseListener(defaultCaret0);
      Color color0 = Color.cyan;
      filter0.setForeground(color0);
      // Undeclared exception!
      try { 
        classifier0.setSize((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addTestSetListener(classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setAlignmentX(0.25F);
      String string0 = "HH@i>-k";
      filter0.connectionNotification("HH@i>-k", "HH@i>-k");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ClassAssigner classAssigner0 = new ClassAssigner();
      // Undeclared exception!
      try { 
        MockHijrahDate.of(777, 777, 1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid Hijrah month: 777
         //
         verifyException("java.time.chrono.HijrahChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      instanceStreamToBatchMaker0.createToolTip();
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      MenuElement[] menuElementArray0 = new MenuElement[8];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("oE]b]t4%OVf%F", false);
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem("oE]b]t4%OVf%F");
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem1;
      JCheckBoxMenuItem jCheckBoxMenuItem2 = new JCheckBoxMenuItem();
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem2;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      BeanVisual beanVisual0 = substringReplacer0.m_visual;
      ImageIcon imageIcon0 = beanVisual0.getAnimatedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("oE]b]t4%OVf%F", imageIcon0, false);
      menuElementArray0[4] = (MenuElement) jRadioButtonMenuItem1;
      filter0.getComponentPopupMenu();
      menuElementArray0[5] = (MenuElement) null;
      JRadioButtonMenuItem jRadioButtonMenuItem2 = new JRadioButtonMenuItem("weka/gui/beans/icons/", true);
      menuElementArray0[6] = (MenuElement) jRadioButtonMenuItem2;
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      menuElementArray0[7] = (MenuElement) jPopupMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(instanceStreamToBatchMaker0, 4440, 4440, 4440, 4440, (-1609), (-1609), false, menuElementArray0, menuSelectionManager0);
      classAssigner0.getToolTipText((MouseEvent) menuDragMouseEvent0);
      filter0.addInstanceListener(classAssigner0);
      filter0.useDefaultVisual();
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponents();
      weka.filters.Filter filter1 = filter0.getFilter();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.getCustomName();
      filter0.removeTestSetListener(appender0);
      filter0.setFilter(filter1);
      filter0.getMouseWheelListeners();
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      TestInstances testInstances0 = new TestInstances();
      WekaOffscreenChartRenderer wekaOffscreenChartRenderer0 = new WekaOffscreenChartRenderer();
      try { 
        wekaOffscreenChartRenderer0.renderXYLineChart(1, (-1), (List<Instances>) null, (String) null, "", (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (1) and height (-1) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f{3f";
      stringArray0[1] = "";
      filteredAssociator0.setClassIndex(0);
      stringArray0[2] = "Number of performed iterations: ";
      stringArray0[3] = "weka/gui/beans/icons/";
      FilteredAssociator.main(stringArray0);
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.getCustomName();
      filter0.getVisual();
      ConfigurationListener configurationListener1 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener1);
      ConfigurationListener configurationListener2 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener2);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      filter0.getFilter();
      filter0.removeTrainingSetListener(appender0);
      String[] stringArray0 = new String[5];
      String string0 = "p+[nE(C.5eM6\\ue@A&[";
      stringArray0[0] = string0;
      stringArray0[1] = "";
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filteredAssociator0.setClassIndex((-5));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/gui/beans/icons/";
      stringArray0[1] = "weka/gui/beans/icons/";
      stringArray0[2] = "Number of performed iterations: ";
      stringArray0[3] = "weka/gui/beans/icons/";
      stringArray0[4] = "weka/gui/beans/icons/";
      stringArray0[5] = "weka/gui/beans/icons/";
      stringArray0[6] = "Number of performed iterations: ";
      stringArray0[7] = "Number of performed iterations: ";
      FilteredAssociator.main(stringArray0);
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(allFilter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      Filter filter1 = new Filter();
      BeanVisual beanVisual0 = filter1.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      filter1.addTestSetListener(filter0);
      filter1.disconnectionNotification("/ E{`s~3n/g+kO~hwz", "weka/gui/beans/icons/");
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getInheritsPopupMenu();
      filter0.removeAll();
      filter0.stop();
      MultiListUI multiListUI0 = new MultiListUI();
      JList<FileDialog> jList0 = new JList<FileDialog>();
      filter0.getCustomName();
      Saver saver0 = new Saver();
      Logger logger0 = saver0.m_logger;
      filter0.setLog((Logger) null);
      filter0.setCustomName("");
      InstanceEvent instanceEvent0 = null;
      try {
        instanceEvent0 = new InstanceEvent((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseWheelListeners();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.removeDataSourceListener(dataVisualizer0);
      filter0.enumerateRequests();
      filter0.getWrappedAlgorithm();
      BeanVisual beanVisual0 = filter0.getVisual();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      TestSetEvent testSetEvent0 = new TestSetEvent(classifierPerformanceEvaluator0, (Instances) null, 3, (-9), 1, (-1));
      filter0.acceptTestSet(testSetEvent0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(beanVisual0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      filter0.addTrainingSetListener(dataVisualizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addTrainingSetListener(classAssigner0);
      filter0.useDefaultVisual();
      String string0 = filter0.globalInfo();
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setAlignmentY(1.0F);
      boolean boolean0 = filter0.eventGeneratable("h>~q{OT'664!k2;");
      assertFalse(boolean0);
      
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(":");
      DataSetEvent dataSetEvent0 = new DataSetEvent("h>~q{OT'664!k2;", instances0);
      filter0.acceptDataSet(dataSetEvent0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(dataSetEvent0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      AttributeSelection attributeSelection0 = new AttributeSelection();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      filter0.connectionNotification("<7>Gr}%|\"pI9O~oprs", manhattanDistance0);
      filter0.getWrappedAlgorithm();
      filter0.setWrappedAlgorithm(attributeSelection0);
      filter0.addDataSourceListener(substringLabeler0);
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      trainingSetMaker0.repaint((long) (-3265));
      filter0.paintImmediately((-3265), 1, 0, 0);
      trainingSetMaker0.grabFocus();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.connectionNotification("p7iR><:K*84>OJ.y#6", trainingSetMaker0);
      JComponent.getDefaultLocale();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTestSetListener(trainTestSplitMaker0);
      filter0.connectionNotification("p7iR><:K*84>OJ.y#6", "p7iR><:K*84>OJ.y#6");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      Font font0 = filter0.getFont();
      filter0.getFontMetrics(font0);
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("}&//)[(g<j\")wK!", "}&//)[(g<j\")wK!");
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFont();
      CheckGOE checkGOE0 = new CheckGOE();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(checkGOE0, instances0);
      testSetEvent0.m_runNumber = (-2099);
      filter0.acceptTestSet(testSetEvent0);
      filter0.connectionAllowed("Filtering training data (");
      Random.setNextRandom(103);
      // Undeclared exception!
      try { 
        filter0.performRequest(".bsi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .bsi not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFont();
      CheckGOE checkGOE0 = new CheckGOE();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(checkGOE0, instances0);
      testSetEvent0.m_runNumber = (-1522278064);
      testSetEvent0.m_runNumber = (-2099);
      filter0.acceptTestSet(testSetEvent0);
      boolean boolean0 = filter0.connectionAllowed("Filtering training data (");
      assertTrue(boolean0);
      
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      DataSetEvent dataSetEvent0 = new DataSetEvent(findWithCapabilities0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("h0~q{OT'66s!%2;", "h0~q{OT'66s!%2;");
      filter0.getWrappedAlgorithm();
      boolean boolean0 = filter0.eventGeneratable("h0~q{OT'66s!%2;");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter1.addInstanceListener(filter0);
      filter1.notifyInstanceListeners((InstanceEvent) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.removeTrainingSetListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(128, 118, false);
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      classifierErrorsPlotInstances0.getInstances();
      DataSetEvent dataSetEvent0 = new DataSetEvent(aWTKeyStroke0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getColorModel();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      logPanel0.getActionMap();
      filter0.setLog(logPanel0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeDataSourceListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("&|nn", substringReplacer0);
      boolean boolean0 = filter0.eventGeneratable("&|nn");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("instance", "h#~qN8T'66sgy!%2;");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      filter0.addContainerListener((ContainerListener) null);
      filter0.acceptDataSet((DataSetEvent) null);
      boolean boolean0 = filter0.eventGeneratable("`:|U)hcK<aEs0");
      assertFalse(boolean0);
      
      filter0.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      double[] doubleArray0 = new double[0];
      Thread thread0 = MockThread.currentThread();
      filter0.m_filterThread = thread0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "   0.0000000000000000E00;  -0.0000000000000000E00");
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, sparseInstance0, 4759);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification("!fooY+>boKM#xGA>,uo", classAssigner0);
      boolean boolean0 = filter0.eventGeneratable("!fooY+>boKM#xGA>,uo");
      assertTrue(boolean0);
      
      Saver saver0 = new Saver();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getConnectedFormat();
      TestSetEvent testSetEvent0 = new TestSetEvent(saver0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      boolean boolean1 = filter0.connectionAllowed(".arff");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      filter0.paintImmediately((-3265), 1, 0, 0);
      trainingSetMaker0.grabFocus();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.connectionNotification("p7iR><:K*84>OJ.y#6", trainingSetMaker0);
      JComponent.getDefaultLocale();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTestSetListener(trainTestSplitMaker0);
      filter0.enumerateRequests();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(trainingSetMaker0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
  }
}
