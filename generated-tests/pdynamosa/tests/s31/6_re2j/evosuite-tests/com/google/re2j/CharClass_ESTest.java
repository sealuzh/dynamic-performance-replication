/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:46:47 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = (-903);
      intArray0[3] = 1583;
      intArray0[4] = (-760);
      intArray0[5] = 3137;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-760));
      assertArrayEquals(new int[] {0, 0, (-903), 1583, (-760), 3137}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 1583);
      assertArrayEquals(new int[] {0, 0, (-903), 1583, (-760), 3137}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass1.negateClass();
      assertArrayEquals(new int[] {0, 0, (-903), 1583, (-760), 3137}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass3.negateClass();
      assertArrayEquals(new int[] {0, 0, (-903), 1583, (-760), 3137}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 224;
      intArray0[0] = 224;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {224, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(224, 0);
      assertArrayEquals(new int[] {224, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {224, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange(224, 701);
      assertArrayEquals(new int[] {224, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 442;
      intArray0[1] = (-830);
      intArray0[2] = 0;
      String string0 = CharClass.charClassToString(intArray0, (-37));
      assertArrayEquals(new int[] {442, (-830), 0}, intArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-211);
      intArray0[1] = 1114111;
      intArray0[2] = 6;
      intArray0[3] = (-3416);
      intArray0[4] = 1;
      intArray0[5] = 1114111;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-211), 1114111, 6, (-3416), 1, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-211), 1114111, 6, (-3416), 1, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {(-3415), 1114111}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, (-184));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(65123, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray1, 65123);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-236);
      intArray0[1] = 4;
      intArray0[2] = (-868);
      intArray0[3] = 1437;
      intArray0[4] = (-1);
      intArray0[5] = (-54);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-236), 4, (-868), 1437, (-1), (-54)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-1), (-54));
      assertArrayEquals(new int[] {(-236), 4, (-868), 1437, (-1), (-54)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendLiteral((-868), 8135);
      assertArrayEquals(new int[] {(-236), 4, (-868), 1437, (-1), (-54)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass3.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1747;
      intArray0[2] = (-903);
      intArray0[3] = 1583;
      intArray0[4] = (-760);
      intArray0[5] = 3137;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = (-2333);
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray2[1] = 3515;
      intArray2[2] = 1;
      intArray2[3] = (-2333);
      intArray2[4] = 1;
      intArray2[5] = (-2333);
      intArray0[1] = intArray2;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 64;
      intArray1[2] = 65040;
      intArray1[3] = 0;
      intArray1[4] = 80;
      intArray1[5] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 65040;
      intArray2[1] = 0;
      intArray2[2] = 80;
      intArray2[3] = 65040;
      intArray2[4] = 80;
      intArray2[5] = 64;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = (-3369);
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      String string0 = charClass0.toString();
      assertEquals("[0x1-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = (-2333);
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2915, 495);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass2.appendRange(709, 709);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass4.appendLiteral(709, 724);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      
      CharClass charClass6 = charClass5.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 495;
      intArray2[1] = 724;
      intArray2[2] = 495;
      intArray2[3] = 724;
      intArray2[4] = 709;
      intArray2[5] = 495;
      intArray2[6] = 495;
      intArray2[7] = 495;
      intArray2[8] = 709;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass6.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2552;
      intArray0[1] = 0;
      intArray0[2] = 1112;
      intArray0[3] = 0;
      intArray0[4] = 120831;
      intArray0[5] = 65;
      intArray0[6] = 0;
      intArray0[7] = 2604;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2552, 0, 1112, 0, 120831, 65, 0, 2604}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 120830, 2605, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 120830, 2552, 1114111}, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange(65, 2001);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 120830, 2552, 1114111}, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 1);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 120830, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 120830);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 120830, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertArrayEquals(new int[] {0, 1114111, 0, 2551, 1, 120830, 1, 1111}, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      String string0 = charClass2.toString();
      assertArrayEquals(new int[] {0, 1114111, 0, 2551, 1, 120830, 1, 1111}, intArray0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotNull(string0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[7][5];
      int[] intArray1 = new int[4];
      intArray1[0] = 1561;
      intArray1[1] = (-1153);
      intArray1[2] = (-477);
      intArray1[3] = 4;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1838);
      intArray3[1] = (-1153);
      intArray3[2] = (-1153);
      intArray3[3] = (-477);
      intArray3[4] = 4;
      intArray3[5] = (-477);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-1153);
      intArray4[1] = 0;
      intArray4[2] = 1561;
      intArray4[3] = 0;
      intArray4[4] = 4;
      intArray4[5] = 1561;
      intArray4[6] = (-1838);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = (-1838);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = (-1838);
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray0, 128067);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1747;
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 1747, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 1747, 0, 0, 0, 65}, intArray0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray1, (-3610));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1978);
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = (-2399);
      intArray0[4] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1978), 0, 93, (-2399), 91}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange((-912), 91);
      assertArrayEquals(new int[] {(-1978), 0, 93, (-2399), 91}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 345);
      assertArrayEquals(new int[] {(-1978), 0, 93, (-2399), 91}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray0, 287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][6];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendTableWithSign(intArray0, 219);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[6];
      intArray1[0] = 219;
      intArray1[1] = 219;
      intArray1[2] = 219;
      intArray1[3] = 219;
      intArray1[4] = 219;
      intArray1[5] = 219;
      CharClass charClass3 = charClass2.appendClass(intArray1);
      assertArrayEquals(new int[] {219, 219, 219, 219, 219, 219}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      
      CharClass charClass4 = charClass3.appendFoldedRange(315, 971);
      assertArrayEquals(new int[] {219, 219, 219, 219, 219, 219}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      
      CharClass charClass5 = charClass4.negateClass();
      assertArrayEquals(new int[] {219, 219, 219, 219, 219, 219}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      
      CharClass charClass6 = charClass5.appendNegatedTable(intArray0);
      assertArrayEquals(new int[] {219, 219, 219, 219, 219, 219}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1811;
      intArray1[1] = 223;
      intArray1[2] = 8654;
      intArray1[3] = 66639;
      intArray1[4] = 32;
      intArray1[5] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 223;
      intArray2[1] = 91;
      intArray2[2] = 1811;
      intArray2[3] = 66639;
      intArray2[4] = 8654;
      intArray2[5] = 91;
      intArray2[6] = 223;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 91;
      intArray3[1] = 8654;
      intArray3[2] = 8654;
      intArray3[3] = 8654;
      intArray3[4] = 1811;
      intArray3[5] = 91;
      intArray3[6] = 32;
      intArray3[7] = 32;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 66639;
      intArray4[1] = 32;
      intArray4[2] = 1811;
      intArray4[3] = 1114111;
      intArray4[4] = 66639;
      intArray4[5] = 223;
      intArray4[6] = 8654;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 1811;
      intArray5[1] = 1114111;
      intArray5[2] = 66639;
      intArray5[3] = 8654;
      intArray5[4] = 1114111;
      intArray5[5] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 66639;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = (-96);
      intArray0[2] = 498;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {32, (-96), 498, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[5][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {32, (-96), 498, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 32;
      intArray2[1] = (-96);
      intArray2[2] = 0;
      intArray2[3] = 498;
      intArray2[4] = 32;
      intArray2[5] = 498;
      intArray2[6] = 498;
      intArray2[7] = 32;
      intArray2[8] = 203;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1663);
      intArray0[1] = (-1250);
      intArray0[2] = (-1663);
      intArray0[3] = (-1663);
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1663), (-1250), (-1663), (-1663)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {(-1663), (-1250), (-1663), (-1663)}, intArray0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass1.cleanClass();
      assertArrayEquals(new int[] {(-1663), (-1250), (-1663), (-1663)}, intArray0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      
      CharClass charClass4 = charClass0.appendLiteral((-1663), (-1526));
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      
      String string0 = charClass2.toString();
      assertArrayEquals(new int[] {(-1663), (-1250), (-1663), (-1663)}, intArray0);
      assertEquals("[0xfffff981-0xfffffb1e]", string0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass4);
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass4));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 241;
      intArray0[2] = 891;
      intArray0[3] = (-2734);
      intArray0[4] = 2392;
      intArray0[5] = 91;
      intArray0[6] = 2022;
      int int0 = 1576;
      intArray0[7] = 1576;
      intArray0[8] = (-1408);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2552;
      intArray0[1] = 0;
      intArray0[2] = 1112;
      intArray0[3] = 0;
      intArray0[4] = 120831;
      intArray0[5] = 65;
      intArray0[6] = 0;
      intArray0[7] = 2604;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2552, 0, 1112, 0, 120831, 65, 0, 2604}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 120830, 2605, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendRange(0, 1111);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 0, 120830, 2605, 1114111}, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 0, 120830, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 0, 120830, 0, 1114111}, intArray0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 1747;
      intArray0[2] = (-903);
      intArray0[4] = (-760);
      intArray0[5] = 3137;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-760));
      assertArrayEquals(new int[] {0, 1747, (-903), 0, (-760), 3137}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, (-2));
      assertArrayEquals(new int[] {0, 1747, (-903), 0, (-760), 3137}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2915, 495);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass2.appendRange(709, 709);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass4.appendLiteral(709, 724);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      
      CharClass charClass6 = charClass4.appendClassWithSign(intArray0, 66639);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      
      CharClass charClass7 = charClass4.appendFoldedRange((-760), 64);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertNotNull(charClass7);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3344;
      intArray0[1] = 1523;
      intArray0[2] = (-64);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 482;
      intArray0[6] = 642;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3344, 1523, (-64), 0, 0, 482, 642}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 65;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-3217), 1459);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(intArray0);
      assertEquals(484, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 66640;
      intArray0[1] = 1736;
      intArray0[2] = 1726;
      intArray0[3] = 91;
      intArray0[4] = 1726;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {66640, 1736, 1726, 91, 1726}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[3][4];
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1726;
      intArray2[1] = 66640;
      intArray2[2] = 1726;
      intArray2[3] = 1736;
      intArray2[4] = 1726;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {66640, 1736, 1726, 91, 1726}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {66640, 1736, 1726, 91, 1726}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotNull(charClass2);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {66640, 1736, 1726, 91, 1726}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotNull(charClass3);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange(709, 1069);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendLiteral(708, 3974);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 66639;
      intArray0[1] = 3974;
      intArray0[2] = 66639;
      intArray0[3] = 708;
      intArray0[4] = 1069;
      intArray0[5] = 3974;
      CharClass charClass4 = charClass2.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {66639, 3974, 66639, 708, 1069, 3974}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass3.appendFoldedRange(64, 857);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.cleanClass();
      assertArrayEquals(new int[] {66639, 3974, 66639, 708, 1069, 3974}, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertNotNull(charClass7);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3258);
      intArray0[1] = 65100;
      intArray0[2] = 3544;
      intArray0[3] = 21956;
      intArray0[4] = 458;
      intArray0[5] = (-2);
      intArray0[6] = 1886;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = (-1359);
      intArray0[1] = (-1359);
      int int1 = (-12);
      intArray0[2] = (-12);
      intArray0[3] = 1284;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-1359), (-12), 1284, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-12), 1284, 0, 0, 0, (-1359)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {1285, 1114111, 0, 0, 0, (-1359)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[7][5];
      int[] intArray1 = new int[4];
      intArray1[0] = 1561;
      intArray1[1] = (-1153);
      intArray1[2] = (-477);
      intArray1[3] = 4;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1838);
      intArray3[1] = (-1153);
      intArray3[2] = (-1153);
      intArray3[3] = (-477);
      intArray3[4] = 4;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(11008, (-1392));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-1392), 11008);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 11008;
      intArray0[1] = 102;
      intArray0[2] = 11008;
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[6];
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      intArray1[0] = 0;
      intArray1[1] = 64;
      intArray1[2] = 65040;
      intArray1[3] = 0;
      intArray1[4] = 80;
      intArray1[5] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 65040;
      intArray2[1] = 0;
      intArray2[2] = 80;
      intArray2[3] = 65040;
      intArray2[4] = 80;
      intArray2[5] = 64;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = (-3369);
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      String string1 = charClass0.toString();
      assertEquals("[0x1-0x10ffff]", string1);
      assertSame(charClass0, charClass1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1663), (-1663));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertEquals("[0xfffff981]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1663);
      intArray0[1] = (-1663);
      intArray0[2] = (-1663);
      intArray0[3] = (-1663);
      intArray0[4] = (-1663);
      intArray0[5] = (-1663);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-1663), (-1663), (-1663), (-1663), (-1663), (-1663)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      CharClass charClass1 = charClass0.appendRange(0, 1719);
      int[][] intArray0 = new int[8][0];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      int int1 = (-440);
      intArray1[1] = (-440);
      intArray1[2] = (-2597);
      intArray1[3] = 1719;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 1719;
      intArray1[7] = 1719;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = (-2597);
      intArray3[1] = 0;
      intArray3[2] = (-2597);
      intArray3[3] = (-2597);
      intArray3[4] = 1719;
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      intArray5[0] = 0;
      intArray5[1] = 0;
      int int2 = (-37);
      intArray5[2] = (-37);
      intArray5[3] = (-2597);
      intArray5[4] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = (-37);
      intArray6[1] = 0;
      int int3 = 0;
      intArray6[2] = 0;
      intArray6[3] = (-2597);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      intArray7[0] = 0;
      int int4 = 2460;
      intArray7[1] = 2460;
      intArray7[2] = (-2597);
      intArray7[3] = 0;
      intArray7[4] = 1719;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[9];
      intArray8[0] = (-37);
      intArray8[1] = 0;
      intArray8[2] = (-440);
      intArray8[3] = 0;
      intArray8[4] = (-37);
      intArray8[5] = (-2597);
      intArray8[6] = (-37);
      intArray8[7] = 0;
      int int5 = 0;
      intArray8[8] = 0;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2552;
      intArray0[1] = 0;
      intArray0[2] = 1112;
      intArray0[3] = 0;
      intArray0[4] = 120831;
      intArray0[5] = 65;
      intArray0[6] = 0;
      intArray0[7] = 2604;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass2.appendRange(65, 2001);
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 1);
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 120830);
      charClass5.negateClass();
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 120830, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1747;
      intArray0[2] = (-903);
      intArray0[3] = 1583;
      intArray0[4] = (-760);
      intArray0[5] = 3137;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-760));
      CharClass charClass2 = charClass1.appendFoldedRange(1583, (-2));
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1978);
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = (-2399);
      intArray0[4] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange((-912), 91);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      int int0 = 1;
      CharClass charClass1 = new CharClass(intArray0);
      charClass1.cleanClass();
      int[][] intArray1 = new int[5][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      charClass0.appendNegatedClass(intArray0);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      charClass0.appendRange(0, 0);
      intArray0[0] = 0;
      intArray0[1] = 241;
      intArray0[2] = 891;
      intArray0[3] = (-2734);
      intArray0[4] = 2392;
      intArray0[5] = 91;
      intArray0[6] = 2022;
      int int0 = 1576;
      intArray0[7] = 1576;
      intArray0[8] = (-1408);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toArray();
      CharClass charClass1 = charClass0.appendLiteral(3352, 3352);
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, (-571));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1359);
      intArray0[2] = 0;
      intArray0[3] = 1284;
      intArray0[4] = 0;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(11008, (-1451));
      charClass1.negateClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 2050;
      intArray0[1] = 11008;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 3923);
      charClass2.appendFoldedRange(4962, 1624);
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2552;
      intArray0[1] = 0;
      intArray0[2] = 1112;
      intArray0[3] = 0;
      intArray0[4] = 2552;
      intArray0[5] = 39;
      intArray0[6] = 0;
      intArray0[7] = 2604;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass2.appendRange(39, 2001);
      charClass3.appendTableWithSign(intArray1, 1);
      CharClass charClass4 = charClass0.appendNegatedTable(intArray1);
      charClass4.appendFoldedRange(2552, 0);
      assertArrayEquals(new int[] {0, 2551, 1, 1111, 1, 2551, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(11008, (-1392));
      CharClass charClass2 = charClass1.appendLiteral((-1392), 11008);
      int[] intArray0 = new int[3];
      charClass0.appendFoldedRange(120, (-1392));
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass2.appendTableWithSign(intArray1, (-1392));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-902);
      intArray0[2] = 0;
      intArray0[3] = 32;
      intArray0[4] = (-384);
      intArray0[5] = 93;
      intArray0[6] = (-2375);
      intArray0[7] = (-423);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      int int0 = (-4047);
      intArray0[1] = (-4047);
      int int1 = (-1250);
      intArray0[2] = (-1250);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1359);
      intArray0[2] = 0;
      intArray0[3] = 1284;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange((-802), (-3369));
      CharClass charClass2 = charClass1.appendLiteral((-7517), 6);
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.negateClass();
      CharClass charClass5 = charClass4.appendClass(intArray0);
      charClass5.appendNegatedTable(intArray1);
      String string0 = charClass3.toString();
      assertEquals("[0xffffe2a4-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[9][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2186);
      intArray0[1] = 0;
      intArray0[2] = 2869;
      intArray0[3] = 0;
      intArray0[4] = 1760;
      intArray0[5] = (-71);
      intArray0[6] = 379;
      intArray0[7] = 3298;
      intArray0[8] = 2775;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][7];
      int[] intArray2 = new int[4];
      intArray2[0] = (-2186);
      intArray2[1] = (-71);
      intArray2[2] = 3998;
      intArray2[3] = (-71);
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {(-2186), 0, 2869, 0, 1760, (-71), 379, (-2185), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2131;
      intArray0[1] = 67;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1114111;
      intArray0[5] = (-1525);
      intArray0[6] = (-717);
      intArray0[7] = 240;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][0];
      int int0 = 0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      int[] intArray2 = new int[7];
      intArray2[0] = 67;
      intArray2[1] = (-1525);
      intArray2[2] = (-717);
      intArray2[3] = 0;
      int int1 = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 1;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      int int0 = (-3064);
      intArray0[0] = (-3064);
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 0;
      intArray0[2] = 0;
      int int3 = (-2);
      intArray0[3] = (-2);
      int int4 = 1266;
      intArray0[4] = 1266;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-3064));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      charClass1.appendFoldedRange(66668, 66668);
      charClass0.negateClass();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 1705);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2131;
      intArray0[1] = 67;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1114111;
      intArray0[5] = (-1525);
      intArray0[6] = (-717);
      intArray0[7] = 240;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][0];
      charClass0.appendTableWithSign(intArray1, 0);
      CharClass charClass1 = new CharClass(intArray0);
      int[][] intArray2 = new int[9][1];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      intArray2[5] = intArray0;
      int[] intArray3 = new int[2];
      intArray3[0] = 67;
      intArray3[1] = 240;
      intArray2[6] = intArray3;
      intArray2[7] = intArray0;
      intArray2[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray2, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1978);
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = (-2399);
      intArray0[4] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-292));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendFoldedRange(66639, 66639);
      charClass0.negateClass();
      int[] intArray0 = new int[1];
      intArray0[0] = 66639;
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-4047);
      intArray0[2] = (-1250);
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      int[][] intArray1 = new int[4][1];
      int[] intArray2 = new int[2];
      charClass0.appendNegatedClass(intArray2);
      intArray2[0] = (-4047);
      intArray2[1] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 1383;
      intArray0[1] = 708;
      intArray0[2] = (-2868);
      intArray0[3] = 7840;
      intArray0[4] = 1200;
      intArray0[5] = (-4467);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-238);
      intArray0[1] = 415;
      int int0 = 4;
      intArray0[2] = 4;
      intArray0[3] = 2271;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass0.toString();
      charClass1.appendNegatedClass(intArray0);
      charClass1.appendRange(4, (-761));
      charClass1.appendFoldedClass(intArray0);
      charClass1.appendFoldedRange(1114111, 2314);
      CharClass.charClassToString(intArray0, 0);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 2271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-164);
      intArray0[3] = 515;
      intArray0[4] = 2330;
      intArray0[5] = 0;
      intArray0[6] = 1576;
      intArray0[7] = 0;
      intArray0[8] = 4917;
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 64;
      intArray0[2] = 65040;
      int int0 = 0;
      intArray0[4] = 80;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 5094);
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      int[] intArray2 = new int[2];
      intArray2[0] = 64;
      intArray2[1] = 0;
      intArray1[8] = intArray2;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral((-1663), (-3));
      int[][] intArray0 = new int[8][5];
      int[] intArray1 = new int[6];
      intArray1[0] = (-3);
      intArray1[1] = (-3);
      intArray1[2] = 5485;
      intArray1[3] = (-1663);
      intArray1[4] = (-1663);
      intArray1[5] = (-3);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = (-3);
      intArray2[1] = (-2);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = (-3);
      intArray3[1] = (-3);
      intArray3[2] = 5485;
      intArray3[3] = (-1663);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 5485;
      intArray4[1] = (-2);
      intArray4[2] = (-1663);
      intArray4[3] = (-2);
      intArray4[4] = (-3);
      intArray4[5] = (-2);
      intArray4[6] = (-3);
      intArray4[7] = (-2);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = (-1663);
      intArray5[1] = (-1249);
      intArray5[2] = 5485;
      intArray5[3] = 5485;
      intArray5[4] = 5485;
      intArray5[5] = (-3);
      intArray5[6] = (-3);
      intArray5[7] = (-1663);
      intArray5[8] = (-56);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = (-1663);
      intArray6[1] = 5485;
      intArray6[2] = (-1663);
      intArray6[3] = (-2);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = (-26);
      intArray7[1] = (-1663);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[0];
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(11008, (-1451));
      CharClass charClass2 = charClass1.negateClass();
      int[][] intArray0 = new int[0][2];
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 2050;
      intArray1[1] = 11008;
      charClass2.cleanClass();
      CharClass charClass4 = charClass1.appendClassWithSign(intArray1, 3923);
      charClass4.appendFoldedRange(4962, 1624);
      int[][] intArray2 = new int[2][3];
      intArray2[0] = intArray1;
      charClass3.cleanClass();
      intArray2[1] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
