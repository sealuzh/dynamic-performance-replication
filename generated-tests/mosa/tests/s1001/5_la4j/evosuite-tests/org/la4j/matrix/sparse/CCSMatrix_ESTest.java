/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:59:12 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      Matrix matrix0 = cCSMatrix0.transformColumn(0, (VectorFunction) null);
      matrix0.setAll(0);
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("d'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      Matrix matrix0 = cCSMatrix0.transformColumn(0, (VectorFunction) null);
      String string0 = "d'";
      SparseMatrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparseMatrix.diagonal(1, (-359.0777106233963));
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, (-359.0777106233963));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(1, vectorAccumulator0);
      cCSMatrix0.add(Double.NEGATIVE_INFINITY);
      double double0 = cCSMatrix0.maxInColumn(1);
      assertEquals(0.0, double0, 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals((-359.0777106233963), cCSMatrix0.min(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(279, (-2710), (double) 279, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308;
      doubleArray0[1] = 1167.33;
      doubleArray0[2] = (double) 308;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(308, 308, doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2977, 2977);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2977, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(2977, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstRow();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("Rep^$z9qm}w");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(10, 10);
      assertNotNull(cCSMatrix0);
      assertEquals(10.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.rows());
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.iterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(10.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-1890));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1890
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 3);
      assertNotNull(cCSMatrix0);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(746, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(746, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.transform(matrixFunction0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(746, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0.0, cCSMatrix2.density(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(1, cCSMatrix2.rows());
      assertEquals(1, cCSMatrix2.columns());
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn(746);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 746
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      cCSMatrix0.setAll((-1.0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1132, 1132);
      assertNotNull(sparseMatrix0);
      assertEquals(1132, sparseMatrix0.rows());
      assertEquals(1132, sparseMatrix0.cardinality());
      assertEquals(1132.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(1132, sparseMatrix0.columns());
      assertEquals(8.833922261484099E-4, sparseMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(1665, 1616.417, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2772225.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      assertNotNull(cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1132, 0.0);
      assertNotNull(sparseMatrix0);
      assertEquals(1132, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(1132, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(8.833922261484099E-4, sparseMatrix0.density(), 0.01);
      assertEquals(1132, sparseMatrix0.cardinality());
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      double double1 = cCSMatrix0.manhattanNorm();
      assertEquals(0.0, double1, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(1121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1121
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1250, 1250);
      assertNotNull(cCSMatrix0);
      assertEquals(1250, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1250, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(1250, vectorFunction0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1167.33;
      doubleArray0[2] = (double) 308;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(308, 308, doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.max();
      SparseMatrix.diagonal(1132, 424.0);
      SparseMatrix.randomSymmetric(1132, (double) 0, (Random) null);
      double[] doubleArray0 = new double[0];
      ColumnMajorSparseMatrix.from1DArray(1132, 0, doubleArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(Integer.MAX_VALUE, 258, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 4048;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(4048);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4048
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 308;
      doubleArray0[1] = 1167.33;
      doubleArray0[2] = (double) 308;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      Matrix matrix0 = cCSMatrix0.transformColumn(0, (VectorFunction) null);
      CCSMatrix.diagonal(1699, (-3421.0));
      cCSMatrix0.add(2451.6);
      matrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 17, doubleArray0);
      Matrix matrix0 = cCSMatrix0.transformColumn(17, (VectorFunction) null);
      SparseMatrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 49;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("No rows or columns selected.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 746;
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 3);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseMatrix.diagonal(1137, 423.82889696102734);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1137, 1137);
      Matrix.identity(1137);
      cCSMatrix0.maxInColumn(2);
      cCSMatrix0.getColumn(1137);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 746;
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 746);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)746, (double)746, 2600.132827948, (double)746, Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      long long0 = (-581L);
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix.diagonal(int0, int0);
      Integer integer0 = new Integer(int0);
      int int1 = 1745;
      CCSMatrix.diagonal(int1, int0);
      cCSMatrix0.maxInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      int int0 = 279;
      CCSMatrix cCSMatrix0 = CCSMatrix.random(279, 279, 0.0, (Random) mockRandom0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cCSMatrix0);
      int int1 = 6;
      int int2 = (-922);
      int int3 = 234;
      int int4 = (-354);
      cCSMatrix0.insert(matrix0, int1, int0, int1, int2, int3, int4);
      int int5 = 8;
      int int6 = (-1108);
      CCSMatrix.zero(int5, int6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1132;
      SparseMatrix.diagonal(1132, 423.82889696102734);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1132, 1132);
      Object object0 = new Object();
      Integer integer0 = new Integer(1132);
      cCSMatrix0.equals((Object) integer0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      int int1 = 1833;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(int0, int1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 746);
      cCSMatrix0.add((double) 746);
      cCSMatrix0.maxInColumn(2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparseMatrix.diagonal(1132, 423.82889696102734);
      double[] doubleArray0 = new double[1];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1132, 1132);
      cCSMatrix0.maxInColumn(2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1250;
      int int1 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1250, 0);
      int int2 = 3940;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformRow(3940, vectorFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
      double double0 = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        cCSMatrix1.setColumn(3940, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3940
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1.7968902721575115);
      int int0 = 49;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.max();
      SparseMatrix.diagonal(7, 0.0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 746);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(746, 2);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(447, 0.0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix.random(413, (-965), (-926.4959639511059), (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1132, 423.82889696102734);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1132, 1132);
      cCSMatrix0.add(2451.6);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, matrix0);
      int int0 = 2452;
      cCSMatrix1.maxInColumn(int0);
      int int1 = 2563;
      cCSMatrix0.maxInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(447, 0.0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ((CCSMatrix) columnMajorSparseMatrix0).updateAt((-1551), 48, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 3);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(279, 279, 0.0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 2466, 2466);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[0];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(1114, vectorAccumulator0);
      Matrix matrix0 = cCSMatrix0.copyOfShape(435, 13);
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2591, 763, 2591);
      Matrix.diagonal(2445, (-966.0));
      CCSMatrix.zero(763, 2591, 13);
      cCSMatrix0.copyOfShape(763, 2591);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(2591, (double) 763, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      int int0 = (-571);
      cCSMatrix0.iteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(534, 534, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)534).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(534, 1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1250, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformRow(3940, vectorFunction0);
      Locale locale0 = new Locale("46");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      matrix0.mkString(numberFormat0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1250).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldColumn(0, vectorAccumulator0);
      cCSMatrix1.setAll(1250);
      cCSMatrix1.add((-1521.4323537082));
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, matrix0, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(704, 1250);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(704);
      cCSMatrix1.max();
      SparseMatrix.diagonal(731, 731);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.maxInColumn(691);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 2466, 2466);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      cCSMatrix0.setColumn(1236, (double) 2466);
      cCSMatrix0.add(1675.6142247);
      cCSMatrix0.maxInColumn(4782);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      CCSMatrix cCSMatrix1 = new CCSMatrix(3, 3, 0, (double[]) null, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.updateAt(3, 1, matrixFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 2466, 2466);
      cCSMatrix0.minInColumn(101);
      cCSMatrix0.copyOfColumns(8);
      Double double0 = new Double((-852.53513458518));
      cCSMatrix0.iteratorOfColumn(1831);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 3;
      int int1 = 882;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 882);
      cCSMatrix0.setAll(3);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.constant(736, 3);
      // Undeclared exception!
      try { 
        ooPlaceMatrixByVectorMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 736
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1250, 1250);
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat.getInstance(locale0);
      cCSMatrix0.min();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix.constant(1250, 3940, Double.NEGATIVE_INFINITY);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn(1250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1250
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 746;
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 746);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 746;
      doubleArray0[1] = (double) 746;
      CCSMatrix cCSMatrix1 = new CCSMatrix(746, 746, 746, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix1.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SparseMatrix.diagonal(731, 2859.629569);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 731;
      doubleArray0[2] = (double) 691;
      doubleArray0[3] = 2923.64492268648;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 21;
      doubleArray0[2] = (double) 21;
      doubleArray0[3] = (double) 746;
      doubleArray0[1] = (double) 21;
      doubleArray0[5] = (double) 21;
      doubleArray0[6] = (double) 21;
      doubleArray0[7] = (double) 21;
      doubleArray0[8] = (double) 21;
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix0 = new CCSMatrix(746, 21, 746, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(527, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      CCSMatrix cCSMatrix1 = new CCSMatrix(3, 3, 0, (double[]) null, intArray0, intArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 8;
      SparseMatrix.diagonal(8, 423.82889696102734);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, (-2442.283888946904));
      Matrix matrix0 = Matrix.zero(2416, 8);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
      int int1 = 48;
      MockRandom mockRandom0 = new MockRandom(int0);
      CCSMatrix.randomSymmetric(int1, (double) int0, (Random) mockRandom0);
      cCSMatrix1.add((double) int0);
      int int2 = (-2878);
      cCSMatrix0.maxInColumn(int2);
  }
}
