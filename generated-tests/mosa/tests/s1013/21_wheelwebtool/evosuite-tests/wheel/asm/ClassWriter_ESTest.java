/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:28:38 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(664);
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(46);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@25ccef3c
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      classWriter0.visitAnnotation("^+h<3 !<wA", true);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      Type type0 = Type.LONG_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2917);
      Double double0 = new Double(2);
      classWriter0.newConstItem(double0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2917, 2917);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1258));
      Item item0 = classWriter0.newFloat((-1258));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2822));
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-2822), "java/lang/String", "wheel.asm.Type", "wheel.asm.Type", (String[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      classWriter0.newMethod(">6)B@F-M;F3c", ">6)B@F-M;F3c", ">6)B@F-M;F3c", false);
      Item item0 = classWriter0.newLong(16777222);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1787);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 1787);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      classWriter0.toByteArray();
      classWriter0.visitInnerClass("y!", "y!", "y!", 33);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1239));
      Type type0 = Type.INT_TYPE;
      classWriter0.newConst(type0);
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2917);
      int int0 = classWriter0.addUninitializedType("org.apache.commons.io.FilenameUtils", 2917);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(197);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mc*WiXAM@V";
      classWriter0.visit(197, 197, "mc*WiXAM@V", "mc*WiXAM@V", "``#o*R(r2b;Fn|vrK", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777232);
      byte[] byteArray0 = ClassWriter.TYPE;
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@13d35faf
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.visitInnerClass("", "EnclosingMethod", "", 32);
      classWriter0.visitInnerClass("", "", "", 32);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(512);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newField("Signature", "Signature", "Signature");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-220));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newNameType("EnclosingMethod", "EnclosingMethod");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, int0);
      
      int int1 = classWriter0.addType("^W}.<,");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newMethodItem("^W}.<,", "EnclosingMethod", "EnclosingMethod", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-636));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newDouble(0.75);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newDouble(0.0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      classWriter0.visitSource("39COrSQEQ", "39COrSQEQ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777212);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(16777212, "9D{L'v<", "9D{L'v<", "9D{L'v<", "9D{L'v<");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        classWriter0.visit(35, 5, "SourceFile", "zp^UzSzZ$0VPgt5'cm", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-660));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newInteger((-660));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      Item item0 = classWriter0.newConstItem(byte0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newLong((-4274L));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      classWriter0.threshold = (-3470);
      Item item1 = classWriter0.newDouble(32);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1361);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newNameType("^M#3*2KDEG", "^M#3*2KDEG");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, int0);
      
      classWriter0.visit(1361, 1361, "^M#3*2KDEG", "^M#3*2KDEG", "^M#3*2KDEG", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3225));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        classWriter0.visit(16777228, (-2), "", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-849));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Short short0 = new Short((short) (-2167));
      assertEquals((short) (-2167), (short)short0);
      assertNotNull(short0);
      
      int int0 = classWriter0.newConst(short0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("((dH|z([_HIak*jBk", (String) null, "tZ{mDYS<ZxOnY");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-636));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("ad\"[I&NB[)k", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1482);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("[]", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-911));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(213);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(52);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newLong(52);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newLong(52);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(item1, item0);
      assertNotNull(item1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(230);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource("G;6J8ek'>M_qi53Pz", "G;6J8ek'>M_qi53Pz");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1239));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Type type0 = Type.INT_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(5, type0.getSort());
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(0, Type.VOID);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertNotNull(type0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = classWriter0.newConst(integer0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int0 = classWriter0.addType("q,");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("q,", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass("byte", "byte", "YMpPt04{", 10);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-220));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newNameType("EnclosingMethod", "EnclosingMethod");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      int int1 = classWriter0.addType("Exceptions");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = classWriter0.addType("Exceptions");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-636));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newConst("}'Y");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      Item item0 = classWriter0.newConstItem("}'Y");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(213);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Type type0 = Type.DOUBLE_TYPE;
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertNotNull(type0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(10, "", "", "", float0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("wheel.asm.ClassWriter", "t575)d", "wheel.asm.ClassWriter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3349);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("Synthetic", "Synthetic", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.invalidFrames = false;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w4c&WC&ja{hwFpO9R");
      assertFalse(boolean0);
      
      int int0 = classWriter0.newClass("");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(5, int0);
      
      int int1 = classWriter0.newMethod("", "", "m&^ X_~D*Q", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      int int2 = classWriter0.newMethod("", "", "m&^ X_~D*Q", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("0&pc=3%2N~`/B%e)P", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Item item0 = classWriter0.newInteger(3349);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      AnnotationVisitor annotationVisitor1 = classWriter0.visitAnnotation("", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotNull(annotationVisitor1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777222);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.addUninitializedType("", 16777222);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("", 16777222);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2917);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Type type0 = Type.INT_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(5, type0.getSort());
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertNotNull(type0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2917, "", "", "", type0);
      assertEquals(1, type0.getSize());
      assertEquals(5, type0.getSort());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertNotNull(fieldVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3275));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Character character0 = new Character('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      Item item0 = classWriter0.newConstItem(character0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(89);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Type type0 = Type.INT_TYPE;
      assertEquals(5, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals(1, Type.BOOLEAN);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertNotNull(type0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
      
      int int1 = Double.MAX_EXPONENT;
      assertEquals(1023, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(25);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit(262144, 262144, "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2044));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit((-2044), (-1092), "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      classWriter0.visitInnerClass("sps4rv", "(", "", (-2044));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(61);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(2377);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}";
      classWriter1.visit(14, (-1738), "}", "}", "R5A?v>`|~XygHz", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      int int0 = Frame.TOP;
      assertEquals(16777216, int0);
      
      byte[] byteArray0 = classWriter1.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(byteArray0);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertNotNull(classWriter2);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-879), 2203);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-626));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Type type0 = Type.INT_TYPE;
      assertEquals(5, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertNotNull(type0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
      
      int int1 = Double.MAX_EXPONENT;
      assertEquals(1023, int1);
      assertFalse(int1 == int0);
      
      int int2 = classWriter0.newConst(boolean0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3620));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("SouceDebuExtension", "SouceDebuExtension", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1680);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newDouble(1680);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newDouble(1680);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Long long0 = new Long((-1915L));
      assertEquals((-1915L), (long)long0);
      assertNotNull(long0);
      
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-660));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newFieldItem("", "", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFieldItem("", "", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(item1, item0);
      assertNotNull(item1);
      
      int int0 = classWriter0.newClass("&_S1!}G$@OgSX`y");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1113));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newFloat((-1113));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFloat((-1113));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertSame(item1, item0);
      assertNotNull(item1);
      
      int int0 = Double.MAX_EXPONENT;
      assertEquals(1023, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("The wildcard array must not be null", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2917);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals("org.apache.commons.io.filefilter.FalseFileFilter", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(213);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(48);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">Ha\"PeC:0*'/@(~94";
      stringArray0[1] = ")V";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, ">Ha\"PeC:0*'/@(~94", ")V", (String) null, stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      classWriter0.firstMethod = methodWriter0;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2917);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Type type0 = Type.getObjectType("i");
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertNotNull(type0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2917, "i", "i", "i", type0);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item[] itemArray0 = new Item[1];
      Item item0 = classWriter0.newFloat((-2642.2F));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      itemArray0[0] = item0;
      classWriter0.typeTable = itemArray0;
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Type", "java/lang/String");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      
      int int0 = classWriter0.addUninitializedType("wheel.asm.Type", (-2471));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(21);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "wheel.asm.Type");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      
      String string1 = classWriter0.getCommonSuperClass("wheel.asm.Type", "java/lang/Object");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter1);
      assertEquals("java/lang/Object", string1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }
}
