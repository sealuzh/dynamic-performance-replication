/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:20:57 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-1689);
      intArray0[1] = (-1689);
      int int2 = 3645;
      intArray0[2] = 3645;
      intArray0[3] = (-3030);
      int int3 = 0;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-1689), 3645, (-3030), 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int4 = 0;
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-3030);
      intArray1[3] = 3645;
      CharClass charClass1 = charClass0.appendFoldedRange((-3030), 0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {0, (-1689), 3645, (-3030), 0}, intArray0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      
      intArray1[4] = 0;
      intArray1[5] = 3645;
      intArray1[6] = (-3030);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(32, (-1647));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendFoldedRange(32, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 32);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[7][4];
      CharClass charClass5 = charClass4.appendFoldedRange(11812, 156);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int0 = 2309;
      intArray2[1] = 0;
      intArray2[2] = 609;
      int int1 = 161;
      intArray2[3] = 161;
      intArray1[3] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1020);
      intArray3[1] = 161;
      intArray3[2] = 161;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 704;
      intArray0[2] = 862;
      intArray0[3] = 7072;
      intArray0[4] = (-1728);
      intArray0[5] = 1886;
      intArray0[6] = 1589;
      intArray0[7] = (-599);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 704, 862, 7072, (-1728), 1886, 1589, (-599)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange((-2237), 862);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 704, 862, 7072, (-1728), 1886, 1589, (-599)}, intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 704, 862, 7072, (-1728), 1886, 1589, (-599)}, intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      CharClass charClass4 = charClass3.appendFoldedRange(704, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 704, 862, 7072, (-1728), 1886, 1589, (-599)}, intArray0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      
      String string0 = CharClass.charClassToString(intArray0, (-1728));
      assertArrayEquals(new int[] {0, 704, 862, 7072, (-1728), 1886, 1589, (-599)}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass5 = charClass4.appendLiteral(0, 734);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {0, 704, 862, 7072, (-1728), 1886, 1589, (-599)}, intArray0);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[3][4];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      int int0 = 200;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1641;
      intArray0[1] = 2310;
      int int0 = 2060;
      intArray0[2] = 2060;
      int int1 = (-1041);
      intArray0[3] = (-1041);
      int int2 = 43649;
      intArray0[4] = 43649;
      int int3 = 0;
      intArray0[5] = 0;
      int int4 = (-1242);
      intArray0[6] = (-1242);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1641, 2310, 2060, (-1041), 43649, 0, (-1242)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[0] = 0;
      intArray0[2] = (-9);
      intArray0[3] = (-9);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(0, 0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass0.appendClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      
      CharClass charClass4 = charClass2.appendRange(0, 0);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      
      CharClass charClass5 = charClass1.appendClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass3));
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass3);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      
      CharClass charClass6 = charClass1.appendFoldedClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass3));
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass3);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass7 = charClass0.appendFoldedRange((-1641), 1114111);
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray0);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      
      CharClass charClass8 = charClass1.appendClassWithSign(intArray0, (-541));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass7));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass2));
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray0);
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
      
      CharClass charClass9 = charClass8.appendClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass7));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass0));
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass3);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass0);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray0);
      assertNotNull(charClass9);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass6));
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass6);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      CharClass charClass10 = charClass9.appendLiteral(0, 12343);
      assertFalse(charClass10.equals((Object)charClass4));
      assertFalse(charClass10.equals((Object)charClass3));
      assertFalse(charClass10.equals((Object)charClass7));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass7));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass0));
      assertSame(intArray0, intArray1);
      assertNotSame(charClass10, charClass4);
      assertNotSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass7);
      assertNotSame(charClass10, charClass2);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass9);
      assertNotSame(charClass10, charClass0);
      assertSame(charClass10, charClass8);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass3);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass3);
      assertSame(charClass9, charClass10);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass0);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray0);
      assertNotNull(charClass10);
      assertEquals(4, intArray0.length);
      
      CharClass charClass11 = charClass8.appendClassWithSign(intArray1, (-1641));
      assertFalse(charClass11.equals((Object)charClass3));
      assertFalse(charClass11.equals((Object)charClass4));
      assertFalse(charClass11.equals((Object)charClass7));
      assertFalse(charClass11.equals((Object)charClass2));
      assertFalse(charClass11.equals((Object)charClass0));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass10));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass7));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass2));
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertNotSame(charClass11, charClass3);
      assertSame(charClass11, charClass10);
      assertNotSame(charClass11, charClass4);
      assertNotSame(charClass11, charClass7);
      assertNotSame(charClass11, charClass2);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass5);
      assertNotSame(charClass11, charClass0);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass10);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass8);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass3);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass2);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass5);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-1641), 1114111}, intArray0);
      assertNotNull(charClass11);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = (-2277);
      String string0 = CharClass.charClassToString(intArray0, (-2277));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1404;
      intArray0[1] = (-2871);
      intArray0[2] = 1114111;
      intArray0[3] = 91;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1404, (-2871), 1114111, 91, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass0.appendLiteral((-2871), (-1246));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {1404, (-2871), 1114111, 91, 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 960;
      intArray0[0] = 960;
      int int1 = (-36);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {960, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 960;
      intArray1[1] = 960;
      intArray1[2] = 960;
      intArray1[3] = 960;
      intArray1[4] = 1114111;
      intArray1[5] = (-36);
      intArray1[6] = 960;
      intArray1[7] = 960;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 960);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      int int0 = 32;
      intArray0[1] = 32;
      int int1 = 1387;
      intArray0[2] = 1387;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1818);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2230;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-347);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 2230, 0, 0, (-347)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(2158, 2377);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 2230, 0, 0, (-347)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2025);
      intArray0[1] = (-3022);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      String string0 = charClass2.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(string0);
      assertEquals("[0xfffff433-0x10ffff]", string0);
      
      CharClass charClass3 = charClass1.appendRange(4, (-3022));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass3.appendLiteral(10190, 4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      
      CharClass charClass5 = charClass2.appendLiteral((-3022), (-3022));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      
      CharClass charClass7 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass7);
      assertEquals(2, intArray0.length);
      
      CharClass charClass8 = charClass7.appendLiteral((-2025), (-2025));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass8);
      assertEquals(2, intArray0.length);
      
      String string1 = CharClass.charClassToString(intArray0, 0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass9 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass9);
      assertEquals(2, intArray0.length);
      
      String string2 = CharClass.charClassToString(intArray0, (-3022));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(string2);
      assertEquals("[]", string2);
      assertEquals(2, intArray0.length);
      
      CharClass charClass10 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass10);
      assertEquals(2, intArray0.length);
      
      CharClass charClass11 = charClass1.appendLiteral(4, (-161));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass11);
      assertEquals(2, intArray0.length);
      
      CharClass charClass12 = charClass6.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass12);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass12);
      assertEquals(2, intArray0.length);
      
      CharClass charClass13 = charClass3.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass12);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass13);
      assertEquals(2, intArray0.length);
      
      CharClass charClass14 = charClass9.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass12);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass1);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass9);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass12);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass14);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass13);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass14);
      assertEquals(2, intArray0.length);
      
      CharClass charClass15 = charClass10.cleanClass();
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass13);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass15);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass12);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass15);
      assertSame(charClass1, charClass9);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass13);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass15);
      assertEquals(2, intArray0.length);
      
      CharClass charClass16 = charClass12.appendClassWithSign(intArray0, 0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass12);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass14);
      assertSame(charClass12, charClass15);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass16);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass16);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass15);
      assertSame(charClass1, charClass9);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass13);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass1);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass12);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass8);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass14);
      assertSame(charClass6, charClass15);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass16);
      assertArrayEquals(new int[] {(-2025), (-3022)}, intArray0);
      assertNotNull(charClass16);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2580);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(93, 64);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(755, (-6677845));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      int int0 = 2073;
      CharClass charClass1 = charClass0.appendRange(0, 2073);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-3876));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass3.appendLiteral(0, 1695);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      
      CharClass charClass6 = charClass2.appendLiteral(0, 1410);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      
      CharClass charClass7 = charClass1.negateClass();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass7);
      assertEquals(0, intArray0.length);
      
      CharClass charClass8 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass8);
      assertEquals(0, intArray0.length);
      
      String string0 = charClass8.toString();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass9 = charClass8.cleanClass();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass9);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[8][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1410;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 43707;
      intArray2[4] = 0;
      intArray1[6] = intArray2;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass9.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      intArray0[0] = (-787);
      intArray0[1] = 1114111;
      intArray0[2] = 63;
      intArray0[3] = (-30);
      intArray0[4] = 3716;
      intArray0[5] = 69704;
      intArray0[6] = 345;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 4648;
      intArray0[2] = (-944);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2204;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 4648, (-944), 0, 0, 2204}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2, 4648, (-944), 0, 0, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 1, (-944), 0, 0, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange(2949, 1114111);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 1, 2949, 1114111, 0, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 1, 0, 1114111, 0, 1114111}, intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 1114111, 0, 1, 0, 1114111}, intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {0, 1114111, 0, 1, 0, 1114111}, intArray0);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-2980), (-2980));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2980);
      intArray0[1] = (-2980);
      intArray0[2] = (-2980);
      intArray0[3] = (-2980);
      intArray0[4] = (-2980);
      intArray0[5] = (-2980);
      int int0 = 0;
      intArray0[6] = 0;
      intArray0[7] = (-2980);
      intArray0[8] = (-2980);
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 0;
      String string0 = CharClass.charClassToString((int[]) null, 0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 3214;
      intArray0[0] = 3214;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3214}, intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      
      int int1 = 8593;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 8593);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[4][1];
      int[] intArray1 = new int[3];
      intArray1[0] = 66;
      CharClass charClass1 = charClass0.appendFoldedRange(66, (-1643));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      intArray1[1] = (-3678);
      intArray1[2] = 64;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 64;
      intArray2[1] = 66;
      intArray2[2] = 66;
      intArray2[3] = (-3678);
      intArray2[4] = (-3678);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 64;
      intArray4[1] = 64;
      intArray4[2] = 66;
      intArray4[3] = 66;
      intArray4[4] = 66;
      intArray4[5] = 64;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1, 200);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1404;
      intArray0[1] = (-2871);
      intArray0[2] = 1114111;
      intArray0[3] = 91;
      intArray0[4] = (-1246);
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1404, (-2871), 1114111, 91, (-1246), 65}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(1621, 6121);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1404, (-2871), 1114111, 91, (-1246), 65}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1404, (-2871), 1114111, 91, (-1246), 65}, intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 8;
      intArray0[1] = 66640;
      intArray0[2] = 66639;
      intArray0[3] = 880;
      intArray0[4] = 84;
      intArray0[5] = (-3448);
      intArray0[6] = 3;
      intArray0[7] = 2032;
      intArray0[8] = 1277;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1176;
      intArray0[1] = (-988);
      intArray0[2] = (-1590);
      intArray0[3] = (-3817);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1176, (-988), (-1590), (-3817)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[7][4];
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-3817);
      intArray2[1] = (-988);
      intArray2[2] = (-3817);
      intArray2[3] = 1176;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1176;
      intArray1[1] = intArray3;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2204;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 0, 0, 2204}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2, 2, 2, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass0.appendLiteral(2204, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {2, 2, 2, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange(2949, 1114111);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {2, 2, 2, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass0.appendRange(1114111, 2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {2, 2, 2, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass3.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {2, 2, 2, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      
      CharClass charClass6 = charClass4.appendLiteral((-6548191), 1728);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {2, 2, 2, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(32, (-1647));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass2.appendFoldedRange(32, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-1020));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = charClass5.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {32, 32, 0, 1114111}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass6 = charClass5.appendLiteral((-1020), 32);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      
      CharClass charClass7 = charClass4.appendClassWithSign(intArray1, 32);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {32, 32, 0, 1114111}, intArray1);
      assertNotNull(charClass7);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1836);
      intArray0[1] = (-2);
      intArray0[2] = 460;
      intArray0[3] = 5;
      intArray0[4] = 983;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1836), (-2), 460, 5, 983}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-1803));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1836), (-2), 460, 5, 983}, intArray0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 983);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1827);
      intArray0[1] = 35332;
      intArray0[2] = 0;
      int int0 = 1359;
      intArray0[3] = 1359;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1827), 35332, 0, 1359}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1827));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1827), 35332, 0, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 35332;
      intArray1[1] = 35332;
      intArray1[2] = 0;
      intArray1[3] = 35332;
      intArray1[4] = 35332;
      intArray1[5] = 35332;
      intArray1[6] = 0;
      intArray1[7] = 1468;
      intArray1[8] = 35332;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-9);
      intArray0[3] = (-9);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, (-9), (-9)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-9), (-9), 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-9), (-9), 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-9), (-9), 0, 0}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      
      CharClass charClass4 = charClass2.appendRange((-9), 0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 0}, intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      
      CharClass charClass5 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 0}, intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      
      CharClass charClass6 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 0}, intArray0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      
      String string0 = CharClass.charClassToString(intArray0, (-9));
      assertArrayEquals(new int[] {(-9), (-9), (-9), 0}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass7 = charClass2.appendClassWithSign(intArray0, (-1641));
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 1114111}, intArray0);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      
      CharClass charClass8 = charClass6.appendFoldedRange(0, (-249));
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 1114111}, intArray0);
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
      
      CharClass charClass9 = charClass5.negateClass();
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 1114111}, intArray0);
      assertNotNull(charClass9);
      assertEquals(4, intArray0.length);
      
      CharClass charClass10 = charClass9.negateClass();
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 1114111}, intArray0);
      assertNotNull(charClass10);
      assertEquals(4, intArray0.length);
      
      CharClass charClass11 = charClass9.appendNegatedClass(intArray0);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass10);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 1114111}, intArray0);
      assertNotNull(charClass11);
      assertEquals(4, intArray0.length);
      
      CharClass charClass12 = charClass4.appendClassWithSign(intArray0, 0);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass12);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 1114111}, intArray0);
      assertNotNull(charClass12);
      assertEquals(4, intArray0.length);
      
      CharClass charClass13 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertArrayEquals(new int[] {(-9), (-9), (-9), 1114111}, intArray0);
      assertNotNull(charClass13);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      charClass11.appendFoldedRange((-1641), 684);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-9);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, (-9), 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-9), 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass0.appendLiteral((-6548848), 2619);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-9), 0, (-6548848), (-6548848)}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass1.appendTableWithSign(intArray1, (-9));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-9), 0, (-2141473304), 1114111}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass4 = charClass0.negateClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {(-9), 0, (-2141473304), 1114111}, intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      
      CharClass charClass5 = charClass0.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {(-9), (-9), (-2141473313), (-2141473313)}, intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 3903;
      intArray0[2] = 0;
      intArray0[3] = 66640;
      intArray0[4] = 1292;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 1315;
      CharClass charClass2 = charClass0.appendFoldedRange(0, (-1255));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      intArray1[2] = 2479;
      intArray1[3] = (-217);
      intArray1[4] = 0;
      int int0 = 1018;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4121;
      intArray0[1] = 863;
      intArray0[2] = 1910;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 127232;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {4121, 863, 1910, 0, 0, 127232}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {4121, 863, 1910, 0, 0, 127232}, intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {4121, 863, 1910, 0, 0, 127232}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass4 = charClass3.appendFoldedRange(0, 1623);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {4121, 863, 1910, 0, 0, 127232}, intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass5 = charClass4.negateClass();
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {4121, 863, 1910, 0, 0, 127232}, intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1411;
      intArray0[2] = 10186;
      intArray0[3] = (-501);
      intArray0[4] = 0;
      intArray0[5] = 3667;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][2];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 960;
      intArray0[1] = 557;
      intArray0[2] = 0;
      intArray0[3] = 334;
      intArray0[4] = 471;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {960, 557, 0, 334, 471}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {960, 557, 0, 334, 471}, intArray0);
      assertArrayEquals(new int[] {960, 557, 0, 334, 471}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(557, 471);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {960, 557, 0, 334, 471}, intArray0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4770);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-4770)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange((-3028), 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-4770)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 7526;
      intArray0[1] = (-2812);
      intArray0[2] = 572;
      intArray0[3] = 2820;
      intArray0[4] = (-757);
      intArray0[5] = 1546;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7526, (-2812), 572, 2820, (-757), 1546}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray1[1] = 5056;
      intArray1[2] = (-76);
      intArray1[3] = 8180;
      intArray1[4] = 8013;
      intArray1[5] = 4;
      intArray1[6] = (-2084);
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-372));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      int int0 = 471;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 32;
      int int0 = 1387;
      intArray0[2] = 1387;
      int int1 = 1818;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1818);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(93, 93);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-958);
      intArray0[2] = 1316;
      intArray0[3] = (-1602);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-958), 1316, (-1602)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.appendLiteral((-958), (-253));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, (-958), 1316, (-1602)}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, (-958), 1316, (-1602)}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 84;
      intArray0[1] = 84;
      intArray0[2] = 84;
      intArray0[3] = 84;
      intArray0[4] = 84;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-3506);
      intArray0[2] = 66640;
      intArray0[3] = (-4033);
      intArray0[4] = 3916;
      intArray0[5] = 66639;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = (-958);
      intArray0[2] = 1316;
      intArray0[3] = 16;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendLiteral((-958), (-253));
      CharClass charClass3 = charClass2.cleanClass();
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertSame(charClass3, charClass4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(4538, 4538);
      int[] intArray0 = new int[4];
      intArray0[0] = 4538;
      intArray0[1] = 4538;
      intArray0[2] = 4538;
      intArray0[3] = 4538;
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.appendRange(4538, 6090);
      int[][] intArray1 = new int[5][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertSame(charClass3, charClass4);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 866;
      intArray0[1] = 113;
      intArray0[2] = 0;
      intArray0[3] = (-812);
      intArray0[4] = 0;
      intArray0[5] = 91;
      intArray0[6] = 0;
      intArray0[7] = (-1487);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendRange(0, 113);
      CharClass charClass3 = charClass2.appendLiteral(0, 0);
      int[][] intArray1 = new int[8][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = (-1487);
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 113;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 866;
      intArray3[2] = (-656);
      intArray1[7] = intArray3;
      // Undeclared exception!
      charClass3.appendTableWithSign(intArray1, (-2559));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(2115, 2115);
      int[] intArray0 = new int[4];
      intArray0[0] = 2115;
      intArray0[1] = 2115;
      intArray0[2] = 2115;
      intArray0[3] = 2115;
      CharClass charClass2 = charClass1.appendClass(intArray0);
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[1];
      intArray2[0] = 2115;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1827);
      intArray0[1] = 35332;
      intArray0[2] = 0;
      intArray0[3] = 1359;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1827));
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendFoldedRange(1359, 0);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 1114111);
      CharClass charClass5 = charClass2.appendClass(intArray0);
      int[] intArray1 = charClass1.toArray();
      charClass4.appendLiteral((-1562), 3074);
      charClass4.appendClassWithSign(intArray1, 1678);
      charClass2.toArray();
      int[][] intArray2 = new int[3][3];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      // Undeclared exception!
      try { 
        charClass5.appendTableWithSign(intArray2, (-3063));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 1387;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 32;
      intArray1[5] = 1387;
      intArray0[0] = intArray1;
      charClass0.appendTable(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(1, 1);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[5] = 2;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2197;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(2197, 0);
      CharClass charClass2 = charClass1.appendRange(2949, 1114111);
      CharClass charClass3 = charClass0.appendRange(1114111, 2);
      charClass2.appendFoldedClass(intArray0);
      charClass3.appendLiteral((-6548191), 1728);
      assertArrayEquals(new int[] {2, 0, 2, 0, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(32, (-1647));
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendFoldedRange(32, 0);
      charClass0.appendClassWithSign(intArray0, 0);
      charClass0.appendClass(intArray0);
      charClass0.toArray();
      CharClass charClass4 = charClass2.appendLiteral(239, 0);
      int[][] intArray1 = new int[0][9];
      charClass4.appendTableWithSign(intArray1, 406);
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 239);
      assertSame(charClass5, charClass3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-4966), (-4966));
      int[][] intArray0 = new int[0][2];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass1, charClass2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 960;
      int int0 = 557;
      intArray0[1] = 557;
      intArray0[2] = 0;
      intArray0[3] = 334;
      intArray0[4] = 471;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.toArray();
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 113;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-1487);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendRange(0, (-1487));
      charClass2.appendLiteral(0, 0);
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = (-1487);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 113;
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-944);
      intArray0[4] = 0;
      intArray0[5] = 2204;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.negateClass();
      charClass2.appendRange(2949, 1114111);
      CharClass charClass3 = charClass2.cleanClass();
      charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 1, 0, 1114111, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-9);
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass0.appendFoldedRange(0, 0);
      charClass0.appendClass(intArray0);
      CharClass charClass3 = charClass2.appendRange(0, 0);
      CharClass charClass4 = charClass1.appendClass(intArray0);
      CharClass charClass5 = charClass1.appendFoldedClass(intArray0);
      CharClass.charClassToString(intArray0, 0);
      charClass2.appendClassWithSign(intArray0, (-1641));
      charClass5.appendFoldedRange(0, (-249));
      CharClass charClass6 = charClass4.negateClass();
      charClass6.negateClass();
      CharClass charClass7 = charClass6.appendNegatedClass(intArray0);
      charClass3.appendClassWithSign(intArray0, 0);
      charClass0.appendFoldedRange(0, 0);
      // Undeclared exception!
      charClass7.appendFoldedRange((-1641), 684);
  }
}
