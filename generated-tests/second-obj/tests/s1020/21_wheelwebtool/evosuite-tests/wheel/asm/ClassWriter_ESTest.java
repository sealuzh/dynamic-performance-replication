/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:02:22 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-3079));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      Item item0 = classWriter0.newLong(41);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 510);
      int int0 = classWriter0.addUninitializedType("", 510);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-397));
      classWriter0.toByteArray();
      classWriter0.visitOuterClass("C_VGK{D.F{*t6KXR4y", "", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.newConst(boolean0);
      // Undeclared exception!
      try { 
        classWriter0.newField("", "dbG8{hx.eY", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.newField("Deprecated", "Deprecated", "Deprecated");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      // Undeclared exception!
      try { 
        classWriter0.visitField(42, (String) null, "", "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3765));
      int int0 = Frame.FLOAT;
      Item item0 = new Item();
      // Undeclared exception!
      try { 
        classWriter0.newMethod("", (String) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1445, "", "", (String) null, "");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3608));
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(152);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@3fa31830
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1564));
      Character character0 = Character.valueOf('5');
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      Short short0 = new Short((short)5);
      int int0 = classWriter0.newConst(short0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitSource("wwe", "wwe");
      Short short0 = new Short((short)395);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(133);
      Type type0 = Type.BYTE_TYPE;
      type0.getDescriptor();
      classWriter0.visitOuterClass("wheel.asm.ClassWriter", "&i`n", (String) null);
      Boolean boolean0 = new Boolean("");
      Integer integer0 = new Integer((-1144));
      classWriter0.toByteArray();
      Double double0 = new Double((-4037.700046));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      Item item0 = classWriter0.newFloat(19);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(284);
      classWriter0.visitInnerClass("3}(zVhTAJ^(/)i", (String) null, (String) null, 131072);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-1935), (-1935));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-909));
      String[] stringArray0 = new String[0];
      classWriter0.visit(2241, 2241, "+t6SB*K<!=$6", (String) null, "+t6SB*K<!=$6", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2212));
      classWriter0.newFieldItem(" b(9|QWL4@!:*o", " b(9|QWL4@!:*o", " b(9|QWL4@!:*o");
      int int0 = classWriter0.newNameType(" b(9|QWL4@!:*o", " b(9|QWL4@!:*o");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertNotNull(type0);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newConst(type0);
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1450));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addUninitializedType("", (-1450));
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-978));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1982));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      classWriter0.visit((-1982), (-1982), "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3217);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      String string0 = " GuR1nOWE0FlX";
      Double double0 = new Double(3217);
      assertNotNull(double0);
      assertEquals(3217.0, (double)double0, 0.01);
      
      Item item1 = classWriter0.newConstItem(double0);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("9^}s/iQ9&O&]`h", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '9^}s/iQ9&O&]`h.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2410);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newInteger(15);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("The strings must not be null", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.thisName = "7Vp9}vJx@{BM8li";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7Vp9}vJx@{BM8li");
      assertFalse(boolean0);
      
      String string0 = "&<v";
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, (String) null, "&<v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2849);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("Label offset position has not been resolved yet", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4558);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "Exceptions";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(4558, (String) null, "(FoALFa~1uY| ", "Exceptions", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5362);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 5362;
      Item item0 = classWriter0.newFloat(5362);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newConstItem("");
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.index = (-369);
      String string1 = classWriter0.thisName;
      assertNull(string1);
      
      Item item2 = classWriter0.newConstItem("");
      assertSame(item2, item1);
      assertNotSame(item2, item0);
      assertFalse(item2.equals((Object)item0));
      assertNotNull(item2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      File file0 = MockFile.createTempFile("r@3b~=|>Z{}1xO/Y4_", "Signature");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("Y4_0Signature", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("Y4_0Signature", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0, mockFileInputStream0.available());
      assertNotNull(mockFileInputStream0);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(96);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-20));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Byte byte0 = new Byte((byte) (-17));
      assertNotNull(byte0);
      assertEquals((byte) (-17), (byte)byte0);
      
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        classWriter0.newField("/nUcJp%H{;\"_\"/", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(192, "Synthtic", "Synthtic", (String) null, "Synthtic");
      assertNotNull(fieldVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray1 = ClassWriter.TYPE;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Attribute attribute0 = new Attribute("Synthtic");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-20));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertNotNull(type0);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(2, Type.CHAR);
      
      Type type1 = Type.VOID_TYPE;
      assertNotSame(type1, type0);
      assertEquals(0, type1.getSort());
      assertEquals(1, type1.getSize());
      assertFalse(type1.equals((Object)type0));
      assertNotNull(type1);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      
      Long long0 = new Long(5);
      assertNotNull(long0);
      assertEquals(5L, (long)long0);
      
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("wheel.asm.ClassWriter", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = Frame.LONG;
      assertEquals(16777220, int0);
      
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7316, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 16777220);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7316, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter1.newConstItem(boolean0);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(item0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(7316, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(7316);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7316, (int)integer0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5006));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newUTF8("StackMap");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.getObjectType("e\"DkX>=NLkF'<sRt(");
      assertEquals(1, type0.getDimensions());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-5006), " b(9|QWL4@!:*o", "StackMap", "e\"DkX>=NLkF'<sRt(", type0);
      assertEquals(1, type0.getDimensions());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(fieldVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer(17);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(17, (int)integer0);
      
      Integer integer1 = Integer.getInteger("Signature");
      assertNull(integer1);
      
      int int1 = Integer.divideUnsigned(1, 1476);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Item item0 = classWriter0.newConstItem(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addType("OLd");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = classWriter0.addUninitializedType("", 192);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-20);
      ClassWriter classWriter0 = new ClassWriter((-20));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.ClassWriter");
      assertFalse(boolean0);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Type", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-771));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      classWriter0.visitInnerClass((String) null, "waFgX$", "waFgX$", 3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Attribute attribute0 = new Attribute("");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.BYTE;
      assertEquals(16777226, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(29);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visit(29, 29, "Synthetic", "Synthetic", "Synthetic", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertNotNull(type0);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visit((-32), (-32), "Synthetic", "Synthetic", "Synthetic", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertNotNull(type0);
      assertEquals(5, Type.INT);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(3, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Type", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.ClassWriter");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = type0.getClassName();
      assertEquals(3, type0.getSort());
      assertEquals(1, type0.getSize());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("byte", string1);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      
      Double double0 = new Double((-1594.725326852405));
      assertNotNull(double0);
      assertEquals((-1594.725326852405), (double)double0, 0.01);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("byte", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newDouble(1.0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Object");
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(false, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = type0.getClassName();
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(string0);
      assertEquals("boolean", string0);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.asm.ClassWriter";
      classWriter0.visit(2, 2, "org.apache.commons.io.filefiHter.CanWriteFileFilter", "java/lang/Object", "wheel.asm.ClassWriter", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newInteger(2);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Double.BYTES;
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = type0.getClassName();
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(string0);
      assertEquals("boolean", string0);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("\".1=>Sy$KL", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.key;
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.key;
      assertNotNull(item0);
      
      Item item1 = classWriter0.newLong(0L);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("+15", "+15", "+15", 35);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass("+15", "+15", "+15", 35);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(3, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("wheel.asm.ClassWriter", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(5, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = Frame.LONG;
      assertEquals(16777220, int0);
      
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource((String) null, ";RB/- kJA]*8&W");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(194);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item[] itemArray0 = new Item[1];
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      itemArray0[0] = item0;
      item0.intVal = 1852;
      classWriter0.typeTable = itemArray0;
      Item item1 = classWriter0.newDouble(194);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newDouble(194);
      assertSame(item2, item1);
      assertNotSame(item2, item0);
      assertFalse(item2.equals((Object)item0));
      assertNotNull(item2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      item0.intVal = 4096;
      Item item3 = classWriter0.newInteger(4096);
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      assertNotSame(item3, item2);
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item2));
      assertNotNull(item3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newNameType("MjO7zJ1!0q", "MjO7zJ1!0q");
      assertEquals(5, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item4 = classWriter0.newDouble(5910.26534);
      assertNotSame(item4, item2);
      assertNotSame(item4, item3);
      assertNotSame(item4, item0);
      assertNotSame(item4, item1);
      assertFalse(item4.equals((Object)item2));
      assertFalse(item4.equals((Object)item3));
      assertFalse(item4.equals((Object)item0));
      assertFalse(item4.equals((Object)item1));
      assertNotNull(item4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1564));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Character character0 = Character.valueOf('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      int int0 = new Character('5');
      assertEquals('5', int0);
      
      classWriter0.visitOuterClass("}f)>2#F&e4H", (String) null, "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Float float0 = new Float((float) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = classWriter0.newConst(float0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(21);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "";
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.addType("");
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = "J,&\\";
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, "Ij$+sI:,g{%^JX)", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter(49);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 49);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.threshold = 49;
      Item item0 = classWriter0.newFloat(49);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, " t*v`])x", " t*v`])x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5378);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=!z]kLRN@[h\"QH9L=g5";
      Short short0 = new Short((short) (-1874));
      assertNotNull(short0);
      assertEquals((short) (-1874), (short)short0);
      
      long long0 = Short.toUnsignedLong((short) (-1874));
      assertEquals(63662L, long0);
      
      int int0 = Short.compare((short)643, (short)643);
      assertEquals(0, int0);
      
      classWriter0.visitOuterClass("9h", "=!z]kLRN@[h\"QH9L=g5", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("=!z]kLRN@[h\"QH9L=g5", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      stringArray0[1] = "=!z]kLRN@[h\"QH9L=g5";
      stringArray0[2] = "=!z]kLRN@[h\"QH9L=g5";
      Item item0 = new Item(2);
      assertNotNull(item0);
      
      stringArray0[3] = "9h";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      classWriter0.visit(5378, 5378, "9h", "=!z]kLRN@[h\"QH9L=g5", "=!z]kLRN@[h\"QH9L=g5", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitOuterClass("9h", "9h", "=!z]kLRN@[h\"QH9L=g5");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      classWriter0.index = 5378;
      classWriter0.newMethod("v", "16%5g0JmzmO[fZ.M!", "The array o nams must not be null", true);
      String string0 = classWriter0.thisName;
      classWriter0.toByteArray();
      classWriter0.addUninitializedType("AnnotationDefault", 2170);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(133);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(3, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      
      String string0 = "wheel.asm.Type";
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " cp");
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(5362);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      classWriter0.visit(5362, 5362, "", "", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newFieldItem("", "", "");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Long.BYTES;
      assertEquals(8, int0);
      
      String string0 = classWriter0.thisName;
      assertNotNull(string0);
      assertEquals("", string0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newMethodItem("", "", "", true);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = classWriter0.thisName;
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = classWriter0.newField("", "", "");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newLong(8);
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotNull(item2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray1 = ClassWriter.TYPE;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = classWriter0.toByteArray();
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(8, 5362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4915));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newMethod("", "", "", false);
      assertEquals(4, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.newMethod("", "", "", false);
      assertTrue(int1 == int0);
      assertEquals(4, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int2 = classWriter0.addUninitializedType("", 47);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.lastField = null;
      AnnotationVisitor annotationVisitor1 = classWriter0.visitAnnotation("", true);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotNull(annotationVisitor1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int3 = classWriter0.addType("");
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(2, int3);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(47);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "";
      Item item1 = classWriter0.newDouble(4);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5377);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addUninitializedType("", 5377);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Frame.KIND;
      assertFalse(int1 == int0);
      assertEquals(251658240, int1);
      
      byte[] byteArray2 = classWriter0.toByteArray();
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int2 = classWriter0.addUninitializedType("", 5377);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newDouble(1);
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int3 = 194;
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(194, 251658240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 194
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3029));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.invalidFrames = false;
      Item item0 = classWriter0.newLong((-3029));
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newDouble((-3029));
      assertNotSame(item1, item0);
      assertFalse(item1.equals((Object)item0));
      assertNotNull(item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newLong((-3029));
      assertSame(item2, item0);
      assertNotSame(item2, item1);
      assertFalse(item2.equals((Object)item1));
      assertNotNull(item2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-20);
      ClassWriter classWriter0 = new ClassWriter((-20));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = classWriter0.addType("POT02K%");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(3966, "", "POT02K%", "", (String[]) null);
      assertNotNull(methodVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Boolean boolean0 = new Boolean("wheel.asm.Type");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("cUG_8");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-20);
      ClassWriter classWriter0 = new ClassWriter((-20));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertNotNull(type0);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("wheel.asm.ClassWriter", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Boolean boolean1 = Boolean.valueOf("wheel.asm.ClassWriter");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      String string1 = type0.getClassName();
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("byte", string1);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      
      classWriter0.visit(2, (-20), "byte", (String) null, (String) null, (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newInteger(1617);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertNotNull(type0);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(3, Type.BYTE);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Type", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(133);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      assertNotNull(type0);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Type", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Double double0 = new Double((-4037.700046));
      assertNotNull(double0);
      assertEquals((-4037.700046), (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(20);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BYTE_TYPE;
      assertEquals(3, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.EmptyFileFilter", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type1 = Type.CHAR_TYPE;
      assertNotSame(type1, type0);
      assertEquals(2, type1.getSort());
      assertEquals(1, type1.getSize());
      assertFalse(type1.equals((Object)type0));
      assertNotNull(type1);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      
      int int0 = Float.SIZE;
      assertEquals(32, int0);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(3, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
