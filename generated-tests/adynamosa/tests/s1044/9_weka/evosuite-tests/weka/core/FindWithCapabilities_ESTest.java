/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 01:32:51 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Asi&)<E(4b/otj!>0";
      stringArray0[1] = "!,*k:l& 4(rH";
      stringArray0[2] = "9>q95=o";
      stringArray0[3] = "-date-class";
      stringArray0[4] = "rKm@[";
      stringArray0[5] = "b1xyv/W|RyX%15WU 2";
      stringArray0[6] = ":V?[2)/9{S&0";
      stringArray0[7] = "cOe0S;";
      stringArray0[8] = "lo_[|I%IH/";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      capabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "weka/core/Capabilities.props";
      stringArray1[1] = "weka/core/Capabilities.props";
      stringArray1[2] = "weka/core/Capabilities.props";
      stringArray1[3] = "hKp";
      FindWithCapabilities.main(stringArray1);
      TestInstances.forCapabilities(findWithCapabilities0.m_Capabilities);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities4.getCapabilities();
      try { 
        findWithCapabilities6.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)10;
      byteArray0[1] = (byte)0;
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "Wm\"Z$P";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      stringArray0[2] = "Yj#{;p";
      capabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "Wm\"Z$P";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      FindWithCapabilities.main(stringArray1);
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray2 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.setFilename("A superclass has to be specified!");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      try { 
        findWithCapabilities5.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wFN(=");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      capabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0, true);
      capabilities1.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      SingleIndex singleIndex0 = findWithCapabilities3.m_ClassIndex;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.setNotCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities2.setFilename(" because ");
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities2.getCapabilities();
      try { 
        findWithCapabilities4.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-109);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      capabilities0.setMinimumNumberInstances(540);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "Wm\"Z$P";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray2 = findWithCapabilities1.getOptions();
      SingleIndex singleIndex0 = findWithCapabilities2.m_ClassIndex;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("Wm\"Z$P");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.setOptions(stringArray1);
      findWithCapabilities4.setCapabilities(capabilities0);
      try { 
        findWithCapabilities3.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setFilename("2kP.!b%`x\"!NaE1#l9 ");
      findWithCapabilities1.setFilename("-5");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.find();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("2kP.!b%`x\"!NaE1#l9 ");
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities10.getOptions();
      FindWithCapabilities findWithCapabilities11 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities12 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities13 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities13.disable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities9.getCapabilities();
      capabilities0.m_MinimumNumberInstances = (-60);
      findWithCapabilities2.setCapabilities(capabilities0);
      findWithCapabilities1.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities14 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities2);
      findWithCapabilities4.m_NotCapabilities = capabilities0;
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities4.m_NotCapabilities.enable(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities5.m_NotCapabilities;
      findWithCapabilities2.setNotCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      Locale.getISOLanguages();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      FindWithCapabilities.main((String[]) null);
      String[] stringArray0 = findWithCapabilities4.getOptions();
      findWithCapabilities5.getMatches();
      Capabilities capabilities2 = findWithCapabilities4.getNotCapabilities();
      capabilities2.getClassCapabilities();
      Capabilities capabilities3 = new Capabilities(findWithCapabilities6);
      Capabilities capabilities4 = findWithCapabilities4.getNotCapabilities();
      findWithCapabilities4.m_NotCapabilities.getOtherCapabilities();
      findWithCapabilities3.setNotCapabilities(capabilities4);
      capabilities2.getOtherCapabilities();
      findWithCapabilities5.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5=qw";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities1.disableDependency(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("5=qw");
      capabilities1.enableAllAttributes();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      capabilities1.assign(capabilities0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      vector0.add("5=qw");
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities3.setFilename("-5");
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities5.m_Capabilities;
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities4.setClassIndex("-5");
      SingleIndex singleIndex0 = findWithCapabilities4.m_ClassIndex;
      findWithCapabilities3.m_ClassIndex = singleIndex0;
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      findWithCapabilities3.enableNot(capabilities_Capability0);
      findWithCapabilities3.getNotCapabilities();
      findWithCapabilities6.getRevision();
      findWithCapabilities6.isEnabledNot((Capabilities.Capability) null);
      // Undeclared exception!
      try { 
        findWithCapabilities9.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5=qw";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5=qw");
      findWithCapabilities0.getCapabilities();
      capabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_NotCapabilities = capabilities0;
      findWithCapabilities1.handles(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setCapabilities(findWithCapabilities0.m_Capabilities);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray2 = findWithCapabilities1.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities2.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities3.setHandler(findWithCapabilities0);
      findWithCapabilities0.setHandler(findWithCapabilities3);
      try { 
        findWithCapabilities4.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5=qw";
      findWithCapabilities0.m_Superclass = null;
      stringArray0[1] = "5=qw";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      stringArray0[2] = "5=qw";
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "5=qw";
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities2.getOptions();
      findWithCapabilities2.find();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("pd");
      findWithCapabilities3.setFilename("5=qw");
      assertEquals("5=qw", findWithCapabilities3.getFilename());
      
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.isEnabled(capabilities_Capability0);
      findWithCapabilities2.getMatches();
      Random.setNextRandom((-2));
      findWithCapabilities2.getRevision();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      stringArray0[0] = "WmZ$";
      stringArray0[1] = "WmZ$";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      stringArray0[2] = "Yj#{;p";
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex(";Z");
      findWithCapabilities2.setFilename("Z<EN19^#\u0005K)FOp");
      assertEquals("Z<EN19^#\u0005K)FOp", findWithCapabilities2.getFilename());
      
      Vector<String> vector0 = new Vector<String>();
      System.setCurrentTimeMillis(540);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities3.disableNot(capabilities_Capability3);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("Z<EN19^#\u0005K)FOp");
      capabilities0.disableAllAttributes();
      findWithCapabilities1.setOptions(stringArray1);
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5=qw";
      findWithCapabilities0.m_Superclass = null;
      stringArray0[1] = "5=qw";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      stringArray0[2] = "5=qw";
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "5=qw";
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("5=qw");
      findWithCapabilities3.setFilename("weka/core/Capabilities.props");
      findWithCapabilities1.getMatches();
      System.setCurrentTimeMillis(540);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities2.disableNot(capabilities_Capability1);
      findWithCapabilities2.find();
      findWithCapabilities2.setClassIndex("sxqAI");
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      assertNotSame(findWithCapabilities1, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Misses = vector0;
      vector0.clear();
      Vector<String> vector1 = findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add("not-nominal-class");
      vector1.add("not-nominal-class");
      findWithCapabilities0.m_Packages = vector1;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability3);
      vector1.add("-no-class");
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-no-class";
      stringArray0[1] = "not-nominal-class";
      stringArray0[2] = "weka/core/Capabilities.props";
      vector1.add("-no-class");
      stringArray0[3] = "not-nominal-class";
      stringArray0[4] = "not-nominal-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "`ic.bS2R";
      stringArray0[1] = "-not-numeric-class";
      stringArray0[2] = "iQ+0_>;y+;@ru'UKjE";
      stringArray0[3] = "";
      stringArray0[4] = "Induction of decision trees";
      stringArray0[5] = "\tThe number of date attributes (default 1).";
      stringArray0[6] = "FzUmK5Ct~WFJ";
      stringArray0[7] = "Oeo*mGoGM&eS";
      stringArray0[8] = "Please provide your username and password.";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities2.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-only-multiinstance";
      stringArray0[1] = "-only-multiinstance";
      stringArray0[2] = "-only-multiinstance";
      stringArray0[3] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      try { 
        findWithCapabilities6.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.BinarySparseInstance";
      stringArray0[1] = "weka.core.Attribute";
      stringArray0[2] = "<";
      stringArray0[3] = "-numeric-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Capabilities.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "\nFound ";
      stringArray0[2] = "\tMust handle binary classes.";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("Lt3v8z`7");
      findWithCapabilities0.setFilename("");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-5");
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities5.setClassIndex("]e\"XWEitD{IUcJ");
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      try { 
        findWithCapabilities10.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      String string0 = "v#b@bbjl";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "v#b@bbjl");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-5");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("qxUmioRiF{-'9'%2?&");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5=qw";
      stringArray0[1] = "5=qw";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      stringArray0[2] = "5=qw";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5=qw");
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.listIterator();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.setOptions(stringArray1);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("5d");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities3.isEnabledNot(capabilities_Capability2);
      findWithCapabilities2.disableNot(capabilities_Capability0);
      findWithCapabilities1.getMisses();
      Vector<String> vector1 = findWithCapabilities3.getMisses();
      assertEquals(0, vector1.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.m_Capabilities.enable(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("N*");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      vector0.listIterator();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.setMinimumNumberInstances((-59));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "5=qw";
      stringArray0[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setCapabilities(capabilities0);
      findWithCapabilities3.find();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setFilename("5=qw");
      try { 
        findWithCapabilities3.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "Wm\"Z$P";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      stringArray0[2] = "Yj#{;p";
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.enable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.disableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setOptions(stringArray1);
      findWithCapabilities3.getMisses();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.getOtherCapabilities();
      findWithCapabilities2.setFilename("");
      try { 
        findWithCapabilities3.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Yj#{;p";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enable(capabilities_Capability0);
      findWithCapabilities1.setFilename("weka.core.FindWithCapabilities");
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("-generic");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.find();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      findWithCapabilities0.find();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities3.m_Capabilities;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-5");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      try { 
        findWithCapabilities7.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.m_Capabilities.enable(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "Yj#{;p";
      stringArray0[3] = "Jo=7AY>Rg-fnqc@f";
      stringArray0[4] = "Wm\"Z$P";
      stringArray0[5] = "Yj#{;p";
      stringArray0[6] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities2.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "\tDoesn't need a class.";
      stringArray0[2] = "Wm\"Z$P";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "Wm\"Z$P";
      stringArray0[5] = "Yj#{;p";
      stringArray0[6] = "Yj#{;p";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities2.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities5.setClassIndex("Ij?LmFnr?b");
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      try { 
        findWithCapabilities9.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      String[] stringArray0 = Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities3.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.enableNot((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities8.enable((Capabilities.Capability) null);
      findWithCapabilities3.setFilename("^");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities4.disableNot(capabilities_Capability0);
      try { 
        findWithCapabilities8.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities3.setFilename("-5");
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities5.m_Capabilities;
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      findWithCapabilities5.setClassIndex("-5");
      SingleIndex singleIndex0 = findWithCapabilities9.m_ClassIndex;
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      Random.setNextRandom(309);
      findWithCapabilities3.isEnabled((Capabilities.Capability) null);
      assertEquals("-5", findWithCapabilities3.getFilename());
      
      FindWithCapabilities findWithCapabilities11 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities12 = new FindWithCapabilities();
      findWithCapabilities12.setClassIndex("B/y7W8;O");
      FindWithCapabilities findWithCapabilities13 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities14 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities14.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities3.setFilename("-5");
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities5.m_Capabilities;
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities4.setClassIndex("-5");
      SingleIndex singleIndex0 = findWithCapabilities4.m_ClassIndex;
      findWithCapabilities3.m_ClassIndex = singleIndex0;
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      String[] stringArray0 = Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities11 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities12 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities2.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities3.setFilename("-5");
      findWithCapabilities2.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities3.m_Capabilities;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities4.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities3.getOptions();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "i";
      stringArray1[1] = "weka/core/Capabilities.props";
      stringArray1[2] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(0L);
      TestInstances.forCapabilities(capabilities0);
      assertEquals("-5", findWithCapabilities3.getFilename());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      capabilities0.m_MissingClassValuesTest = false;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "60");
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Superclass = "";
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals(540, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(521);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[3];
      Capabilities.PROPERTIES = null;
      capabilities0.toSource("weka/core/Capabilities.props", 521);
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "}]ASG'$x5%";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Superclass = "Yj#{;p";
      capabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "60";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(521);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      capabilities0.setMinimumNumberInstances(558);
      capabilities0.createMessage("JG+.[]Q;u4_qi/O");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.m_Capabilities.enable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(558);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "6\"");
      findWithCapabilities0.m_Capabilities = capabilities0;
      int int0 = 521;
      capabilities0.setMinimumNumberInstances(521);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      capabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(712L);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enable(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      int int0 = 540;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "Wm\"Z$P";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Superclass = "Yj#{;p";
      stringArray0[2] = "";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(558);
      capabilities0.createMessage("JG+.[]Q;u4_qi/O");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-~");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Wm\"Z$P";
      capabilities0.getRevision();
      stringArray0[1] = "}]ASG'$x5%";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      Properties properties0 = Capabilities.PROPERTIES;
      Capabilities.PROPERTIES = properties0;
      findWithCapabilities0.setClassIndex("JG+.[]Q;u4_qi/O");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setOptions(stringArray1);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities4.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities.main(stringArray1);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "60");
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-~");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Wm\"Z$P";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.m_Capabilities.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities3.enableNot(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(540);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.enable(capabilities_Capability3);
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(558);
      capabilities0.createMessage("JG+.[]Q;u4_qi/O");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-~");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "}]ASG'$x5%";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.m_Capabilities.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis((-804L));
      System.setCurrentTimeMillis(1357L);
      findWithCapabilities0.enable(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_GenericPropertiesCreator = true;
      findWithCapabilities1.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.m_GenericPropertiesCreator = true;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot instantiate '");
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      Capabilities capabilities2 = findWithCapabilities1.m_Capabilities;
      capabilities2.m_MinimumNumberInstances = (-707);
      findWithCapabilities0.setNotCapabilities(capabilities2);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      findWithCapabilities1.getRevision();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability3);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities1.handles(capabilities_Capability4);
      findWithCapabilities0.setClassIndex("';oQ`(L|N?dA");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.setMinimumNumberInstances(540);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Wm\"Z$P";
      stringArray0[1] = "}]ASG'$x5%";
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.m_Superclass = "Yj#{;p";
      capabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(540);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.BinarySparseInstance";
      stringArray0[1] = "fvTo}.r^4)<cubro";
      stringArray0[2] = "\tMust handle missing class values.";
      stringArray0[3] = "-unary-class";
      stringArray0[4] = "=2:b|.q'mAJKq5;Z";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getCapabilities();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-not-binary-class");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.setFilename("uY(w[|42Ld&8C");
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-1");
      findWithCapabilities0.setClassIndex("-1");
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Misses = vector0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-899L));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-numeric-class";
      stringArray0[1] = "-numeric-class";
      stringArray0[2] = "' is not a CapabilitiesHandler!";
      stringArray0[3] = "uxuK|*6L~3_*wW8>";
      stringArray0[4] = "-numeric-class";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setHandler(findWithCapabilities2);
      findWithCapabilities4.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      capabilities0.getClassCapabilities();
      Capabilities capabilities2 = new Capabilities(findWithCapabilities2);
      try { 
        findWithCapabilities5.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "'Q";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("\"H");
      findWithCapabilities0.setFilename("\"H");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities4.m_Capabilities;
      capabilities0.getClassCapabilities();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities4);
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Q");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "'Q";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("\"H");
      findWithCapabilities0.setFilename("\"H");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.getCapabilities();
      capabilities1.getOtherCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(22L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "' is not a CapabilitiesHandler!";
      stringArray0[1] = ".z?6%g2g_a! [)3";
      stringArray0[2] = "uxuK|*6L~3_*wW8>";
      stringArray0[3] = "-numeric-class";
      stringArray0[4] = "lM9Z$h";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getClassCapabilities();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities1);
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      System.setCurrentTimeMillis((-1564L));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Misses = vector0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w-o";
      stringArray0[1] = "-not-string-atts";
      stringArray0[2] = "0)<Qi";
      stringArray0[3] = "weka.core.Attribute";
      stringArray0[4] = ">)3wI/>";
      stringArray0[5] = "0TosQ:IxCO";
      stringArray0[6] = "-force";
      stringArray0[7] = " can't determine what version of the base system is required!!";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(22L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities3.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getMatches();
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      capabilities1.getClassCapabilities();
      Capabilities capabilities2 = new Capabilities(findWithCapabilities3);
      Capabilities capabilities3 = new Capabilities(findWithCapabilities1);
      capabilities2.getOtherCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(22L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getOptions();
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertSame(vector1, vector0);
      
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = new Capabilities(findWithCapabilities2);
      Capabilities capabilities3 = new Capabilities(findWithCapabilities1);
      capabilities2.getOtherCapabilities();
      Capabilities capabilities4 = findWithCapabilities1.getCapabilities();
      capabilities4.dependencies();
      HashSet<Capabilities.Capability> hashSet0 = new HashSet<Capabilities.Capability>();
      capabilities1.getOtherCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      assertEquals(18, stringArray1.length);
      
      Vector<String> vector2 = findWithCapabilities1.getMatches();
      assertEquals("[]", vector2.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-relational-class";
      stringArray0[1] = "-relational-class";
      stringArray0[2] = "-relational-class";
      stringArray0[3] = "-relational-class";
      stringArray0[4] = "-relational-class";
      stringArray0[5] = "";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-relational-class";
      stringArray0[1] = "-relational-class";
      stringArray0[2] = "-relational-class";
      stringArray0[3] = "-relational-class";
      stringArray0[4] = "-relational-class";
      stringArray0[5] = "";
      FindWithCapabilities.main(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("-relational-class", arrayList0, (-3021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3021
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_ClassIndex = null;
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.disable(capabilities_Capability0);
      capabilities0.getClassCapabilities();
      findWithCapabilities0.getClassIndex();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "not-numeric-class";
      stringArray0[1] = "Latest";
      stringArray0[2] = "-t";
      stringArray0[3] = "nPGLN<Ca5WHX8zS!`-:";
      stringArray0[4] = "4A@C";
      stringArray0[5] = "7UC@on:neZW}-G";
      stringArray0[6] = "Ny1SR:]y(<4.:5E$N";
      stringArray0[7] = "-string-atts";
      stringArray0[8] = "Y(D]9d";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllAttributeDependencies();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      capabilities1.assign(capabilities0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getMisses();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "-W";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.disable(capabilities_Capability0);
      capabilities0.dependencies();
      capabilities1.assign(capabilities0);
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.setClassIndex("last");
      findWithCapabilities0.getMisses();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A superclass has to be specified!";
      stringArray0[1] = "-date-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wFN(=");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      capabilities0.dependencies();
      Random.setNextRandom((-1720272780));
      capabilities0.disableAllAttributes();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      capabilities0.enableAllClasses();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.disable(capabilities_Capability1);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.getNotCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("unary-class");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("\"H");
      Random.setNextRandom(99);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(958L);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.m_Superclass = "JlO+Z;1'd>lXX<dXz";
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("-dir");
      findWithCapabilities0.find();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JlO+Z;1'd>lXX<dXz");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getMisses();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(16);
      findWithCapabilities1.listOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities2.handles(capabilities_Capability1);
      findWithCapabilities3.setCapabilities(capabilities1);
      assertFalse(capabilities1.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getMisses();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(16);
      findWithCapabilities1.listOptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.handles(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      boolean boolean1 = findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability1);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumNominalValues((-1455357352));
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.disableNot(capabilities_Capability0);
      Capabilities capabilities2 = findWithCapabilities2.m_Capabilities;
      findWithCapabilities2.setNotCapabilities(capabilities1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities2.getFilename();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      assertNotSame(capabilities_Capability2, capabilities_Capability1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getMisses();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.getMatches();
      Locale.getISOCountries();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(16);
      findWithCapabilities1.listOptions();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.handles(capabilities_Capability1);
      findWithCapabilities2.listOptions();
      findWithCapabilities2.setFilename(" ");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertFalse(capabilities1.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      Capabilities capabilities2 = findWithCapabilities1.m_Capabilities;
      Capabilities capabilities3 = capabilities1.getClassCapabilities();
      TestInstances.forCapabilities(capabilities3);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getHandler();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      System.setCurrentTimeMillis(1339);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      System.setCurrentTimeMillis((-1));
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities2.disableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getNotCapabilities();
      findWithCapabilities1.getMatches();
      findWithCapabilities3.getCapabilities();
      findWithCapabilities3.setCapabilities(capabilities2);
      findWithCapabilities3.setHandler(findWithCapabilities2);
      assertNotSame(findWithCapabilities3, findWithCapabilities2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getMisses();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(16);
      findWithCapabilities1.listOptions();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.disable(capabilities_Capability1);
      assertEquals("", findWithCapabilities2.getFilename());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      String string0 = "-relational-atts";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "-relational-atts";
      stringArray1[1] = "-relational-atts";
      stringArray1[2] = "-relational-atts";
      stringArray1[3] = "-relational-atts";
      stringArray1[4] = "-relational-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      long long0 = (-47L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "-binary-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex("io");
      findWithCapabilities0.setFilename("TJ+G ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "io";
      stringArray0[1] = "-nominal-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Capabilities = null;
      findWithCapabilities0.setFilename("i");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.listIterator();
      vector0.listIterator();
      vector0.add("weka/core/Capabilities.props");
      vector0.add("4qevn");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.getRevision();
      assertEquals("i", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("8034");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.setFilename("Tg{hC1)vH");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.disableNot(capabilities_Capability1);
      capabilities0.getClassCapabilities();
      findWithCapabilities0.getMatches();
      assertEquals("Tg{hC1)vH", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("");
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities2.getHandler();
      findWithCapabilities0.setFilename("Expected upper bound in range, found: ");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      assertEquals("Expected upper bound in range, found: ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Q");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'Q";
      stringArray0[1] = "'Q";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities0.enableAllClasses();
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("TJ+G ");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability2);
      String[] stringArray0 = new String[0];
      findWithCapabilities0.setFilename("yC9SMuE}jnV");
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "yC9SMuE}jnV";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getCapabilities();
      assertEquals(1, capabilities1.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.handles((Capabilities.Capability) null);
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      findWithCapabilities1.getRevision();
      findWithCapabilities1.setClassIndex("Tg{hC1)vH");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.setFilename("8034");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability3);
      findWithCapabilities1.find();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Q");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'Q";
      stringArray0[1] = "'Q";
      stringArray0[2] = "'Q";
      stringArray0[3] = "'Q";
      stringArray0[4] = "'Q";
      stringArray0[5] = "'Q";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("'Q");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("'Q");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.setFilename(" ");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = null;
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Random.setNextRandom((-597));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAll();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities0.enableAllClasses();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      capabilities1.enable(capabilities_Capability1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities1.enableDependency(capabilities_Capability2);
      findWithCapabilities0.setFilename("\tMust handle unary attributes.");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((-1L));
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.setClassIndex("io");
      findWithCapabilities0.setFilename("io");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.listIterator();
      vector0.listIterator();
      vector0.add((String) null);
      Vector<String> vector1 = findWithCapabilities0.find();
      String string0 = null;
      vector1.add((String) null);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0.m_Handler);
      findWithCapabilities2.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setFilename("not-nominal-atts");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNoClass(false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("9nqh;)3W(5");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      findWithCapabilities2.getMatches();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities1.getFilename();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities3.isEnabled(capabilities_Capability2);
      Enumeration enumeration0 = findWithCapabilities3.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      vector0.add("$RR_vp");
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      vector1.add("$RR_vp");
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      vector0.trimToSize();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getHandler();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler1 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[1];
      String string0 = " classes that matched the criteria:\n";
      stringArray0[0] = " classes that matched the criteria:\n";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = " classes that matched the criteria:\n";
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Capabilities = null;
      findWithCapabilities0.setFilename("i");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.listIterator();
      vector0.listIterator();
      vector0.add("weka/core/Capabilities.props");
      vector0.add("4qevn");
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      vector1.trimToSize();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getHandler();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler1 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.listOptions();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.setClassIndex("not-string-atts");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.disableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      vector0.listIterator();
      vector0.add("TJ+G ");
      vector0.add("4qevn");
      findWithCapabilities0.m_Superclass = "TJ+G ";
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getHandler();
      vector0.trimToSize();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "iS9<";
      stringArray0[1] = "not-string-atts";
      stringArray0[2] = "not-string-atts";
      stringArray0[3] = "-r'^?+{";
      stringArray0[4] = "-r'^?+{";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex(">)3wI/>");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability3);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.setClassIndex("io");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("hp-o:kF,[m\u0007.Wt014");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "hp-o:kF,[m\u0007.Wt014";
      stringArray0[1] = "io";
      stringArray0[2] = "\"";
      FindWithCapabilities.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("w-o");
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Hashtable<String, Vector<String>> hashtable1 = new Hashtable<String, Vector<String>>(hashtable0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      hashtable0.put("0`=^!0-pfB@x^Wu+", vector0);
      Vector<String> vector1 = findWithCapabilities1.getMatches();
      hashtable1.put("bY=fcgU4({B`/R.W/h", vector1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Vector<String> vector2 = findWithCapabilities2.m_Packages;
      vector2.setSize(0);
      vector2.listIterator();
      hashtable1.put("???", vector2);
      ClassDiscovery.m_Cache = hashtable1;
      findWithCapabilities0.getCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities2.handles(capabilities_Capability1);
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability2);
      Capabilities capabilities1 = findWithCapabilities2.getNotCapabilities();
      Capabilities capabilities2 = findWithCapabilities2.getNotCapabilities();
      Capabilities capabilities3 = findWithCapabilities0.getCapabilities();
      assertNotSame(capabilities3, capabilities0);
      
      findWithCapabilities2.setNotCapabilities(capabilities2);
      assertSame(capabilities2, capabilities1);
      
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.iterator();
      vector0.add("q");
      hashtable0.put("q", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.m_Filename = "";
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Filename = "not-string-atts";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "not-string-atts";
      stringArray0[1] = "not-string-atts";
      stringArray0[2] = "not-string-atts";
      stringArray0[3] = "not-string-atts";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("-r'^?+{");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Capabilities = null;
      String string0 = "i";
      findWithCapabilities0.setFilename("i");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "i";
      stringArray0[2] = "i";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.m_Superclass = "i";
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities0.enableAllClasses();
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("?8.}F2,WxdUPS2,");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      hashtable0.put("weka/core/Capabilities.props", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("Y{HwX5<OR9],d `(OS");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getMisses();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAllClassDependencies();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.enableAllClasses();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String string0 = null;
      capabilities0.createMessage((String) null);
      capabilities0.m_MinimumNumberInstances = 1478;
      capabilities0.m_AttributeTest = false;
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.setFilename("");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = null;
      findWithCapabilities0.m_Superclass = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_NumString = (-207);
      testInstances0.setNumDate((-1638));
      try { 
        testInstances0.generate("AQ/I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1843
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "";
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.setClassIndex("*+ngWHV7)rT");
      CapabilitiesHandler capabilitiesHandler0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      vector0.listIterator();
      vector0.add("$RR_vp");
      vector0.add("4qevn");
      findWithCapabilities0.m_Superclass = "$RR_vp";
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      vector0.trimToSize();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.setFilename("p=LfU|kzDX M!-]|1y");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_InstancesTest = false;
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "measureMaxCoordsPerPoint";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "A zeropoint attribute must be regular";
      findWithCapabilities0.setNotCapabilities(capabilities0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("~Iu.5 ");
      vector0.add("~Iu.5 ");
      Vector<String> vector1 = new Vector<String>(vector0);
      findWithCapabilities0.m_Misses = vector1;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      vector1.parallelStream();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      vector1.listIterator();
      testInstances0.m_NumInstancesRelational = (-3050);
      Instances instances0 = testInstances0.m_Data;
      vector0.add("weka.core.Capabilities$Capability");
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.setClassIndex("io");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("R|$>e:PMqm6ud[,gz8");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "R|$>e:PMqm6ud[,gz8";
      stringArray0[2] = "io";
      stringArray0[3] = "io";
      stringArray0[4] = "io";
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String string0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Misses = null;
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.m_MissingValuesTest = true;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Properties properties0 = Capabilities.PROPERTIES;
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.m_Data;
      int int0 = (-2584);
      // Undeclared exception!
      try { 
        testInstances0.setNumRelational((-2584));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Matches = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      assertNotSame(capabilities_Capability2, capabilities_Capability0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "\n  Setting user options";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\n  Setting user options";
      stringArray0[1] = ";?";
      stringArray0[2] = "\n  Setting user options";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.m_Superclass = ";?";
      findWithCapabilities0.setClassIndex("TJ+G ");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8034";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      stringArray0[3] = "8034";
      FindWithCapabilities.main(stringArray0);
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
