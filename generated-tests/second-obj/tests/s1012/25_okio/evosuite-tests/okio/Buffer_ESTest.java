/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:32:39 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe((byte)11);
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1708));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Charset.defaultCharset();
      Integer integer0 = new Integer(2139841357);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile("", "");
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      Object object0 = new Object();
      boolean boolean0 = buffer0.equals(object0);
      boolean boolean1 = buffer0.rangeEquals((long) (short) (-21267), byteString0, (int) (byte) (-105), (int) (byte) (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      buffer0.indexOf(byteString1, 4462L);
      buffer0.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)29, 2325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=29 byteCount=2325
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      pipe0.sinkClosed = true;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.outputStream();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha1();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HashingSink.hmacSha256(buffer_UnsafeCursor0.buffer, byteString0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Pipe pipe0 = new Pipe(2064888123);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(99999999999999986L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.write((Source) buffer1, (long) (-1));
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      buffer0.inputStream();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(378L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 378L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeByte(1507);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readByte();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(717L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, 3329L, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=3329 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.flush();
      buffer_UnsafeCursor1.buffer.writeInt((-1));
      assertFalse(buffer0.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x9VxPtKa1_L");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)102);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      MockPrintStream mockPrintStream0 = new MockPrintStream("v{$MRCY$/~I,Mf");
      mockPrintStream0.append((CharSequence) "v{$MRCY$/~I,Mf");
      buffer0.writeTo((OutputStream) mockPrintStream0);
      Buffer buffer1 = buffer0.writeDecimalLong(7177611906121L);
      Buffer buffer2 = new Buffer();
      buffer1.readFully(byteArray0);
      buffer0.clear();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, 7177611906121L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(19);
      buffer0.writeHexadecimalUnsignedLong(30L);
      buffer0.sha1();
      buffer1.sha512();
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.buffer.size = 76L;
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.require((-1384L));
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer1.completeSegmentByteCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(100L);
      long long0 = buffer0.readAll(bufferedSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(378L);
      buffer0.writeDecimalLong(92233720361L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("O");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      buffer0.writeDecimalLong(7177611906121L);
      Segment segment0 = buffer0.head;
      SegmentPool.next = segment0;
      Buffer buffer1 = new Buffer();
      buffer0.md5();
      buffer0.readFully(byteArray0);
      try { 
        buffer0.skip((byte)55);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeShort(102);
      realBufferedSink0.buffer.writeDecimalLong(1000000000000000L);
      Segment segment0 = buffer0.head;
      buffer0.md5();
      realBufferedSink0.buffer.readByteArray();
      buffer0.readAll(realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217286L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeDecimalLong(71776119061217286L);
      Buffer buffer0 = realBufferedSink0.buffer;
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      pipe_PipeSink0.flush();
      try { 
        pipe_PipeSink0.write(buffer0, 71776119061217286L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // source is closed
         //
         verifyException("okio.Pipe$PipeSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      buffer0.read(byteArray0);
      long long0 = new Integer((byte) (-10));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.rangeEquals(15L, byteString0, 1180, 12);
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) 1180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1180
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      int int0 = 2535;
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("deadline reached", 224, 2535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2535 > 16
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[7] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("size=%s fromIndex=%s toIndex=%s");
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("Y(ogm8b", (-3955), 3702);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -3955
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1480L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pipe pipe0 = new Pipe(2075L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShort(233);
      buffer1.readUtf8CodePoint();
      buffer0.segmentSizes();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      HashingSource.sha1(hashingSource1);
      buffer1.timeout();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1884L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      hashingSource0.hash();
      hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      buffer1.readFully(byteArray0);
      buffer1.sha512();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)0;
      HashingSource.sha256(buffer0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("(ymcV", 2535, 2386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 2386 < 2535
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentPool.byteCount = 100000L;
      buffer0.writeShortLe(1071);
      buffer0.md5();
      buffer0.readShort();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)11);
      buffer1.readByte();
      buffer1.readByteArray();
      buffer1.hashCode();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((long) 2535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2535
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(58L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[0];
      realBufferedSink0.buffer.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8(459L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=459
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      realBufferedSource0.buffer();
      buffer1.size = 2543L;
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll(buffer_UnsafeCursor0.buffer);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Pipe pipe0 = new Pipe(66L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.exhausted();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)0;
      buffer0.writeDecimalLong((-1L));
      buffer0.getByte((byte)0);
      buffer0.indexOfElement(byteString0);
      Buffer buffer1 = buffer0.buffer();
      buffer1.readByte();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf((byte) (-53), 71776119L);
      buffer0.readAndWriteUnsafe();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " hex=");
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.rangeEquals(1127L, (ByteString) null, (-3577), (-3577));
      buffer0.writeInt((-3577));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      Buffer buffer1 = buffer0.writeUtf8("KAqi1S9>R{OT}");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer1.equals((Object) null);
      buffer1.readFully(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(2051L);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = realBufferedSource0.buffer.writeString("Dx,GH$>7,|", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      buffer_UnsafeCursor1.start = 1390;
      buffer2.skip(0L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      Buffer buffer1 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(378L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=378 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(378L);
      buffer0.readShortLe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((short)14131);
      int int0 = 51;
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("\n");
      buffer1.hashCode();
      buffer0.writeAll(buffer1);
      Buffer buffer3 = buffer2.writeIntLe(126);
      try { 
        buffer3.write((Source) buffer0, 1000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 224;
      try { 
        buffer0.write((Source) buffer1, 1884L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Pipe pipe0 = new Pipe(1459L);
      pipe0.sourceClosed = true;
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUnsafe();
      long long0 = 71L;
      pipe0.sinkClosed = true;
      Buffer buffer1 = buffer0.writeLongLe(71L);
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      long long0 = 378L;
      Buffer buffer1 = buffer0.writeDecimalLong(378L);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer1.readAndWriteUnsafe();
      realBufferedSource0.readUtf8();
      realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.readByteArray();
      buffer1.hashCode();
      realBufferedSource0.buffer.flush();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.close();
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      ByteString byteString1 = hashingSource0.hash();
      buffer0.hmacSha1(byteString1);
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      pipe0.sinkClosed = true;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      int int0 = ObjectStreamConstants.baseWireHandle;
      HashingSource hashingSource0 = HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = buffer0.hmacSha512(byteString0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",39S/muqb$B{~\"*'");
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      HashingSink.hmacSha256(hashingSink0, byteString1);
      HashingSink hashingSink1 = HashingSink.hmacSha1(hashingSink0, byteString1);
      hashingSink1.hash();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(2501L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=2500 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 2501L;
      Pipe pipe0 = new Pipe(2501L);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+Ui=.G\"");
      byteArray0[0] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUtf8Line();
      pipe0.sinkClosed = true;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((byte) (-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-32 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      MockFile mockFile0 = new MockFile(")ZC?P/0l1I_2mR$4o_");
      MockFile mockFile1 = new MockFile(mockFile0, "pwoC-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockPrintStream0.print(2147481046);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.copyTo((OutputStream) mockPrintStream0);
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = buffer0.buffer();
      buffer1.sha1();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)34);
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=2200\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("fromIndex=%s toIndex=%s");
      Buffer buffer1 = buffer0.writeDecimalLong(2051L);
      buffer1.readIntLe();
      Buffer buffer2 = new Buffer();
      buffer1.md5();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      Integer integer0 = new Integer(825569330);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      Buffer buffer1 = new Buffer();
      byteString0.sha512();
      buffer0.readByteArray();
      buffer0.readAll(buffer1);
      buffer1.writeLongLe((-1L));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      Inflater inflater0 = new Inflater(false);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      // Undeclared exception!
      try { 
        HashingSource.sha1((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte(1507);
      buffer1.readUtf8Line();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      Buffer buffer1 = buffer0.writeUtf8("KAqi1S9>R{OT}");
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      buffer0.indexOf(byteString0, 2051L);
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1884L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.md5();
      buffer1.indexOf((byte)102, (long) (byte)102);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(803L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.offset = (-1241L);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.request((-1241L));
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-33), (long) (-1), 1849L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=1849
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(8L);
      byte byte0 = (byte)10;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      hashingSource1.hash();
      hashingSource1.hash();
      // Undeclared exception!
      try { 
        buffer1.writableSegment(65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte) (-14);
      MockPrintStream mockPrintStream0 = new MockPrintStream("V<c");
      mockPrintStream0.append((CharSequence) "V<c");
      buffer0.writeTo((OutputStream) mockPrintStream0);
      Buffer buffer1 = buffer0.writeDecimalLong((byte) (-14));
      // Undeclared exception!
      try { 
        buffer1.writableSegment((byte) (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      buffer0.outputStream();
      byteArray0[0] = (byte) (-10);
      buffer0.read(byteArray0);
      Pipe pipe0 = new Pipe(197L);
      Buffer buffer1 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0, 46L);
      long long0 = (-1055L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString("HmacSHA512", (int) (byte) (-10), (-524), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-2848L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUtf8Line();
      FileSystemHandling.shouldAllThrowIOExceptions();
      pipe0.sinkClosed = true;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer1.md5();
      buffer1.md5();
      ByteString[] byteStringArray0 = new ByteString[17];
      byteStringArray0[0] = byteString0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer2.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      MockPrintStream mockPrintStream0 = new MockPrintStream("v{$MRCY$/~I,Mf");
      Buffer buffer1 = buffer0.writeTo((OutputStream) mockPrintStream0);
      Buffer buffer2 = buffer0.writeDecimalLong((-3560L));
      Buffer buffer3 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer4 = realBufferedSink0.buffer();
      ByteString byteString0 = buffer4.md5();
      ByteString[] byteStringArray0 = new ByteString[3];
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer4);
      realBufferedSource0.buffer();
      buffer2.selectPrefix(options0);
      realBufferedSource0.buffer.flush();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8((String) null, 21, 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(71776119061217L);
      Buffer buffer0 = pipe0.buffer;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      Inflater inflater0 = new Inflater(false);
      Buffer buffer1 = buffer0.writeByte(11);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.readByteArray();
      buffer1.hashCode();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1727L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1727
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer(255L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte) (-3));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer_UnsafeCursor0.end = 14;
      buffer2.readByteArray();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(2147483647L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read((byte[]) null, 14, (int) (byte) (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 2051L;
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("fromIndex=%s toIndex=%s");
      mockPrintStream0.append((CharSequence) "fromIndex=%s toIndex=%s");
      Buffer buffer1 = buffer0.writeDecimalLong(2051L);
      buffer1.readIntLe();
      buffer1.writeDecimalLong(825569330);
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(2075L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShort(2719);
      buffer1.readUtf8CodePoint();
      buffer1.segmentSizes();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I=y>U%/-+4*");
      buffer1.copyTo((OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.segmentSizes();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CRC");
      buffer0.copyTo((OutputStream) mockFileOutputStream0);
      ByteString[] byteStringArray0 = new ByteString[6];
      Inflater inflater0 = new Inflater(false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.writeShort((-23));
      buffer0.segmentSizes();
      Buffer buffer1 = buffer0.buffer();
      Buffer buffer2 = buffer1.writeUtf8("source exhausted prematurely");
      buffer2.writeIntLe((-23));
      buffer1.indexOf((byte)44, 2L, (long) (byte)44);
      // Undeclared exception!
      try { 
        buffer1.snapshot((-23));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=34 offset=0 byteCount=-23
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeUtf8CodePoint((-590));
      realBufferedSink0.writeDecimalLong(16711680L);
      buffer1.writeUtf8("?GQo-bnif|4xB.&I'-");
      try { 
        buffer1.skip(71L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.indexOf((byte)122, (long) (byte)122);
      Buffer buffer2 = buffer1.clone();
      realBufferedSource0.buffer.clear();
      buffer0.writeUtf8CodePoint(88);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource1.buffer);
      hashingSink0.hash();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((byte)122);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer3 = buffer2.writeDecimalLong(1000000L);
      buffer3.readByte();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource1.buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer4 = buffer_UnsafeCursor1.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Pipe pipe0 = new Pipe(37L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      buffer0.toString();
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = false;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(37L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=36 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      buffer0.skip((byte) (-10));
      byteArray0[0] = (byte) (-10);
      buffer0.writeDecimalLong(7177611906121L);
      Segment segment0 = buffer0.head;
      SegmentPool.next = segment0;
      Buffer buffer1 = new Buffer();
      buffer0.md5();
      buffer0.readFully(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(9L, charset0);
      buffer1.snapshot();
      buffer0.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(1526L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.start = (-2659);
      buffer1.readFrom((InputStream) byteArrayInputStream0, (long) (byte)1);
      buffer1.exhausted();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(2511L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(2511L);
      buffer0.readIntLe();
      buffer1.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.writeShortLe(1789569706);
      buffer2.request(2511L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      MockPrintStream mockPrintStream0 = new MockPrintStream("fromIndex=%s toIndex=%s");
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = new Buffer();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer4.rangeEquals((long) 1302, byteString0, 8193, (-2656));
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSource0.buffer.indexOf((byte)67);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.getByte(100000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=100000000 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(8L);
      boolean boolean0 = pipe0.sinkClosed;
      Pipe pipe1 = new Pipe(2147483647L);
      Buffer buffer2 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = buffer0.sha256();
      buffer0.segmentSizes();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SHA-512");
      mockFileOutputStream0.close();
      buffer2.readFully(byteArray0);
      buffer2.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 2051L;
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        buffer0.writeString("}u'Ga`f7g", 418, 418, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 418 > 9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeDecimalLong(865L);
      try { 
        buffer1.require(2501L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(1526L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)11;
      Inflater inflater0 = new Inflater(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShortLe((byte)11);
      buffer0.emit();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, 2048, (int) (byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=2048 byteCount=11
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Segment segment0 = new Segment();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSource0.buffer.writeDecimalLong(1000000000000000L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      realBufferedSource0.buffer.emit();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      buffer_UnsafeCursor0.seek((-1L));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-1175));
      buffer0.readUtf8CodePoint();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=69\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShort((-23));
      buffer0.segmentSizes();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CRC");
      buffer0.copyTo((OutputStream) mockFileOutputStream0);
      buffer1.writeTo((OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.md5();
      buffer0.writeUtf8("");
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)0;
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.equals(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      try { 
        buffer1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer1.hashCode();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read((byte[]) null, (-1), (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte) (-10);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Pipe pipe0 = new Pipe(197L);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer0, (byte) (-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      pipe0.sinkClosed = true;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Buffer buffer2 = buffer1.clone();
      buffer_UnsafeCursor0.buffer.clear();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer2.writeUtf8("c");
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer1.equals((Object) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer3.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer0 = pipe0.buffer;
      byte byte0 = (byte) (-53);
      long long0 = 71776119L;
      Charset charset0 = Charset.defaultCharset();
      pipe0.sourceClosed = false;
      // Undeclared exception!
      try { 
        buffer0.writeString("\n", 2136121300, (int) (byte) (-53), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -53 < 2136121300
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("\n");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[5] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.writeIntLe((byte) (-10));
      HashingSource.sha1(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSink0.buffer.readUtf8CodePoint();
      buffer2.segmentSizes();
      // Undeclared exception!
      try { 
        buffer1.getByte((byte) (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-10 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer0.writeUtf8("c");
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer1.write(byteString0);
      HashingSource.sha1(buffer3);
      HashingSink.sha512(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSource1.buffer.indexOf(byteString1);
      buffer4.readUtf8CodePoint();
      buffer1.readInt();
      buffer4.flush();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUtf8Line();
      pipe0.sourceClosed = true;
      pipe0.sinkClosed = true;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      int int0 = buffer_UnsafeCursor0.end;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0, (long) (byte)10);
      buffer0.sha1();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(112);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      buffer0.skip((byte) (-10));
      byteArray0[0] = (byte) (-10);
      long long0 = 7177611906121L;
      buffer0.writeDecimalLong(7177611906121L);
      Buffer buffer1 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`eO");
      buffer0.md5();
      buffer0.readFully(byteArray0);
      buffer0.readHexadecimalUnsignedLong();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readString(9L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=9
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(8L);
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOfElement(byteString0, (long) (byte)10);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      hashingSource1.hash();
      hashingSource1.hash();
      byteString0.md5();
      buffer0.writeDecimalLong((byte)10);
      // Undeclared exception!
      try { 
        buffer1.getByte((-160L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=-160 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[1];
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      ByteString byteString0 = new ByteString(byteArray0);
      pipe0.sourceClosed = false;
      buffer0.segmentSizes();
      OutputStream outputStream0 = buffer0.outputStream();
      HashingSource.sha1(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Segment segment0 = buffer_UnsafeCursor0.buffer.head;
      SegmentPool.next = null;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeInt((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      buffer0.indexOf(byteString0);
      buffer2.indexOfElement(byteString0);
      buffer0.readUtf8Line();
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read((byte[]) null, 38, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.readUtf8Line();
      Buffer buffer1 = buffer0.writeByte(1507);
      buffer1.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString("\uFFFD", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      Buffer buffer1 = buffer0.writeDecimalLong(717761L);
      Buffer buffer2 = new Buffer();
      buffer1.size = 717761L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`eO");
      buffer0.md5();
      buffer0.readFully(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.write(byteString0);
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeUtf8("\n");
      pipe0.sourceClosed = false;
      buffer1.hashCode();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUtf8Line();
      FileSystemHandling.shouldAllThrowIOExceptions();
      pipe0.sinkClosed = true;
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      // Undeclared exception!
      try { 
        buffer1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(8L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer2 = pipe0.buffer;
      buffer1.writeInt(1073741824);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.segmentSizes();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer2.readFully(byteArray0);
      buffer0.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x40
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+Ui=.G\"");
      byteArray0[0] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      pipe0.sinkClosed = true;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer2 = realBufferedSource0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor0.data);
      buffer1.rangeEquals(10000000000000L, byteString1);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong(717753L);
      Buffer buffer2 = new Buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.md5();
      buffer0.readFully(byteArray0);
      buffer1.readHexadecimalUnsignedLong();
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer3 = buffer0.writeDecimalLong((byte)55);
      buffer0.sha512();
      buffer3.indexOfElement(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer3.readUtf8Line();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "55");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[1];
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      ByteString byteString0 = new ByteString(byteArray0);
      pipe0.sourceClosed = false;
      buffer0.segmentSizes();
      buffer0.outputStream();
      buffer0.writeShort((byte)38);
      HashingSource.sha1(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Segment segment0 = buffer_UnsafeCursor0.buffer.head;
      SegmentPool.next = segment0;
      buffer0.indexOf((byte)38, 255L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      buffer0.indexOf(byteString0);
      buffer1.indexOfElement(byteString0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("[size=", "MD5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // MD5
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = pipe0.sourceClosed;
      ByteString byteString0 = new ByteString(byteArray0);
      pipe0.sourceClosed = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.indexOfElement(byteString0, 1000000L);
      buffer0.segmentSizes();
      pipe0.sourceClosed = false;
      Buffer buffer1 = buffer0.writeShort((byte)38);
      HashingSource.sha1(buffer0);
      Buffer buffer2 = buffer1.write(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      Integer integer0 = new Integer(3);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      ByteString byteString1 = byteString0.toAsciiLowercase();
      buffer0.skip(3);
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      buffer0.indexOfElement(byteString1);
      // Undeclared exception!
      try { 
        buffer2.write(buffer3, (-1273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.sha256(hashingSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1932735282));
      Buffer buffer1 = buffer0.write(byteString0);
      bufferedSink0.writeIntLe((byte)20);
      InflaterSource inflaterSource1 = new InflaterSource(realBufferedSource0, inflater0);
      HashingSource.sha1(inflaterSource1);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      hashingSink0.hash();
      buffer0.indexOf(byteString0);
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
      buffer1.readInt();
      ((RealBufferedSink) bufferedSink0).buffer.flush();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((byte)20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)10;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[4] = (byte)0;
      ByteString byteString1 = new ByteString(byteArray1);
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      buffer0.writeDecimalLong((-1L));
      byte byte0 = ObjectStreamConstants.TC_RESET;
      byteString2.write(buffer0);
      byteString1.indexOf(byteArray1);
      HashingSink.hmacSha512(buffer0, byteString1);
      buffer0.indexOfElement(byteString2);
      HashingSource.sha1(buffer0);
      hashingSource0.hash();
      Integer integer0 = new Integer((byte)121);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSource.sha256(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.sha1();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer1.readUtf8CodePoint();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      inflaterSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer2 = realBufferedSource0.buffer();
      HashingSource.sha1(buffer2);
      Buffer buffer3 = buffer0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 92233720368547758
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      HashingSource.hmacSha1(hashingSource0, byteString0);
      realBufferedSource0.buffer.rangeEquals((long) (byte)0, byteString0, 14, (int) (byte)0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSource0.buffer);
      hashingSink0.hash();
      ByteString byteString1 = new ByteString(byteArray0);
      realBufferedSource0.readByteString();
      ByteString byteString2 = new ByteString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 2064888123;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8CodePoint(2064888123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7b13b13b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = realBufferedSource0.buffer.md5();
      Buffer buffer1 = realBufferedSource0.buffer.clone();
      realBufferedSource0.buffer.clear();
      buffer1.writeUtf8CodePoint(2194);
      Integer integer0 = new Integer(2194);
      buffer0.indexOfElement(byteString0, (long) 2194);
      buffer0.hmacSha256(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.getByte((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte)11);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xb
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(999986L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeDecimalLong((-1925L));
      Buffer buffer1 = new Buffer();
      buffer0.readDecimalLong();
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource((BufferedSource) buffer0, (Inflater) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inflater == null
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(629L);
      boolean boolean0 = pipe0.sinkClosed;
      Buffer buffer2 = pipe0.buffer;
      buffer1.writeInt(1073741824);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.segmentSizes();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer2.readFully(byteArray0);
      buffer0.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x40
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = realBufferedSource1.readByteArray();
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("HmacSHA1");
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource1.buffer.readAndWriteUnsafe();
      realBufferedSink0.buffer.readLongLe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer3.writeDecimalLong(100000000000L);
      Buffer buffer4 = new Buffer();
      buffer3.readAll(realBufferedSource0.buffer);
      realBufferedSink0.buffer.sha512();
      realBufferedSink1.buffer.clone();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer1.writeTo((OutputStream) byteArrayOutputStream0);
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      buffer5.writeLong(12L);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readUtf8Line(12L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=11 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource1.readByteArray();
      realBufferedSink0.buffer.writeUtf8("HmacSHA1");
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource1.buffer.readAndWriteUnsafe();
      realBufferedSink0.buffer.readLongLe();
      buffer_UnsafeCursor0.buffer.outputStream();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.clear();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((byte) (-46));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-127);
      Buffer buffer1 = buffer0.writeDecimalLong(280375465082880L);
      buffer1.writeShortLe((byte)10);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (-118), 86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-118 byteCount=86
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)32;
      Buffer buffer1 = buffer0.writeUtf8("c");
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer1.writeShort((byte)13);
      HashingSource.sha1(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer5 = buffer2.write(byteString0);
      realBufferedSource0.buffer();
      buffer2.readUnsafe();
      buffer1.indexOf((byte)25, 2L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer5);
      Buffer buffer6 = realBufferedSink0.buffer();
      buffer4.sha256();
      Buffer buffer7 = realBufferedSource0.buffer();
      buffer7.write(byteArray0);
      buffer6.readAll(buffer1);
      Buffer buffer8 = realBufferedSource0.buffer;
      buffer8.emit();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource1.buffer();
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer buffer4 = realBufferedSource1.buffer;
      Buffer buffer5 = new Buffer();
      HashingSource.sha1(realBufferedSource1);
      Buffer buffer6 = realBufferedSource0.buffer.write(byteString0);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer5.readUnsafe();
      buffer0.indexOf((byte)0, (long) (byte)0);
      buffer6.sha256();
      Pipe pipe0 = new Pipe(15L);
      Buffer buffer7 = buffer_UnsafeCursor0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer4.writeTo((OutputStream) byteArrayOutputStream0);
      try { 
        buffer3.readUtf8Line(32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = pipe0.sinkClosed;
      Pipe pipe1 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = pipe0.sourceClosed;
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.readFully(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(2803L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2802 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Segment segment0 = realBufferedSource0.buffer.head;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.writeString("Dx,rH$>7,|", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Integer integer0 = new Integer((-1));
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        byteString0.write(buffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte byte0 = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeUtf8("9\"fxY`4:}_.xJ|K");
      Buffer buffer2 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer1.readLongLe();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(100000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUtf8Line();
      pipe0.sourceClosed = false;
      buffer_UnsafeCursor0.readWrite = true;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      int int0 = buffer_UnsafeCursor0.end;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer2, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer3 = realBufferedSink0.buffer;
      hashingSource0.timeout();
      buffer2.writeHexadecimalUnsignedLong((-1L));
      realBufferedSink0.buffer.rangeEquals((long) (-1), byteString0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeUtf8CodePoint(479);
      buffer1.sha256();
      int int0 = 70;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8("MG).?A7{z6#lpEo64", 70, 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 70 > 18
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Pipe pipe0 = new Pipe(1977L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.clear();
      String string0 = null;
      int int0 = 46;
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 3392L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Segment segment0 = realBufferedSource0.buffer.head;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.resizeBuffer(92L);
      buffer_UnsafeCursor1.buffer.toString();
      buffer_UnsafeCursor0.buffer.writeIntLe(1431655765);
      realBufferedSource0.buffer.indexOf((byte)85, 0L, 32L);
      buffer_UnsafeCursor1.resizeBuffer(6L);
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong(0);
      buffer2.hmacSha512(byteString0);
      Charset.defaultCharset();
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor1.buffer.getByte(1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(8L);
      boolean boolean0 = pipe0.sinkClosed;
      Pipe pipe1 = new Pipe(2147483647L);
      Buffer buffer2 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.segmentSizes();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer2.readFully(byteArray0);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null, 100000000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = realBufferedSource0.buffer;
      Buffer buffer5 = realBufferedSource1.buffer;
      Buffer buffer6 = new Buffer();
      HashingSource.sha1(realBufferedSource1);
      Buffer buffer7 = realBufferedSource0.buffer.write(byteString0);
      Buffer buffer8 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer6.readUnsafe();
      buffer0.indexOf((byte)0, (long) (byte)0);
      buffer7.sha256();
      Pipe pipe0 = new Pipe(15L);
      Buffer buffer9 = buffer_UnsafeCursor0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer5.writeTo((OutputStream) byteArrayOutputStream0);
      buffer1.readIntLe();
      Buffer buffer10 = pipe0.buffer;
      buffer10.writeHexadecimalUnsignedLong((byte)0);
      buffer8.sha256();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(1526L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.writeUtf8("HmacSHA1");
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1979L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "okio.AsyncTimeout");
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-1);
      byteArray0[0] = (byte)10;
      byteArray0[8] = (byte) (-127);
      Buffer buffer2 = buffer0.writeDecimalLong((-5L));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) null, (long) (byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.size();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      HashingSource hashingSource1 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[19];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      Charset charset0 = Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("t^anl#11ZTEqQOaXN)&", charset0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.write(byteString1);
      realBufferedSink1.writeIntLe(4544);
      HashingSource.sha1(hashingSource1);
      Integer integer0 = new Integer((byte)0);
      buffer1.readUtf8CodePoint();
      buffer1.readInt();
      buffer1.flush();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 32, (int) (byte) (-64), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(2462L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8Line();
      pipe0.sourceClosed = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeUtf8("X@I8C]~.Pew_&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((File) null, "VZyqwXc-`>,");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.base64Url();
      buffer0.indexOf(byteString0, 13L);
      buffer1.hashCode();
      Pipe pipe1 = new Pipe(1000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer_UnsafeCursor0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      try { 
        buffer3.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(2501L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, (-1), 192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Segment segment0 = realBufferedSource0.buffer.head;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.writeString("Dx,rH$>7,|", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.resizeBuffer(92L);
      buffer_UnsafeCursor1.resizeBuffer(6L);
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong((-1));
      // Undeclared exception!
      try { 
        buffer2.hmacSha512(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = pipe0.sourceClosed;
      ByteString byteString0 = new ByteString(byteArray0);
      pipe0.sourceClosed = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((File) null, "");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.readFrom((InputStream) sequenceInputStream0);
      Buffer buffer2 = realBufferedSource0.buffer;
      try { 
        buffer1.readFrom((InputStream) sequenceInputStream0, 1000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Segment segment0 = realBufferedSource0.buffer.head;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.resizeBuffer(92L);
      buffer_UnsafeCursor1.buffer.toString();
      buffer_UnsafeCursor0.buffer.writeIntLe(1431655765);
      realBufferedSource0.buffer.indexOf((byte)85, 0L, 32L);
      buffer_UnsafeCursor1.resizeBuffer(6L);
      Buffer buffer2 = realBufferedSource0.buffer.writeDecimalLong(0);
      buffer2.hmacSha512(byteString0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readByteString((-581L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=0 byteCount=-581
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(378L);
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)47;
      buffer1.segmentSizes();
      OutputStream outputStream0 = buffer0.outputStream();
      Buffer buffer2 = realBufferedSink0.buffer.writeShort((byte)38);
      HashingSource.sha1(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      Segment segment0 = buffer3.head;
      buffer_UnsafeCursor0.buffer.indexOf((byte)10, (long) (byte)111);
      Pipe pipe0 = new Pipe((byte)10);
      Buffer buffer4 = pipe0.buffer;
      Buffer buffer5 = buffer4.write(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer4);
      HashingSource.sha1(buffer3);
      buffer2.writeTo(outputStream0);
      // Undeclared exception!
      try { 
        buffer5.readUtf8Line((long) (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=9 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-10);
      Buffer buffer1 = buffer0.writeDecimalLong(717761L);
      Buffer buffer2 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`eO");
      ByteString byteString0 = buffer0.md5();
      buffer0.readFully(byteArray0);
      buffer0.readHexadecimalUnsignedLong();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeHexadecimalUnsignedLong((-1168L));
      buffer3.readHexadecimalUnsignedLong();
      buffer0.hmacSha512(byteString0);
      buffer0.buffer();
      buffer1.readString(charset0);
      buffer1.readString(charset0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      Buffer buffer1 = buffer0.writeDecimalLong(717761L);
      Buffer buffer2 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.md5();
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = buffer0.writeDecimalLong((byte) (-10));
      Buffer buffer4 = new Buffer();
      buffer4.readAll(realBufferedSink0);
      byteString0.utf8 = null;
      buffer3.sha512();
      buffer1.indexOfElement(byteString0);
      buffer3.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(378L);
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)47;
      buffer1.segmentSizes();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer2 = realBufferedSink0.buffer.writeShort((byte)38);
      HashingSource.sha1(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      Segment segment0 = buffer3.head;
      buffer_UnsafeCursor0.buffer.indexOf((byte)10, (long) (byte)111);
      Pipe pipe0 = new Pipe((byte)10);
      Buffer buffer4 = pipe0.buffer;
      Buffer buffer5 = buffer4.write(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer4);
      HashingSource.sha1(buffer3);
      buffer2.writeTo(outputStream0);
      // Undeclared exception!
      try { 
        buffer5.readUtf8Line((long) (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=9 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      long long0 = 15L;
      Pipe pipe0 = new Pipe(15L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      buffer0.readUtf8Line();
      realBufferedSource0.buffer.writeByte((-1));
      buffer_UnsafeCursor0.next();
      buffer1.writeByte(788);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.skip(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.rangeEquals(0L, byteString0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.outputStream();
      buffer0.readAndWriteUnsafe();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Pipe pipe0 = new Pipe(2051L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2051L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.hmacSha512(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.sha1();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = buffer0.writeShortLe((byte)10);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer0.readUtf8LineStrict();
      buffer1.close();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSource.sha256(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeUtf8("");
      Buffer buffer2 = new Buffer();
      int int0 = (-3472);
      buffer0.writeShort((-3472));
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff2)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-10);
      Buffer buffer1 = buffer0.writeDecimalLong(717753L);
      Buffer buffer2 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = buffer0.md5();
      buffer0.readFully(byteArray0);
      buffer1.readHexadecimalUnsignedLong();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer2.writeDecimalLong(30547L);
      Buffer buffer3 = new Buffer();
      realBufferedSink0.buffer.readAll(buffer1);
      buffer1.sha512();
      buffer1.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-10);
      Buffer buffer1 = buffer0.writeDecimalLong(717753L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = buffer0.md5();
      buffer0.readFully(byteArray0);
      Charset.defaultCharset();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = buffer0.writeDecimalLong((byte)55);
      Buffer buffer3 = new Buffer();
      realBufferedSink0.write(byteString1);
      buffer3.hmacSha256(byteString0);
      buffer3.readAll(realBufferedSink0);
      buffer2.sha512();
      buffer1.indexOfElement(byteString1);
      buffer1.readUtf8Line();
      buffer1.readByteString();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000000L);
      Buffer buffer2 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.md5();
      buffer1.readFully(byteArray0);
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 9223372036854775807L;
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      Buffer buffer2 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.md5();
      buffer2.readFully(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }
}
