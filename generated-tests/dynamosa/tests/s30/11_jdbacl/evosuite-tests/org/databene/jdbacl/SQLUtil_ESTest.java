/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 19:50:58 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.util.PSQLException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("referen", (Database) null);
      DBSchema dBSchema0 = new DBSchema("referen", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("referen", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("referen", false, defaultDBTable0, "referen");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DBDataType dBDataType0 = DBDataType.getInstance((-647), "referen");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("referen", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      stringArray0[3] = "delete";
      SQLUtil.renderColumnListWithTableName("delete", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLUtil.mutatesStructure("CLIENT_ENCODING");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CLIENT_ENCODING";
      stringArray0[1] = "CLIENT_ENCODING";
      stringArray0[2] = "CHECK ";
      String string0 = "`w8gR]38}w6fei";
      stringArray0[3] = "`w8gR]38}w6fei";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char char0 = 'p';
      DBConstraint dBConstraint0 = null;
      String string0 = "org.apache.derby.impl.store.raw.xact.ContainerLocking3";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("org.apache.derby.impl.store.raw.xact.ContainerLocking3", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-.d0WZ]Hh.");
      DBDataType dBDataType0 = DBDataType.getInstance(44, "create materialized viewsysxplain_sort_props");
      dBDataType0.isAlpha();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer3, integer3);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("80000035-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 44, "create materialized viewsysxplain_sort_props");
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("gu*^GcdP,0rW5EX", stringBuilder0);
      SQLUtil.addOptionalCondition("$i:(", stringBuilder1);
      assertEquals("gu*^GcdP,0rW5EX or $i:(", stringBuilder1.toString());
      assertEquals("gu*^GcdP,0rW5EX or $i:(", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("selectvarchar", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 34;
      String string0 = "";
      String string1 = null;
      String[] stringArray0 = null;
      String string2 = "url";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "-r>0", (String[]) null, (String) null, "url", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z");
      StringWriter stringWriter0 = new StringWriter();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("MERGE INTO ", 523);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      TableContainer tableContainer0 = new TableContainer("sort external");
      tableContainer0.getSchema();
      defaultDBTable0.isIdentical((DBObject) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table z (\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g#}7C,nci=eMct", defaultDBTable0, (-219), "g#}7C,nci=eMct");
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g#}7C,nci=eMct G#}7C,NCI=EMCT NULL";
      stringArray0[1] = "G#}7C,NCI=EMCT(0)";
      stringArray0[2] = "g#}7C,nci=eMct";
      stringArray0[3] = "g#}7C,nci=eMct";
      stringArray0[4] = "G#}7C,NCI=EMCT(0)";
      stringArray0[5] = "G#}7C,NCI=EMCT(0)";
      stringArray0[6] = "g#}7C,nci=eMct";
      stringArray0[7] = "g#}7C,nci=eMct";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "g#}7C,nci=eMct G#}7C,NCI=EMCT NULL", false, stringArray0);
      dBUniqueConstraint0.equals("g#}7C,nci=eMct");
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "G#}7C,NCI=EMCT(0)";
      stringArray1[1] = "g#}7C,nci=eMct";
      stringArray1[2] = "g#}7C,nci=eMct G#}7C,NCI=EMCT NULL";
      stringArray1[3] = "g#}7C,nci=eMct G#}7C,NCI=EMCT NULL";
      stringArray1[4] = "g#}7C,nci=eMct G#}7C,NCI=EMCT NULL";
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("g#}7C,nci=eMct G#}7C,NCI=EMCT NULL", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.appendCodePoint((-2006370055));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "=?,BHn]K J5C */&_$_";
      SQLUtil.normalize("=?,BHn]K J5C */&_$_", true);
      boolean boolean0 = true;
      String string1 = "fb\"lLZ{B4\"d#p|JD";
      String string2 = "NZn^(L[5";
      VersionNumber versionNumber0 = VersionNumber.valueOf("=?,BHn]K J5C */&_$_");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("fb\"lLZ{B4\"d#p|JD", "NZn^(L[5", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("NZn^(L[5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'NZn^(L[5'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.innerJoin("", stringArray0, "3S .cd'", "fJ<*0 LG.e)", stringArray0);
      assertEquals("3S .cd' as fJ<*0 LG.e) on ", string0);
      
      boolean boolean0 = SQLUtil.isDML("3S .cd'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, ")", "X8cHS");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g#}7C,nci=eMct", defaultDBTable0, (-219), "g#}7C,nci=eMct");
      SQLUtil.removeComments("g#}7C,nci=eMct");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g#}7C,nci=eMct";
      stringArray0[1] = "G#}7C,NCI=EMCT(0)";
      stringArray0[2] = "g#}7C,nci=eMct";
      stringArray0[3] = "g#}7C,nci=eMct";
      stringArray0[4] = "G#}7C,NCI=EMCT(0)";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("g#}7C,nci=eMct", defaultDBTable0, (-19), "g#}7C,nci=eMct");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("select intodlete join 1 as >#f},wn=))c3?5 on >#f},wn=))c3?5.null = >#f},wn=))c3?5.null and >#f},wn=))c3?5.null = >#f},wn=))c3?5.null and >#f},wn=))c3?5.null = >#f},wn=))c3?5.null and >#f},wn=))c3?5.null = >#f},wn=))c3?5.null", defaultDBTable0, (-19), "G#}7C,NCI=EMCT(0)");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "g$jhuVD)}n a1n";
      String string0 = SQLUtil.leftJoin("", stringArray0, "Z", "b&Y&jy-Jg97TxZAks", stringArray0);
      assertEquals("left join Z as b&Y&jy-Jg97TxZAks on . = b&Y&jy-Jg97TxZAks. and .g$jhuVD)}n a1n = b&Y&jy-Jg97TxZAks.g$jhuVD)}n a1n and .null = b&Y&jy-Jg97TxZAks.null", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("dlete", defaultDBTable0, (-219), "dlete");
      SQLUtil.removeComments("A41p4");
      defaultDBColumn0.setDoc("dlete");
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("bqEyeO|O9wm?*#^n}2w", defaultDBTable0, (-2054), "bqEyeO|O9wm?*#^n}2w");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("A41p4", defaultDBTable0, 1, "");
      Integer integer1 = RawTransaction.COMMIT;
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A41p4";
      stringArray0[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "A41p4", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "A41p4");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(2, (String) null);
      StringBuilder stringBuilder3 = stringBuilder2.append(1472.9545F);
      StringBuilder stringBuilder4 = SQLUtil.addOptionalCondition("0l|v", stringBuilder3);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder4);
      assertEquals("A4null1p4 and 1472.9545 or 0l|vCONSTRAINT A41p4 ", stringBuilder4.toString());
      assertEquals("A4null1p4 and 1472.9545 or 0l|vCONSTRAINT A41p4 ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ALTER TABLE ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.isDML("");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (\n)", stringWriter0.toString());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "V@_is?3:0i/4";
      stringArray0[2] = "V@_is?3:0i/4";
      stringArray0[3] = "HL$/Gp5C_(33o+p_";
      stringArray0[2] = "HL$/Gp5C_(33o+p_";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "HL$/Gp5C_(33o+p_", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("V@_is?3:0i/4", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(": \n", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      StringBuilder stringBuilder0 = new StringBuilder("V@_is?3:0i/4");
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec2);
      SQLUtil.isDML("HL$/Gp5C_(33o+p_");
      DBDataType dBDataType0 = DBDataType.getInstance((-678), "prim");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T", dBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("V@_is?3:0i/4CONSTRAINT HL$/Gp5C_(33o+p_ PRIM(1)", stringBuilder1.toString());
      assertEquals("V@_is?3:0i/4CONSTRAINT HL$/Gp5C_(33o+p_ PRIM(1)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", defaultDBTable0, 90110, "User");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "User", false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CHECK ";
      stringArray0[1] = "CHECK ";
      stringArray0[2] = "CHECK ";
      stringArray0[3] = "CHECK ";
      SQLUtil.innerJoin("CHECK ", stringArray0, "CHECK ", "qO", stringArray0);
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cannot sIt transacton p", defaultDBTable0, 17, "cannot sIt transacton p");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("cannot sIt transacton p", string0);
      
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "cannot sIt transacton p", false, "cannot sIt transacton p");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBNotNullConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop materialized viewdlete(0)";
      stringArray0[1] = "Error rolling back prepared transaction";
      stringArray0[2] = ":6-(m:EpIwegLF4f6";
      stringArray0[3] = "drop materialized viewdlete(0)";
      stringArray0[4] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("t d%7QE=Uc1", stringArray0);
      assertEquals("t d%7QE=Uc1.drop materialized viewdlete(0), t d%7QE=Uc1.Error rolling back prepared transaction, t d%7QE=Uc1.:6-(m:EpIwegLF4f6, t d%7QE=Uc1.drop materialized viewdlete(0), t d%7QE=Uc1.", string0);
      
      Character character0 = new Character('m');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'m'", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select * from");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indexselect * from", false, (String[]) null);
      String string0 = SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"drop indexselect * from\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("fih}", defaultDBTable0, (-1807730692), "setAsciiStream(String, InputStream, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = SQLUtil.removeComments("dl4te");
      assertEquals("dl4te", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cannot sIt transacton p", defaultDBTable0, 17, " NULL");
      DBColumn[] dBColumnArray0 = new DBColumn[12];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g#}7C,nci=eMct", defaultDBTable0, (-219), "g#}7C,nci=eMct");
      SQLUtil.removeComments("g#}7C,nci=eMct");
      Integer integer0 = RawTransaction.COMMIT;
      StringBuilder stringBuilder0 = new StringBuilder("g#}7C,nci=eMct");
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.addRequiredCondition("\u0001\u00C2", stringBuilder0);
      assertEquals("g#}7C,nci=eMct and \u0001\u00C2", stringBuilder0.toString());
      
      stringBuilder1.append((long) 1882);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select,1%;j2pbfa//~m`yh*:");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(2147483645, "");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cannot sIR transacton p", defaultDBTable0, 17, "cannot sIR transacton p");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, (String[]) null);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      MockFile mockFile0 = new MockFile("cannot sIR transacton p", "cannot sIR transacton p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cannot sIR transacton p");
      SQLUtil.isQuery("cannot sIR transacton p");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join("dlete", "dlete", stringArray0, "dlete", "dlete", stringArray0);
      assertEquals("dlete join dlete as dlete on dlete.null = dlete.null and dlete.null = dlete.null and dlete.null = dlete.null and dlete.null = dlete.null", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("'a,H0=M5", (String[]) null, "'a,H0=M5", "'a,H0=M5", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = "T8*|;h(=^NKK}T8_&)G";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("T8*|;h(=^NKK}T8_&)G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=^NKK}T8_&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.isQuery("select");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "select";
      stringArray0[3] = null;
      stringArray0[4] = "select";
      stringArray0[5] = "select";
      stringArray0[6] = "select";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select", true, stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Np8(>m/q[C4xXkQ@KX");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-269384786));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-r>0", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-r>0";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[6] = null;
      stringArray1[7] = "TA;";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder("-r>0");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("{ej@I;b", stringBuilder0);
      stringBuilder1.append((Object) "-r>0");
      SQLUtil.addRequiredCondition("DROP SEQUENCE ", stringBuilder1);
      assertEquals("-r>0 or {ej@I;b-r>0 and DROP SEQUENCE ", stringBuilder1.toString());
      assertEquals("-r>0 or {ej@I;b-r>0 and DROP SEQUENCE ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(34);
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "SYSIBM";
      SQLUtil.innerJoin((String) null, stringArray0, (String) null, "&", stringArray0);
      SQLUtil.parseColumnTypeAndSize("");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 34);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , , , SYSIBM)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select into", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "i4V'Vh*h";
      stringArray0[2] = "";
      SQLUtil.isProcedureCall("");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",1%;J2PBFA//~M`yH*:";
      stringArray0[1] = ",1%;J2PBFA//~M`yH*:";
      stringArray0[2] = ",1%;J2PBFA//~M`yH*:";
      stringArray0[3] = ",1%;J2PBFA//~M`yH*:";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[4] = "^C6,Q6U<WN`";
      stringArray0[5] = ",1%;J2PBFA//~M`yH*:";
      stringArray0[6] = ",1%;J2PBFA//~M`yH*:";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(",1%;J2PBFA//~M`yH*:", stringArray0, ",1%;J2PBFA//~M`yH*: = ',1%;J2PBFA//~M`yH*:' AND ,1%;J2PBFA//~M`yH*: = ',1%;J2PBFA//~M`yH*:' AND ,1%;J2PBFA//~M`yH*: = ',1%;J2PBFA//~M`yH*:' AND ,1%;J2PBFA//~M`yH*: = ',1%;J2PBFA//~M`yH*:' AND ^C6,Q6U<WN` = '^C6,Q6U<WN`' AND ,1%;J2PBFA//~M`yH*: = ',1%;J2PBFA//~M`yH*:' AND ,1%;J2PBFA//~M`yH*: = ',1%;J2PBFA//~M`yH*:'", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      assertEquals("null", stringBuilder1.toString());
      
      SQLUtil.typeAndName(defaultDBTable0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog("z", (Database) null);
      DBSchema dBSchema0 = new DBSchema("table z", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("z.table z", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("~.B", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1215), "~.B");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2382));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tablesysxplain_sort_props", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.renderValue((Object) null);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", (DBTable) null, (-60599426), "NCLOB");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("NCLOB", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLUtil.normalize("Eh1Z}x!}^b", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "Eh1Z}x!}^b";
      stringArray0[2] = "Eh1Z } x ! } ^ b";
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.join("-r>0", "", stringArray0, "i4V'Vh*h", "", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("divide", defaultDBTable0, (-196), "Sx1)LXUvQj;RQ");
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("executeua2)@(", defaultDBTable0, (-424), "insert");
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      SQLUtil.innerJoin("Sx1)LXUvQj;RQ", stringArray0, "-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", "RWNTH318<-\u0001ihc<Q", stringArray0);
      Object object0 = new Object();
      String string1 = SQLUtil.renderValue(object0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z`t1Z X>d^ #)G5");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Z`t1Z X>d^ #)G5", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(";2T-zvCgWqC/-");
      SQLUtil.addOptionalCondition(";2T-zvCgWqC/-", stringBuilder0);
      assertEquals(";2T-zvCgWqC/- or ;2T-zvCgWqC/-", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ", utfLen=";
      stringArray0[1] = ", utfLen=";
      stringArray0[2] = ", utfLen=";
      stringArray0[3] = "~.B";
      stringArray0[4] = ", utfLen=";
      stringArray0[5] = ", utfLen=";
      stringArray0[6] = ", utfLen=";
      stringArray0[7] = ", utfLen=";
      String string0 = SQLUtil.renderColumnListWithTableName(", utfLen=", stringArray0);
      assertEquals(", utfLen=., utfLen=, , utfLen=., utfLen=, , utfLen=., utfLen=, , utfLen=.~.B, , utfLen=., utfLen=, , utfLen=., utfLen=, , utfLen=., utfLen=, , utfLen=., utfLen=", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table ", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lh 0z@zf6?n", defaultDBTable0, 22025, "GLut1E-?sWTFp");
      vector0.add((DBColumn) defaultDBColumn0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "lh 0z@zf6?n", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*/";
      stringArray0[1] = "*/";
      stringArray0[2] = "*/";
      stringArray0[3] = "*/";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = "*/";
      stringArray0[6] = "*/";
      stringArray0[7] = "*/";
      stringArray0[8] = "*/";
      SQLUtil.leftJoin("*/", stringArray0, (String) null, "", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("*/");
      dBCatalog0.getSchema("call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.setDoc("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("*/");
      boolean boolean0 = true;
      defaultDBTable0.getUniqueConstraints(true);
      defaultDBTable1.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        defaultDBTable0.removeUniqueConstraint((DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = SQLUtil.normalize("3k\"YG'Xp;vD#xP", true);
      assertEquals("3k \"YG'Xp;vD#xP\"", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("QfKL", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((-49L));
      // Undeclared exception!
      try { 
        stringBuilder2.insert(45, (CharSequence) "QfKL", (-1070), 622);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 45
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "delete");
      stringArray0[3] = "delete";
      SQLUtil.renderColumnListWithTableName("delete", stringArray0);
      SQLUtil.removeComments("delete");
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      SQLUtil.isDML(">O/n{4\"T");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("delete.delete, delete.delete, delete.delete, delete.delete");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'delete.delete, delete.delete, delete.delete, delete.delete' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("dlee", defaultDBTable0, (-219), "dlee");
      SQLUtil.removeComments("dlee");
      Integer integer0 = RawTransaction.COMMIT;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("dlee");
      MockFile mockFile1 = new MockFile(mockFile0, "dlee");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "deletecannot set transaction p";
      objectArray0[1] = (Object) "dlee";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) nameSpec0;
      objectArray0[4] = (Object) "deletecannot set transaction p";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "deletecannot set transaction p", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ly,tf(H2Qa");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "w";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-r>0";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "w";
      stringArray1[4] = "w";
      stringArray1[6] = null;
      stringArray1[7] = "TA;";
      StringBuilder stringBuilder0 = new StringBuilder("-r>0");
      DBSchema dBSchema0 = new DBSchema("-r>0");
      DBPackage dBPackage0 = new DBPackage(stringArray1[2], dBSchema0);
      SQLUtil.typeAndName(dBPackage0);
      String[] stringArray2 = new String[9];
      stringArray2[0] = "sysxpla";
      stringArray2[1] = null;
      stringArray2[2] = "-r>0";
      stringArray2[3] = "w";
      stringArray2[4] = "null null";
      stringArray2[5] = "null null";
      stringArray2[6] = null;
      dBPackage0.getProcedures();
      stringArray2[7] = "sysxpla";
      stringArray2[8] = "w";
      SQLUtil.renderColumnListWithTableName("sysxpla", stringArray2);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL(stringArray1[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z";
      stringArray0[1] = "z";
      stringArray0[2] = "left";
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("executeclient_encoding", false, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("sessionSetId", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("28+0I0#S", false, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("left", false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("z");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      System.setCurrentTimeMillis(2270L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("calltruncatedelete");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLUtil.removeComments(" REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " REFERENCES ";
      stringArray0[1] = " REFERENCES ";
      stringArray0[2] = " REFERENCES ";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = " REFERENCES ";
      stringArray0[5] = "u";
      stringArray0[6] = " REFERENCES ";
      stringArray0[7] = " REFERENCES ";
      stringArray0[8] = " REFERENCES ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "u", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u");
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String[] stringArray1 = new String[3];
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      stringArray1[0] = "renamez";
      stringArray1[1] = "CONSTRAINT u PRIMARY KEY ( REFERENCES ,  REFERENCES ,  REFERENCES ,  REFERENCES ,  REFERENCES , u,  REFERENCES ,  REFERENCES ,  REFERENCES )";
      stringArray1[2] = "renamez";
      SQLUtil.renderColumnListWithTableName("renamez", stringArray1);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isQuery("renamez");
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable1, 148, "?O$");
      DBDataType dBDataType0 = DBDataType.getInstance((-2623), "{FsIM%{lr=e");
      Integer integer0 = new Integer(762);
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer0, integer2);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("\u0001\u009D", defaultDBTable1, 762, "create table=elee");
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals(" REFERENCES ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("call=elee");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexinsertdlete", defaultDBTable0, 3, "alter indexinsertdlete");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("alter indexinsertdlete, alter indexinsertdlete", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SQLUtil.join("-r>0", "", stringArray0, "i4V'Vh*h", "", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", defaultDBTable0, (-196), "oJrO}nzN;8V");
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, 0, ":lh`3P WGM!c=.a");
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "u";
      SQLUtil.leftJoin("u", stringArray0, "u", "u", stringArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "left join u as u on u.u = u.u");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.append('r');
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, printWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " or ";
      stringArray0[1] = "oK#KB9";
      stringArray0[2] = " or ";
      stringArray0[3] = " or ";
      stringArray0[4] = " or ";
      SQLUtil.join(" or ", " or ", stringArray0, "oK#KB9", " or ", stringArray0);
      SQLUtil.mutatesStructure(" or ");
      String[] stringArray1 = new String[0];
      SQLUtil.join("(@{=3(_&WWMM|zYb<o", "(@{=3(_&WWMM|zYb<o", stringArray1, "oK#KB9", " or ", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      String string0 = "UNIQUE";
      try { 
        pGConnectionPoolDataSource0.getConnection(")", "UNIQUE");
        fail("Expecting exception: PSQLException");
      
      } catch(PSQLException e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("TRANSACTION_READ_UNCOMMITTED", "TRANSACTION_READ_UNCOMMITTED", "TRANSACTION_READ_UNCOMMITTED");
      assertEquals("'TRANSACTION_READ_UNCOMMITTED'", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = "z";
      File file0 = FileUtil.canonicalFile("z");
      FileUtil.canonicalFile(file0);
      StringBuilder stringBuilder0 = new StringBuilder("z");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "delete";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "[.Pnc!$3{y+BwU";
      stringArray1[1] = "delete";
      stringArray1[2] = ">#F},Wn=))C3?5";
      stringArray1[3] = ">#F},Wn=))C3?5";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[3], false, stringArray1);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("PRIMARY KEY ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PRIMARY KEY ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " as ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " as ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(")e/HfCGI}-ud>3)Z,HF", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" as ", false, defaultDBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("alter tableclient_encoding");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u/hhaP5*Q*ma]+E");
      SQLUtil.removeComments("u/hhaP5*Q*ma]+E");
      SQLUtil.isProcedureCall(" NOT NULL");
      SQLUtil.mutatesDataOrStructure("oi*");
      String string0 = "z";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("alter materialized viewor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = "(";
      stringArray0[4] = "(";
      stringArray0[5] = "(";
      String string0 = SQLUtil.join("(", "(", stringArray0, "-r", "(", stringArray0);
      assertEquals("( join -r as ( on (.( = (.( and (.( = (.( and (.( = (.( and (.( = (.( and (.( = (.( and (.( = (.(", string0);
      
      DBSchema dBSchema0 = new DBSchema("alter materialized viewz");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " CHECK", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" CHECK\" PRIMARY KEY ((, (, (, (, (, ()", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "G6L)r/=_I}S'Y#4D4oI";
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cannot sIt transacton p", defaultDBTable0, 17, "cannot sIt transacton p");
      MockFile mockFile0 = new MockFile("cannot sIt transacton p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileUtil.canonicalFile("drop indexcl");
      MockFile mockFile0 = new MockFile("drop indexcl");
      mockFile0.mkdirs();
      FileUtil.canonicalFile((File) mockFile0);
      StringBuilder stringBuilder0 = new StringBuilder("&00bm5tL(+M9cu");
      stringBuilder0.append((-1029));
      SQLUtil.isDDL("drop indexcl");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1029), 'S');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("sele!tvNr8hLr", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Q:uj(r<fCVe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Q:uj(r<fCVe
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      stringBuilder1.append((-49L));
      int int0 = 45;
      StringBuilder stringBuilder2 = stringBuilder1.append(622);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(3240, (CharSequence) "", 3240, (-1070));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 3240
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null");
      DBDataType dBDataType0 = DBDataType.getInstance(167, "null = null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null = null", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setVersionColumn(true);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("NULL = NULL", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isProcedureCall("null = null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("7:uj(r<fCVe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 7:uj(r<fCVe
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLUtil.isQuery("select");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "select";
      stringArray0[1] = "select";
      stringArray0[2] = "sLT5W?";
      stringArray0[3] = " NULL";
      stringArray0[4] = "sLT5W?";
      stringArray0[5] = "sLT5W?";
      stringArray0[6] = "sLT5W?";
      stringArray0[7] = "select";
      stringArray0[8] = "select";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "sLT5W?", true, stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}4j6W#RPP*0EJiWvm#";
      stringArray0[1] = "'[`36yV']:";
      stringArray0[2] = "K<Q<";
      stringArray0[3] = "j5d9";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("");
      SQLUtil.innerJoin("", stringArray0, "2;k8kptzyn8", "j5d9", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2;k8kptzyn8");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("K<Q<");
      int int0 = 329;
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(329);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 329
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "}4j6W#RPP*0EJiWvm#";
      stringArray0[1] = "'[`36yV']:";
      stringArray0[2] = "K<Q<";
      stringArray0[3] = "j5d9";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery(" on ");
      SQLUtil.innerJoin("", stringArray0, "Dk||", "'[`36yV']:", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Dk|| as '[`36yV']: on .}4j6W#RPP*0EJiWvm# = '[`36yV']:.}4j6W#RPP*0EJiWvm# and .'[`36yV']: = '[`36yV']:.'[`36yV']: and .K<Q< = '[`36yV']:.K<Q< and .j5d9 = '[`36yV']:.j5d9 and . = '[`36yV']:. and . = '[`36yV']:. and . = '[`36yV']:.");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("");
      int int0 = 329;
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(329);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 329
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, "z,m(daz-!", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      // Undeclared exception!
      SQLUtil.isQuery("y66S/*2fDA.,i'");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callserver_encoding");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "G6L)r/=_I}S'Y#4D4oI";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE  = '' AND  = '' AND  = '' AND  = '' AND  = '' AND G6L)r/=_I}S'Y#4D4oI = 'G6L)r/=_I}S'Y#4D4oI'", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "z";
      File file0 = FileUtil.canonicalFile("z");
      FileUtil.canonicalFile(file0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string1 = null;
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(0L);
      int int0 = (-1070);
      int int1 = 622;
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1070), (CharSequence) stringBuilder1, (-2788), 622);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1070
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "ABS";
      stringArray0[0] = "ABS";
      String string1 = "?#Ceuj ";
      stringArray0[1] = "?#Ceuj ";
      stringArray0[2] = "alter session";
      stringArray0[3] = "Vu0o#AEHbv";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("Vu0o#AEHbv", "ABS = 'ABS' AND ?#Ceuj  = '?#Ceuj ' AND alter session = 'alter session' AND Vu0o#AEHbv = 'Vu0o#AEHbv'", "alter session");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Empty SQL string in executeUpdate()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.parseColumnTypeAndSize("`c?j/^a~!5o^<bk:!'2");
      SQLUtil.removeComments("qP([n6{ -2QzZ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "qP([n6{ -2QzZ";
      stringArray0[1] = "qP([n6{ -2QzZ";
      stringArray0[2] = "`c?j/^a~!5o^<bk:!'2";
      stringArray0[3] = "qP([n6{ -2QzZ";
      stringArray0[4] = "qP([n6{ -2QzZ";
      stringArray0[5] = "qP([n6{ -2QzZ";
      stringArray0[6] = "qP([n6{ -2QzZ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("qP([n6{ -2QzZ = 'qP([n6{ -2QzZ' AND qP([n6{ -2QzZ = 'qP([n6{ -2QzZ' AND `c?j/^a~!5o^<bk:!'2 = '`c?j/^a~!5o^<bk:!'2' AND qP([n6{ -2QzZ = 'qP([n6{ -2QzZ' AND qP([n6{ -2QzZ = 'qP([n6{ -2QzZ' AND qP([n6{ -2QzZ = 'qP([n6{ -2QzZ' AND qP([n6{ -2QzZ = 'qP([n6{ -2QzZ'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string1 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.qP([n6{ -2QzZ, null.qP([n6{ -2QzZ, null.`c?j/^a~!5o^<bk:!'2, null.qP([n6{ -2QzZ, null.qP([n6{ -2QzZ, null.qP([n6{ -2QzZ, null.qP([n6{ -2QzZ", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wV)d4;w.?;I%";
      SQLUtil.join("create unique index", "insert", stringArray0, "H5&t/*A{t*qa", "b$H>68NUxZyi,\"", stringArray0);
      // Undeclared exception!
      SQLUtil.isQuery("H5&t/*A{t*qa");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized viewselect * from", false, "create materialized viewselect * from", "select");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"create materialized viewselect * from\" ", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "QfKL";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QfKL");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "QfKL", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("uOr\"C)[=SO!<S}J%", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, QfKL, , , , , , , ) REFERENCES QfKL(, QfKL, , , , , , , )", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder("TA;");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      String string1 = SQLUtil.normalize("TA;", false);
      assertEquals("TA ;", string1);
      
      String string2 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, QfKL, , , , , , , )", string2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "QfKL";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QfKL");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "QfKL", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("M", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("uOr\"C)[=SO!<S}J%", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, QfKL, , , , , , , ) REFERENCES QfKL(, QfKL, , , , , , , )", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder("TA;");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("TA;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "inner";
      stringArray0[1] = "U";
      stringArray0[2] = "inner";
      stringArray0[3] = "inner";
      stringArray0[4] = "inner";
      stringArray0[5] = "inner";
      stringArray0[6] = "inner";
      stringArray0[7] = "inner";
      SQLUtil.join("inner", "inner", stringArray0, "inner", "inner", stringArray0);
      int int0 = 3126;
      StringBuilder stringBuilder0 = new StringBuilder(3126);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '>';
      charArray0[2] = '=';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3126, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3126
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "delete";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "delete";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "[.Pnc!$3{y+BwU";
      stringArray1[1] = "delete";
      stringArray1[2] = ">#F},Wn=))C3?5";
      stringArray1[3] = ">#F},Wn=))C3?5";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", false, stringArray1);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT delete ", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SQLUtil.join("-r>0", "", stringArray0, "i4V'Vh*h", "", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 0, "M67G0BUW{8L");
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter indexsysxplain_sort_props", (String[]) null, "-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KxZy}j");
      MockFile mockFile0 = new MockFile(":6-(m:EpIw@{eLF4f6", "\"K3A");
      MockFile mockFile1 = new MockFile("l-TAK5ros;8Co");
      MockFile mockFile2 = new MockFile(mockFile1, "update1k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "alter indexrename", (Object[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?CgQHWo";
      stringArray0[1] = "U$ukWhw9{}/M";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\u014F", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("\u0001\u014F", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("J2");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = null;
      int int0 = 34;
      StringBuilder stringBuilder0 = new StringBuilder(34);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      int int1 = (-2746);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2746), (-2449));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2746
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "4]mm 9gf-DqJ,mf";
      SQLUtil.isDDL("4]mm 9gf-DqJ,mf");
      String string1 = "+aO\\1Tl9{/F3F";
      SQLUtil.substituteMarkers("4]mm 9gf-DqJ,mf", "+aO\u0001Tl9{/F3F", "+aO\u0001Tl9{/F3F");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "4]mm 9gf-DqJ,mf");
      stringBuilder0.deleteCharAt(0);
      SQLUtil.addRequiredCondition("4]mm 9gf-DqJ,mf", stringBuilder0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("left");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("+aO\u0001Tl9{/F3F", "4]mm 9gf-DqJ,mf", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("Pg=u;A;-}~Z?L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Pg=u;A;-}~Z?L'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = "z";
      File file0 = FileUtil.canonicalFile("z");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "z");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLUtil.removeComments("");
      SQLUtil.isProcedureCall("");
      SQLUtil.mutatesDataOrStructure("");
      StringBuilder stringBuilder0 = new StringBuilder(44);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_5v");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_5v", defaultDBTable0, (DBDataType) null);
      defaultDBColumn0.setNullable(false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("0G>lqG@@d");
      SQLUtil.addRequiredCondition("0G>lqG@@d", stringBuilder0);
      assertEquals("0G>lqG@@d and 0G>lqG@@d", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "select intorimary key";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("select intorimary key", "select intorimary key", stringArray0, "select intorimary key", "select intorimary key", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("XaF", compositeDBObject0);
      tableContainer0.getTable("insert");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "insert";
      stringArray0[1] = "XaF";
      stringArray0[2] = "XaF";
      stringArray0[3] = "insert";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLUtil.normalize("=?,BHn]K J5C */&_$_", true);
      VersionNumber.valueOf("=?,BHn]K J5C */&_$_");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fb\"lLZ{B4\"d#p|JD";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "NZn^(L[5";
      stringArray1[1] = "fb\"lLZ{B4\"d#p|JD";
      stringArray1[2] = "create unique indexselect * from";
      stringArray1[3] = "=?,BHn]K J5C */&_$_";
      stringArray1[4] = "= ?, BHn ] K J5C */ & _ $ _";
      stringArray1[5] = "NZn^(L[5";
      stringArray1[6] = "=?,BHn]K J5C */&_$_";
      stringArray1[7] = "NZn^(L[5";
      GDSType.getType("NZn^(L[5");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null, fBConnectionProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("varchar", stringBuilder0);
      assertEquals("varchar", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnListWithTableName("SELECT * FROM ", stringArray0);
      assertEquals("SELECT * FROM .null, SELECT * FROM .null, SELECT * FROM .null, SELECT * FROM .null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SQLUtil.normalize("JA'7KO|6(`K6/87^gQ", false);
      assertEquals("JA '7KO|6(`K6/87^gQ'", string1);
      
      String string2 = SQLUtil.normalize("]]", true);
      assertEquals("] ]", string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      defaultDBTable0.getUniqueConstraints(true);
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "G6L)r/=_I}S'Y#4D4oI";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE  = '' AND  = '' AND  = '' AND  = '' AND  = '' AND G6L)r/=_I}S'Y#4D4oI = 'G6L)r/=_I}S'Y#4D4oI'", string0);
      
      String string1 = SQLUtil.leftJoin("G6L)r/=_I}S'Y#4D4oI", stringArray0, "", "deletesysxplain_sort_props", stringArray0);
      assertEquals("left join  as deletesysxplain_sort_props on G6L)r/=_I}S'Y#4D4oI. = deletesysxplain_sort_props. and G6L)r/=_I}S'Y#4D4oI. = deletesysxplain_sort_props. and G6L)r/=_I}S'Y#4D4oI. = deletesysxplain_sort_props. and G6L)r/=_I}S'Y#4D4oI. = deletesysxplain_sort_props. and G6L)r/=_I}S'Y#4D4oI. = deletesysxplain_sort_props. and G6L)r/=_I}S'Y#4D4oI.G6L)r/=_I}S'Y#4D4oI = deletesysxplain_sort_props.G6L)r/=_I}S'Y#4D4oI", string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "i4V'Vh*h";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ":H]mM}YcY]<le'I4\"<";
      stringArray0[5] = "QfKL";
      stringArray0[6] = "QfKL";
      stringArray0[8] = "exec";
      SQLUtil.join("QfKL", "", stringArray0, "execor", (String) null, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("3 {cL~F", defaultDBTable0, (-196), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("q/s$}P0 LK6tMA]?ae", "q/s$}P0 LK6tMA]?ae", (String[]) null, "q/s$}P0 LK6tMA]?ae", "q/s$}P0 LK6tMA]?ae", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("z", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = new Integer(1217);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z", dBTable0, (DBDataType) null, integer0);
      SQLUtil.removeComments("z");
      SQLUtil.typeAndName(dBUniqueIndex0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-.d0WZHh.");
      DBDataType dBDataType0 = DBDataType.getInstance(44, "create materialized viewsysxplain_sort_props");
      defaultDBTable0.getPrimaryKeyConstraint();
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-.d0WZHh.", defaultDBTable0, dBDataType0, integer0, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create materialized viewsysxplain_sort_props", defaultDBTable0, 42, "W");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "QfKL";
      stringArray0[1] = "QfKL";
      stringArray0[4] = ":H]mM}YcY]<le'I4\"<";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*");
      DBDataType dBDataType0 = DBDataType.getInstance(10, "Cannot set transaction parameters when transaction is already started.");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("wrong schema", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("select into", defaultDBTable0, dBDataType0, integer1, integer2);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("alter tableprimary key", defaultDBTable0, 10, "/1_)B@rB$]dUL@^M-");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("wrong schema, wrong schema, select into", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "N/*K-$muNcqhtrp~c";
      // Undeclared exception!
      SQLUtil.isProcedureCall("N/*K-$muNcqhtrp~c");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("creame table[djectvinto");
      assertNull(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-2015), "creame table[djectvinto");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("creame table[djectvinto", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("creame table[djectvinto CREAME TABLE[DJECTVINTO(0,0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = SQLUtil.normalize(";bYIdP*|e.&K4](ZG", false);
      assertEquals("; bYIdP * | e. & K4 ] (ZG", string0);
      
      String string1 = SQLUtil.normalize("nP/*vBy@KFDTyel[", false);
      assertEquals("nP /* vBy @ KFDTyel [", string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("constraint", defaultDBTable0, (-219), "constraint");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "constraint CONSTRAINT NULL";
      stringArray0[1] = "CONSTRAINT";
      stringArray0[2] = "constraint";
      stringArray0[3] = "constraint";
      stringArray0[4] = "CONSTRAINT";
      stringArray0[5] = "CONSTRAINT";
      stringArray0[6] = "constraint";
      stringArray0[7] = "constraint";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "constraint CONSTRAINT NULL", false, stringArray0);
      dBUniqueConstraint0.equals("constraint");
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "CONSTRAINT";
      stringArray1[1] = "constraint";
      stringArray1[2] = "constraint CONSTRAINT NULL";
      stringArray1[3] = "constraint CONSTRAINT NULL";
      stringArray1[4] = "constraint CONSTRAINT NULL";
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("constraint CONSTRAINT NULL", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.appendCodePoint((-2006370055));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter tableg#}7c,nci=emct", true, "create unique index", "yiH");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "yiH");
      StringBuilder stringBuilder1 = stringBuilder0.append("yiH");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      assertEquals("yiHyiHCONSTRAINT \"alter tableg#}7c,nci=emct\" ", stringBuilder1.toString());
      
      boolean boolean0 = SQLUtil.isQuery("alter tableg#}7c,nci=emct");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.join("-r>0", "", stringArray0, "i4V'Vh*h", "", stringArray0);
      assertEquals("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", string0);
      
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", defaultDBTable0, (-196), "oJrO}nzN;8V");
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 0, ":lh`3P WGM!c=.a");
      vector0.add((DBColumn) defaultDBColumn1);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ., null", string1);
      
      String string2 = SQLUtil.innerJoin("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ., null", stringArray0, "-r>0", "-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", stringArray0);
      assertEquals("-r>0 as -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = . on -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ., null.-r>0 = -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ..-r>0 and -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ., null.-r>0 = -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ..-r>0 and -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ., null. = -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .. and -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ., null. = -r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = ..", string2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "@YJ)~B|!G`fd::c";
      SQLUtil.parseColumnTypeAndSize("@YJ)~B|!G`fd::c");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "QfKL";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string1 = "u";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("insert", (String[]) null, "u", "truncate", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g#}7C,nci=eMct", defaultDBTable0, (-219), "g#}7C,nci=eMct");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("HL$/Gp5C_(33o+p_", true, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("g#}7C,nci=eMct", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("HL$/Gp5C_(33o+p_", false, dBTable0, stringArray0, dBTable0, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("", true);
      StringBuilder stringBuilder0 = new StringBuilder("_rGz~'r(^-ZVcxb");
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(2);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(2);
      assertSame(stringBuilder0, stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-.d0WZ]Hh.");
      DBDataType dBDataType0 = DBDataType.getInstance(44, "create materialized viewsysxplain_sort_props");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer3, integer3);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Cannot set transaction parameters when transaction is already started.", defaultDBTable0, 44, "delete");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ", ", false, stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "delete";
      String[] stringArray0 = new String[4];
      String string1 = "'";
      SQLUtil.isDDL("'");
      String string2 = "on";
      String string3 = null;
      int int0 = 39;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("G_NsXS >T,");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "'H.A}SW9!kD`,;9");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, 1265L, timeUnit0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("on", (String) null, scheduledFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "execcannot sit transacton p";
      stringArray0[1] = "org.apache.*erby.iapi.types.XML";
      stringArray0[2] = "org.apache.*erby.iapi.types.XML";
      stringArray0[3] = "CREATE_PARAMS";
      stringArray0[4] = "org.apache.*erby.iapi.types.XML";
      stringArray0[5] = "org.apache.*erby.iapi.types.XML";
      String string0 = SQLUtil.join("CREATE_PARAMS", "execcannot sit transacton p", stringArray0, "org.apache.*erby.iapi.types.XML", "org.apache.*erby.iapi.types.XML", stringArray0);
      assertEquals("CREATE_PARAMS join org.apache.*erby.iapi.types.XML as org.apache.*erby.iapi.types.XML on execcannot sit transacton p.execcannot sit transacton p = org.apache.*erby.iapi.types.XML.execcannot sit transacton p and execcannot sit transacton p.org.apache.*erby.iapi.types.XML = org.apache.*erby.iapi.types.XML.org.apache.*erby.iapi.types.XML and execcannot sit transacton p.org.apache.*erby.iapi.types.XML = org.apache.*erby.iapi.types.XML.org.apache.*erby.iapi.types.XML and execcannot sit transacton p.CREATE_PARAMS = org.apache.*erby.iapi.types.XML.CREATE_PARAMS and execcannot sit transacton p.org.apache.*erby.iapi.types.XML = org.apache.*erby.iapi.types.XML.org.apache.*erby.iapi.types.XML and execcannot sit transacton p.org.apache.*erby.iapi.types.XML = org.apache.*erby.iapi.types.XML.org.apache.*erby.iapi.types.XML", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\u01B0", dBSchema0);
      dBCatalog0.getComponents();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execcannot sit transacton p", true, defaultDBTable0, "execute");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"execcannot sit transacton p\" CHECK execute", string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z55ufX$", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT z55ufX$ ", string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, (-219), "dlete");
      DBDataType dBDataType0 = DBDataType.getInstance((-219), "eVo3C,)Fr6FYa0_");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = new Integer((-219));
      defaultDBColumn1.setSize(integer1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("SMALLER_EQUAL ", defaultDBTable0, (-219), "eVo3C,)Fr6FYa0_");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("A41p4", defaultDBTable0, 2935, "dlete");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("varchar", stringBuilder0);
      assertEquals("varchar", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "isDefinitelyWritable";
      SQLUtil.normalize("isDefinitelyWritable", false);
      SQLUtil.renderValue("isDefinitelyWritable");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'isDefinitelyWritable'");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rerferen";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (rerferen)", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-.d0WZ]Hh.");
      DBDataType dBDataType0 = DBDataType.getInstance(44, "create materialized viewsysxplain_sort_props");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer3, integer3);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Cannot set transaction parameters when transaction is already started.", defaultDBTable0, 44, "delete");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("delete", string0);
      
      String string1 = SQLUtil.normalize("[/<x.ePa", false);
      assertEquals("[ / < x.ePa", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(delete, delete, , )", string2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("q-s}P0 Lm6tkMA]?ae", (String[]) null, "q-s}P0 Lm6tkMA]?ae", "q-s}P0 Lm6tkMA]?ae", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "SERVER_ENCODING";
      SQLUtil.mutatesDataOrStructure("SERVER_ENCODING");
      String string1 = "/*";
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("create materialized viewsysxplain_sort_props", stringArray0, "create materialized viewsysxplain_sort_props", "SOURCE_DATA_TYPE SMALLINT", stringArray0);
      assertEquals("left join create materialized viewsysxplain_sort_props as SOURCE_DATA_TYPE SMALLINT on ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("referen");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~y#u{2", (DBSchema) null);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("xw", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.xw", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLUtil.removeComments(", ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      stringArray0[2] = ", ";
      stringArray0[3] = ", ";
      stringArray0[4] = ", ";
      stringArray0[5] = ", ";
      stringArray0[6] = null;
      stringArray0[7] = ", ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("delete");
      SQLUtil.renderColumnListWithTableName(", ", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "insertnull = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null and null = null", dBForeignKeyConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "al~er m", true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT \"al~er m\" ", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("CONSTRAINT \"al~er m\" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println("rename");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("CONSTRAINT \"al~er m\" ", dBForeignKeyConstraint0.getName());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "org.h2.command.ddl.DropIndex";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "drop materialized view4]mm 9gf-dqj,mf");
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Character character0 = new Character('V');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'V'", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-r>0", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-r>0";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[6] = null;
      dBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      stringArray1[7] = "TA;";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("-r>0");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      assertEquals("-r>0CONSTRAINT -r>0 ", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = SQLUtil.normalize("6UU($BRY|}Q{-~=", false);
      assertEquals("6UU ($ BRY | } Q { - ~ =", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog("avef*HaW#j.I+");
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      dBSchema0.getTable("alter materialized view");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 1699, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", (DBTable) null, (-60599426), "NCLOB");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("NCLOB", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Integer integer0 = new Integer(47);
      columnDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ", utfLen=";
      stringArray0[1] = ", utfLen=";
      stringArray0[1] = ", utfLen=";
      SQLUtil.join((String) null, "exec", stringArray0, ".", ".", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      VersionNumber versionNumber0 = VersionNumber.valueOf("[");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("@[", ", utfLen=", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null, defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("3 {cL~F", dBCatalog0);
      dBSchema0.getTable(". as . on exec., utfLen= = .., utfLen= and exec., utfLen= = .., utfLen= and exec.null = ..null and exec.null = ..null and exec.null = ..null and exec.null = ..null and exec.null = ..null and exec.null = ..null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(", utfLen=", (DBTable) null, 44, "LD?L76sm}");
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("truncate", (String[]) null, ", utfLen=", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.iapi.services.io.ArrayOutputStream", false);
      assertEquals("org.apache.derby.iapi.services.io.ArrayOutputStream", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.mutatesDataOrStructure("alter tableg#}7c,nci=emct");
      String string0 = "drop materialized views_&y,h as delete on delete.null = delete.null and delete.null = delete.null and delete.null = delete.null and delete.null = delete.null";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized views_&y,h as delete on delete.null = delete.null and delete.null = delete.null and delete.null = delete.null and delete.null = delete.null");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter tableg#}7c,nci=emct";
      stringArray0[1] = "alter tableg#}7c,nci=emct";
      stringArray0[2] = "drop materialized views_&y,h as delete on delete.null = delete.null and delete.null = delete.null and delete.null = delete.null and delete.null = delete.null";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("b-GA~", defaultDBTable0, 9, "windows");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("b-GA~ WINDOWS NULL", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("D:&_EyAJ.ZU2mX3{9u");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "s";
      stringArray0[1] = "D:&_EyAJ.ZU2mX3{9u";
      stringArray0[2] = "s";
      stringArray0[3] = "s";
      stringArray0[4] = "delete";
      stringArray0[5] = "delete";
      stringArray0[6] = "s";
      stringArray0[7] = "delete";
      stringArray0[8] = "s";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT delete ", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (s, D:&_EyAJ.ZU2mX3{9u, s, s, delete, delete, s, delete, s)", string1);
      
      boolean boolean0 = SQLUtil.isDDL("UNIQUE (s, D:&_EyAJ.ZU2mX3{9u, s, s, delete, delete, s, delete, s)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cannot sIt transacton p", defaultDBTable0, 17, "cannot sIt transacton p");
      MockFile mockFile0 = new MockFile("cannot sIt transacton p");
      Integer integer0 = new Integer(17);
      DBDataType dBDataType0 = DBDataType.getInstance((-414655356), "BLOB");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized viewcreame table[djectvinto", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
      assertEquals("BLOB", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.removeComments("~.B");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1215), "~.B");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2382));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tablesysxplain_sort_props", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.renderValue((Object) null);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(498.25693);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("498.25693~.B(3,-2382)", stringBuilder1.toString());
      assertEquals("498.25693~.B(3,-2382)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("databaseName", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ", utfLen=";
      stringArray0[1] = ", utfLen=";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(", utfLen=", stringArray0, ", utfLen=", ", utfLen=", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "org.apache.derby.catalog.TriggerNewTransitionRows";
      stringArray1[1] = ", parameter count: ";
      stringArray1[2] = "";
      SQLUtil.join("org.apache.derby.catalog.TriggerNewTransitionRows", "org.apache.derby.catalog.TriggerNewTransitionRows", stringArray0, "7I9Xg\"^z[?z$F", ", parameter count: ", stringArray1);
      SQLUtil.substituteMarkers("", ", parameter count: ", ", parameter count: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", parameter count: ");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ', parameter count: ' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter session", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('u');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("ucreate table null (,\n\tPRIMARY KEY ()\n)", stringWriter1.toString());
      assertEquals("ucreate table null (,\n\tPRIMARY KEY ()\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("referen");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", (DBTable) null, (-60599426), "NCLOB");
      SQLUtil.removeComments("NCLOB");
      defaultDBColumn0.setVersionColumn(true);
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[1];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("wpq5f`~>", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[0] = "renamekhcd?3";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "create tablekhcd?3", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-r>0", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-r>0";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[6] = null;
      stringArray1[7] = "TA;";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("-r>0");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      assertEquals("-r>0CONSTRAINT -r>0 ", stringBuilder0.toString());
      
      DBSchema dBSchema0 = new DBSchema("-r>0");
      DBPackage dBPackage0 = new DBPackage(stringArray1[2], dBSchema0);
      String string0 = SQLUtil.typeAndName(dBPackage0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectua2)@(");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      stringArray0[3] = "selectua2)@(";
      stringArray0[4] = "create materialized view";
      stringArray0[5] = "delete";
      stringArray0[6] = "delete";
      stringArray0[7] = "D_";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = SQLUtil.normalize("6tjX):B%X.", false);
      assertEquals("6tjX) : B % X.", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g#}7C,nci=eMct", defaultDBTable0, (-219), "g#}7C,nci=eMct");
      SQLUtil.removeComments("g#}7C,nci=eMct");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g#}7C,nci=eMct";
      stringArray0[1] = "G#}7C,NCI=EMCT(0)";
      stringArray0[2] = "g#}7C,nci=eMct";
      stringArray0[3] = "g#}7C,nci=eMct";
      stringArray0[4] = "G#}7C,NCI=EMCT(0)";
      stringArray0[5] = "G#}7C,NCI=EMCT(0)";
      stringArray0[6] = "g#}7C,nci=eMct";
      stringArray0[7] = "g#}7C,nci=eMct";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "g#}7C,nci=eMct", true, stringArray0);
      dBUniqueConstraint0.equals("g#}7C,nci=eMct");
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      String[] stringArray1 = new String[11];
      stringArray1[0] = "G#}7C,NCI=EMCT(0)";
      stringArray1[1] = "g#}7C,nci=eMct";
      stringArray1[2] = "g#}7C,nci=eMct";
      stringArray1[3] = "g#}7C,nci=eMct";
      stringArray1[4] = "g#}7C,nci=eMct";
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.normalize("G#}7C,NCI=EMCT(0)", false);
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-219));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -219
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=elee";
      stringArray0[1] = "=elee";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-.d0WZHh.");
      DBDataType dBDataType0 = DBDataType.getInstance(44, "create materialized viewsysxplain_sort_props");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=elee", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("=elee", defaultDBTable0, dBDataType0, integer3, integer3);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Cannot set transaction parameters when transaction is already started.", defaultDBTable0, 44, "=elee");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("=elee", string0);
      
      String string1 = SQLUtil.renderColumn(dBColumnArray0[0]);
      assertEquals("=elee CREATE MATERIALIZED VIEWSYSXPLAIN_SORT_PROPS(1,1) NULL", string1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.renderColumnListWithTableName("drop indexselect * from", stringArray0);
      assertEquals("drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null, drop indexselect * from.null", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "`iMHwgSjqx&[LjFbC;z";
      String string1 = "/*";
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "";
      String string1 = "QfKL";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("QfKL", stringBuilder0);
      stringBuilder1.append('3');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      stringBuilder1.append((-49L));
      int int0 = 45;
      int int1 = (-1070);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "drop materialized viewsysxplain_sort_props";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop materialized viewsysxplain_sort_props", stringArray0, (String) null, "drop materialized viewsysxplain_sort_props", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c&", defaultDBTable0, (-1788169004), "c&");
      SQLUtil.removeComments("% \uFFFF %\u0007\uFFFF\u0013");
      defaultDBColumn0.isUnique();
      defaultDBTable0.setDoc("renamedrop index");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("C&(0)", string0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create tabledrop index", defaultDBTable0, 389, "alter index% \uFFFF %\u0007\uFFFF\u0013%\u0001\u0085\u0006%\u0004\uFFFF\u0001%\u0001\uFFFF\u001A%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.substituteMarkers("% \uFFFF %\u0007\uFFFF\u0013", "% \uFFFF %\u0007\uFFFF\u0013", (Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[11];
      stringArray0[0] = "Mb,<qS/*2f\u0002H";
      stringArray0[1] = "7Trw|o\"TK:";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Mb,<qS/*2f\u0002H", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("7Trw|o\"TK:", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("callupdate:6-(m:epiw@{elf4f6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter session", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "delete";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "delete";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1165L));
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter indexprimary key", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DBDataType dBDataType0 = DBDataType.getInstance((-5872), "CONSTRAINT \"alter indexprimary key\" FOREIGN KEY (, delete, , delete) REFERENCES null(, delete, , delete)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder("delete");
      StringBuffer stringBuffer0 = new StringBuffer("/?y]b]G7t~Sz$eQ=");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("delete/?y]b]G7t~Sz$eQ=CONSTRAINT \"ALTER INDEXPRIMARY KEY\" FOREIGN KEY (, DELETE, , DELETE) REFERENCES NULL(, DELETE, , DELETE)", stringBuilder1.toString());
      assertEquals("delete/?y]b]G7t~Sz$eQ=CONSTRAINT \"ALTER INDEXPRIMARY KEY\" FOREIGN KEY (, DELETE, , DELETE) REFERENCES NULL(, DELETE, , DELETE)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "(";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = "(";
      stringArray0[4] = "(";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "(", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("+)Z", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("exec", dBTable0, (-1971710157), "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g#}7C,nci=eMct";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "g#}7C,nci=eMct";
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.g#}7C,nci=eMct, null.null, null.null, null.g#}7C,nci=eMct", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SQLUtil.normalize("dyRw(}y-@Q%ca_k", true);
      assertEquals(" dyRw (} y - @ Q % ca_k", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessioninsertsecert itoprimary key");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ", utfLen=";
      stringArray0[1] = ", utfLen=";
      stringArray0[1] = ", utfLen=";
      stringArray0[3] = "~.B";
      stringArray0[4] = ", utfLen=";
      stringArray0[5] = "~.B";
      stringArray0[6] = ", utfLen=";
      stringArray0[7] = ", utfLen=";
      String string0 = SQLUtil.renderColumnListWithTableName(", utfLen=", stringArray0);
      assertEquals(", utfLen=., utfLen=, , utfLen=., utfLen=, , utfLen=.null, , utfLen=.~.B, , utfLen=., utfLen=, , utfLen=.~.B, , utfLen=., utfLen=, , utfLen=., utfLen=", string0);
      
      SQLUtil.renderValue((Object) null);
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(", utfLen= = ', utfLen=' AND , utfLen= = ', utfLen=' AND null = null AND ~.B = '~.B' AND , utfLen= = ', utfLen=' AND ~.B = '~.B' AND , utfLen= = ', utfLen=' AND , utfLen= = ', utfLen='", string1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      File file0 = MockFile.createTempFile("rowcount remaining=", "o?r>9[dUdIJaR>");
      File file1 = FileUtil.canonicalFile(file0);
      MockFile mockFile0 = new MockFile(file1, "truncateal~er matrialize view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.isProcedureCall("Fz_dxLPV#W'hk5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, false, (NameSpec) null, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = SQLUtil.normalize(".l", true);
      assertEquals(".l", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      SQLUtil.typeAndName(defaultDBTable0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog("z", (Database) null);
      DBSchema dBSchema0 = new DBSchema("table z", dBCatalog0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("null", stringBuilder1.toString());
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sejectvinto", (DBTable) null, (-60599426), "sejectvinto");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SEJECTVINTO(0)", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "z";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("z", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = new Integer(1217);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z", dBTable0, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., .", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SQLUtil.normalize("!,C}lCK\"T8FDcd", true);
      assertEquals("!, C } lCK \"T8FDcd\"", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(4027, "create materialized viewsysxplain_sort_props");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized viewsysxplain_sort_props", defaultDBTable1, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer2, integer0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("-.d0WZ]Hh.", defaultDBTable0, 4027, "-.d0WZ]Hh.");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g#}7C,nci=eMct", defaultDBTable0, (-219), "g#}7C,nci=eMct");
      SQLUtil.removeComments("g#}7C,nci=eMct");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[13];
      stringArray0[0] = "g#}7C,nci=eMct";
      stringArray0[2] = "g#}7C,nci=eMct";
      stringArray0[3] = "g#}7C,nci=eMct";
      stringArray0[5] = "G#}7C,NCI=EMCT(0)";
      stringArray0[6] = "g#}7C,nci=eMct";
      stringArray0[7] = "g#}7C,nci=eMct";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "g#}7C,nci=eMct", true, stringArray0);
      dBUniqueConstraint0.equals("g#}7C,nci=eMct");
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("t4.!:jTRU", "update", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("nF14", defaultDatabase0);
      dBCatalog0.getSchema("'p8-");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("g#}7C,nci=eMct", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("org.postgresql.jdbc3.AbstractJdbc3Statement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog("?JeJ['K}-oL3sp#gij");
      dBCatalog0.getTable("F;kV?/zh!oo]", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z", (DBTable) null, 237, "client_encod");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLIENT_ENCOD", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "i4V'Vh*h";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ":H]mM}YcY]<le'I4\"<";
      stringArray0[5] = "QfKL";
      stringArray0[6] = "QfKL";
      stringArray0[8] = "exec";
      SQLUtil.join("QfKL", "", stringArray0, "", (String) null, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("3 {cL~F", defaultDBTable0, (-196), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCatalog dBCatalog1 = new DBCatalog();
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.normalize(";2T-zvCgWq+C/-", false);
      String string0 = SQLUtil.normalize(";2T-zvCgWq+C/-", false);
      assertEquals("; 2T - zvCgWq + C / -", string0);
      
      StringReader stringReader0 = new StringReader("; 2T - zvCgWq + C / -");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("CH>@WVDCjjG{@OC");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("6-(m:EpIwegLF4f6", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = SQLUtil.normalize("isDefinitelyWritable", false);
      assertEquals("isDefinitelyWritable", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CREATE ROLE: ";
      stringArray0[1] = "%s(#!^Ybo";
      String string1 = SQLUtil.innerJoin("create table ", stringArray0, "create table ", "@:/mW3$~W", stringArray0);
      assertEquals("create table  as @:/mW3$~W on create table .CREATE ROLE:  = @:/mW3$~W.CREATE ROLE:  and create table .%s(#!^Ybo = @:/mW3$~W.%s(#!^Ybo", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SQLUtil.join("-r>0", "", stringArray0, "i4V'Vh*h", "", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", defaultDBTable0, (-196), "oJrO}nzN;8V");
      defaultDBColumn0.isUnique();
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, 0, ":lh`3P WGM!c=.a");
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", (DBTable) null, (-60599426), "NCLOB");
      defaultDBColumn0.setVersionColumn(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NCLOB";
      stringArray0[1] = "NCLOB";
      stringArray0[2] = "NCLOB";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "NCLOB";
      stringArray0[5] = "NCLOB";
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("NCLOB NCLOB NULL", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("m@R?q;]dn.qJr6");
      dBSchema0.getTable("4a0_WfqTo");
      DBDataType dBDataType0 = DBDataType.getInstance(2494, "??hM21_?$E");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Uvb.,", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("??hM21_?$E", (DBTable) null, 2494, "??HM21_?$E(2,2)");
      SQLUtil.mutatesDataOrStructure("alter tableg#}7c,nci=emct");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Uvb.,";
      stringArray0[1] = "alter tableg#}7c,nci=emct";
      SQLUtil.renderColumnListWithTableName("??hM21_?$E", stringArray0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
      
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLUtil.removeComments("");
      SQLUtil.isProcedureCall("SYSXPLAIN_SORT_PROPS");
      SQLUtil.mutatesDataOrStructure("SYSXPLAIN_SORT_PROPS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("Nro'O/Bc)&*w-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create unique index");
      SQLUtil.mutatesStructure("CLIENT_ENCODING");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CLIENT_ENCODING";
      SQLUtil.innerJoin("create unique index", stringArray0, "CLIENT_ENCODING", "CLIENT_ENCODING", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(388);
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'v';
      charArray0[2] = '<';
      charArray0[3] = '';
      charArray0[4] = '\'';
      charArray0[5] = 'z';
      charArray0[6] = 'T';
      charArray0[7] = 'i';
      charArray0[8] = 'A';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("Av<'zTiACONSTRAINT \"create unique index\" ", stringBuilder0.toString());
      assertEquals("Av<'zTiACONSTRAINT \"create unique index\" ", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SQLUtil.removeComments("drop indexclient_encoding");
      SQLUtil.isProcedureCall("0r4!ZO");
      SQLUtil.mutatesDataOrStructure("drop indexclient_encoding");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(44, "create materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE MATERIALIZED VIEW(0)", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(delete, delete, , )", string1);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDML("delete");
      assertTrue(boolean0);
      
      String string2 = SQLUtil.innerJoin("delete", stringArray0, "|U*/|W#e|8pLk=u/W=:", "es$yO!hoQ?S(pn", stringArray0);
      assertEquals("|U*/|W#e|8pLk=u/W=: as es$yO!hoQ?S(pn on delete.delete = es$yO!hoQ?S(pn.delete and delete.delete = es$yO!hoQ?S(pn.delete and delete.null = es$yO!hoQ?S(pn.null and delete.null = es$yO!hoQ?S(pn.null", string2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "HQ:zS+`[0U&ym,@";
      String string1 = "";
      SQLUtil.substituteMarkers("HQ:zS+`[0U&ym,@", "", "HQ:zS+`[0U&ym,@");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("HQ:zS+`[0U&ym,@", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("'HQ:zS+`[0U&ym,@'H'HQ:zS+`[0U&ym,@'Q'HQ:zS+`[0U&ym,@':'HQ:zS+`[0U&ym,@'z'HQ:zS+`[0U&ym,@'S'HQ:zS+`[0U&ym,@'+'HQ:zS+`[0U&ym,@'`'HQ:zS+`[0U&ym,@'['HQ:zS+`[0U&ym,@'0'HQ:zS+`[0U&ym,@'U'HQ:zS+`[0U&ym,@'&'HQ:zS+`[0U&ym,@'y'HQ:zS+`[0U&ym,@'m'HQ:zS+`[0U&ym,@','HQ:zS+`[0U&ym,@'@'HQ:zS+`[0U&ym,@'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized viewcreate materialized viewsysxplain_sort_props");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("callg#}7c,nci=emct");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("inner", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("inner");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "inner.null";
      stringArray1[1] = "inner.null";
      stringArray1[2] = "inner";
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) defaultDBTable0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray1, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "Q:uj(sr<lrfCVe";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Q:uj(sr<lrfCVe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Q:uj(sr<lrfCVe
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", (DBTable) null, (-60599438), "NCLOB");
      SQLUtil.removeComments("org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("NCLOB", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("null = null", stringArray0);
      String string0 = "create table";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create table", stringArray0, "create table", "&EUf]\u0007?#~^", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "&pdate:6-(m:epiw@{elf4f6";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("QfKL", stringBuilder0);
      assertEquals("QfKL", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$I#NrVD7M\u0007FX");
      DBDataType dBDataType0 = DBDataType.getInstance(10, "QfKL");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = new Integer(3348);
      Integer integer5 = Integer.getInteger("deletesysxplain_sort_props", integer4);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("e[I", defaultDBTable0, dBDataType0, integer5, integer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable1, 10, "*");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn2;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("K942cJlQ", true, "K942cJlQ", "K942cJlQ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK K942cJlQ", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT execute FOREIGN KEY (execute, execute) REFERENCES null(execute, execute)", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("l{[", dBSchema0);
      dBSchema0.removeTable(defaultDBTable1);
      stringArray0[5] = "G6L)r/=_I}S'Y#4D4oI";
      SQLUtil.ownerDotComponent(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter table";
      stringArray0[3] = "alter table";
      stringArray0[5] = "alter table";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter table", stringArray0, "Dq@r%qC<#h#A./\nF~", stringArray0[1], stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexinsertdlete", defaultDBTable0, 3, "alter indexinsertdlete");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("alter indexinsertdlete", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "\u0001\u01EB", false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SQLUtil.join("", "", stringArray0, "exec0r4!zo", "", stringArray0);
      DBSchema dBSchema0 = new DBSchema("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-r";
      stringArray1[1] = "alter materialized viewz";
      stringArray1[2] = "alter materialized viewz";
      stringArray1[3] = " CHECK";
      stringArray1[4] = "-r";
      stringArray1[5] = "drop table";
      stringArray1[6] = "-r";
      stringArray1[7] = "exec0r4!zo as  on . = .";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Connection ", false, stringArray1);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("-r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '-r' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = SQLUtil.normalize("IU,tJm. 'WMVm", false);
      assertEquals("IU, tJm.'WMVm'", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.typeAndName((DBObject) null);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q:uj(sr<lrfCVe");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q:uj(sr<lrfCVe", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("CONSTRAINT Q:uj(sr<lrfCVe PRIMARY KEY ()");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("execi^[ax\"r", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      SQLUtil.join("-r>0", "", stringArray0, "-r>0", "", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1150151662), "/");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-r>0", defaultDBTable0, dBDataType0);
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("-r>0 join -r>0 as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", defaultDBTable0, (-196), "oJrO}nzN;8V");
      vector0.add((DBColumn) defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable0, 0, ":lh`3P WGM!c=.a");
      DBSequence dBSequence0 = new DBSequence("", "", "A{%J_90ZWQCeHJ");
      SQLUtil.ownerDotComponent(dBSequence0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("drop materialized viewderby.storage.minimumrecordsize", true);
      assertEquals("drop materialized viewderby.storage.minimumrecordsize", string0);
      
      String string1 = SQLUtil.renderValue(stringBuilder0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-r>0", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-r>0";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[6] = null;
      stringArray1[7] = "TA;";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder("-r>0");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      assertEquals("-r>0CONSTRAINT -r>0 ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = ": free list ";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition(": free list ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" wt$+]X5ig%R");
      TableContainer tableContainer0 = new TableContainer("create tablereferences", dBCatalog0);
      tableContainer0.getTable("create tablereferences");
      SQLUtil.typeAndName((DBObject) null);
      StringBuilder stringBuilder0 = new StringBuilder(7);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 7);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(" wt$+]X5ig%R");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.join((String) null, "bQTqc/5;m!K#[0z;Q+'", stringArray0, "bQTqc/5;m!K#[0z;Q+'", "bQTqc/5;m!K#[0z;Q+'", stringArray0);
      assertEquals("bQTqc/5;m!K#[0z;Q+' as bQTqc/5;m!K#[0z;Q+' on bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null and bQTqc/5;m!K#[0z;Q+'.null = bQTqc/5;m!K#[0z;Q+'.null", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBSchema dBSchema0 = new DBSchema("uHq: 468u/=@pk");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uHq: 468u/=@pk");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter table", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable1);
      assertEquals("null", string0);
      
      String string1 = SQLUtil.leftJoin("xw6Oc19", stringArray0, "null", "drop index", stringArray0);
      assertEquals("left join null as drop index on xw6Oc19.alter table = drop index.alter table", string1);
      
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter table\" FOREIGN KEY (alter table) REFERENCES uHq: 468u/=@pk(alter table)", string2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.renderValue(defaultDBTable0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g#}7C,nci=eMct";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "g#}7C,nci=eMct";
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("dyRw(}y-@Q%ca_k", true);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(")");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("k'T_)WLHRGP'G>GOH");
      String string0 = "SELECTIVITY INT";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECTIVITY INT");
      int int0 = 2154;
      DBDataType dBDataType0 = DBDataType.getInstance(2154, "SELECTIVITY INT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1;p(#gU", defaultDBTable0, dBDataType0);
      String string1 = "Ydm1GQi3$";
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table 'SELECTIVITY INT'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("callserv");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" failed", "8J", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("callserv", defaultDatabase0);
      dBCatalog0.getTable("callserv", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isQuery("select intoprimary key");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intoprimary key");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cannot sIR transacton p", defaultDBTable0, 17, "cannot sIR transacton p");
      MockFile mockFile0 = new MockFile("cannot sIR transacton p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "|)!([-,<;;", false, "cannot sIR transacton p");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("cannot sIR transacton p NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      SQLUtil.removeComments("UNIQUE ");
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.mutatesStructure("drop table");
      SQLUtil.mutatesStructure("UNIQUE ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UNIQUE ";
      stringArray0[1] = "UNIQUE ";
      stringArray0[2] = "UNIQUE ";
      stringArray0[3] = "UNIQUE ";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (UNIQUE , UNIQUE , UNIQUE , UNIQUE )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-r>0";
      stringArray0[1] = "-r>0";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = SQLUtil.join("-r>0", "", stringArray0, "i4V'Vh*h", "", stringArray0);
      assertEquals("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", string0);
      
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-r>0 join i4V'Vh*h as  on .-r>0 = .-r>0 and .-r>0 = .-r>0 and . = . and . = .", defaultDBTable0, (-196), "oJrO}nzN;8V");
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, 0, ":lh`3P WGM!c=.a");
      DBSequence dBSequence0 = new DBSequence("", "", "A{%J_90ZWQCeHJ");
      String string1 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&pdate:6-(m:epiw@{elf4f6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("NCLHB", false, "NCLHB", "NCLHB");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT NCLHB ", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dlete";
      stringArray0[1] = "dlete";
      stringArray0[2] = null;
      stringArray0[3] = "xKv1HIR+t,gp";
      stringArray0[4] = "xKv1HIR+t,gp";
      stringArray0[5] = "xKv1HIR+t,gp";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "xKv1HIR+t,gp";
      stringArray1[1] = "xKv1HIR+t,gp";
      stringArray1[2] = "xKv1HIR+t,gp";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "dlete", (String) null, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.renderColumnNames((String[]) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("s*Js");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("QfKL", stringBuilder0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("?RS", true);
      StringBuilder stringBuilder1 = new StringBuilder("()");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-2581));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2581
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "G6L)r/=_I}S'Y#4D4oI";
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "exec";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("exec", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create unique index");
      SQLUtil.mutatesStructure("CLIENT_ENCODING");
      SQLUtil.normalize("deletedrop tablesysxplain_sort_props", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = SQLUtil.normalize(",1%;J,2PBFA//~M`yH*:", false);
      assertEquals(", 1 % ; J, 2PBFA / / ~ M ` yH * :", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }
}
