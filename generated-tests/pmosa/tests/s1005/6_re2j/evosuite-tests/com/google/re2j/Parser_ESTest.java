/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:50:28 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("*p", 2221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1404);
      Parser parser0 = new Parser("", (-1404));
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      try { 
        Parser.parse("missing closing )", (-1404));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("|*91 0[v!l3<rt,", (-380));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      Parser.parse("p", 2221);
      String string0 = "Rqqq`6-<S\"2/ P2";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse(")TY`Yj_V;", 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("(?P<", (-363));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("p(?P(", (-1715));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("6(", 385);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `6(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("(/", 8420);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Parser parser0 = new Parser("", 3923);
      Parser.parse("", 3923);
      Regexp regexp0 = Parser.parse("", 180);
      Parser.subarray((Regexp[]) null, 41, 41);
      Regexp regexp1 = Parser.parse("trailing backslash at end of expression", 1846);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 77;
      String string0 = "(?P<";
      try { 
        Parser.parse("(?P<", 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      String string0 = "#\\-GVID]";
      Regexp regexp0 = Parser.parse("#-GVID]", 343);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int0 = 0;
      Regexp regexp2 = Parser.parse("#-GVID]", 0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[3] = regexp4;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^a", 1076);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "+Ea:0S@_u+ q]he]&g";
      int int0 = (-807);
      try { 
        Parser.parse("+Ea:0S@_u+ q]he]&g", (-807));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1059;
      Parser parser0 = new Parser("", 1059);
      Parser.parse("", 2064);
      Parser.subarray((Regexp[]) null, 1059, 1059);
      String string0 = "Q{MVtX:";
      Parser.parse("Q{MVtX:", 4);
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, (-3970), (-3970));
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Parser.parse("{)I4", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 137;
      try { 
        Parser.parse("J+-u5D[HFh_5\"/xTvo", 137);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[HFh_5\"/xTvo`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Parser.parse("C[", (-2968));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-2071);
      String string0 = "[";
      try { 
        Parser.parse("[", (-2071));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Parser.parse("[:-#-HcWK$+", (-2779));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Parser.parse("pxmi)UeP6U?;bO", 1473);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", (-2639));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("STerm", 42);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("_12*Y]4.q @^Mk;x/\"h", 173782);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("", 173782);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("STerm", 173782);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp0);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("% IDnt>6x|8M/N>", (-212));
      regexpArray0[6] = regexp7;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp8 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = Parser.parse("", 0);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, (-299));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        Parser.parse("(", 3129);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">|R}", 1029);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p|", (-1027));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v|", 112);
      Parser parser0 = new Parser("v|", 112);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 112, (-1861));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "\\";
      Regexp regexp0 = Parser.parse("", 492);
      int int0 = 1402;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "NbqIw \\";
      int int0 = 109;
      Regexp regexp0 = Parser.parse("NbqIw ", 109);
      String string1 = "Hangul";
      int int1 = (-2596);
      Parser parser0 = new Parser(string1, int1);
      int int2 = (-2);
      Parser.parse(string0, int2);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      int int3 = 0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "QQ~r*fN8VW4*o=u";
      int int0 = 8025;
      Parser parser0 = new Parser("QQ~r*fN8VW4*o=u", 8025);
      Parser.parse("QQ~r*fN8VW4*o=u", 8025);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 8025);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      int int0 = 0;
      Regexp regexp3 = Parser.parse("[:digit:]", 0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      regexp3.reinit();
      Regexp regexp6 = Parser.parse("[:digit:]", 0);
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_TEXT;
      regexp1.op = regexp_Op2;
      regexpArray0[6] = regexp6;
      int int1 = 54;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 54, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = new Parser(".", (-1967));
      Regexp regexp0 = Parser.parse(".", (-1967));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser$Stack", (-1212));
      regexpArray0[0] = regexp0;
      int int0 = 0;
      Regexp regexp1 = Parser.parse("com.google.re2j.Parser$Stack", 0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("com.google.re2j.Parser$Stack", 0);
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-1212));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "|gkOw#%(Upfe}Df`0ir";
      int int0 = 608;
      Parser parser0 = new Parser("|gkOw#%(Upfe}Df`0ir", 608);
      Regexp[] regexpArray0 = new Regexp[6];
      try { 
        Parser.parse("|gkOw#%(Upfe}Df`0ir", 608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `|gkOw#%(Upfe}Df`0ir`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser.parse("~+?GWc+Dq>bm", 101);
      try { 
        Parser.parse("[:_5\"/xTvo", (-807));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:_5\"/xTvo`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "\\p-GVID]";
      int int0 = (-3778);
      Parser.parse("p-GVID]", (-3778));
      String string1 = null;
      Parser parser0 = new Parser((String) null, (-3778));
      int int1 = 77;
      Parser.parse("po", 77);
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "";
      int int0 = (-1343);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("P_5\"/xTvo", (-1343));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse(string0, int0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      int int1 = 65;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      int int2 = (-1934);
      int int3 = 124;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Parser.parse("&wVz_V ^:(F/", 1760);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `&wVz_V ^:(F/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^", (-2499));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = null;
      Parser parser0 = new Parser((String) null, (-1627));
      try { 
        Parser.parse("eaB}U|S|BGtB=WjEs|(", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `eaB}U|S|BGtB=WjEs|(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|_", 81);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 80);
      Regexp regexp0 = Parser.parse("5gr+", 3940);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = new Parser("", (-511));
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("yl$.JGo%un;{", (-987));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-987), (-511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0006", (-2688));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("\u0000", 49);
      regexpArray0[0] = regexp0;
      regexp0.min = 2928;
      regexp0.max = 119997;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 49, 40);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000N", 1168);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser.parse("P", 1527);
      try { 
        Parser.parse("iQ%[ZVJ(p@,ht=Ob", 3568);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[ZVJ(p@,ht=Ob`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007mz_NR@41g'y;Hpvr", 53);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@,", 0);
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("DO0pC^j:CndZ*?Sb:!", 2071);
      Regexp regexp2 = Parser.parse("H/~1e{#", 36);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("JGm\n", 4621);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "[:^alpha:]";
      int int0 = 1000;
      Parser parser0 = new Parser("[:^alpha:]", 1000);
      Parser.parse("WX{Vf", (-1338));
      String string1 = "(?(F/";
      try { 
        Parser.parse("(?(F/", 1000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 817);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "Xn'55\\xmi)UeP6U?;bO";
      int int0 = (-371);
      Regexp[] regexpArray0 = new Regexp[7];
      int int1 = 0;
      Regexp regexp0 = Parser.parse("com.google.re2j.UnicodeTables", 0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      try { 
        Parser.parse("Xn'55xmi)UeP6U?;bO", (-371));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = new Parser("Lydian", 1006);
      Regexp regexp0 = Parser.parse("^?be|", 844);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Parser parser0 = new Parser((String) null, (-3));
      Parser.parse("Zp", 66);
      try { 
        Parser.parse("o,44%[", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser parser0 = new Parser("\f", 40);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("QD$G/|sP'>$", 40);
      Regexp regexp1 = Parser.parse("\f", 40);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp2);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp4);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp6);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp_Op0);
      regexpArray0[8] = regexp9;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-W{10FFFFM]", 2168);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-1967);
      Parser parser0 = new Parser("p%a730N3u'[^w.", (-1967));
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      try { 
        Parser.parse("p%a730N3u'[^w.", (-1443));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^w.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("~|#+|~I'A:w4Hk;f._0", 93);
      Parser parser0 = new Parser("qZZ!q&e<0-8U1-u5O$", (-2644));
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp1);
      Regexp regexp4 = new Regexp(regexp2);
      Regexp regexp5 = Parser.parse("~|#+|~I'A:w4Hk;f._0", (-2644));
      Regexp regexp6 = new Regexp(regexp5);
      Regexp regexp7 = new Regexp(regexp0);
      Regexp regexp8 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-2644), 3755);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:t:]", (-248));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "|lI";
      int int0 = 2476;
      Regexp regexp0 = Parser.parse("|lI", 2476);
      int int1 = 104;
      regexp0.reinit();
      Parser parser0 = new Parser((String) null, 104);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 2476);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("{9>", 1505);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexpArray0[3] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 309, 1505);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">C", (-3));
      Regexp regexp1 = Parser.parse("C", (-3));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("()", 6972);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Parser.parse("\"(C7OI:0)(>7", (-248));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `\"(C7OI:0)(>7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":PBI~`\t2slGaqd", 52);
      Parser.parse("QD$G/|sP'>$", 105);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 105, 1815);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ng\rRxFFD", (-363));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FHFT}", 20);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FHFT}", (-363));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x0-{10FHFT}", (-923));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Parser parser0 = new Parser("[:]aha:", 1000);
      Regexp regexp0 = Parser.parse("[:]aha:", 1000);
      Regexp regexp1 = Parser.parse("[:]aha:", 43203);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("[:]aha:", 105);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", (-1027));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser.parse("&<md8; 0-^_BvUG}", 97);
      Parser parser0 = new Parser("B>2zv`6/RHCa", (-936));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Fy]vh<D6", 1237);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.max = 1237;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 1237, 1237);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP6", 1476);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Parser.parse("PC", 1476);
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 1476, 1476);
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser.parse("\u0000N", 1168);
      Parser parser0 = new Parser("\u0000N", (-1));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "(?:)";
      int int0 = 4952;
      Parser.parse("(?:)", 4952);
      String string1 = "n|6f)Qn)&R(1sD";
      try { 
        Parser.parse("n|6f)Qn)&R(1sD", 4952);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "(?";
      int int0 = 92;
      Parser parser0 = new Parser("(?", 92);
      String string1 = "\\D";
      Parser.parse("D", 92);
      try { 
        Parser.parse("(?", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Parser.parse("i:dG:[G &K-Ly)", 2881);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[G &K-Ly)`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = new Parser("(?(?:)", 2881);
      try { 
        Parser.parse("EB:z\u0006!)9", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("PP6", (-2071));
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\uD809\uDC70-\uD809\uDC73]6", 760);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser.parse("missing argument to repetition operator", 1168);
      try { 
        Parser.parse("x{M}F[-#lHcWK$+", 1012);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-#lHcWK$+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        Parser.parse("oRFv[-b(x", (-2071));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-b(x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", 2928);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Parser.parse("{OL", 1505);
      int int0 = 2;
      Parser.parse("com.google.re2j.Unicode", 2);
      try { 
        Parser.parse("'M4w[%J4mc'\u0002o1N##", 1540);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[%J4mc'\u0002o1N##`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 2137);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Parser.parse("\b", 92);
      Parser.parse("\b", 92);
      Parser parser0 = new Parser("r&\"^]nz$?)K|;W", 92);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse("x{M}F[-#-HcWK$+", (-1919));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-#-HcWK$+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 16;
      try { 
        Parser.parse("x{M}[-#-HcWK$", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-#-HcWK$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("WNVQDzp3?DSV", 93);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Parser.parse("(QU", 2504);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(QU`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("al\"M#-.&*HnSZ", 40);
      Parser parser0 = new Parser("al\"M#-.&*HnSZ", 102);
      Regexp regexp1 = Parser.parse("Malayalam", 40);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser.parse("d", (-3235));
      Parser parser0 = new Parser("_i=", 41);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^\u0000-xf10FHFT}", (-1027));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\"|y", 3101);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Parser.parse("-N#\"|L|\")%=W{/~w)", 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 97);
      Parser parser0 = new Parser("(?-m:$)", 2919);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 97, 2919);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Parser.parse("(?s-", 1009);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?s-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 97);
      Parser parser0 = new Parser("(?-m:$)", 97);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 97, 97);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@PP6", (-1675));
      Parser parser0 = new Parser("[:^digit:]", 122);
      Parser.parse("(?s:.)", (-1675));
      Regexp regexp1 = Parser.parse("@PP6", 122);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z", 125);
      Regexp regexp1 = Parser.parse("z", 125);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 241);
      Regexp regexp1 = Parser.parse("mke=yLG<{61V", 241);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", 709);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = new Parser("(?i:", 3);
      try { 
        Parser.parse("(?i:", 3440);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      int int0 = 85;
      try { 
        Parser.parse("{hd'Q&;^7?d\u0003,;f[j", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[j`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = new Parser("A", (-1098));
      Regexp regexp0 = Parser.parse("A", 64);
      Regexp regexp1 = Parser.parse("@U3#6wacN'RfNA)/w", (-1098));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 3038;
      Regexp regexp0 = Parser.parse("W,](0/3[B]Gd^9K", 3038);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      try { 
        Parser.parse("W,](0/3[B]Gd^9K", 437);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `W,](0/3[B]Gd^9K`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Parser.parse("W,](0/3[B]GdK", (-211));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `W,](0/3[B]GdK`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Parser.parse("XJ|Xy)9U", 8140);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "LKRoIc[.-";
      int int0 = 687;
      Parser parser0 = new Parser("LKRoIc[.-", 687);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      int int1 = 57;
      try { 
        Parser.parse("LKRoIc[.-", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[.-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("k$%+{.RI|KQ", 225);
      regexp0.max = 119980;
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = regexp0.subs;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1060, 119980);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser.parse("jIE`uN~-|J$=J", (-1199));
      Parser parser0 = new Parser("h|\"HWk(OC(", (-1199));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PubI~|:|:O^E`O?Y&", 8161);
      Parser parser0 = new Parser((String) null, 42624);
      Regexp regexp1 = Parser.parse("n6&]", 8161);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 1716;
      Parser parser0 = new Parser("XJ|Xy)9U", 1716);
      try { 
        Parser.parse("XJ|Xy)9U", 1716);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Regexp regexp0 = Parser.parse("HMzE p3Mux$\u0004", (-2084));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Parser.parse("(?U:", 1009);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?U:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-2055);
      Parser.parse("D", (-2055));
      try { 
        Parser.parse("P{*Pi^i+", (-2055));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Yd\u0001Ur5Sx7*XY_", 1928);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      int int0 = 43447;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 64);
      Regexp regexp1 = Parser.parse(", qT#I&%{5,GFB}BIgV", 64);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser.parse("PP|6", (-2071));
      int int0 = 64;
      Parser parser0 = new Parser("PP|6", 64);
      try { 
        Parser.parse("(?P<(?P<aMP'n<(l", (-119));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
