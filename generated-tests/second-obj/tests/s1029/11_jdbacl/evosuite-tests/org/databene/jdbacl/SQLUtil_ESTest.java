/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:56:41 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Calendar;
import java.util.List;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.LockingPolicy;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.store.access.btree.BTree;
import org.databene.commons.AssertionError;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.expression.Function;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Class<Annotation> class0 = Annotation.class;
      TypedPropertyMutator typedPropertyMutator0 = new TypedPropertyMutator(class0, " on ", false);
      defaultDBTable0.equals(typedPropertyMutator0);
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("oEn.km>4W;<%]i4PJ", defaultDBTable0, 8, "oEn.km>4W;<%]i4PJ");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("oEn.km>4W;<%]i4PJ OEN.KM>4W;<%]I4PJ NULL", string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
      assertEquals("SELECT * FROM null WHERE ", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#*H";
      stringArray0[1] = "LOGGED";
      stringArray0[2] = "LOGGED";
      stringArray0[3] = "LOGGED";
      String string0 = SQLUtil.renderColumnListWithTableName("LOGGED", stringArray0);
      assertEquals("LOGGED.#*H, LOGGED.LOGGED, LOGGED.LOGGED, LOGGED.LOGGED", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = SQLUtil.isDDL("alter index");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("drop index");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBPackage dBPackage0 = new DBPackage("bK<L[QMxk-`S0#", (DBSchema) null);
      String string0 = SQLUtil.renderValue(dBPackage0);
      assertEquals("bK<L[QMxk-`S0#", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "call$f%?n:";
      stringArray0[1] = "call$f%?n:";
      stringArray0[2] = "call$f%?n:";
      stringArray0[3] = "call$f%?n:";
      String string0 = SQLUtil.innerJoin("call$f%?n:", stringArray0, "PRIMARY KEY ", "n]_U@i[M&'7Lw|&R#/", stringArray0);
      assertEquals("PRIMARY KEY  as n]_U@i[M&'7Lw|&R#/ on call$f%?n:.call$f%?n: = n]_U@i[M&'7Lw|&R#/.call$f%?n: and call$f%?n:.call$f%?n: = n]_U@i[M&'7Lw|&R#/.call$f%?n: and call$f%?n:.call$f%?n: = n]_U@i[M&'7Lw|&R#/.call$f%?n: and call$f%?n:.call$f%?n: = n]_U@i[M&'7Lw|&R#/.call$f%?n:", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create table ";
      String string0 = SQLUtil.join("create table ", "r>:", stringArray0, "80000043-00d0-fd77-3ed8-000a0a0b1900", "create table ", stringArray0);
      assertEquals("create table  join 80000043-00d0-fd77-3ed8-000a0a0b1900 as create table  on r>:.create table  = create table .create table ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isDML("H@c&npH<__Nj#UXO6%1");
      String string0 = SQLUtil.removeComments(" ADD ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ADD ";
      stringArray0[1] = "H@c&npH<__Nj#UXO6%1";
      stringArray0[2] = " ADD ";
      stringArray0[3] = " ADD ";
      String string1 = SQLUtil.leftJoin("H@c&npH<__Nj#UXO6%1", stringArray0, "p", " ADD ", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "UNIQUE ");
      SQLUtil.addOptionalCondition("UNIQUE ", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      SQLUtil.innerJoin("h@c&nph<__n", stringArray0, "", "'a~", stringArray0);
      defaultDBTable0.getReferrers();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DefaultDBTable cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("u1*");
      tableContainer0.getSchema();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "u1*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n*7<t+~x`Rgcm", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n*7<t+~x`Rgcm";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM n*7<t+~x`Rgcm WHERE n*7<t+~x`Rgcm = 'n*7<t+~x`Rgcm'", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("yos@(*[FKc80/B$r");
      SQLUtil.addRequiredCondition("PUBLIC", stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("PUBLIC");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.normalize("0sL5B'-]`hg'+h", true);
      assertEquals("0sL5B '-]`hg' + h", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0sL5B'-]`hg'+h";
      stringArray0[1] = "inner";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(0sL5B'-]`hg'+h, inner, )", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      assertEquals(0, jdbcDataSource0.getTraceId());
      
      SQLUtil.normalize("(", true);
      DBDataType dBDataType0 = DBDataType.getInstance(42, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT ", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("(3,1)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.isDDL("`M");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.normalize("D2AfH5}6x<{Lw}p;!qL", true);
      DBDataType.getInstance((-760), "updateqi7bj j{b=-");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(4);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "YIvC~/Ge.Qu^";
      stringArray0[1] = "i1w_h[ndj]";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "i1w_h[", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, (NameSpec) null);
      assertEquals("UNIQUE (YIvC~/Ge.Qu^, i1w_h[ndj])", string0);
      
      Integer.compareUnsigned(8, 216);
      dBUniqueConstraint0.equals((Object) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType.getInstance(8, ",j\"yN!T2pP-");
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT i1w_h[ ", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "gg1>?N)*8,+Me&?n{";
      SQLUtil.mutatesDataOrStructure("deletekeos");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deletekeos");
      defaultDBTable0.getUniqueConstraints(true);
      String string1 = "SUBTRACT ";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("SUBTRACT ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(74, "update");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jxx", defaultDBTable1, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.getForeignKeyConstraint();
      Integer integer2 = RawTransaction.COMMIT;
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = null;
      try {
        internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator(internalTransactionCoordinator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator$MetaDataTransactionCoordinator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = streamTokenizer0.nval;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYSCS_CHECK_TABLE", true, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      int int0 = Function.CHAR_LENGTH;
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT SYSCS_CHECK_TABLE ", string1);
      
      String string2 = SQLUtil.removeComments("CONSTRAINT SYSCS_CHECK_TABLE ");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(23);
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "A}", false, stringArray0);
      String string0 = SQLUtil.normalize("NCLOB", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint0.setName(" = ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      String string1 = SQLUtil.removeComments("alter indexu");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("yos@(*[FKc80/B$r");
      CompositeDBObject<TableContainer> compositeDBObject0 = (CompositeDBObject<TableContainer>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(", ", compositeDBObject0);
      SQLUtil.addRequiredCondition("PUBLIC", stringBuilder0);
      assertEquals("yos@(*[FKc80/B$r and PUBLIC", stringBuilder0.toString());
      
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SchemaDescriptor.STD_SYSTEM_DIAG_SCHEMA_NAME;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SYSCS_DIAG");
      DBDataType dBDataType0 = DBDataType.getInstance((-1843), "&)60P2/rc!i");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&)60P2/rc!i", defaultDBTable1, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SYSCS_DIAG", defaultDBTable1, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn1);
      SQLUtil.isQuery("qo.CN. 1");
      DBDataType.getInstance(1643, "update");
      SQLUtil.normalize("qo.CN. 1", true);
      String string2 = SQLUtil.removeComments("]O_z=L");
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("gg1>?N)*8,+Me&?n{");
      assertNull(boolean0);
      
      System.setCurrentTimeMillis(3585L);
      System.setCurrentTimeMillis(3585L);
      String string0 = SQLUtil.normalize("^iv!P{/Tw0(", false);
      assertEquals("^ iv ! P { / Tw0 (", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = BTree.PROPERTY_ALLOWDUPLICATES;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("org.apache.derby.iapi.types.XML");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "allowDuplicates", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".");
      boolean boolean0 = SQLUtil.isProcedureCall(".");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize(".", false);
      assertEquals(".", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("CONSTRAINT ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CONSTRAINT ", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CONSTRAINT ";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CONSTRAINT ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (CONSTRAINT , ., .)", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isDML("SEQUENCE_NAME");
      char char0 = '*';
      char char1 = '\'';
      int int0 = 91;
      StringBuilder stringBuilder0 = new StringBuilder(91);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("SEQUENCE_NAME", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(91, 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 91
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2504.672514056;
      SQLUtil.renderNumber(streamTokenizer0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      columnDescriptorList0.add((Object) mockHijrahDate0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "UNIQUE ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      stringArray0[0] = "";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBDataType.getInstance(3750, "update");
      stringBuilder0.append((Object) stringBuilder0);
      SQLUtil.addRequiredCondition("", stringBuilder0);
      SQLUtil.normalize("create unique indexdeletekeos", false);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.removeComments("f");
      SQLUtil.isDDL("f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName("delete");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "renameyivc~/ge.qu^ = 'yivc~/ge.qu^' and i1w_h[ndj] = 'i1w_h[ndj]'", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2504.672514056;
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec1);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(stringArray0[0], stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1034, (Object) stringBuilder1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1034
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      BasicUUID basicUUID0 = new BasicUUID();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      basicUUID0.cloneMe();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      int int0 = LockingPolicy.MODE_RECORD;
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      int int1 = Calendar.DAY_OF_YEAR;
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Integer integer2 = new Integer((-121));
      DBDataType dBDataType0 = DBDataType.getInstance(921, "drop indexinsert$f%?n:");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xx", defaultDBTable0, dBDataType0, integer1, integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("xx, xx", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      System.setCurrentTimeMillis(0L);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBPackage dBPackage0 = new DBPackage("alter index", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("alter index", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("alter index.alter index", string0);
      
      SQLUtil.parseColumnTypeAndSize("alter index.alter index");
      boolean boolean0 = SQLUtil.isQuery("alter index.alter index");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("call");
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("call", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.typeAndName(compositeDBObject0);
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("0g<wr2:I^:2gu%B:", true);
      assertEquals("0g < wr2 : I ^ : 2gu % B :", string0);
      
      StringReader stringReader0 = new StringReader("0g<wr2:I^:2gu%B:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "0g < wr2 : I ^ : 2gu % B :";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable1);
      int int0 = Function.CHAR_LENGTH;
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
      
      SQLUtil.removeComments("0g<wr2:I^:2gu%B:");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(4);
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "A}", false, stringArray0);
      String string0 = SQLUtil.normalize("NCLOB", false);
      assertEquals("NCLOB", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT A} PRIMARY KEY (, , , )", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(1023);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = new Integer((-197848344));
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.COMMIT;
      String string0 = "SELECT * FROM ";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, 1465, "u88_uSXPkYi(E'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: u88_uSXPkYi(E'
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("$uCRd5=SW", true);
      StringReader stringReader0 = new StringReader("K$HkB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "$ uCRd5 = SW", true, (String[]) null);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      int int0 = Function.CHAR_LENGTH;
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.removeComments("K$HkB");
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("CONSTRAINT \"$ uCRd5 = SW\" ", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = BTree.PROPERTY_ALLOWDUPLICATES;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getId();
      columnDescriptorList0.getColumnDescriptor((UUID) null, 74);
      DBDataType dBDataType0 = DBDataType.getInstance(370, ";e");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("allowDuplicates", defaultDBTable1, dBDataType0, integer0);
      boolean boolean0 = FBBlob.SEGMENTED;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter session", defaultDBTable1, dBDataType0);
      columnDescriptorList0.add((Object) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      defaultDBTable1.getUniqueConstraint((String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Smu=G~)R ]NrSj");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      assertTrue(defaultDBTable1.equals((Object)defaultDBTable2));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SQLUtil.normalize(",$DDWK\"HflSOz8", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ", other plugin ";
      stringArray0[1] = ",$DDWK\"HflSOz8";
      stringArray0[3] = "select intohml8jw)yv,";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("call", (String[]) null, "exec", "select intohml8jw)yv,", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i1w_h[";
      stringArray0[1] = "i1w_h[";
      stringArray0[2] = "setObject(String,Object,int,int)";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "setObject(String,Object,int,int)", false, stringArray0);
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.COMMIT;
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Integer integer4 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("SYSCS_GET_USER_ACCESS", defaultDBTable0, 1081, "setObject(String,Object,int,int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "alter materialized view$f%?n:";
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view$f%?n:");
      DBSequence dBSequence0 = new DBSequence("alter materialized view$f%?n:", "|OgG\u0006|dSgjlK(+6", "alter materialized view$f%?n:");
      SQLUtil.ownerDotComponent(dBSequence0);
      String string1 = ".CQ*~\"t;5S0z";
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".CQ*~\"t;5S0z";
      stringArray0[1] = "alter materialized view$f%?n:";
      stringArray0[2] = "alter materialized view$f%?n:";
      stringArray0[3] = "alter materialized view$f%?n:";
      String string2 = "DATE";
      BigInteger bigInteger0 = BigInteger.ONE;
      dBSequence0.setMaxValue(bigInteger0);
      stringArray0[4] = "DATE";
      stringArray0[5] = "|OgG\u0006|dSgjlK(+6";
      SQLUtil.join((String) null, ".CQ*~\"t;5S0z", stringArray0, (String) null, "", stringArray0);
      TableContainer tableContainer0 = new TableContainer("alter materialized view$f%?n:");
      tableContainer0.getTable("alter materialized view$f%?n:");
      dBSequence0.setCycle(boolean0);
      tableContainer0.getTables(false);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[&^E>lm[", false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(4);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i1w_h[";
      stringArray0[1] = "i1w_h[";
      stringArray0[2] = "setObject(String,Object,int,int)";
      stringArray0[3] = "i1w_h[";
      stringArray0[4] = "i1w_h[";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "setObject(String,Object,int,int)", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      Integer integer0 = new Integer(4);
      DBDataType.getInstance(1448, "setObject(String,Object,int,int)");
      Integer.remainderUnsigned(4, 4);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertTrue(defaultDBTable0.equals((Object)defaultDBTable1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = BTree.PROPERTY_UNIQUE_WITH_DUPLICATE_NULLS;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2172);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer(2172);
      Integer integer2 = RawTransaction.COMMIT;
      DBDataType.getInstance(98, "drop materialized view.q&|'|j");
      SQLUtil.mutatesDataOrStructure("call.q&|'|j");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("gg1>?N)*8,+Me&?n{", false);
      DBDataType dBDataType0 = DBDataType.getInstance(42, "xtUDnt_*RR*3*KC");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      PipedInputStream pipedInputStream0 = new PipedInputStream(42);
      Charset.defaultCharset();
      String string0 = FBConnectionProperties.TIMESTAMP_USES_LOCAL_TIMEZONE_PROPERTY;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.ap", defaultDBTable0, dBDataType0, integer1, integer5);
      SQLUtil.typeAndName(defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("selectallowduplicates");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "org.postgreql.ds.common.BaseDatSource", false, "timestampUsesLocalTimezone");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'timestampUsesLocalTimezone' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = BTree.PROPERTY_ALLOWDUPLICATES;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("create unique indextruncate");
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.mutatesDataOrStructure("select into");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("gg1>?N)*8,+Me&?n{");
      String string0 = BTree.PROPERTY_ALLOWDUPLICATES;
      int int0 = 2172;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2172);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      defaultDBTable1.getUniqueConstraint(stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("N<DX", false, defaultDBTable0, "N<DX");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      stringBuilder0.append(0.0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("N<DX", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = BTree.PROPERTY_ALLOWDUPLICATES;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      BasicUUID basicUUID0 = new BasicUUID();
      defaultDBTable1.getForeignKeyConstraints();
      int int0 = 81;
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getId();
      String string1 = "insert^>[qfl&q:nzbs";
      String string2 = "udate";
      DBDataType dBDataType0 = DBDataType.getInstance(81, "udate");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert^>[qfl&q:nzbs", defaultDBTable1, dBDataType0, integer0);
      columnDescriptorList0.add((Object) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("allowDuplicates", defaultDBTable0, 81, "insert^>[qfl&q:nzbs");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      DBDataType.getInstance(81, ".readBlob\";");
      DBDataType.getInstance(81, "allowDuplicates");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("INSERT^>[QFL&Q:NZBS", defaultDBTable0, dBDataType0, integer0);
      columnDescriptorList0.add((Object) "+");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2504.672514056;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.renderNumber(streamTokenizer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      SQLUtil.renderColumnNames(stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      TableContainer tableContainer0 = new TableContainer("execallowduplicates");
      Class<DefaultDatabase> class0 = DefaultDatabase.class;
      TypedPropertyMutator typedPropertyMutator0 = new TypedPropertyMutator(class0, "", false);
      SQLUtil.substituteMarkers("(e)", "e", typedPropertyMutator0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" = ", (DBTable) null, (-1955395688), "(e)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.normalize("alteu sessionalter indexunique", true);
      StringReader stringReader0 = new StringReader("alteu sessionalter indexunique");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.renderNumber(streamTokenizer0);
      streamTokenizer0.commentChar((-4));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- 0");
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "Xn.R?y");
      dBDataType0.isAlpha();
      Boolean boolean1 = new Boolean("alteu sessionalter indexunique");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      int int0 = RawStoreFactory.DEFAULT_ENCRYPTION_BLOCKSIZE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "- 0", true, (String[]) null);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getIndex("- 0");
      SQLUtil.typeAndName((DBObject) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter indexalter indexunique");
      mockPrintWriter0.write("h@");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.normalize("alteu sessionalter indexunique", true);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, "XEwr{{x%", "alter indexalter indexunique", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("BLOB", 141);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-e#jJFq=bukc9is*rt5");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("alter tablealter in", 42);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.normalize("tq*&Oo=r{UP(GjKPG", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-e#jJFq=bukc9is*rt5");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Q{Ok4CW}oS'S";
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("Q{Ok4CW}oS'S");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = TypeId.TIMESTAMP_NAME;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      StringReader stringReader0 = new StringReader("create table");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("BLOB", 141);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-e#jJFq=bukc9is*rt5");
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "9(`'7vsB5{_XTE");
      stringReader0.read();
      dBDataType0.isNumber();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("alter tablealter in", 42);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      dBDataType0.isAlpha();
      Integer integer1 = RawTransaction.COMMIT;
      SQLUtil.normalize("-e#jJFq=bukc9is*rt5", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-e#jJFq=bukc9is*rt5");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("9(`'7vsB5{_XTE", defaultDBTable0, 99, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YIvC~/Ge.Qu^";
      stringArray0[1] = "i1w_h[ndj]";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("YIvC~/Ge.Qu^ = 'YIvC~/Ge.Qu^' AND i1w_h[ndj] = 'i1w_h[ndj]' AND null = null AND null = null", string0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "YIvC~/Ge.Qu^", false, stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(4);
      String string1 = RawStoreFactory.STREAM_FILE_BUFFER_SIZE_PARAMETER;
      DBDataType dBDataType0 = DBDataType.getInstance(1448, "i1w_h[ndj]");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.COMMIT;
      Integer.getInteger("UAg:M):STag\"Z|u");
      Integer.min(4, (-102641449));
      String string2 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT YIvC~/Ge.Qu^ UNIQUE (YIvC~/Ge.Qu^, i1w_h[ndj], , )", string2);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("YIvC~/Ge.Qu^", defaultDBTable0, dBDataType0, integer0, integer2);
      dBUniqueConstraint0.setDoc("yivc~/ge.");
      String string3 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string3);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d%opind0");
      defaultDBColumn0.setNullable(false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBColumn0.getForeignKeyConstraint();
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "YIvC~/Ge.Qu^ = 'YIvC~/Ge.Qu^' AND i1w_h[ndj] = 'i1w_h[ndj]' AND null = null AND null = null", false, stringArray0);
      String string4 = SQLUtil.renderValue("derby.storage.streamFileBufferSize");
      assertEquals("'derby.storage.streamFileBufferSize'", string4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      BasicUUID basicUUID0 = new BasicUUID();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      basicUUID0.cloneMe();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      int int0 = LockingPolicy.MODE_RECORD;
      SQLUtil.typeAndName(defaultDBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" or ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      String string0 = SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "table null";
      stringArray0[1] = "update";
      stringArray0[2] = "={]FNs!RM0N5RQ8z";
      stringArray0[3] = " or ";
      stringArray0[4] = " or ";
      stringArray0[5] = "/h]{NNVA{-a";
      stringArray0[6] = "update";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("xx", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      SQLUtil.normalize("drop table", true);
      SQLUtil.mutatesDataOrStructure("xx");
      String string1 = TypeId.STRUCT_NAME;
      NameSpec nameSpec2 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec2, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2504.672514056;
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'P';
      streamTokenizer0.nval = (double) 'h';
      stringReader0.read(charArray0);
      streamTokenizer0.ordinaryChars(1, 90123);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.renderNumber(streamTokenizer0);
      StringReader stringReader1 = new StringReader("104");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = Function.CHAR_LENGTH;
      SQLUtil.removeComments(">)a");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(">)a", defaultDBTable0, (-4), "104");
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.normalize(">)a", false);
      TableContainer tableContainer0 = new TableContainer((String) null);
      SQLUtil.removeComments("'q1:!D{Nnijo|_=o");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("yos@(*[FKc80/B$");
      String string0 = "J*";
      CompositeDBObject<TableContainer> compositeDBObject0 = (CompositeDBObject<TableContainer>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("J*", compositeDBObject0);
      SQLUtil.addRequiredCondition("PUBLIC", stringBuilder0);
      String string1 = SchemaDescriptor.SYSSTAT_SCHEMA_UUID;
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }
}
