/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 15:20:55 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.iterator();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSONArray0.fluentSet(989, jSONArray0);
      linkedList0.add("1.2.46");
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      JSONObject jSONObject0 = new JSONObject(3089, false);
      JSONObject jSONObject1 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray0.isEmpty();
      SerializerFeature serializerFeature1 = SerializerFeature.SkipTransientField;
      JSONObject jSONObject2 = new JSONObject(true);
      jSONObject2.fluentPut("1.2.46", jSONObject0);
      JSONArray jSONArray1 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.add("");
      linkedList0.add("");
      linkedList0.retainAll(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)95, (Object) null);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = new JSONArray(94);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(0, (Collection<?>) jSONArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSON.DEFAULT_TYPE_KEY = "1.2.46";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.iterator();
      jSONArray1.getJSONObject((byte)95);
      jSONArray0.indexOf(jSONArray3);
      jSONArray2.fluentSet(3089, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getBigDecimal(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.containsAll(linkedList0);
      jSONArray0.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSONArray0.fluentSet(989, jSONArray0);
      linkedList0.add((String) null);
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentPut("MeFOV6? 6@", (Object) null);
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.getJSONArray(989);
      JSONArray jSONArray2 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.hashCode();
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1133, integer0);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray0.isEmpty();
      jSONArray1.getObject(140, (Type) null);
      System.setCurrentTimeMillis(5764610843043954687L);
      int int1 = 701;
      jSONArray0.getDoubleValue(701);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1134
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      Class<Object> class1 = Object.class;
      jSONArray1.toJavaList(class1);
      Byte byte0 = new Byte((byte)0);
      jSONArray1.getShort((byte)0);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray1.getBooleanValue(989);
      jSONArray1.get(1530);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1), 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = new JSONArray(989);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(3089, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X4fifnG.Hqqw=5=h|8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      linkedList0.add("");
      linkedList0.add("X4fifnG.Hqqw=5=h|8");
      linkedList0.retainAll(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)96, (Object) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONArray0.fluentAdd((Object) linkedList1);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.getJSONArray((byte)96);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 98
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1133, integer0);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray0.isEmpty();
      JSON.DEFFAULT_DATE_FORMAT = "1.2.46";
      System.setCurrentTimeMillis(5764610843043954687L);
      jSONArray0.getDoubleValue(701);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray0.lastIndexOf(sequenceInputStream0);
      jSONArray1.iterator();
      jSONArray1.getJSONObject(701);
      assertEquals(1134, jSONArray0.size());
      
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray1.addAll((Collection<?>) jSONArray2);
      assertTrue(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.MapSortField;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[6] = serializerFeature6;
      linkedList0.iterator();
      JSON.toJSONBytes((Object) null, 3089, serializerFeatureArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedList0.add("gregory");
      jSONArray0.containsAll(linkedList0);
      jSONArray0.addAll((Collection<?>) linkedList0);
      String string0 = jSONArray0.getString(0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.MapSortField;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.toJSONBytes((Object) null, 3089, serializerFeatureArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.containsAll(linkedList0);
      jSONArray0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.indexOf((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X4fifnG.Hqqw=5=h|8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.add("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)96, (Object) null);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = new JSONArray(94);
      jSONArray1.fluentAdd((Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll((int) (byte)96, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 96, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1289, feature0);
      Integer integer1 = new Integer((-976));
      jSONArray1.listIterator(1289);
      jSONArray0.clone();
      jSONArray0.getBoolean(0);
      jSONArray1.remove(0);
      jSONArray0.size();
      Feature feature1 = Feature.SupportArrayToBean;
      jSONArray1.fluentAdd((Object) feature1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-1), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1290
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) serializerFeature0);
      jSONArray1.fluentClear();
      int int0 = (-775);
      Integer integer0 = new Integer((-775));
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      int int1 = 131;
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer1 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        jSONArray3.getBigInteger(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer1 = new Integer(989);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(475);
      jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray2.getBoolean(989);
      Object object0 = new Object();
      jSONArray2.fluentAdd((Object) null);
      jSONArray0.getIntValue(3089);
      jSONArray0.getByte((byte)0);
      jSONArray3.isEmpty();
      jSONArray3.getBigInteger(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentAdd((Object) linkedList0);
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = new JSONArray(989);
      JSONArray jSONArray3 = jSONArray2.fluentSet(989, (Object) null);
      jSONArray3.size();
      jSONArray3.getJSONArray(989);
      ConcurrentHashMap.KeySetView<JSONObject, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(65);
      jSONArray3.addAll(65, (Collection<?>) concurrentHashMap_KeySetView0);
      jSONArray1.indexOf(linkedList0);
      jSONArray2.fluentRetainAll(linkedList0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JSONArray> class0 = JSONArray.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) function0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "Iq&K5p");
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(989, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.equals((Object) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.subList(3089, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1002);
      jSONArray0.isEmpty();
      LinkedList<Feature> linkedList0 = new LinkedList<Feature>();
      Feature feature0 = Feature.AllowISO8601DateFormat;
      linkedList0.addLast(feature0);
      jSONArray0.containsAll(linkedList0);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1002, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1002, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.getTimestamp(139);
      jSONArray1.isEmpty();
      jSONArray0.getObject(106, (Type) class1);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, (Object) null);
      jSONArray2.getByte(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.fluentRemoveAll(linkedList0);
      jSONArray2.relatedArray = (Object) class0;
      jSONArray2.getIntValue(106);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        jSONArray1.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("1.2.46");
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.add("{!$QCKY0Z6SAjw-+F");
      jSONArray0.containsAll(linkedList1);
      JSONArray jSONArray1 = new JSONArray();
      int int0 = 123;
      // Undeclared exception!
      try { 
        jSONArray1.toArray((Class<Feature>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";1d^8.0:8");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(75, ";1d^8.0:8");
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      jSONArray4.toArray();
      jSONArray4.hashCode();
      // Undeclared exception!
      try { 
        jSONArray4.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1, false);
      Collection<Object> collection0 = jSONObject0.values();
      jSONArray0.removeAll(collection0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(352);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 352, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer1 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      jSONArray1.containsAll(jSONArray0);
      jSONArray1.getLongValue(3089);
      ListIterator<Object> listIterator0 = jSONArray3.listIterator(3089);
      assertEquals(3090, jSONArray1.size());
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer1 = new Integer(989);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      jSONArray1.getIntValue((byte)0);
      Class<String> class0 = String.class;
      jSONArray2.getObject(3089, class0);
      jSONArray2.getJSONArray(1061);
      jSONArray0.getDouble(97);
      System.setCurrentTimeMillis(989);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer1 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      int int0 = jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, 3089, serializerFeatureArray0);
      jSONArray1.getIntValue((byte)0);
      jSONArray3.getByte(1819);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray1.getBigInteger(122);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer2 = new Integer((byte)0);
      jSONArray3.set((byte)0, jSONArray1);
      JSONArray jSONArray4 = new JSONArray(3112);
      jSONArray3.set(118, jSONArray4);
      assertEquals(6180, jSONArray1.size());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray2.getObject(3089, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.retainAll(jSONArray0);
      jSONArray0.containsAll(linkedList0);
      int int0 = 104;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      EvoSuiteFile evoSuiteFile0 = null;
      byte byte0 = (byte)72;
      JSONArray jSONArray1 = jSONArray0.fluentSet(100, pascalNameFilter0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-42), (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -42, Size: 101
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer1 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, 3089, serializerFeatureArray0);
      jSONArray1.getIntValue((byte)0);
      jSONArray3.getByte(1819);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray1.getBigInteger(122);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      Integer integer2 = new Integer((byte)0);
      jSONArray1.toArray();
      long long0 = jSONArray2.getLongValue(0);
      assertEquals(6180, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4510);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(3089, true);
      Collection<Object> collection0 = jSONObject0.values();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(collection0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.getFloat((-1652));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.getShort(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Integer integer2 = new Integer(3089);
      jSONArray0.listIterator(989);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      JSON.toJSONBytes((Object) integer1, serializeConfig0, 989, serializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject(true);
      ConcurrentSkipListMap<String, ObjectInputStream> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, ObjectInputStream>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentSkipListMap0);
      jSONObject1.fluentRemove(jSONArray0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.getFloat(3089);
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      JSONArray jSONArray3 = jSONArray0.fluentAddAll(989, (Collection<?>) linkedList0);
      jSONArray0.removeAll(jSONArray1);
      JSONArray jSONArray4 = jSONArray1.fluentAddAll((Collection<?>) jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray4.getShort(3048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3048, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONArray0.containsAll(linkedList1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1701, (Object) null);
      Integer integer0 = new Integer(96);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      Class<String> class0 = String.class;
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray0.getInteger(96);
      Class<SerializerFeature> class1 = SerializerFeature.class;
      List<SerializerFeature> list0 = jSONArray1.toJavaList(class1);
      jSONArray0.listIterator(132);
      Class<JSONArray> class2 = JSONArray.class;
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      jSONArray0.toJavaList(class2);
      JSONArray jSONArray2 = new JSONArray(4140);
      Integer integer1 = new Integer(4140);
      // Undeclared exception!
      try { 
        jSONArray2.addAll((-1423), (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1423, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig.getGlobalInstance();
      Integer integer2 = new Integer(3089);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6dEGY");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getInteger(63);
      Integer integer3 = new Integer(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getString(989);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) linkedList0);
      jSONArray3.getShort(989);
      jSONArray3.getBooleanValue(3089);
      LinkedList<Annotation> linkedList1 = new LinkedList<Annotation>();
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      JSONArray jSONArray4 = jSONArray0.fluentAddAll(63, (Collection<?>) linkedList2);
      jSONArray0.getBooleanValue(64);
      Object object0 = jSONArray4.clone();
      jSONArray4.fluentRemoveAll(linkedList1);
      boolean boolean0 = jSONArray4.equals(object0);
      assertEquals(3090, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.size();
      boolean boolean1 = jSONArray0.equals("[]");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig.getGlobalInstance();
      Integer integer2 = new Integer(3089);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(70);
      jSONArray1.getDouble(989);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6dEGY");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getInteger(70);
      Integer integer3 = new Integer(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getString(989);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) linkedList0);
      jSONArray3.getShort(989);
      jSONArray3.getBooleanValue(1678);
      LinkedList<Annotation> linkedList1 = new LinkedList<Annotation>();
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      JSONArray jSONArray4 = jSONArray0.fluentAddAll(70, (Collection<?>) linkedList2);
      jSONArray0.getBooleanValue(64);
      // Undeclared exception!
      try { 
        jSONArray4.getBigInteger((-2147483647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      jSONArray0.containsAll(linkedList1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1701, (Object) null);
      Integer integer0 = new Integer(104);
      SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONArray1.listIterator(131);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      Byte byte0 = new Byte((byte)108);
      jSONArray1.getShort((byte)72);
      jSONArray0.addAll((Collection<?>) linkedList1);
      jSONArray1.remove((Object) pascalNameFilter0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(3082);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3082, Size: 1702
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      jSONArray0.containsAll(linkedList1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1701, (Object) null);
      Integer integer0 = new Integer(104);
      SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONArray1.listIterator(131);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte)108);
      jSONArray1.getShort((byte)72);
      jSONArray0.addAll((Collection<?>) linkedList1);
      jSONArray1.getBooleanValue(135);
      jSONArray1.remove((int) (byte)72);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) linkedList1);
      jSONArray2.add((Object) null);
      assertEquals(1702, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      jSONArray0.containsAll(linkedList1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1701, (Object) null);
      Integer integer0 = new Integer(104);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONArray1.listIterator(131);
      jSONArray0.getShortValue((byte)72);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte)108);
      jSONArray1.getShort((byte)72);
      jSONArray1.contains((Object) null);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      jSONArray1.getBooleanValue(135);
      jSONArray1.remove((int) (byte)72);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(3082);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3082, Size: 1701
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig.getGlobalInstance();
      Integer integer2 = new Integer(3089);
      jSONArray1.toJSONString();
      jSONArray1.listIterator();
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6dEGY");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getInteger(63);
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray1.fluentAddAll(130, (Collection<?>) linkedList0);
      jSONArray1.getDate(3089);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains(jSONArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.listIterator();
      List<Object> list0 = jSONArray0.subList(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer1 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, 3089, serializerFeatureArray0);
      jSONArray2.getShort(517);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray3.getBooleanValue(3089);
      jSONArray3.lastIndexOf((Object) null);
      jSONArray1.toArray();
      assertEquals(6180, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig.getGlobalInstance();
      Integer integer2 = new Integer(3089);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6dEGY");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getInteger(63);
      Integer integer3 = new Integer(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getString(989);
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      jSONArray1.getDate(0);
      jSONArray2.getInteger(3089);
      jSONArray2.getByte(3089);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer1 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, 3089, serializerFeatureArray0);
      jSONArray1.getIntValue((byte)0);
      jSONArray3.getByte(1819);
      jSONArray1.getString(989);
      byte byte0 = jSONArray3.getByteValue((byte)0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)0;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature2;
      Feature feature3 = Feature.SupportAutoType;
      featureArray0[4] = feature3;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[5] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[6] = feature5;
      Feature feature6 = Feature.InitStringFieldAsEmpty;
      featureArray0[7] = feature6;
      Feature feature7 = Feature.SortFeidFastMatch;
      featureArray0[8] = feature7;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      JSON.toJSON((Object) integer1, serializeConfig0);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(19);
      jSONArray1.getDouble(989);
      jSONArray0.getInteger(19);
      jSONArray0.getDoubleValue(19);
      jSONArray0.getBooleanValue((byte)0);
      jSONArray0.size();
      jSONArray1.getSqlDate(989);
      jSONArray0.listIterator();
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Integer integer2 = new Integer(3089);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6dEGY");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONBytes((Object) integer1, serializeConfig0, 9, serializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      jSONArray1.fluentRemove((Object) jSONObject1);
      jSONArray1.getFloat(0);
      SerializerFeature serializerFeature5 = SerializerFeature.WriteMapNullValue;
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
      boolean boolean0 = jSONArray1.removeAll(jSONArray2);
      assertTrue(jSONArray1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer1 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      int int0 = jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, 3089, serializerFeatureArray0);
      jSONArray1.getIntValue((byte)0);
      jSONArray3.getByte(1819);
      jSONArray1.getBigInteger(122);
      jSONArray1.getShortValue(3089);
      jSONArray2.remove((Object) integer0);
      Integer integer2 = new Integer((short)3089);
      jSONArray3.add((Object) integer2);
      assertEquals(3091, jSONArray1.size());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer2 = new Integer(3089);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = jSONArray1.getBoolean(3089);
      jSONArray0.remove(989);
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      Integer integer3 = new Integer(989);
      jSONArray1.fluentAdd((Object) integer3);
      SerializeConfig serializeConfig1 = new SerializeConfig(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) boolean0, (SerializeConfig) null, 989, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      Class<Object> class1 = Object.class;
      jSONArray1.toJavaList(class1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte)0);
      jSONArray1.getShort((byte)72);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray1.getBooleanValue(989);
      jSONArray1.get(1530);
      assertEquals(6180, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONArray0.containsAll(linkedList1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1701, (Object) null);
      Integer integer0 = new Integer(104);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONArray1.getShortValue(0);
      Class<String> class0 = String.class;
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray0.getInteger(104);
      jSONArray0.listIterator(132);
      jSONArray1.clear();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 110;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(110, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 111
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(110, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 111
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(641);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(1359, jSONArray1);
      jSONArray3.fluentRemove(1359);
      JSONObject jSONObject0 = new JSONObject(3089);
      jSONArray3.getJSONObject(641);
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) null, class0);
      ConcurrentHashMap<String, Integer> concurrentHashMap0 = new ConcurrentHashMap<String, Integer>();
      jSONObject0.fluentPutAll(concurrentHashMap0);
      jSONArray2.getObject(0, (Type) class0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(1224736769);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1224736769, Size: 1359
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator(989);
      jSONArray1.getSqlDate((byte)0);
      jSONArray1.listIterator();
      jSONArray1.getLong(267);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.removeAll(linkedList0);
      jSONArray0.retainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) listIterator0);
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer2 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      jSONArray2.getBoolean(989);
      jSONArray1.remove(2956);
      jSONArray1.size();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) integer2);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, 3089, serializerFeatureArray0);
      jSONArray1.getIntValue((byte)0);
      jSONArray3.getByte(1819);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig.getGlobalInstance();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer2 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(3089);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.clone();
      jSONArray1.remove(2956);
      jSONArray1.size();
      jSONArray0.fluentAdd((Object) integer2);
      boolean boolean0 = jSONArray0.getBooleanValue((byte)72);
      assertEquals(3090, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      Integer integer2 = jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      jSONArray1.getLong(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.clone();
      jSONArray1.remove(2956);
      jSONArray1.size();
      jSONArray0.fluentAdd((Object) integer2);
      jSONArray1.getIntValue((byte)0);
      boolean boolean0 = jSONArray0.getBooleanValue((byte)72);
      assertEquals(3090, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      jSONArray1.getSqlDate((byte)72);
      jSONArray1.listIterator();
      jSONArray1.getLong(267);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.removeAll(linkedList0);
      jSONArray0.retainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) listIterator0);
      assertSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(110, linkedList0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 111
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.getByte(989);
      jSONArray1.getShort((byte)0);
      assertEquals(3090, jSONArray0.size());
      
      jSONArray1.addAll((Collection<?>) jSONArray0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(6180, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)14;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportAutoType;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportNonPublicField;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableSpecialKeyDetect;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.InitStringFieldAsEmpty;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.SortFeidFastMatch;
      featureArray0[8] = feature8;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      pascalNameFilter0.process(class0, "com.alibaba.fastjson.JSONArray", (Object) null);
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      JSON.toJSON((Object) integer1, serializeConfig0);
      int int0 = 63;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      JSON.toJSON((Object) integer1, serializeConfig0);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getInteger(63);
      Integer integer2 = new Integer(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getString(989);
      jSONArray2.size();
      jSONArray1.getDate(989);
      // Undeclared exception!
      try { 
        jSONArray1.getByte((-277));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSON.parseObject(byteArray0, (Type) parameterizedTypeImpl0, (Feature[]) null);
      jSONArray0.remove((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1339, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1339, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      JSON.toJSON((Object) integer1, serializeConfig0);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getInteger(63);
      Integer integer2 = new Integer(3089);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      jSONArray1.getDate(63);
      jSONArray1.getByte(989);
      jSONArray1.getDoubleValue(3089);
      jSONArray1.getComponentType();
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      jSONArray1.getInteger(3089);
      jSONArray0.listIterator(989);
      jSONArray0.getByte(63);
      jSONArray1.getDouble(989);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getFloatValue(989);
      jSONArray0.getSqlDate(63);
      jSONArray1.toJSONString();
      int int0 = (-2150);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-2150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(177);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, linkedList0);
      Integer integer1 = new Integer(139);
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray2 = JSON.toJavaObject((JSON) jSONArray0, class0);
      jSONArray0.fluentSet(139, jSONArray2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getByte(1);
      Class<JSONArray> class1 = JSONArray.class;
      jSONArray1.toJavaList(class1);
      jSONArray1.size();
      // Undeclared exception!
      try { 
        jSONArray2.getInteger(377);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 377, Size: 280
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      jSONArray0.listIterator(989);
      jSONArray1.getTimestamp(989);
      jSONArray1.getFloatValue(989);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray2.listIterator(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)0;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportNonPublicField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportAutoType;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportNonPublicField;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableSpecialKeyDetect;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.InitStringFieldAsEmpty;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.SortFeidFastMatch;
      featureArray0[8] = feature8;
      JSON.parseObject(byteArray0, (Type) class0, featureArray0);
      pascalNameFilter0.process(class0, "com.alibaba.fastjson.JSONArray", (Object) null);
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      JSON.toJSON((Object) integer1, serializeConfig0);
      int int0 = 63;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(989);
      jSONArray0.fluentSet(989, integer0);
      int int0 = 1494;
      Integer integer1 = new Integer(989);
      SerializeConfig.getGlobalInstance();
      jSONArray0.getJSONArray(63);
      // Undeclared exception!
      try { 
        JSON.parseObject("B.Rg$;R\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : B.Rg$;R\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.getTimestamp(139);
      jSONArray1.isEmpty();
      jSONArray0.getObject(106, (Type) class1);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, integer0);
      int int0 = 0;
      jSONArray2.getByte(0);
      Class<JSONArray> class2 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.isEmpty();
      jSONArray0.getObject(106, (Type) class1);
      JSONArray jSONArray2 = new JSONArray(3089);
      jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 139
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.getTimestamp(139);
      jSONArray1.isEmpty();
      jSONArray0.getObject(106, (Type) class1);
      JSONArray jSONArray2 = jSONArray1.fluentSet(0, (Object) null);
      int int0 = 0;
      jSONArray2.getByte(0);
      Class<JSONArray> class2 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      int int0 = 139;
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      Class<Annotation> class0 = Annotation.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.isEmpty();
      jSONArray0.getObject(106, (Type) class1);
      int int1 = (-1629);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        classLoader0.loadClass("1.2.46");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      int int0 = 139;
      Integer integer0 = new Integer(989);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(treeMap0);
      JSON.toJSON((Object) jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      int int0 = 139;
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.isEmpty();
      jSONArray0.getObject(106, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1629));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(710);
      JSONObject[] jSONObjectArray0 = new JSONObject[0];
      jSONArray0.toArray(jSONObjectArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      // Undeclared exception!
      try { 
        SerializerFeature.valueOf("1.2.46");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.serializer.SerializerFeature.1.2.46
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(989);
      JSONObject jSONObject0 = new JSONObject(true);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, jSONObject0);
      int int0 = 1494;
      Integer integer1 = new Integer(1494);
      SerializeConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(139);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(139, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(106);
      JSON.parseObject("");
      jSONArray0.fluentSet(0, (Object) null);
      Integer integer1 = new Integer((-1970));
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) jSONArray0, serializeConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1235);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1235
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      int int0 = 139;
      Integer integer0 = new Integer(139);
      jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.toJSON((Object) integer1, serializeConfig0);
      int int1 = 63;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.add((Object) jSONArray1);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      jSONArray0.addAll(46, (Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-1508));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(109, linkedList0);
      jSONArray1.getInteger(66);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      ParserConfig.getFieldFromCache("can not cast to : ", treeMap0);
      jSONArray0.set(110, (Object) null);
      jSONArray0.getByteValue(110);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.removeAll(linkedList0);
      jSONArray0.addAll(110, (Collection<?>) linkedList0);
      jSONArray0.getDouble((byte)0);
      jSONArray0.getInteger((byte)0);
      assertEquals(111, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator(989);
      jSONArray1.getTimestamp(63);
      jSONArray0.getFloatValue(77);
      jSONArray1.fluentAdd((Object) listIterator0);
      assertEquals(991, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      LinkedList<SerializerFeature> linkedList1 = new LinkedList<SerializerFeature>();
      jSONArray0.set(2698, linkedList1);
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray(3089);
      jSONArray0.add(510, (Object) null);
      jSONArray0.fluentRemoveAll(linkedList1);
      jSONArray1.size();
      jSONArray0.getDate(0);
      assertEquals(2700, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      ParserConfig.getFieldFromCache("can not cast to : ", treeMap0);
      jSONArray0.set(110, (Object) null);
      jSONArray0.getByteValue(110);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.removeAll(linkedList0);
      jSONArray0.addAll(110, (Collection<?>) linkedList0);
      jSONArray0.getTimestamp((byte)0);
      jSONArray0.getFloatValue(110);
      jSONArray0.fluentAdd((Object) null);
      assertEquals(112, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      jSONArray0.set(110, (Object) null);
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray(67);
      // Undeclared exception!
      try { 
        jSONArray0.add((-1015), (Object) treeMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1015, Size: 111
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      jSONArray0.fluentSet(139, integer0);
      int int0 = 63;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1, true);
      Collection<Object> collection0 = jSONObject0.values();
      boolean boolean0 = jSONArray0.containsAll(collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(139, integer0);
      jSONArray0.getByte(63);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 140
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 641;
      JSONArray jSONArray0 = new JSONArray(641);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(1359, jSONArray1);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(1359);
      JSONObject jSONObject0 = new JSONObject(3089);
      ConcurrentHashMap<String, Integer> concurrentHashMap0 = new ConcurrentHashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentHashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      Class<JSONObject> class0 = JSONObject.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONString((Object) jSONObject1, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      int int1 = 3936;
      // Undeclared exception!
      try { 
        jSONArray4.getDate(3936);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3936, Size: 1359
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      jSONArray0.set(110, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 111
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(88);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONString((Object) integer0, serializerFeatureArray0);
      jSONArray0.contains(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.setComponentType(class1);
      jSONArray0.lastIndexOf("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(94);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 134;
      JSONArray jSONArray0 = new JSONArray(158);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1033);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONString((Object) jSONArray0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      Integer integer0 = new Integer(1033);
      jSONArray0.indexOf(integer0);
      jSONArray0.iterator();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) serializerFeature1);
      boolean boolean0 = jSONArray0.removeAll(jSONArray2);
      assertEquals(0, jSONArray2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<JSONArray> class0 = JSONArray.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.add((-605), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -605, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-123008);
      // Undeclared exception!
      try { 
        jSONArray0.set((-123008), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set((-1), jSONArray0);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2020);
      jSONArray0.fluentAdd(0, (Object) integer0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("1.2.46");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      ListIterator<Object> listIterator0 = jSONArray1.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1619);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1619), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1619, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(88);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set((-1), (Object) null);
      int int0 = 109;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(109);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 109, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.size();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2875);
      int int1 = (-1);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-2875), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2875, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = new Integer((-2875));
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-2875));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1976);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      String string0 = "";
      Class<Object> class1 = Object.class;
      String string1 = "c!Z:\\h";
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes((Object) jSONArray0, serializerFeatureArray0);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1509), (Type) class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(665, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 665, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 9999999;
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(957, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 957, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3809);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3809, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.lastIndexOf(linkedList1);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-620));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -620
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("1.2.46");
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      jSONArray0.containsAll(linkedList1);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(968);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 968, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1589));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1013, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1013, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.remove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<String> class0 = String.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(289);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 289, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)2;
      Charset charset0 = Charset.defaultCharset();
      jSONArray0.getComponentType();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      charset0.encode("1.2.46");
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowComment;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.UseObjectArray;
      featureArray0[5] = feature5;
      JSON.parseObject(byteArray0, (int) 2, (int)  (-68), charset0, (Type) null, featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-507), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "";
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-3563), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.clear();
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue((-1549));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2294), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("c!Z:h", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class0, class1, (Field) null, 3089, 3089, 986);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      boolean boolean0 = jSONArray0.containsAll(linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add((-1208), (Object) "hS*ZE&}");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1208, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-4012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.isEmpty();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1), (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1829);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      boolean boolean0 = jSONArray0.addAll((Collection<?>) list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-2539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-2454));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(1892);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1892, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 25;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(1188);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1188
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(158);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(944);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 944, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(2497);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2497, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(986);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      int int0 = 950;
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(950);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 950, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.fluentClear();
      Integer integer0 = new Integer((-1481));
      // Undeclared exception!
      try { 
        jSONArray0.subList(3089, (-3270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3089) > toIndex(-3270)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = jSONArray0.toArray();
      int int0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer integer0 = new Integer(3089);
      jSONArray1.remove((Object) integer0);
      jSONArray1.removeAll(jSONArray0);
      Object[] objectArray1 = jSONArray1.toArray();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1189));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-4218), (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4218, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(203);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 203, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSON.defaultLocale = jSONArray0.defaultLocale;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.forEach(consumer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-730));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1065;
      // Undeclared exception!
      try { 
        jSONArray0.getString(1065);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1065, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(2926);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2926, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      jSONArray0.add((Object) fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<String> class7 = String.class;
      classArray0[7] = class7;
      Class<String> class8 = String.class;
      classArray0[8] = class8;
      jSONArray0.toArray(classArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      JSONArray jSONArray1 = jSONArray0.fluentSet(109, integer0);
      int int0 = 63;
      jSONArray1.getByte(63);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      Integer integer0 = new Integer(1877);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(141, 141);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 141
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)103;
      byte byte0 = (byte) (-39);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-82);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportArrayToBean;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SortFeidFastMatch;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.OrderedField;
      featureArray0[6] = feature6;
      JSON.parse(byteArray0, featureArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray((byte) (-97));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.removeAll(jSONArray1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray2.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue((-4557));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 163;
      JSONArray jSONArray0 = new JSONArray(163);
      int int1 = 492;
      Integer integer0 = new Integer(492);
      jSONArray0.indexOf(integer0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(170);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(170, jSONArray1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-121);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      JSON.parse(byteArray0, featureArray0);
      jSONArray2.size();
      // Undeclared exception!
      try { 
        jSONArray1.add(989, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 171
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1527);
      String string0 = "";
      Class<Integer> class0 = Integer.class;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      JSON.parseObject("", class0, featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1527), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1527, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate((-2545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) jSONArray0, (-357), serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(165);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 165, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.toArray();
      jSONArray0.clone();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.spliterator();
      Integer integer0 = new Integer(100);
      jSONArray0.setRelatedArray(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(994);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 994, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", treeMap0);
      jSONArray0.setRelatedArray((Object) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSON.defaultLocale = jSONArray0.defaultLocale;
      jSONArray0.forEach(consumer0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(985);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 985, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_TYPE_KEY = "1.2.46";
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-4456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray3.fluentAdd((Object) jSONArray2);
      JSONArray jSONArray4 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray4.getInteger((-3867));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = "value ";
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(994);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 994, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      int int0 = 24180;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(24180);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24180, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_TYPE_KEY = "1.2.46";
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '5';
      charArray0[2] = '8';
      charArray0[3] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 989, 3089);
      Class<JSONArray> class0 = JSONArray.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      int int0 = 1877;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONArray1.add(1877, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1877, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.isEmpty();
      int int1 = (-1848);
      int int2 = 1758;
      Map<String, Field> map0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("1.2.46", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      JSON.parseObject("", (Type) null, (Feature[]) null);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRemove(0);
      assertSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(641);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(1359, jSONArray1);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(1359);
      JSONObject jSONObject0 = new JSONObject(3089);
      jSONArray3.getJSONObject(641);
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) null, class0);
      ConcurrentHashMap<String, Integer> concurrentHashMap0 = new ConcurrentHashMap<String, Integer>();
      jSONObject0.fluentPutAll(concurrentHashMap0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray4.getObject(989, class1);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1359
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(1272);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1272, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      JSONArray jSONArray2 = new JSONArray(989);
      int int0 = 8064;
      jSONArray2.listIterator();
      jSONArray0.indexOf(jSONArray1);
      jSONArray1.addAll(0, (Collection<?>) jSONArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(8064, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8064, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.clear();
      linkedHashSet0.add((Integer) 989);
      jSONArray0.lastIndexOf(linkedHashSet0);
      Integer integer0 = new Integer((-4328));
      linkedHashSet0.add(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(184);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 184, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      int int0 = (-1883);
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONArray0, jSONScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-657), (-657));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -657
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.spliterator();
      // Undeclared exception!
      try { 
        jSONArray3.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-2253));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(3089, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(10, true);
      Collection<Object> collection0 = jSONObject0.values();
      Integer integer0 = new Integer((-1842));
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(collection0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(1360);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1360, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-506));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-202);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-202));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONObject jSONObject0 = new JSONObject(true);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONObject1);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(3089, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.toArray();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(139);
      jSONArray0.fluentSet(139, integer0);
      Integer integer1 = new Integer(989);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<JSONArray> class0 = JSONArray.class;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeConfig0.addFilter(class0, pascalNameFilter0);
      JSON.toJSON((Object) integer1, serializeConfig0);
      int int0 = 63;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(388);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      int int0 = 40;
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      JSONArray jSONArray1 = new JSONArray(989);
      int int0 = 8064;
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(95);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(57344);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57344, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray2.fluentRemoveAll(jSONArray1);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("J2O.A>_s%/", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : J2O.A>_s%/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(107, (Object) "1.2.46");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 107, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1004);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1004, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
