/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:00:55 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ArithmeticInstruction;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.StackInstruction;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(0);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals(1, lLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(fCMPL0);
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      MethodGen methodGen0 = new MethodGen(1354, type0, type0.NO_ARGS, (String[]) null, "filename\t\t", "filename\t\t", instructionList0, constantPoolGen0);
      instConstraintVisitor0.setMethodGen(methodGen0);
      assertEquals(0, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLSTORE((LSTORE) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(pOP2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals(1, nOP0.getLength());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSHL lSHL0 = new LSHL();
      FLOAD fLOAD0 = new FLOAD(17);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals("fload", fLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitFCONST((FCONST) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitICONST((ICONST) null);
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DUP2_X2 dUP2_X2_0 = (DUP2_X2)InstructionConstants.DUP2_X2;
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(36);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      assertEquals(36, dLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(301, 301);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEINTERFACE0);
      assertEquals(301, iNVOKEINTERFACE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FDIV fDIV0 = (FDIV)InstructionConstants.FDIV;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-70));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals((short)16, bIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)21);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(202);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals(202, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FSTORE fSTORE0 = new FSTORE(508);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      assertEquals(508, fSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(2);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals(1, dSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      FASTORE fASTORE0 = new FASTORE();
      assertEquals((short)81, fASTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DREM dREM0 = new DREM();
      FRETURN fRETURN0 = new FRETURN();
      BASTORE bASTORE0 = new BASTORE();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionHandle instructionHandle0 = null;
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO(gOTO0);
      ALOAD aLOAD0 = null;
      try {
        aLOAD0 = new ALOAD((-656));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -656
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR((JSR) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(17, 17);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      LDC2_W lDC2_W0 = new LDC2_W((byte)0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDC2_W constraint violated: Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float or a CONSTANT_String, but is 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2305), (-2305));
      ConstantLong constantLong0 = new ConstantLong((-2305));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      D2L d2L0 = new D2L();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      GETFIELD gETFIELD0 = new GETFIELD(25);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(gETFIELD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction GETFIELD constraint violated: Index '25' should refer to a CONSTANT_Fieldref_info structure, but refers to 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DDIV dDIV0 = new DDIV();
      FNEG fNEG0 = new FNEG();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-2818.17658));
      InstructionHandle instructionHandle0 = instructionList1.insert((CompoundInstruction) pUSH0);
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      assertEquals((short)201, jSR_W0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitDCONST((DCONST) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(0);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(125);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      instConstraintVisitor0.visitCPInstruction(gETSTATIC0);
      assertEquals(3, gETSTATIC0.getLength());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(2);
      LUSHR lUSHR0 = new LUSHR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      LDC lDC0 = new LDC(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(lDC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Huh?! Constant pool index of instruction 'ldc[18](2) 2' illegal? Pass 3a should have checked this!
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[3] = (byte) (-1);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      LDC_W lDC_W0 = new LDC_W((byte)0);
      lDC_W0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC_W(lDC_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDC_W constraint violated: Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float, a CONSTANT_String or a CONSTANT_Class, but is 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IALOAD iALOAD0 = new IALOAD();
      instConstraintVisitor0.visitICONST((ICONST) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR((LSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(112);
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      Character.getName(112);
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitICONST((ICONST) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FMUL fMUL0 = new FMUL();
      ObjectType objectType0 = new ObjectType("czW]RBq\"A{");
      OperandStack operandStack0 = new OperandStack((byte)115, objectType0);
      LocalVariables localVariables3 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      iOR0.toString();
      LDC_W lDC_W0 = new LDC_W(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL((ISHL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int Lut of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'The 'index' is not of type int Lut of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(112);
      LREM lREM0 = new LREM();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FMUL fMUL0 = new FMUL();
      ObjectType objectType0 = new ObjectType("The 'Zrrayref' does\t refer to an array but is of type ");
      ObjectType.getInstance("The 'Zrrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame0);
      IOR iOR0 = new IOR();
      iOR0.toString();
      LAND lAND0 = new LAND();
      lAND0.produceStack(constantPoolGen0);
      I2L i2L0 = new I2L();
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'The 'Zrrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(0);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array ut is of type ");
      OperandStack operandStack0 = new OperandStack(395, objectType0);
      LocalVariables localVariables0 = new LocalVariables(148);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.initializeObject(uninitializedObjectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = frame1.getClone();
      instConstraintVisitor0.setFrame(frame2);
      DASTORE dASTORE0 = new DASTORE();
      DASTORE dASTORE1 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'The 'arrayref' does\t refer to an array ut is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC((byte)127);
      iNVOKESTATIC0.copy();
      ObjectType objectType0 = new ObjectType("wJ`@uG@4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(62, objectType0);
      LocalVariables localVariables0 = new LocalVariables(216);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame1);
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'wJ`@uG@4'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(46);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localVariables0.merge(localVariables2);
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(152, objectType0);
      LocalVariables localVariables3 = new LocalVariables(157);
      OperandStack operandStack1 = new OperandStack(329, objectType0);
      LocalVariables localVariables4 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables4, operandStack1);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instConstraintVisitor1.setFrame(frame0);
      L2I l2I0 = new L2I();
      I2L i2L0 = new I2L();
      LocalVariables localVariables5 = localVariables2.getClone();
      localVariables5.merge(localVariables2);
      localVariables1.clone();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      dUP2_X1_0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      localVariables1.clone();
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(147, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      GETFIELD gETFIELD0 = new GETFIELD(3);
      LocalVariables localVariables2 = new LocalVariables(3);
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      F2L f2L0 = new F2L();
      f2L0.toString((ConstantPool) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("0$O?-@qxcnrH!7");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      OperandStack operandStack1 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LUSHR lUSHR0 = new LUSHR();
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type '0$O?-@qxcnrH!7'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FMUL fMUL0 = new FMUL();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      GETFIELD gETFIELD0 = new GETFIELD(575);
      LALOAD lALOAD0 = new LALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLALOAD(lALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LALOAD constraint violated: The 'index' is not of type int but of type The 'index' is not of type int but of type .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      localVariables1.merge(localVariables0);
      localVariables1.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables2 = new LocalVariables(26);
      OperandStack operandStack1 = new OperandStack(26, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FMUL fMUL0 = new FMUL();
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      GETFIELD gETFIELD0 = new GETFIELD(26);
      LocalVariables localVariables3 = new LocalVariables(26);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      F2L f2L0 = new F2L();
      IINC iINC0 = new IINC(3, 3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      LAND lAND0 = new LAND();
      FSUB fSUB0 = new FSUB();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 112;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      ObjectType objectType1 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType1);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LUSHR lUSHR0 = new LUSHR();
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("{B+ky+JEr=O^W7%Zm");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type '{B+ky+JEr=O^W7%Zm'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LREM lREM0 = new LREM();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType(" and ");
      OperandStack operandStack0 = new OperandStack(2526, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables2 = new LocalVariables(2);
      instConstraintVisitor0.setFrame(frame0);
      ISTORE iSTORE0 = new ISTORE(936);
      ISTORE iSTORE1 = new ISTORE(4096);
      instConstraintVisitor0.visitISTORE(iSTORE1);
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type ' and '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(9);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables1.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(9, objectType0);
      LocalVariables localVariables2 = new LocalVariables(9);
      OperandStack operandStack1 = new OperandStack(147, objectType0);
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      Frame frame0 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FMUL fMUL0 = new FMUL();
      ObjectType objectType1 = new ObjectType("/A;d$GoSu`O2TT");
      GETFIELD gETFIELD0 = new GETFIELD(9);
      localVariables2.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("' is not of a reference type as expected.");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(363);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      localVariables0.toString();
      LAND lAND0 = new LAND();
      I2L i2L0 = new I2L();
      DCMPL dCMPL0 = new DCMPL();
      I2F i2F0 = new I2F();
      I2F i2F1 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type '' is not of a reference type as expected.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array ut is of type ");
      OperandStack operandStack0 = new OperandStack(395, objectType0);
      LocalVariables localVariables0 = new LocalVariables(148);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.initializeObject(uninitializedObjectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = frame1.getClone();
      instConstraintVisitor0.setFrame(frame2);
      DADD dADD0 = (DADD)InstructionConstants.DADD;
      // Undeclared exception!
      try { 
        dADD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: Cannot consume 4 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 395.
         // The 'arrayref' does\t refer to an array ut is of type  (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(24);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      localVariables1.clone();
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables2 = new LocalVariables(26);
      OperandStack operandStack1 = new OperandStack(147, objectType0);
      Frame frame0 = new Frame(26, 24);
      operandStack0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      GETFIELD gETFIELD0 = new GETFIELD(26);
      LocalVariables localVariables3 = new LocalVariables(26);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      LAND lAND0 = new LAND();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      F2L f2L0 = new F2L();
      f2L0.toString((ConstantPool) null);
      LASTORE lASTORE0 = new LASTORE();
      lASTORE0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("invokedynamic");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      LALOAD lALOAD0 = new LALOAD();
      DCMPL dCMPL0 = new DCMPL();
      ConstantDouble constantDouble0 = new ConstantDouble((-443.0849191379429));
      MethodGen.getComparator();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      LSHL lSHL0 = new LSHL();
      lSHL0.copy();
      LSHL lSHL1 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'invokedynamic'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LREM lREM0 = new LREM();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IOR iOR0 = new IOR();
      String string0 = frame0.toString();
      ObjectType.getInstance(string0);
      LocalVariables localVariables1 = new LocalVariables(112);
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen1);
      F2L f2L0 = new F2L();
      String string1 = Constants.CONSTRUCTOR_NAME;
      ISTORE iSTORE0 = new ISTORE(112);
      ISTORE iSTORE1 = new ISTORE(112);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'The 'arrayref' does\t refer to an array but is of type '; Instruction type: 'int'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(112);
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 26;
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      frame0.toString();
      LAND lAND0 = new LAND();
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      IOR iOR1 = new IOR();
      localVariables0.toString();
      LAND lAND1 = new LAND();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      I2L i2L0 = new I2L();
      DCMPL dCMPL0 = new DCMPL();
      I2L i2L1 = new I2L();
      InstructionList instructionList1 = new InstructionList();
      I2C i2C0 = new I2C();
      ASTORE aSTORE0 = new ASTORE(26);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      instructionList0.findHandle(26);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = ObjectType.getInstance("EwTPj o2i5%");
      OperandStack operandStack0 = new OperandStack(3034, objectType0);
      LocalVariables localVariables0 = new LocalVariables(3034);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.clone();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'EwTPj o2i5%'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("1PWq");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(112, 112);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN((FRETURN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("]|PSnN)]I^Or");
      OperandStack operandStack0 = new OperandStack(3634, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1507);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.clone();
      Frame.getThis();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.initializeObject((UninitializedObjectType) null);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame2 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables1.merge(localVariables0);
      frame2.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type ']|PSnN)]I^Or'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LREM lREM0 = new LREM();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IOR iOR0 = new IOR();
      String string0 = frame0.toString();
      ObjectType.getInstance(string0);
      LocalVariables localVariables1 = new LocalVariables(112);
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen1);
      F2L f2L0 = new F2L();
      String string1 = Constants.CONSTRUCTOR_NAME;
      ISTORE iSTORE0 = new ISTORE(112);
      ISTORE iSTORE1 = new ISTORE(112);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(0);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array ut is of type ");
      OperandStack operandStack0 = new OperandStack(395, objectType0);
      LocalVariables localVariables0 = new LocalVariables(148);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.initializeObject(uninitializedObjectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      localVariables1.clone();
      Frame frame2 = frame1.getClone();
      instConstraintVisitor0.setFrame(frame2);
      DASTORE dASTORE0 = new DASTORE();
      DASTORE dASTORE1 = new DASTORE();
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does\t refer to an array ut is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("' is not of a reference type as expected.");
      ObjectType objectType1 = ObjectType.getInstance("Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float, a CONSTANT_String or a CONSTANT_Class, but is '");
      OperandStack operandStack0 = new OperandStack(26, objectType1);
      LocalVariables localVariables0 = new LocalVariables(363);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = frame0.toString();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, string0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IOR iOR0 = new IOR();
      iOR0.toString();
      LAND lAND0 = new LAND();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      I2L i2L0 = new I2L();
      DCMPL dCMPL0 = new DCMPL();
      DUP_X2 dUP_X2_0 = new DUP_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(112);
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      Character.getName(112);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("' is not of a reference type as expected.");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(363);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      iOR0.toString();
      LAND lAND0 = new LAND();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      I2L i2L0 = new I2L();
      DCMPL dCMPL0 = new DCMPL();
      I2F i2F0 = new I2F();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type '' is not of a reference type as expected.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC((byte)127);
      iNVOKESTATIC0.copy();
      ObjectType objectType0 = new ObjectType("wJ`@uG@4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(62, objectType0);
      FMUL fMUL0 = new FMUL();
      ObjectType objectType1 = new ObjectType("'&JkfG :F");
      LocalVariables localVariables0 = new LocalVariables(46);
      LocalVariables localVariables1 = new LocalVariables(4143);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'wJ`@uG@4'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = (byte)101;
      D2F d2F0 = new D2F();
      d2F0.toString();
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC((byte)101);
      iNVOKESTATIC0.copy();
      ObjectType objectType0 = new ObjectType("wJ`@uG@4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(62, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      ObjectType.getInstance("d2f[144](1)");
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(161);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      F2L f2L0 = new F2L();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'wJ`@uG@4'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      D2F d2F0 = new D2F();
      d2F0.toString();
      ObjectType objectType0 = new ObjectType("wJ`@uG@4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)101, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      FMUL fMUL0 = new FMUL();
      ObjectType.getInstance("d2f[144](1)");
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      F2L f2L0 = new F2L();
      LREM lREM0 = new LREM();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(3018, objectType0);
      LocalVariables localVariables0 = new LocalVariables(3);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR((LXOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LREM lREM0 = new LREM();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      Frame frame2 = new Frame(localVariables0, operandStack0);
      Frame frame3 = new Frame(localVariables0, operandStack0);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables1 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'The 'index' is not of type int but of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables1 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_0;
      instConstraintVisitor0.visitLocalVariableInstruction(aSTORE0);
      assertEquals(0, aSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      ObjectType objectType0 = new ObjectType("OrEF!");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      LocalVariables localVariables1 = new LocalVariables(3);
      LocalVariables localVariables2 = new LocalVariables(208);
      LocalVariables localVariables3 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables3, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      frame0.clone();
      operandStack0.getClone();
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'OrEF!'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables1 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(943);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'The 'index' is not of type int but of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      localVariables0.getClone();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'The 'index' is not of type int but of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      IOR iOR0 = new IOR();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      Frame frame1 = frame0.getClone();
      frame0.getClone();
      Frame.setThis(uninitializedObjectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantLong0.clone();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      ARETURN aRETURN0 = new ARETURN();
      CHECKCAST cHECKCAST0 = new CHECKCAST(112);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(112);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables0 = new LocalVariables(112);
      OperandStack operandStack0 = new OperandStack(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      frame0.clone();
      IOR iOR0 = new IOR();
      frame0.toString();
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      IINC iINC0 = new IINC(1538, 112);
      iINC0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(3);
      Object object0 = localVariables0.clone();
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(object0);
      GETFIELD gETFIELD0 = new GETFIELD(3);
      localVariables1.getClone();
      F2L f2L0 = new F2L();
      ISTORE iSTORE0 = new ISTORE(3);
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LSHR lSHR0 = new LSHR();
      IINC iINC0 = new IINC(0, 3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(113);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      String string0 = Constants.CONSTRUCTOR_NAME;
      ObjectType.getInstance("<init>");
      DRETURN dRETURN0 = new DRETURN();
      DRETURN dRETURN1 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      ObjectType objectType1 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType1);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.toString();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      String string0 = frame0.toString();
      ObjectType.getInstance(string0);
      DRETURN dRETURN0 = new DRETURN();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DRETURN dRETURN1 = new DRETURN();
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 26;
      ObjectType objectType0 = new ObjectType("The 'ajrayref' Aoes\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      LocalVariables localVariables1 = new LocalVariables(112);
      ObjectType objectType1 = new ObjectType("The 'ajrayref' Aoes\t refer to an array but is of type ");
      OperandStack operandStack1 = new OperandStack(112, objectType1);
      LocalVariables localVariables2 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      LUSHR lUSHR0 = new LUSHR();
      MONITOREXIT mONITOREXIT1 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT1);
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_0;
      ASTORE aSTORE1 = new ASTORE(603);
      aSTORE1.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(aSTORE1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ASTORE constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1867, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1867);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      frame0.toString();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOR iOR0 = new IOR();
      iOR0.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I((D2I) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("wJ`@uG@4");
      OperandStack operandStack0 = new OperandStack(1867, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1867);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame.getThis();
      IOR iOR0 = new IOR();
      frame0.toString();
      LocalVariables localVariables1 = new LocalVariables(1867);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      F2L f2L0 = new F2L();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Boolean boolean0 = new Boolean("wJ`@uG@4");
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor2 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'wJ`@uG@4'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(149, objectType0);
      LocalVariables localVariables0 = new LocalVariables(149);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      IOR iOR0 = new IOR();
      frame0.getClone();
      frame0.toString();
      InstructionList instructionList0 = new InstructionList();
      LALOAD lALOAD0 = new LALOAD();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(149);
      frame0.equals(iNVOKEVIRTUAL0);
      D2L d2L0 = new D2L();
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("]|PSnN)]I^Or");
      OperandStack operandStack0 = new OperandStack(3634, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1507);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame.getThis();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      operandStack0.initializeObject((UninitializedObjectType) null);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables1.merge(localVariables0);
      frame1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      IUSHR iUSHR0 = new IUSHR();
      iUSHR0.produceStack(constantPoolGen0);
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("' is not of a reference type as expected.");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(363);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        iOR0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type '' is not of a reference type as expected.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("EwTPj o2i5%");
      OperandStack operandStack0 = new OperandStack(3034, objectType0);
      LocalVariables localVariables0 = new LocalVariables(3034);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DCONST dCONST0 = (DCONST)InstructionConstants.DCONST_0;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD((FADD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC((byte)127);
      iNVOKESTATIC0.copy();
      ObjectType objectType0 = ObjectType.getInstance("wJ`@uG@4");
      OperandStack operandStack0 = new OperandStack((byte)127, objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)127);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      IOR iOR0 = new IOR();
      frame0.toString();
      ObjectType objectType1 = new ObjectType("wJ`@uG@4");
      LocalVariables localVariables1 = new LocalVariables(1176);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      F2L f2L0 = new F2L();
      ASTORE aSTORE0 = new ASTORE((byte)127);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      LAND lAND1 = new LAND();
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      assertEquals(1, aRETURN0.getLength());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("The 'index' is not of type int but of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(139);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = (Frame)frame0.clone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      operandStack0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      frame0.getClone();
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV((DDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantInteger constantInteger0 = new ConstantInteger(437);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG((DNEG) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      IOR iOR0 = new IOR();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      Frame frame1 = frame0.getClone();
      frame0.getClone();
      String string0 = frame1.toString();
      InstructionList instructionList0 = new InstructionList();
      LALOAD lALOAD0 = new LALOAD();
      LUSHR lUSHR0 = new LUSHR();
      LUSHR lUSHR1 = new LUSHR();
      frame0.equals(string0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FRETURN fRETURN0 = new FRETURN();
      FSUB fSUB0 = new FSUB();
      fSUB0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      D2F d2F0 = new D2F();
      String string0 = Constants.ILLEGAL_TYPE;
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC((byte)127);
      iNVOKESTATIC0.copy();
      ObjectType objectType0 = new ObjectType("<illegal type>");
      I2L i2L0 = new I2L();
      LocalVariables localVariables0 = new LocalVariables((byte)127);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal type>");
      OperandStack operandStack0 = new OperandStack((byte)127, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ISTORE iSTORE0 = new ISTORE(156);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      I2C i2C0 = new I2C();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The value at the stack top is not of type 'int', but of type '");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C((I2C) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `illegal type>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      ObjectType objectType0 = new ObjectType("OrEF!");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      LocalVariables localVariables1 = new LocalVariables(3);
      LocalVariables localVariables2 = new LocalVariables(208);
      LocalVariables localVariables3 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables3, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("OrEF!", "OrEF!", "OrEF!");
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      IUSHR iUSHR0 = new IUSHR();
      iUSHR0.produceStack(constantPoolGen0);
      ICONST iCONST0 = new ICONST(3);
      instConstraintVisitor0.visitICONST(iCONST0);
      POP2 pOP2_0 = new POP2();
      POP2 pOP2_1 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is 'OrEF!' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(11);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(147, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETFIELD gETFIELD0 = new GETFIELD(11);
      LocalVariables localVariables2 = new LocalVariables(11);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      ISTORE iSTORE0 = new ISTORE(11);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      int[] intArray0 = new int[9];
      intArray0[0] = 147;
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      LALOAD lALOAD0 = new LALOAD();
      DCMPL dCMPL0 = new DCMPL();
      ConstantDouble constantDouble0 = new ConstantDouble(112);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(26);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FMUL fMUL0 = new FMUL();
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      GETFIELD gETFIELD0 = new GETFIELD(26);
      OperandStack operandStack1 = new OperandStack(3, objectType0);
      operandStack1.toString();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      OperandStack operandStack2 = new OperandStack(2223);
      F2I f2I0 = new F2I();
      F2I f2I1 = new F2I();
      F2I f2I2 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      IOR iOR0 = new IOR();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      Frame frame1 = frame0.getClone();
      frame0.getClone();
      String string0 = frame1.toString();
      InstructionList instructionList0 = new InstructionList();
      LALOAD lALOAD0 = new LALOAD();
      LUSHR lUSHR0 = new LUSHR();
      LUSHR lUSHR1 = new LUSHR();
      int int0 = 1808;
      frame0.equals(string0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FNEG fNEG0 = new FNEG();
      fNEG0.consumeStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("wJ`@uG@4");
      OperandStack operandStack0 = new OperandStack(1867, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1867);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      Frame.getThis();
      IOR iOR0 = new IOR();
      frame0.toString();
      LocalVariables localVariables1 = new LocalVariables(1867);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      F2L f2L0 = new F2L();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      LASTORE lASTORE0 = new LASTORE();
      lASTORE0.produceStack(constantPoolGen0);
      lASTORE0.copy();
      InstructionList instructionList0 = new InstructionList(iOR0);
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lAND0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'wJ`@uG@4'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = new LocalVariables(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      OperandStack operandStack1 = new OperandStack(3, objectType0);
      operandStack1.getClone();
      operandStack1.push(objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      Type.getMethodSignature(objectType0, (Type[]) null);
      GETFIELD gETFIELD0 = new GETFIELD(26);
      LocalVariables localVariables2 = new LocalVariables(26);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      LAND lAND0 = new LAND();
      FSUB fSUB0 = new FSUB();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      DCMPL dCMPL0 = new DCMPL();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      I2F i2F0 = new I2F();
      String string0 = Constants.ILLEGAL_OPCODE;
      I2F i2F1 = new I2F();
      IINC iINC0 = new IINC(112, 1641);
      FSTORE fSTORE0 = new FSTORE(1641);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantLong constantLong0 = new ConstantLong((-232L));
      constantLong0.clone();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.setBytes((-278L));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong1;
      LUSHR lUSHR0 = (LUSHR)InstructionConstants.LUSHR;
      InstructionList instructionList0 = new InstructionList(lUSHR0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFGT iFGT0 = new IFGT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 3;
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      int int1 = 147;
      OperandStack operandStack0 = new OperandStack(147, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETFIELD gETFIELD0 = new GETFIELD(3);
      LocalVariables localVariables2 = new LocalVariables(3);
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      ISTORE iSTORE0 = new ISTORE(3);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      int[] intArray0 = new int[5];
      intArray0[0] = 147;
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type .A.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantLong constantLong0 = new ConstantLong(112);
      constantLong0.clone();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.setBytes((-278L));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong1;
      LUSHR lUSHR0 = (LUSHR)InstructionConstants.LUSHR;
      InstructionList instructionList0 = new InstructionList(lUSHR0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      LALOAD lALOAD0 = new LALOAD();
      LUSHR lUSHR0 = new LUSHR();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(4331);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      frame1.toString();
      InstructionList instructionList0 = new InstructionList();
      LALOAD lALOAD0 = new LALOAD();
      LUSHR lUSHR0 = new LUSHR();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(26);
      LRETURN lRETURN0 = new LRETURN();
      lRETURN0.getType();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      localVariables1.merge(localVariables0);
      localVariables1.getClone();
      localVariables1.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localVariables1.getClone();
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables2 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      GETFIELD gETFIELD0 = new GETFIELD(26);
      LocalVariables localVariables3 = new LocalVariables(26);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(112);
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantString constantString0 = new ConstantString((-14));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1165.7));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Character.BYTES;
      ALOAD aLOAD0 = new ALOAD(26);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'index'is not of type nt but of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.clone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.equals(frame0);
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(112, (byte)83);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '83' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      frame0.getClone();
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(26);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      IOR iOR0 = new IOR();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      Frame frame1 = frame0.getClone();
      frame1.toString();
      InstructionList instructionList0 = new InstructionList();
      LALOAD lALOAD0 = new LALOAD();
      LUSHR lUSHR0 = new LUSHR();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      I2C i2C0 = new I2C();
      InstructionList instructionList1 = instructionList0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 26);
      InstructionHandle instructionHandle0 = instructionList1.append((CompoundInstruction) pUSH0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      ObjectType objectType0 = new ObjectType("OrEF!");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      LocalVariables localVariables1 = new LocalVariables(3);
      LocalVariables localVariables2 = new LocalVariables(208);
      LocalVariables localVariables3 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables3, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("OrEF!", "OrEF!", "OrEF!");
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      IOR iOR0 = new IOR();
      frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      Frame frame1 = frame0.getClone();
      frame0.getClone();
      String string0 = frame1.toString();
      InstructionList instructionList0 = new InstructionList();
      LALOAD lALOAD0 = new LALOAD();
      LUSHR lUSHR0 = new LUSHR();
      LUSHR lUSHR1 = new LUSHR();
      frame0.equals(string0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FRETURN fRETURN0 = new FRETURN();
      FSUB fSUB0 = new FSUB();
      fSUB0.copy();
      IADD iADD0 = new IADD();
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type 'The 'arrayref' does\t refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("=2:t.MT@%eE");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(139);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = (Frame)frame0.clone();
      operandStack0.clone();
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      frame0.getClone();
      L2F l2F0 = new L2F();
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM((DREM) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("/rJ`");
      OperandStack operandStack0 = new OperandStack(158, objectType0);
      LocalVariables localVariables0 = new LocalVariables(26);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.toString();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame1);
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitFASTORE((FASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LREM lREM0 = new LREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("Reference type expected on op of stack, but is: '");
      OperandStack operandStack0 = new OperandStack(112, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'Reference type expected on op of stack, but is: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 112;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("The 'arrayref' does\t refer to an array but is of type ");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables0 = new LocalVariables(112);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IOR iOR0 = new IOR();
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      frame1.toString();
      GETFIELD gETFIELD0 = new GETFIELD(26);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(3);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      localVariables1.getClone();
      localVariables1.merge(localVariables0);
      localVariables1.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType("/A;d$GoSu`O2TT");
      OperandStack operandStack0 = new OperandStack(26, objectType0);
      LocalVariables localVariables2 = new LocalVariables(26);
      OperandStack operandStack1 = new OperandStack(26, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FMUL fMUL0 = new FMUL();
      ObjectType.getInstance("/A;d$GoSu`O2TT");
      GETFIELD gETFIELD0 = new GETFIELD(26);
      LocalVariables localVariables3 = new LocalVariables(26);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      instConstraintVisitor0.visitISTORE((ISTORE) null);
      I2S i2S0 = new I2S();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type '.A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
