/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:12:35 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerialContext;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.IdentityHashMap;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeConfig) null);
      Integer integer0 = new Integer(102);
      dateCodec0.write(jSONSerializer0, integer0, integer0, class0, 102);
      assertEquals("float", class0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SkipTransientField");
      DateCodec dateCodec0 = new DateCodec();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "SkipTransientField", (Object) "SkipTransientField");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SkipTransientField\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SkipTransientField");
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Double> class0 = Double.TYPE;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      dateCodec0.write(jSONSerializer0, (Object) null, "t;F<Z297.GwGFu:cH|", class0, 196);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SkipTransientField");
      Class<Long> class0 = Long.TYPE;
      Method method0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      TimeZone.getTimeZone("");
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Double> class1 = Double.TYPE;
      Byte byte0 = new Byte((byte) (-76));
      MockHijrahDate mockHijrahDate0 = dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) byte0, (Object) "");
      assertNull(mockHijrahDate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Long> class0 = Long.TYPE;
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01T00:00:00+08:00");
      Float float0 = new Float((float) 2);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "0001-01-01T00:00:00+08:00");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" sanot a primi type");
      Class<Double> class1 = Double.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) " sanot a primi type", (Object) " sanot a primi type");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" sanot a primi type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" sanot a primitie type");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) " sanot a primitie type", (Object) " sanot a primitie type");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" sanot a primitie type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      MockDate mockDate0 = new MockDate();
      DateCodec dateCodec1 = DateCodec.instance;
      dateCodec1.getFastMatchToken();
      Class<Double> class0 = Double.TYPE;
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("=", identityHashMap0);
      Class<SerializerFeature> class1 = SerializerFeature.class;
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      FieldInfo fieldInfo0 = new FieldInfo("qypzl,o", class1, class2, class1, (Field) null, 1507, 2, 1507);
      Float float0 = new Float((double) 2);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q[GeFhU2VZ2", parserConfig1);
      DateCodec dateCodec2 = new DateCodec();
      dateCodec2.cast(defaultJSONParser0, (Type) class1, (Object) float0, (Object) "0000-00-00t00:00:00");
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("qYPzl,O");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "/Date(", (Object) "/Date(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("qYPzl,O");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Class<Byte> class1 = Byte.TYPE;
      Object object0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "yyyy-MM-dd HH:mm:ss", (Object) "0000-00-00");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte) (-1));
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, byte0, serializerFeature0, class0, (byte) (-90));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte) (-1));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Byte.compare((byte)62, (byte) (-1));
      SerialContext serialContext0 = jSONSerializer0.context;
      Integer integer0 = Integer.valueOf(63);
      SerialContext serialContext1 = new SerialContext((SerialContext) null, integer0, classLoader0, 174, (byte)62);
      jSONSerializer0.setContext(serialContext1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1873497800), (byte)62, (-3140), (byte)62, (-1130), (-1130));
      jSONSerializer0.writeWithFormat(mockGregorianCalendar0, "2'CWCz ,wlf~<3");
      System.setCurrentTimeMillis((byte)62);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(174);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte)34);
      ClassLoader.getSystemClassLoader();
      SerializeWriter serializeWriter1 = new SerializeWriter(jSONSerializer0.out, (-1616), serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)34);
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter1, serializeConfig0);
      MockDate mockDate0 = new MockDate((byte)34, (byte)62, (byte)62, (byte)34, (byte)34, (byte)34);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateCodec0.write(jSONSerializer1, mockDate0, mockThaiBuddhistDate0, class0, (byte)62);
      System.setCurrentTimeMillis((byte)62);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSON.DEFFAULT_DATE_FORMAT = "0000-00-00T00:00:00";
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      byte byte0 = (byte)62;
      SerializeWriter serializeWriter1 = new SerializeWriter(jSONSerializer0.out, (byte)62, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter1, serializeConfig0);
      serializeConfig0.setAsmEnable(false);
      MockDate mockDate0 = new MockDate((-1616), (byte)62, (byte)62);
      mockDate0.clone();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateCodec0.write(jSONSerializer1, mockDate0, mockThaiBuddhistDate0, class0, (byte)62);
      // Undeclared exception!
      try { 
        serializeWriter0.toCharArrayForSpringWebSocket();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte)34);
      ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SerializeWriter serializeWriter1 = new SerializeWriter(jSONSerializer0.out, (byte)62, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter1, serializeConfig0);
      serializeConfig0.setAsmEnable(false);
      MockDate mockDate0 = new MockDate((-804L));
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateCodec0.write(jSONSerializer1, mockDate0, mockThaiBuddhistDate0, class0, (byte)62);
      Long long0 = new Long((byte)34);
      assertEquals(34L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      SerializeWriter serializeWriter1 = new SerializeWriter(jSONSerializer0.out, (byte)57, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter1, serializeConfig0);
      IdentityHashMap<Object, SerialContext> identityHashMap0 = new IdentityHashMap<Object, SerialContext>();
      jSONSerializer0.references = identityHashMap0;
      serializeConfig0.setAsmEnable(false);
      jSONSerializer1.getBeforeFilters();
      MockDate mockDate0 = new MockDate((byte)57, (byte)57, (-1616), (byte)57, (byte)57, (byte)57);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateCodec0.write(jSONSerializer1, mockDate0, mockThaiBuddhistDate0, class0, (byte)57);
      Long long0 = new Long((-1616));
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      byte[] byteArray0 = new byte[6];
      SerializeWriter serializeWriter1 = new SerializeWriter(jSONSerializer0.out, (byte)62, serializerFeatureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter1, serializeConfig0);
      IdentityHashMap<Object, SerialContext> identityHashMap0 = new IdentityHashMap<Object, SerialContext>();
      serializeConfig0.setAsmEnable(false);
      jSONSerializer1.getBeforeFilters();
      MockDate mockDate0 = new MockDate((byte)62, (byte)62, (-1616), (-1616), (-1616));
      mockDate0.clone();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dateCodec0.write(jSONSerializer1, mockDate0, mockThaiBuddhistDate0, class0, (byte)62);
      Long long0 = new Long((-1616));
      ParserConfig parserConfig0 = new ParserConfig();
      Long long1 = new Long(':');
      assertEquals(58L, (long)long1);
  }
}
