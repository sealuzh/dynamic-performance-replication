/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:47:03 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.addUtf8("l2d");
      constantPoolGen0.addMethodref("l2d", "l2d", "K:$:i'3Q(\"w!= ,|l");
      constantPoolGen0.lookupNameAndType("", "");
      constantPoolGen0.lookupClass("K:$:i'3Q(\"w!= ,|l");
      constantPoolGen0.addUtf8("l2d");
      ArrayType arrayType0 = new ArrayType(objectType0, 3);
      int int0 = constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      ObjectType objectType0 = new ObjectType(". xF+BOw&,D");
      String[] stringArray0 = new String[0];
      I2S i2S0 = new I2S();
      InstructionList instructionList0 = new InstructionList(i2S0);
      MethodGen methodGen0 = new MethodGen(2606, objectType0, objectType0.NO_ARGS, stringArray0, "\"ivxfqxh|?^)", "\"ivxfqxh|?^)", instructionList0, constantPoolGen0);
      constantPoolGen0.addMethodref(methodGen0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(699, 2606);
      constantPoolGen0.setConstant(1, constantInterfaceMethodref0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupDouble(400.29);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-1), constantInterfaceMethodref0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
      
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-104), (-2332));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2332), (-2332));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(518, (-104));
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString((-1084));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(518);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2332
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(7, 7);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(191);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
      
      int int0 = constantPoolGen0.lookupInteger(46);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1, 1);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFieldref cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      MockFile mockFile0 = new MockFile(" o{=DH`<6_0zBxV>{", "#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)64;
      bufferedOutputStream0.write(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      constantInteger0.dump(dataOutputStream0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.addFloat(0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref("H.E35yI'C1", "H.E35yI'C1", "fIiE*ow");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("omz`=l");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addInterfaceMethodref("='w'm8->&*LS/$vb", "='w'm8->&*LS/$vb", "='w'm8->&*LS/$vb");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger(0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupNameAndType("OH5kKAvUc", "w!B+c'dEk>/ cItC");
      constantPoolGen0.addLong((-688L));
      constantPoolGen0.size = 1;
      ObjectType objectType0 = Type.STRING;
      String[] stringArray0 = new String[0];
      short short0 = Constants.INVOKEVIRTUAL_QUICK;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) (short)214);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2, objectType0, objectType0.NO_ARGS, stringArray0, "OH5kKAvUc", "w!B+c'dEk>/ cItC", instructionList0, constantPoolGen0);
      constantPoolGen0.lookupMethodref(methodGen0);
      constantPoolGen0.lookupMethodref(")", "w!B+c'dEk>/ cItC", "");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstant(47);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.addInteger((-570));
      constantPoolGen0.toString();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l2d");
      constantPoolGen0.addUtf8("l2d");
      constantPoolGen0.addMethodref("l2d", "l2d", "K:$:i'3Q(\"w!= ,|l");
      constantPoolGen0.lookupNameAndType("", "");
      constantPoolGen0.lookupClass("K:$:i'3Q(\"w!= ,|l");
      constantPoolGen0.addUtf8("l2d");
      ConstantClass constantClass0 = new ConstantClass(11);
      constantClass0.clone();
      constantPoolGen0.setConstant(2, constantClass0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupInteger((-1));
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-50), (-50));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger((-50));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      MockFile mockFile0 = new MockFile(" o{=DH`<6_0zBxV>{", " o{=DH`<6_0zBxV>{");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)0;
      ConstantString constantString0 = new ConstantString((byte) (-72));
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1952257860));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" o{=DH`<6_0zBxV>{");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      int int0 = constantPoolGen0.addConstant(constantUtf8_1, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.lookupNameAndType("", "");
      constantPoolGen0.lookupClass("K:$:i'3Q(\"w!= ,|l");
      ConstantClass constantClass0 = new ConstantClass(11);
      constantClass0.clone();
      constantPoolGen0.setConstant(2, constantClass0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupInteger((-1));
      int int0 = constantPoolGen0.lookupFloat(970.5F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(191);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupFloat(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-35));
      constantPoolGen0.addInteger((-35));
      constantPoolGen0.lookupFloat(1);
      constantPoolGen0.lookupUtf8((String) null);
      constantPoolGen0.addDouble((-1));
      constantPoolGen0.lookupFloat((-35));
      constantPoolGen0.lookupFloat((-1));
      constantPoolGen0.addDouble(0.0);
      ObjectType objectType0 = ObjectType.getInstance("Y]mea6yC\"<O-K");
      constantPoolGen0.addClass(objectType0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Y]mea6yC\"<O-K";
      DADD dADD0 = new DADD();
      InstructionList instructionList0 = new InstructionList(dADD0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(7);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((-643), objectType0, objectType0.NO_ARGS, stringArray0, "&", "KJDP}u*-UeAK-2H", instructionList0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 1
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-50), (-50));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble((-50));
      int int0 = constantPoolGen0.addDouble((-50));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(191);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.addConstant(constantArray0[2], constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger(0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2580, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1073, 47);
      ConstantString constantString0 = new ConstantString((-1908874352));
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(64);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantMethodHandle0, constantPoolGen3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 2580, reference_index = 0)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      String string0 = "#";
      String string1 = "#/]P`;*Hzk2j{";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.addDouble(0.0F);
      String string2 = "(class_index = ";
      constantPoolGen0.lookupInterfaceMethodref("#", "#/]P`;*Hzk2j{", "(class_index = ");
      String string3 = "\nFOUND:\n\t";
      constantPoolGen0.addMethodref("#/]P`;*Hzk2j{", "", "\nFOUND:\n\t");
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-532), 1656);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-532), 111);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(111, (-532));
      ConstantMethodType constantMethodType0 = new ConstantMethodType(518);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -532
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.baseWireHandle;
      constantPoolGen0.lookupFieldref(", length = ", ", length = ", "N!J#/K=S~H3Y<jlzuO");
      int int1 = constantPoolGen0.addLong((-3036L));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(622.7F);
      int int0 = constantPoolGen0.addFloat(622.7F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger(0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupNameAndType("OH5kKAvUc", "A/EiW|]");
      constantPoolGen0.addLong((-688L));
      constantPoolGen0.size = 1;
      short short0 = Constants.INVOKEVIRTUAL_QUICK;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) (short)214);
      pUSH0.getInstructionList();
      ConstantInteger constantInteger0 = new ConstantInteger((-199));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantPoolGen0.size = 161;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPoolGen0.lookupMethodref(")", "A/EiW|]", "");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstant(47);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-2147483647));
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, "' upper stack types should be 'int' but aren't/", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(12, 64);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-29), (-29));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong((-29));
      constantPoolGen0.addDouble(6);
      int int0 = constantPoolGen0.lookupLong(4645823370373118786L);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1888);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-556), (-556));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-556), (-556));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-556), (-556));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant constant0 = constantNameAndType1.copy();
      constantArray0[4] = constant0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-556), 1888);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref((-556), (-2125));
      constantArray0[6] = (Constant) constantInterfaceMethodref2;
      constantPoolGen0.constants = constantArray0;
      constantPoolGen0.addFloat(622.7F);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPoolGen0.addLong((-3041L));
      int int0 = constantPoolGen0.addLong(0L);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(1.0F);
      int int0 = constantPoolGen0.addFloat(2810.563F);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-284), 47);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-759), 47);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2098677199));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool2);
      constantPoolGen0.size = (-2098677199);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -759
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("|I][Nc}AzOt6", "|I][Nc}AzOt6", "|I][Nc}AzOt6");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.MAX_EXPONENT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(1392.85116165);
      constantPoolGen1.addConstant(constantDouble0, constantPoolGen0);
      String string0 = "";
      constantPoolGen1.lookupFieldref("Y2rN8J", "Bc?ny>kAPGG2vp", "");
      String string1 = "nR";
      String string2 = "J1L:.V";
      constantPoolGen1.addFieldref("nR", "4+Qg'@w#'c>fZUN5:imul:C2R", "J1L:.V");
      constantPoolGen0.lookupMethodref("", "4+Qg'@w#'c>fZUN5:imul:C2R", "B");
      ConstantPool constantPool0 = constantPoolGen1.getFinalConstantPool();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen2.getConstant((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.MAX_EXPONENT;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Qq>");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-319));
      constantArray0[6] = (Constant) constantMethodType0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addMethodref("Method to invoke must not be '<clinit>'.", "", "*QU}M`CQyY");
      int int1 = constantPoolGen1.getSize();
      assertEquals(14, int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass((-379));
      ConstantClass constantClass1 = new ConstantClass((-379));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -379
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-3036L));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen0.lookupFieldref((String) null, "Bc?ny>kAPGG2vp", "Bc?ny>kAPGG2vp");
      int int0 = constantPoolGen0.addFieldref("B", "RuntimeVisibleParameterAnnotations", "");
      assertEquals(8, constantPoolGen0.getSize());
      
      constantPoolGen1.lookupMethodref("Bc?ny>kAPGG2vp", "y5ztd8QV{|C^g,j", " #+G.UuI_mj");
      constantPoolGen1.getFinalConstantPool();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      int int1 = constantPoolGen2.lookupFieldref("RuntimeVisibleParameterAnnotations", "Y2rN8J", "u\"");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[4];
      int int0 = (-1983);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1983), (-1983));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(46, (-2028178999));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2028178999));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((-688L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\nAttribute(s):\n");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantLong1.copy();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1983
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString(0);
      ClassPath classPath0 = new ClassPath("");
      ClassPath classPath1 = new ClassPath(classPath0, "");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2178);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addUtf8("%HIl_:kts <>q@v*+R");
      constantPoolGen0.lookupInteger(2);
      constantPoolGen0.addInteger(2);
      ConstantLong constantLong0 = new ConstantLong(2);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("\n");
      constantPoolGen0.addFieldref("\n", "\n", "\n");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      ClassPath classPath0 = new ClassPath("");
      ClassPath classPath1 = new ClassPath(classPath0, "39r(CL_");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.getSuperClass();
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("39r(CL_");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(6, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 1);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodHandle0;
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant.setComparator(bCELComparator0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      constantPoolGen0.addInteger(256);
      constantPoolGen0.addUtf8("I");
      constantPoolGen0.addNameAndType("@ie)-", "Unkwown constant type ");
      constantPoolGen0.addMethodref("Unkwown constant type ", "#?Z6%~0[HjSFoSz2Ta%='w'm8->&*LS/$v8b", "#?Z6%~0[HjSFoSz2Ta%='w'm8->&*LS/$v8b");
      constantPoolGen0.toString();
      constantPoolGen0.addLong(1076L);
      constantPoolGen0.getSize();
      constantPoolGen0.addInterfaceMethodref("='w'm8->&*LS/$v8b%|I][Nc}AzOt6", "84s", "Tk1_u1T>");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.adjustSize();
      ObjectType objectType0 = Type.CLASS;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addString("='w'm8->&*LS/$v8b%|I][Nc}AzOt6");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("@ie)-");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      constantPoolGen1.lookupFloat(19);
      assertEquals(23, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("p", "p", "3Z");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen0.getSize());
      
      Constant constant0 = constantPool0.getConstant(5);
      int int0 = constantPoolGen1.addConstant(constant0, constantPoolGen0);
      assertEquals(5, int0);
  }
}
