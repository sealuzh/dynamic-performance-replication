/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:24:48 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("date");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("can not get javaBeanDeserializer. ", negativeArraySizeException0);
      weakHashMap0.put(negativeArraySizeException0, typeNotPresentException0);
      BiFunction<Object, Exception, TypeNotPresentException> biFunction0 = (BiFunction<Object, Exception, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(java.lang.Exception.class));
      weakHashMap0.merge(negativeArraySizeException0, typeNotPresentException0, biFunction0);
      Class<String> class1 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) "Ljava.awt.Point", class1);
      assertNotNull(string0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.loadClass("US");
      TypeUtils.fnv1a_64_lower("US");
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(121, 121, 37);
      try { 
        Integer.valueOf("US");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"US\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("date");
      TypeUtils.getClass((Type) class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Insets insets0 = new Insets(54, 46, 54, 54);
      Insets insets1 = new Insets(54, 46, 46, 54);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("date");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("%1K", classLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "%1K", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isKotlin(class0);
      Short short0 = new Short((short) (-2100));
      Short.toUnsignedLong((short)39);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.setDefaultClassLoader(classLoader0);
      Short.toUnsignedLong((short)39);
      parserConfig0.setAsmEnable(false);
      Short.toUnsignedLong((short) (-2100));
      parserConfig0.setAutoTypeSupport(false);
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) short0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("getgetCause", (Throwable) null);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) typeNotPresentException0, class0);
      Integer integer0 = new Integer((-52));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      ArrayList<FieldInfo> arrayList1 = new ArrayList<FieldInfo>();
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.serializer.MiscCodec";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.MiscCodec", (ClassLoader) aSMDeserializerFactory0.classLoader);
      Integer integer0 = new Integer(1732);
      Class<RuntimeException> class0 = RuntimeException.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(aSMDeserializerFactory0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Character> class0 = Character.TYPE;
      ArrayList<IllegalThreadStateException> arrayList0 = new ArrayList<IllegalThreadStateException>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      arrayList0.add(illegalThreadStateException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.cast((Object) null, (Type) class0, (ParserConfig) null);
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : [java.lang.IllegalThreadStateException]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L*{n[It");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TreeMap<JavaBeanDeserializer, SQLSyntaxErrorException> treeMap0 = new TreeMap<JavaBeanDeserializer, SQLSyntaxErrorException>();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TimeDeserializer timeDeserializer0 = TypeUtils.cast((Object) treeMap0, class0, parserConfig0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("(Ljava/lang/Class;)");
      Class<Character> class0 = Character.TYPE;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.loadClass("getClass");
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("getClass", hashtable0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("applyName");
      assertFalse(boolean0);
      
      TypeUtils.getClassFromMapping("C;g2z:");
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("ms{-osV8*");
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      TypeUtils.loadClass((String) null);
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("kh|v:T7 YcisVzS", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader.getSystemClassLoader();
      TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      TypeUtils.isNumber("0");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ClassLoader.getSystemClassLoader();
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus((String) null, false);
      classLoader0.setClassAssertionStatus("fastjson.parser.deny", true);
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", classLoader0);
      SQLException sQLException0 = new SQLException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@@DnK", "getMetaClass", (-1159898277), sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientConnectionException: @@DnK
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float(434.8115679);
      TypeUtils.castToBoolean(float0);
      String string0 = "[long";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[long");
      Class<Character> class0 = Character.TYPE;
      ArrayList<IllegalThreadStateException> arrayList0 = new ArrayList<IllegalThreadStateException>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.addDeny("yyyyMMddHHmmssSSSZ");
      TypeUtils typeUtils0 = new TypeUtils();
      ArrayList<FieldInfo> arrayList1 = new ArrayList<FieldInfo>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("Z", false);
      ParserConfig parserConfig1 = new ParserConfig(true);
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.negate();
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      bigInteger0.remainder(bigInteger2);
      TypeUtils.castToByte(bigInteger1);
      TypeUtils.fnv1a_64_lower("(F)Ljava/lang/Float;");
      TypeUtils.castToLong(bigInteger2);
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float(434.8115679);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>(linkedHashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.isNumber("F%1K");
      TypeUtils.decapitalize("Ljava.awt.Rectangle");
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("syntax error, ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Td'e~y[";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Td'e~y[");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Boolean> class0 = Boolean.TYPE;
      String string1 = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Td'e~y[", "yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLTransientConnectionException: Td'e~y[
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.loadClass("*{n[It");
      TypeUtils.isGenericParamType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      TypeUtils.getClassFromMapping("*{n[It");
      TypeUtils.fnv1a_64_lower("*{n[It");
      SQLDataException sQLDataException0 = new SQLDataException("3sU^pjmPI*>n_", "3sU^pjmPI*>n_", (-1620357448));
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      VerifyError verifyError0 = new VerifyError();
      TypeUtils.castToByte((Object) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Insets> class0 = Insets.class;
      boolean boolean0 = TypeUtils.isNumber("J");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
      
      Class<Integer> class1 = Integer.TYPE;
      boolean boolean1 = TypeUtils.isGenericParamType(type0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      WeakHashMap<String, AtomicInteger> weakHashMap0 = new WeakHashMap<String, AtomicInteger>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.getTimestamp("1.2.46");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Random.setNextRandom(3089);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.isProxy(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      TypeUtils.unwrapOptional(class0);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isProxy(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.floorEntry("getLocalizedMessage");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      TypeUtils.getSerializeFeatures(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("getLocalizedMessage", classLoader1, false);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap2 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      Class<ClassLoader> class2 = ClassLoader.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FN");
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TypeUtils.isPath(class0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      String string0 = "g^(ZP";
      TypeUtils.unwrapOptional(class0);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      ArrayList<FieldInfo> arrayList1 = new ArrayList<FieldInfo>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NOT_RLIKE");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("g^(ZP", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLNonTransientConnectionException: g^(ZP
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float(434.8115679);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      ArrayList<FieldInfo> arrayList1 = new ArrayList<FieldInfo>();
      AtomicLong atomicLong0 = new AtomicLong((-254670111376247151L));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      Class<SQLException> class0 = SQLException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "F%1K", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("F%1K", class0, class0, class0, (Field) null, 888, 888, 888);
      fieldInfo0.getDeclaredClass();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fileSystemHandling0, (Type) fieldInfo0.fieldClass, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      VerifyError verifyError0 = new VerifyError("ms{-osV8*");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@9b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.setDefaultClassLoader(classLoader1);
      Class<Dimension> class0 = Dimension.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TypeUtils.isPath(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie("u3eyCPRD;3'S0atX", "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal cookie name
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("ms{-osV8*");
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      SQLWarning sQLWarning0 = new SQLWarning("D-CT;JwB)FD", "isInitialized", negativeArraySizeException0);
      MockFile mockFile0 = new MockFile("parse number key error", "java.lang.AutoCloseable");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) "^p7ULxr>jpqsSH!Cqb";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "isInitialized";
      mockPrintStream0.println((Object) "ms{-osV8*");
      objectArray0[4] = (Object) "^p7ULxr>jpqsSH!Cqb";
      Object object0 = new Object();
      SQLWarning sQLWarning1 = new SQLWarning("getgetFrame", "yyyy-MM-dd HH:mm:ss", 5);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("yyyy-MM-dd HH:mm:ss", sQLWarning1);
      BiFunction<Throwable, Object, TypeNotPresentException> biFunction0 = (BiFunction<Throwable, Object, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(typeNotPresentException0).when(biFunction0).apply(any(java.lang.Throwable.class) , any());
      TypeNotPresentException typeNotPresentException1 = weakHashMap0.compute(negativeArraySizeException0, biFunction0);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "parse number key error";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "^p7ULxr>jpqsSH!Cqb", objectArray0);
      negativeArraySizeException0.printStackTrace(printStream0);
      TypeNotPresentException typeNotPresentException2 = new TypeNotPresentException("ms{-osV8*", sQLWarning0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      typeNotPresentException2.printStackTrace((PrintWriter) mockPrintWriter0);
      negativeArraySizeException0.printStackTrace((PrintWriter) mockPrintWriter0);
      TypeNotPresentException typeNotPresentException3 = new TypeNotPresentException("ms{-osV8*", negativeArraySizeException0);
      BiFunction<Object, Object, TypeNotPresentException> biFunction1 = (BiFunction<Object, Object, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(typeNotPresentException1).when(biFunction1).apply(any() , any());
      weakHashMap0.merge(negativeArraySizeException0, typeNotPresentException3, biFunction1);
      weakHashMap0.put(negativeArraySizeException0, typeNotPresentException2);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NegativeArraySizeException cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.isKotlin(class0);
      Short short0 = new Short((short) (-2100));
      Short.toUnsignedLong((short)39);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      Short.toUnsignedLong((short)39);
      parserConfig0.setAsmEnable(false);
      Short.toUnsignedLong((short) (-2100));
      TypeUtils.toLocale("&Pk");
      TypeUtils.isNumber("&Pk");
      classLoader0.setClassAssertionStatus("&Pk", true);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0, false);
      TypeUtils.unwrapOptional((Type) null);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isHibernateInitialized(typeUtils0);
      JSONObject jSONObject0 = new JSONObject();
      WeakHashMap<String, AtomicInteger> weakHashMap0 = new WeakHashMap<String, AtomicInteger>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(weakHashMap0);
      jSONObject1.getTimestamp("1.2.46");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<java.util.Date> class1 = java.util.Date.class;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      FieldInfo fieldInfo0 = new FieldInfo("@type", class2, class1, class2, (Field) null, (-374), 58, 21);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      jSONObject1.put("", (Object) null);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      Class<?> class4 = beanContext0.getBeanClass();
      Class<?> class5 = TypeUtils.getClass((Type) class4);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.loadClass("@type");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fieldInfo0, (Type) class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isTransient((Method) null);
      TypeUtils.loadClass("getClass");
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Currency> class1 = Currency.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("~:KXw>pgB+%$hd", (Throwable) null);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) typeNotPresentException0, class0);
      TypeUtils.castToSqlDate((Object) null);
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1447), (-1447), (-3711));
      try { 
        Integer.valueOf("N\"hCWR}2GP5/+s:toR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N\"hCWR}2GP5/+s:toR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.loadClass("*{n[It");
      TypeUtils.isGenericParamType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Collator> class2 = Collator.class;
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class2, (ParserConfig) null);
      String string0 = "T";
      UUID uUID0 = MockUUID.fromString("T");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Random.setNextRandom((-1134015134));
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      Class<RenderingHints> class0 = RenderingHints.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(hashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TypeUtils typeUtils0 = new TypeUtils();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getClass((Type) class0);
      TypeUtils typeUtils0 = new TypeUtils();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      weakHashMap0.put("x5y@", "x5y@");
      weakHashMap0.replace("vcp_b<X>aY,U7wOaw/!", "taM?Ce(");
      Class<Double> class1 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      TypeUtils.decapitalize("x5y@");
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      Date date0 = new Date((-3286L));
      date0.getTime();
      date0.toLocalDate();
      ParserConfig parserConfig0 = new ParserConfig();
      Short.toUnsignedLong((short)132);
      TypeUtils.isPath(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Dimension dimension0 = new Dimension();
      Properties properties0 = new Properties();
      LinkedHashSet<PropertyProcessableDeserializer> linkedHashSet0 = new LinkedHashSet<PropertyProcessableDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("%1K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : %1K
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "com.alibaba.fastjson.serializer.EumerationSerializer", fieldArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.awt.GridBagConstraints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.MiscCodec", (ClassLoader) aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      Integer integer0 = new Integer(1732);
      Class<RuntimeException> class1 = RuntimeException.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(aSMDeserializerFactory0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("getgetCause", (Throwable) null);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) typeNotPresentException0, class0);
      Integer integer0 = new Integer((-52));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      ArrayList<FieldInfo> arrayList1 = new ArrayList<FieldInfo>();
      Random.setNextRandom(167);
      TypeUtils.toLocale("java.lang.TypeNotPresentException@0000000001");
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Y
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("%1K", classLoader0);
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.setDefaultClassLoader(classLoader1);
      TypeUtils.decapitalize("[J");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("can not cast to double, value : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"can not cast to double, value : \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils typeUtils0 = new TypeUtils();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      weakHashMap0.put("kuo1LI#IX!gTz", "[S");
      weakHashMap0.replace("[S", ",X;O`j%[}h");
      Class<Double> class2 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      TypeUtils.decapitalize("WRITE_MAP_NULL_FEATURES");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(throwableDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L*{n[It");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters(class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "\"LQ,b,`f<YuLefl";
      TypeUtils.loadClass("\"LQ,b,`f<YuLefl");
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToChar((Object) null);
      ParameterizedType parameterizedType0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.setAsmEnable(false);
      // Undeclared exception!
      try { 
        parserConfig0.getDeserializer((Class<?>) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short) (-2100));
      Short.toUnsignedLong((short)39);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      Short.toUnsignedLong((short) (-2100));
      TypeUtils.toLocale("&Pk");
      TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      classLoader0.setClassAssertionStatus("&Pk", false);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      AtomicLong atomicLong0 = new AtomicLong(2002190350L);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicLong0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float(434.8115679);
      Class<Field> class0 = Field.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.replace((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      TypeUtils.isGenericParamType(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      LinkageError linkageError0 = new LinkageError();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.unwrapOptional(type0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      VerifyError verifyError0 = new VerifyError("J");
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError: J", verifyError0.toString());
      assertEquals("J", verifyError0.getMessage());
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Insets> class0 = Insets.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)118;
      Short short0 = new Short((short)97);
      assertEquals((short)97, (short)short0);
      assertNotNull(short0);
      
      long long0 = Short.toUnsignedLong((short)959);
      assertEquals(959L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      long long1 = Short.toUnsignedLong((short)132);
      assertEquals(132L, long1);
      assertFalse(long1 == long0);
      
      Class<Method> class0 = Method.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constructor<NumberDeserializer>[] constructorArray0 = (Constructor<NumberDeserializer>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      LinkageError linkageError0 = new LinkageError();
      assertNotNull(linkageError0);
      assertEquals("java.lang.LinkageError", linkageError0.toString());
      assertNull(linkageError0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      parserConfig0.setAsmEnable(false);
      assertFalse(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<Annotation> class0 = Annotation.class;
      Class<LinkageError> class1 = LinkageError.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class0);
      assertNull(annotation0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = new Float(434.8115679);
      assertEquals(434.81155F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Boolean boolean1 = TypeUtils.castToBoolean(float0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      ArrayList<IllegalThreadStateException> arrayList0 = new ArrayList<IllegalThreadStateException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      boolean boolean2 = arrayList0.add(illegalThreadStateException0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      UnaryOperator<IllegalThreadStateException> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : [java.lang.IllegalThreadStateException]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gMm9{VdbDU\"7;_x;A^");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((SortedMap<String, ? extends Field>) treeMap0);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotNull(treeMap1);
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      
      NavigableSet<String> navigableSet0 = treeMap1.descendingKeySet();
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotSame(treeMap0, treeMap1);
      assertNotSame(treeMap1, treeMap0);
      assertNotNull(navigableSet0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      List<FieldInfo> list0 = new ArrayList<FieldInfo>();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<LinkageError> class0 = LinkageError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.serializer.MiscCodec";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Integer integer0 = new Integer(1732);
      assertEquals(1732, (int)integer0);
      assertNotNull(integer0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.String", class1.toString());
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class2);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.RuntimeException", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertNotNull(gridBagConstraints0);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(0, gridBagConstraints0.ipadx);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.GridBagConstraints@7cf47c8c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "Z";
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Z", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Method> class0 = Method.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      long long0 = Short.toUnsignedLong((short) (-2));
      assertEquals(65534L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      long long1 = Short.toUnsignedLong((short) (-2));
      assertEquals(65534L, long1);
      assertTrue(long1 == long0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      
      long long2 = Short.toUnsignedLong((short) (-2));
      assertEquals(65534L, long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      Class<Method> class1 = Method.class;
      Class<PageAttributes> class2 = PageAttributes.class;
      boolean boolean1 = TypeUtils.isPath(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<Object> class3 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, (PropertyNamingStrategy) null);
      assertNotNull(list0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.TypeReference";
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("com.alibaba.fastjson.TypeReference");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.TypeReference
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("oracle.sql.TIMESTAMP");
      assertEquals(5189621993925163951L, long0);
      
      Class<Exception> class0 = Exception.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      Locale locale1 = new Locale("scanFieldBoolean");
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("scanfieldboolean", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("scanfieldboolean", locale1.getLanguage());
      
      String string0 = locale0.getDisplayName(locale1);
      assertEquals("Korean (South Korea)", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("scanfieldboolean", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("scanfieldboolean", locale1.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(mockGregorianCalendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockGregorianCalendar0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger1.negate();
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
      
      BigInteger bigInteger3 = bigInteger0.modPow(bigInteger1, bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotNull(bigInteger3);
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      BigInteger bigInteger4 = bigInteger0.multiply(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotNull(bigInteger4);
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((short)196, bigInteger4.shortValue());
      assertEquals((byte) (-60), bigInteger4.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertNotNull(bigDecimal0);
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((byte)14, bigDecimal0.byteValue());
      assertEquals((short)14, bigDecimal0.shortValue());
      
      String string0 = bigDecimal0.toPlainString();
      assertEquals("2002190350", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotNull(string0);
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((byte)14, bigDecimal0.byteValue());
      assertEquals((short)14, bigDecimal0.shortValue());
      
      Long long0 = TypeUtils.castToLong(bigDecimal0);
      assertEquals(2002190350L, (long)long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotNull(long0);
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((byte)14, bigDecimal0.byteValue());
      assertEquals((short)14, bigDecimal0.shortValue());
      
      Class<LinkageError> class0 = LinkageError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("2002190350");
      assertNull(class1);
      
      BigInteger bigInteger5 = bigInteger0.shiftRight((byte)119);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger0);
      assertSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotNull(bigInteger5);
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((byte)0, bigInteger5.byteValue());
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      BigInteger bigInteger6 = bigInteger2.andNot(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotNull(bigInteger6);
      assertEquals((byte) (-16), bigInteger6.byteValue());
      assertEquals((short) (-16), bigInteger6.shortValue());
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
      
      BigInteger bigInteger7 = bigInteger0.remainder(bigInteger4);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger7.equals((Object)bigInteger1));
      assertFalse(bigInteger7.equals((Object)bigInteger2));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger5));
      assertTrue(bigInteger7.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger3));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger6));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger5));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertNotSame(bigInteger7, bigInteger0);
      assertNotSame(bigInteger7, bigInteger2);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger4, bigInteger6);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger5);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger7);
      assertNotNull(bigInteger7);
      assertEquals((short)14, bigInteger7.shortValue());
      assertEquals((byte)14, bigInteger7.byteValue());
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((short)196, bigInteger4.shortValue());
      assertEquals((byte) (-60), bigInteger4.byteValue());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      BigInteger bigInteger8 = bigInteger1.remainder(bigInteger6);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertTrue(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger4));
      assertFalse(bigInteger8.equals((Object)bigInteger3));
      assertFalse(bigInteger8.equals((Object)bigInteger2));
      assertFalse(bigInteger8.equals((Object)bigInteger5));
      assertTrue(bigInteger8.equals((Object)bigInteger0));
      assertTrue(bigInteger8.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertTrue(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger8, bigInteger4);
      assertNotSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger6);
      assertNotSame(bigInteger8, bigInteger7);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotNull(bigInteger8);
      assertEquals((byte) (-16), bigInteger6.byteValue());
      assertEquals((short) (-16), bigInteger6.shortValue());
      assertEquals((short)14, bigInteger8.shortValue());
      assertEquals((byte)14, bigInteger8.byteValue());
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
      
      classLoader0.setClassAssertionStatus("(F)Ljava/lang/Float;", true);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<?> class2 = TypeUtils.loadClass("Ljava.awt.Font", classLoader0, true);
      assertNull(class2);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp("2002190350");
      assertNotNull(timestamp0);
      assertEquals(350000000, timestamp0.getNanos());
      assertEquals("1970-01-24 04:09:50.35", timestamp0.toString());
      
      Byte byte0 = TypeUtils.castToByte(bigInteger2);
      assertEquals((byte) (-14), (byte)byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertTrue(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertTrue(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotNull(byte0);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
      
      Class<?> class3 = TypeUtils.getRawClass(class0);
      assertNotNull(class3);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.LinkageError", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      
      long long1 = TypeUtils.fnv1a_64_lower("(F)Ljava/lang/Float;");
      assertEquals(9000722793904001407L, long1);
      
      Class<?> class4 = TypeUtils.getClassFromMapping(".");
      assertNull(class4);
      
      Integer integer0 = TypeUtils.castToInt(bigInteger2);
      assertEquals((-2002190350), (int)integer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertTrue(bigInteger1.equals((Object)bigInteger8));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger6));
      assertTrue(bigInteger1.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger7));
      assertFalse(bigInteger2.equals((Object)bigInteger6));
      assertFalse(bigInteger2.equals((Object)bigInteger3));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger8));
      assertFalse(bigInteger2.equals((Object)bigInteger5));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger8);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger7);
      assertNotSame(bigInteger2, bigInteger6);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger8);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotNull(integer0);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gMm9{VdbDU\"7;_x;A^");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.replace((String) null, "wait");
      assertNull(string0);
      
      String string1 = weakHashMap0.put((String) null, (String) null);
      assertNull(string1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      String string2 = TypeUtils.decapitalize((String) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = new Float(434.8115679);
      assertEquals(434.81155F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max((-1762.8491F), (-1762.8491F));
      assertEquals((-1762.8491F), float1, 0.01F);
      
      Boolean boolean1 = TypeUtils.castToBoolean(float0);
      assertFalse(boolean1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      VerifyError verifyError0 = new VerifyError("5S<-CC");
      assertNotNull(verifyError0);
      assertEquals("5S<-CC", verifyError0.getMessage());
      assertEquals("java.lang.VerifyError: 5S<-CC", verifyError0.toString());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Integer integer0 = new Integer((-1722657757));
      assertEquals((-1722657757), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1722657757
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gethashCode");
      assertFalse(boolean0);
      
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("nit\"g,YT><A", classLoader0);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      String string0 = "getClass";
      Locale locale0 = TypeUtils.toLocale("5_zMd/W");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("5_ZMD/W", locale0.toString());
      assertEquals("5", locale0.getLanguage());
      assertEquals("ZMD/W", locale0.getCountry());
      
      boolean boolean0 = TypeUtils.isNumber("toString");
      assertFalse(boolean0);
      
      classLoader0.setClassAssertionStatus("is", true);
      assertSame(classLoader0, classLoader1);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      AtomicLong atomicLong0 = new AtomicLong(2002190350L);
      assertNotNull(atomicLong0);
      assertEquals("2002190350", atomicLong0.toString());
      assertEquals(2002190350, atomicLong0.intValue());
      assertEquals((short)14, atomicLong0.shortValue());
      assertEquals(2002190350L, atomicLong0.get());
      assertEquals((byte)14, atomicLong0.byteValue());
      assertEquals(2.00219034E9F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2.00219035E9, atomicLong0.doubleValue(), 0.01);
      assertEquals(2002190350L, atomicLong0.longValue());
      
      AtomicLong atomicLong1 = new AtomicLong(2002190350L);
      assertFalse(atomicLong1.equals((Object)atomicLong0));
      assertNotNull(atomicLong1);
      assertEquals(2002190350L, atomicLong1.get());
      assertEquals(2002190350, atomicLong1.intValue());
      assertEquals("2002190350", atomicLong1.toString());
      assertEquals(2.00219034E9F, atomicLong1.floatValue(), 0.01F);
      assertEquals((byte)14, atomicLong1.byteValue());
      assertEquals(2.00219035E9, atomicLong1.doubleValue(), 0.01);
      assertEquals(2002190350L, atomicLong1.longValue());
      assertEquals((short)14, atomicLong1.shortValue());
      
      long long0 = atomicLong1.getAndSet(2002195470L);
      assertEquals(2002190350L, long0);
      assertFalse(atomicLong1.equals((Object)atomicLong0));
      assertNotSame(atomicLong1, atomicLong0);
      assertEquals((short)5134, atomicLong1.shortValue());
      assertEquals(2.00219546E9F, atomicLong1.floatValue(), 0.01F);
      assertEquals(2002195470L, atomicLong1.get());
      assertEquals(2.00219547E9, atomicLong1.doubleValue(), 0.01);
      assertEquals("2002195470", atomicLong1.toString());
      assertEquals((byte)14, atomicLong1.byteValue());
      assertEquals(2002195470L, atomicLong1.longValue());
      assertEquals(2002195470, atomicLong1.intValue());
      
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Integer integer0 = new Integer((-1722657757));
      assertEquals((-1722657757), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Timestamp> class0 = Timestamp.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      assertNotNull(decimalFormatSymbols0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("TWD", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("NT$", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      
      String string0 = TypeUtils.castToString(propertyNamingStrategy0);
      assertNotNull(string0);
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "LocalizedMessage");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      assertNull(threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      MockThread mockThread0 = new MockThread(thread0, "com.alibaba.fastjson.PropertyNamingStrategy@0000000001");
      assertNotNull(mockThread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      assertNull(threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "can not cast to long, value : ");
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(mockThread2);
      assertNull(threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader0);
      assertNull(threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader1);
      assertNull(threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Method> class0 = Method.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short short0 = (short) (-2);
      Short short1 = new Short((short) (-2));
      assertEquals((short) (-2), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      long long0 = Short.toUnsignedLong((short)91);
      assertEquals(91L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.setDefaultClassLoader(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      long long1 = Short.toUnsignedLong((short)1);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      
      parserConfig0.setAsmEnable(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      Type type0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class1, (Type) null, propertyNamingStrategy0);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      
      Class<SQLWarning> class3 = SQLWarning.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.sql.SQLTransientConnectionException", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLTransientConnectionException -> java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("%1K", classLoader0);
      assertNull(class0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader1.setPackageAssertionStatus("e!oJg#XKx6o?/G", false);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      parserConfig0.setDefaultClassLoader(classLoader0);
      assertSame(classLoader0, classLoader1);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      
      LinkedHashSet<PropertyProcessableDeserializer> linkedHashSet0 = new LinkedHashSet<PropertyProcessableDeserializer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.testdata.FileSystemHandling@3682705
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("%1K", classLoader0);
      assertNull(class0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      parserConfig0.setDefaultClassLoader(classLoader1);
      assertSame(classLoader1, classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      Properties properties1 = new Properties();
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      LinkedHashSet<PropertyProcessableDeserializer> linkedHashSet0 = new LinkedHashSet<PropertyProcessableDeserializer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("%1K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : %1K
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      Class<Currency> class0 = Currency.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = hashtable0.computeIfPresent("", biFunction0);
      assertNull(string0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      TreeMap<JavaBeanDeserializer, DataTruncation> treeMap0 = new TreeMap<JavaBeanDeserializer, DataTruncation>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      classLoader1.setClassAssertionStatus("+u)#:_7J+MgP", true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setPackageAssertionStatus("+u)#:_7J+MgP", true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("+u)#:_7J+MgP", (ClassLoader) aSMClassLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class0);
      
      long long0 = TypeUtils.fnv1a_64_lower("+u)#:_7J+MgP");
      assertEquals((-6289076670565993969L), long0);
      
      Class<Integer> class1 = Integer.class;
      Class<EnumDeserializer> class2 = EnumDeserializer.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Field field0 = ParserConfig.getFieldFromCache("cSGh", identityHashMap0);
      assertNull(field0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      FieldInfo fieldInfo0 = new FieldInfo("getConfig", (Class<?>) null, class2, class1, (Field) null, 36, 121, 121);
      assertNotNull(fieldInfo0);
      assertEquals("getConfig", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertEquals(121, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(121, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertNotNull(beanContext0);
      assertEquals("getConfig", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("getConfig", beanContext0.getName());
      assertEquals(121, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(fieldInfo0.getOnly);
      assertEquals(121, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(121, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      Method method0 = beanContext0.getMethod();
      assertNull(method0);
      assertEquals("getConfig", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("getConfig", beanContext0.getName());
      assertEquals(121, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertFalse(fieldInfo0.getOnly);
      assertEquals(121, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(121, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(typeUtils0);
      assertTrue(boolean0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      long long0 = Short.toUnsignedLong((short) (-1));
      assertEquals(65535L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      MockThread mockThread0 = new MockThread("yyyy-MM-dd HH:mm:ss");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      parserConfig0.setDefaultClassLoader(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      long long1 = Short.toUnsignedLong((short)1);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) hashMap0, true, (PropertyNamingStrategy) null);
      assertNotNull(list0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (short)1);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigInteger bigInteger1 = bigDecimal0.toBigIntegerExact();
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertNotNull(stackTraceElementDeserializer0);
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("C", "p2W_)S@^Qj(LtDYI");
      assertNull(string0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("vcp_b<X>aY,U7wOaw/!").when(biFunction0).apply(anyString() , any());
      weakHashMap0.replaceAll(biFunction0);
      String string1 = weakHashMap0.put("GF<5MaG&E0<", "3|?H$~~=Z-j");
      assertNull(string1);
      
      String string2 = weakHashMap0.put((String) null, (String) null);
      assertNull(string2);
      
      String string3 = weakHashMap0.replace("p2W_)S@^Qj(LtDYI", "@");
      assertNull(string3);
      
      Class<Collator> class1 = Collator.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (JSONType) null, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertSame(class2, class0);
      assertNotNull(list0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertNotNull(stackTraceElementDeserializer0);
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      
      Insets insets0 = new Insets((-2002), 1443, 23, (-1524));
      assertNotNull(insets0);
      assertEquals(23, insets0.bottom);
      assertEquals(1443, insets0.left);
      assertEquals((-1524), insets0.right);
      assertEquals((-2002), insets0.top);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(insets0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(23, insets0.bottom);
      assertEquals(1443, insets0.left);
      assertEquals((-1524), insets0.right);
      assertEquals((-2002), insets0.top);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((SortedMap<String, ? extends Field>) treeMap0);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotNull(treeMap1);
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      
      NavigableSet<String> navigableSet0 = treeMap1.descendingKeySet();
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotSame(treeMap0, treeMap1);
      assertNotSame(treeMap1, treeMap0);
      assertNotNull(navigableSet0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertNotSame(treeMap0, treeMap1);
      assertNotNull(list0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "nA8Pu%0L06CDVR:";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nA8Pu%0L06CDVR:");
      assertFalse(boolean0);
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.SQLSyntaxErrorException", class1.toString());
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.SQLSyntaxErrorException", class1.toString());
      
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.SQLSyntaxErrorException", class1.toString());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1, (Type) null);
      assertNotNull(javaBeanDeserializer0);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.SQLSyntaxErrorException", class1.toString());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, javaBeanDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      parserConfig0.setAutoTypeSupport(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<BigDecimal> class2 = BigDecimal.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanDeserializer0, class2, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("da@e");
      assertEquals((-8848920814192411099L), long0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      String string0 = " not found";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("da@e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : da@e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constructor<NumberDeserializer>[] constructorArray0 = (Constructor<NumberDeserializer>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkageError linkageError0 = new LinkageError();
      assertNotNull(linkageError0);
      assertNull(linkageError0.getMessage());
      assertEquals("java.lang.LinkageError", linkageError0.toString());
      
      ParameterizedType parameterizedType0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<MapDeserializer> class0 = MapDeserializer.class;
      parserConfig0.setAsmEnable(false);
      assertFalse(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo1 = JavaBeanInfo.build((Class<?>) class1, (Type) javaBeanInfo0.clazz, propertyNamingStrategy1);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(javaBeanInfo1.equals((Object)javaBeanInfo0));
      assertFalse(propertyNamingStrategy0.equals((Object)propertyNamingStrategy1));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(javaBeanInfo1, javaBeanInfo0);
      assertNotSame(propertyNamingStrategy0, propertyNamingStrategy1);
      assertNotSame(javaBeanInfo0, javaBeanInfo1);
      assertNotNull(javaBeanInfo1);
      assertEquals(0, javaBeanInfo1.parserFeatures);
      assertEquals(0, javaBeanInfo1.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        parserConfig1.checkAutoType("org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate -> com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      String string0 = TypeUtils.decapitalize("can not cast to double, value : ");
      assertEquals("can not cast to double, value : ", string0);
      assertNotNull(string0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("%1K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("%1K", classLoader0);
      assertNull(class0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      parserConfig0.setDefaultClassLoader(classLoader1);
      assertSame(classLoader1, classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      AtomicLong atomicLong0 = new AtomicLong(2626L);
      assertNotNull(atomicLong0);
      assertEquals(2626L, atomicLong0.longValue());
      assertEquals("2626", atomicLong0.toString());
      assertEquals((byte)66, atomicLong0.byteValue());
      assertEquals(2626, atomicLong0.intValue());
      assertEquals((short)2626, atomicLong0.shortValue());
      assertEquals(2626.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(2626L, atomicLong0.get());
      assertEquals(2626.0, atomicLong0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("%1K", classLoader0);
      assertNull(class0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      parserConfig0.setDefaultClassLoader(classLoader1);
      assertSame(classLoader1, classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      String string0 = TypeUtils.decapitalize("can not cast to double, value : ");
      assertEquals("can not cast to double, value : ", string0);
      assertNotNull(string0);
      
      Class<Float> class1 = Float.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("float", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      int int0 = DateFormat.YEAR_FIELD;
      assertEquals(1, int0);
      
      String string1 = TypeUtils.decapitalize("fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autoTypeAccept", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      TreeMap<RuntimeException, SQLTransactionRollbackException> treeMap0 = new TreeMap<RuntimeException, SQLTransactionRollbackException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(treeMap0);
      assertNull(bigDecimal0);
      assertEquals(0, treeMap0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory");
      assertNotNull(threadGroup0);
      assertEquals("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, (String) null);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      assertNull(threadGroup1.getName());
      assertEquals("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", threadGroup0.getName());
      
      String string2 = TypeUtils.decapitalize("WriteNullListAsEmpty");
      assertEquals("writeNullListAsEmpty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Float float0 = new Float(434.8115679);
      assertEquals(434.81155F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<?> class0 = TypeUtils.getClassFromMapping("scanLong");
      assertNull(class0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      NavigableSet<String> navigableSet0 = treeMap0.descendingKeySet();
      assertNotNull(navigableSet0);
      assertEquals(0, treeMap0.size());
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = new Float(0.75);
      assertEquals(0.75F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>(linkedHashMap0);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      boolean boolean1 = TypeUtils.isNumber("Z");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = TypeUtils.decapitalize("Ljava.awt.Rectangle");
      assertEquals("ljava.awt.Rectangle", string0);
      assertNotNull(string0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNotNull(noSuchMethodError0);
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      
      Short short0 = new Short((short)2779);
      assertEquals((short)2779, (short)short0);
      assertNotNull(short0);
      
      Float float1 = TypeUtils.castToFloat(short0);
      assertEquals(2779.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("%1K", classLoader0);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Locale locale0 = TypeUtils.toLocale("getClass");
      assertNotNull(locale0);
      assertEquals("getclass", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("getclass", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = TypeUtils.isNumber("(Ljava/util/Collection;)V");
      assertFalse(boolean0);
      
      classLoader0.setClassAssertionStatus("fastjson.parser.deny", true);
      assertSame(classLoader0, classLoader1);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      classLoader0.setClassAssertionStatus("fastjson.parser.deny", true);
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader0, classLoader1);
      
      Class<?> class1 = TypeUtils.loadClass("/Nl:4=Qy8^}O", classLoader2);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("%1K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%1K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Short short0 = new Short((short) (-2100));
      assertEquals((short) (-2100), (short)short0);
      assertNotNull(short0);
      
      long long0 = Short.toUnsignedLong((short) (-2100));
      assertEquals(63436L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      long long1 = Short.toUnsignedLong((short) (-2100));
      assertEquals(63436L, long1);
      assertTrue(long1 == long0);
      
      parserConfig0.setAsmEnable(false);
      assertFalse(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      long long2 = Short.toUnsignedLong((short) (-2100));
      assertEquals(63436L, long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      Locale locale0 = TypeUtils.toLocale("&Pk");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("&pk", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("&pk", locale0.getLanguage());
      assertEquals("&pk", locale0.getISO3Language());
      
      boolean boolean1 = TypeUtils.isNumber("&Pk");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      classLoader0.setClassAssertionStatus("&Pk", true);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("%1K", classLoader0);
      assertNull(class0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)124;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)124, bigInteger0.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)124, bigInteger0.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger2);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotNull(bigInteger3);
      assertEquals((short)124, bigInteger0.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger3);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotNull(bigDecimal0);
      assertEquals((short)124, bigInteger0.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      String string0 = bigDecimal0.toPlainString();
      assertEquals("0", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotNull(string0);
      assertEquals((short)124, bigInteger0.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      Class<?> class1 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
      assertNull(class1);
      
      BigInteger bigInteger4 = bigInteger1.shiftRight((-4171));
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertFalse(bigInteger4.equals((Object)bigInteger1));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger3);
      assertNotSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotNull(bigInteger4);
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)0, bigInteger4.shortValue());
      
      String string1 = "Ljava.awt.Font";
      BigInteger bigInteger5 = bigInteger3.andNot(bigInteger2);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertFalse(bigInteger5.equals((Object)bigInteger1));
      assertTrue(bigInteger5.equals((Object)bigInteger2));
      assertFalse(bigInteger5.equals((Object)bigInteger0));
      assertFalse(bigInteger5.equals((Object)bigInteger4));
      assertTrue(bigInteger5.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger4));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger4));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertNotSame(bigInteger5, bigInteger3);
      assertNotSame(bigInteger5, bigInteger1);
      assertNotSame(bigInteger5, bigInteger2);
      assertNotSame(bigInteger5, bigInteger0);
      assertNotSame(bigInteger5, bigInteger4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotSame(bigInteger2, bigInteger0);
      assertSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger4);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger5);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger4);
      assertNotSame(bigInteger3, bigInteger5);
      assertNotSame(bigInteger3, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotNull(bigInteger5);
      assertEquals((byte)0, bigInteger5.byteValue());
      assertEquals((short)0, bigInteger5.shortValue());
      assertEquals((short)124, bigInteger0.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      
      BigInteger bigInteger6 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertTrue(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertNotNull(bigInteger6);
      assertEquals((byte)124, bigInteger6.byteValue());
      assertEquals((short)124, bigInteger6.shortValue());
      
      BigInteger bigInteger7 = bigInteger1.remainder(bigInteger6);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertTrue(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger7.equals((Object)bigInteger0));
      assertTrue(bigInteger7.equals((Object)bigInteger5));
      assertFalse(bigInteger7.equals((Object)bigInteger4));
      assertFalse(bigInteger7.equals((Object)bigInteger6));
      assertFalse(bigInteger7.equals((Object)bigInteger1));
      assertTrue(bigInteger1.equals((Object)bigInteger6));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger4));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger5));
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger7, bigInteger0);
      assertSame(bigInteger7, bigInteger2);
      assertSame(bigInteger7, bigInteger3);
      assertNotSame(bigInteger7, bigInteger4);
      assertNotSame(bigInteger7, bigInteger6);
      assertNotSame(bigInteger7, bigInteger5);
      assertNotSame(bigInteger7, bigInteger1);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger6);
      assertNotSame(bigInteger1, bigInteger4);
      assertNotSame(bigInteger1, bigInteger7);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger5);
      assertNotNull(bigInteger7);
      assertEquals((byte)124, bigInteger6.byteValue());
      assertEquals((short)124, bigInteger6.shortValue());
      assertEquals((byte)0, bigInteger7.byteValue());
      assertEquals((short)0, bigInteger7.shortValue());
      assertEquals((short)124, bigInteger1.shortValue());
      assertEquals((byte)124, bigInteger1.byteValue());
      
      BigInteger bigInteger8 = bigInteger6.remainder(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)124}, byteArray0);
      assertTrue(bigInteger6.equals((Object)bigInteger1));
      assertFalse(bigInteger6.equals((Object)bigInteger4));
      assertFalse(bigInteger6.equals((Object)bigInteger5));
      assertFalse(bigInteger6.equals((Object)bigInteger2));
      assertFalse(bigInteger6.equals((Object)bigInteger3));
      assertTrue(bigInteger6.equals((Object)bigInteger0));
      assertFalse(bigInteger6.equals((Object)bigInteger7));
      assertFalse(bigInteger8.equals((Object)bigInteger6));
      assertFalse(bigInteger8.equals((Object)bigInteger0));
      assertTrue(bigInteger8.equals((Object)bigInteger5));
      assertFalse(bigInteger8.equals((Object)bigInteger1));
      assertFalse(bigInteger8.equals((Object)bigInteger4));
      assertTrue(bigInteger0.equals((Object)bigInteger6));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger4));
      assertFalse(bigInteger0.equals((Object)bigInteger5));
      assertTrue(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger7));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertNotSame(bigInteger6, bigInteger4);
      assertNotSame(bigInteger6, bigInteger5);
      assertNotSame(bigInteger6, bigInteger2);
      assertNotSame(bigInteger6, bigInteger0);
      assertNotSame(bigInteger6, bigInteger1);
      assertNotSame(bigInteger6, bigInteger3);
      assertNotSame(bigInteger6, bigInteger7);
      assertNotSame(bigInteger6, bigInteger8);
      assertNotSame(bigInteger8, bigInteger6);
      assertSame(bigInteger8, bigInteger7);
      assertSame(bigInteger8, bigInteger2);
      assertNotSame(bigInteger8, bigInteger0);
      assertNotSame(bigInteger8, bigInteger5);
      assertNotSame(bigInteger8, bigInteger1);
      assertNotSame(bigInteger8, bigInteger4);
      assertSame(bigInteger8, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger4);
      assertNotSame(bigInteger0, bigInteger5);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger7);
      assertNotSame(bigInteger0, bigInteger8);
      assertNotSame(bigInteger0, bigInteger6);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotNull(bigInteger8);
      assertEquals((byte)124, bigInteger6.byteValue());
      assertEquals((short)124, bigInteger6.shortValue());
      assertEquals((short)0, bigInteger8.shortValue());
      assertEquals((byte)0, bigInteger8.byteValue());
      assertEquals((short)124, bigInteger0.shortValue());
      assertEquals((byte)124, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Time time0 = new Time(2002190336L);
      assertNotNull(time0);
      assertEquals("04:09:50", time0.toString());
      
      Type[] typeArray0 = new Type[0];
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) time0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 2002190336
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((byte)14, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((short)14, bigInteger1.shortValue());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      assertNotNull(pageAttributes_ColorType0);
      
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.ISO_B2;
      assertNotNull(pageAttributes_MediaType0);
      
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PRINTABLE;
      assertNotNull(pageAttributes_OriginType0);
      
      PageAttributes.PrintQualityType pageAttributes_PrintQualityType0 = PageAttributes.PrintQualityType.DRAFT;
      assertNotNull(pageAttributes_PrintQualityType0);
      
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("O'TiXe2RM0T:I", "O'TiXe2RM0T:I", sQLException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("O'TiXe2RM0T:I", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("O'TiXe2RM0T:I", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: O'TiXe2RM0T:I", sQLFeatureNotSupportedException0.toString());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)14, bigDecimal0.byteValue());
      assertEquals((short)14, bigDecimal0.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((short)14, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Float float0 = new Float(434.8115679);
      assertEquals(434.81155F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.replace("W4DDHC1M_i<pY.r", (String) null);
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      String string1 = TypeUtils.decapitalize((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("%1K", classLoader0);
      assertNull(class0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Locale locale0 = TypeUtils.toLocale("bv&pq_%+U{");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("%+U{", locale0.getCountry());
      assertEquals("bv&pq_%+U{", locale0.toString());
      assertEquals("bv&pq", locale0.getLanguage());
      
      boolean boolean0 = TypeUtils.isNumber("%1K");
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      ClassLoader classLoader3 = classLoader2.getParent();
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader3);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertNotNull(aSMDeserializerFactory0);
      
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      Short short0 = new Short((short)90);
      assertEquals((short)90, (short)short0);
      assertNotNull(short0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((short)90);
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("String index out of range: 90", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: 90", stringIndexOutOfBoundsException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      long long0 = Short.toUnsignedLong((short)1);
      assertEquals(1L, long0);
      
      Short short0 = new Short((short)7);
      assertEquals((short)7, (short)short0);
      assertNotNull(short0);
      
      Locale locale0 = TypeUtils.toLocale("rNZ%Z3/i__Fe");
      assertNotNull(locale0);
      assertEquals("Fe", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("rnz%z3/i", locale0.getLanguage());
      assertEquals("rnz%z3/i__Fe", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = TypeUtils.isNumber("rNZ%Z3/i__Fe");
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean1 = weakHashMap0.isEmpty();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Properties> class2 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      classLoader1.setClassAssertionStatus((String) null, false);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.clearAssertionStatus();
      assertSame(classLoader1, classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("nu*y$L|i27", classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNull(class0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      long long0 = TypeUtils.fnv1a_64_lower("da@e");
      assertEquals((-8848920814192411099L), long0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertEquals("class java.lang.RuntimeException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class2);
      assertNull(annotation0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<RuleBasedCollator> class3 = RuleBasedCollator.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class3, (Map<String, String>) null, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockGregorianCalendar0);
      assertTrue(boolean0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      classLoader0.setPackageAssertionStatus("getMetaClass", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertNotNull(jobAttributes0);
      assertNull(jobAttributes0.getFileName());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(1, jobAttributes0.getMinPage());
      assertEquals(1, jobAttributes0.getCopies());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getFromPage());
      
      Character character0 = new Character('I');
      assertEquals('I', (char)character0);
      assertNotNull(character0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(zoneInfo0, locale0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotNull(date0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<BufferCapabilities> class4 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      double double0 = Double.min(1.0, 1.0);
      assertEquals(1.0, double0, 0.01);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class2);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Collection collection0 = TypeUtils.createCollection(class2);
      assertNotNull(collection0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      long long0 = TypeUtils.fnv1a_64_lower("?sVHdpk!@");
      assertEquals((-5643830623533852606L), long0);
      
      String string0 = "ge6TzbD,{-]z";
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class4 = TypeUtils.loadClass("getDeclaringClass", classLoader0, false);
      assertNull(class4);
      
      Class<MockSimpleDateFormat> class5 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class5, "ge6TzbD,{-]z", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = new Float(434.8115679);
      assertEquals(434.81155F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertNotNull(linkedHashMap1);
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      boolean boolean2 = TypeUtils.isNumber("cN5]QK:f#8@");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      classLoader1.setClassAssertionStatus("cN5]QK:f#8@", false);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("N", classLoader0);
      assertSame(classLoader0, classLoader1);
      assertNull(class0);
      
      java.util.Date date0 = TypeUtils.castToDate(float0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      SecurityException securityException0 = new SecurityException("toS");
      assertNotNull(securityException0);
      assertEquals("toS", securityException0.getMessage());
      assertEquals("java.lang.SecurityException: toS", securityException0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Class<?> class1 = TypeUtils.loadClass("cN5]QK:f#8@", classLoader0, true);
      assertSame(classLoader0, classLoader1);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Short short0 = new Short((short)65);
      assertEquals((short)65, (short)short0);
      assertNotNull(short0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      parserConfig1.setDefaultClassLoader(classLoader0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.deny");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fastjson.parser.deny", locale0.getLanguage());
      assertEquals("fastjson.parser.deny", locale0.toString());
      
      boolean boolean0 = TypeUtils.isNumber("I!/@+\"6G9!/j}RZI_w");
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "&Pk", (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("long", class1.toString());
      assertFalse(class1.isArray());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      AtomicLong atomicLong0 = new AtomicLong((-596L));
      assertNotNull(atomicLong0);
      assertEquals((-596.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-596), atomicLong0.intValue());
      assertEquals((short) (-596), atomicLong0.shortValue());
      assertEquals((-596L), atomicLong0.get());
      assertEquals("-596", atomicLong0.toString());
      assertEquals((byte) (-84), atomicLong0.byteValue());
      assertEquals((-596L), atomicLong0.longValue());
      assertEquals((-596.0), atomicLong0.doubleValue(), 0.01);
      
      long long0 = atomicLong0.getAndSet(131L);
      assertEquals((-596L), long0);
      assertEquals(131.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(131.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-125), atomicLong0.byteValue());
      assertEquals(131, atomicLong0.intValue());
      assertEquals(131L, atomicLong0.get());
      assertEquals("131", atomicLong0.toString());
      assertEquals((short)131, atomicLong0.shortValue());
      assertEquals(131L, atomicLong0.longValue());
      
      boolean boolean2 = TypeUtils.isKotlin(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("long", class1.toString());
      assertFalse(class1.isArray());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(aSMDeserializerFactory0);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MhvcbEb19Oi");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "F%1K", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "g^(ZP";
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Class<OptionalCodec> class1 = OptionalCodec.class;
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class2);
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      
      Random.setNextRandom((-1286));
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@68fadd8e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gMm9{VdbDU\"7;_x;A^");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "kPOG'";
      classLoader0.setClassAssertionStatus("gMm9{VdbDU\"7;_x;A^", true);
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "gMm9{VdbDU\"7;_x;A^");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer(class0, type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"instrumentation\":{},\"loadedClasses\":[\"com.alibaba.fastjson.asm.ClassWriter\",\"com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer\",\"com.alibaba.fastjson.util.ASMUtils\",\"com.alibaba.fastjson.JSONPath\",\"com.alibaba.fastjson.parser.JSONScanner\",\"com.alibaba.fastjson.parser.JSONLexerBase\",\"com.alibaba.fastjson.parser.deserializer.ParseProcess\",\"com.alibaba.fastjson.serializer.JSONSerializable\",\"com.alibaba.fastjson.parser.deserializer.OptionalCodec\",\"com.alibaba.fastjson.serializer.SerializeWriter\",\"com.alibaba.fastjson.serializer.ReferenceCodec\",\"com.alibaba.fastjson.JSONException\",\"com.alibaba.fastjson.serializer.ObjectArrayCodec\",\"com.alibaba.fastjson.serializer.ToStringSerializer\",\"com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer\",\"com.alibaba.fastjson.serializer.SerialContext\",\"com.alibaba.fastjson.serializer.AfterFilter\",\"com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer\",\"com.alibaba.fastjson.serializer.ObjectSerializer\",\"com.alibaba.fastjson.TypeReference\",\"com.alibaba.fastjson.asm.Item\",\"com.alibaba.fastjson.serializer.MapSerializer\",\"com.alibaba.fastjson.serializer.DateCodec\",\"com.alibaba.fastjson.parser.deserializer.EnumDeserializer\",\"com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer\",\"com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider\",\"com.alibaba.fastjson.serializer.BigDecimalCodec\",\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\",\"com.alibaba.fastjson.util.FieldInfo\",\"com.alibaba.fastjson.annotation.JSONField\",\"com.alibaba.fastjson.serializer.PropertyFilter\",\"com.alibaba.fastjson.parser.SymbolTable\",\"com.alibaba.fastjson.serializer.NameFilter\",\"com.alibaba.fastjson.serializer.ListSerializer\",\"com.alibaba.fastjson.JSONArray\",\"com.alibaba.fastjson.JSONAware\",\"com.alibaba.fastjson.serializer.LongCodec\",\"com.alibaba.fastjson.util.ASMClassLoader\",\"com.alibaba.fastjson.PropertyNamingStrategy\",\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\",\"com.alibaba.fastjson.parser.JSONToken\",\"com.alibaba.fastjson.serializer.AppendableSerializer\",\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\",\"com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer\",\"com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer\",\"com.alibaba.fastjson.serializer.ContextValueFilter\",\"com.alibaba.fastjson.util.ServiceLoader\",\"com.alibaba.fastjson.serializer.ASMSerializerFactory$Context\",\"com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer\",\"com.alibaba.fastjson.serializer.ContextObjectSerializer\",\"com.alibaba.fastjson.parser.DefaultJSONParser\",\"com.alibaba.fastjson.parser.deserializer.MapDeserializer\",\"com.alibaba.fastjson.serializer.BeanContext\",\"com.alibaba.fastjson.serializer.AutowiredObjectSerializer\",\"com.alibaba.fastjson.util.IdentityHashMap\",\"com.alibaba.fastjson.serializer.BigIntegerCodec\",\"com.alibaba.fastjson.JSON\",\"com.alibaba.fastjson.serializer.StringCodec\",\"com.alibaba.fastjson.serializer.SerializeFilterable\",\"com.alibaba.fastjson.JSONWriter\",\"com.alibaba.fastjson.asm.Opcodes\",\"com.alibaba.fastjson.JSONReader\",\"com.alibaba.fastjson.JSONStreamAware\",\"com.alibaba.fastjson.asm.MethodWriter\",\"com.alibaba.fastjson.serializer.SerializeBeanInfo\",\"com.alibaba.fastjson.serializer.SerializerFeature\",\"com.alibaba.fastjson.TypeReference$1\",\"com.alibaba.fastjson.serializer.CalendarCodec\",\"com.alibaba.fastjson.PropertyNamingStrategy$1\",\"com.alibaba.fastjson.util.IOUtils\",\"com.alibaba.fastjson.util.TypeUtils\",\"com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer\",\"com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory\",\"com.alibaba.fastjson.serializer.MiscCodec\",\"com.alibaba.fastjson.util.IOUtils$1\",\"com.alibaba.fastjson.serializer.IntegerCodec\",\"com.alibaba.fastjson.serializer.SerializeFilter\",\"com.alibaba.fastjson.JSONPObject\",\"com.alibaba.fastjson.parser.deserializer.ExtraProcessor\",\"com.alibaba.fastjson.serializer.BeforeFilter\",\"com.alibaba.fastjson.parser.deserializer.ExtraProcessable\",\"com.alibaba.fastjson.serializer.ArraySerializer\",\"com.alibaba.fastjson.util.ParameterizedTypeImpl\",\"com.alibaba.fastjson.parser.deserializer.TimeDeserializer\",\"com.alibaba.fastjson.JSONObject\",\"com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer\",\"com.alibaba.fastjson.serializer.CharacterCodec\",\"com.alibaba.fastjson.parser.deserializer.ObjectDeserializer\",\"com.alibaba.fastjson.asm.ByteVector\",\"com.alibaba.fastjson.parser.JSONLexer\",\"com.alibaba.fastjson.asm.Label\",\"com.alibaba.fastjson.util.ASMClassLoader$1\",\"com.alibaba.fastjson.asm.FieldWriter\",\"com.alibaba.fastjson.serializer.JSONSerializer\",\"com.alibaba.fastjson.util.JavaBeanInfo\",\"com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer\",\"com.alibaba.fastjson.serializer.SerializeConfig\",\"com.alibaba.fastjson.serializer.AtomicCodec\",\"com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer\",\"com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo\",\"com.alibaba.fastjson.asm.Type\",\"com.alibaba.fastjson.serializer.FieldSerializer\",\"com.alibaba.fastjson.serializer.FloatCodec\",\"com.alibaba.fastjson.parser.JSONReaderScanner\",\"com.alibaba.fastjson.serializer.ValueFilter\",\"com.alibaba.fastjson.JSONPathException\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\",\"com.alibaba.fastjson.serializer.Labels\",\"com.alibaba.fastjson.serializer.CollectionCodec\",\"com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer\",\"com.alibaba.fastjson.parser.deserializer.PropertyProcessable\",\"com.alibaba.fastjson.serializer.CharArrayCodec\",\"com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context\",\"com.alibaba.fastjson.asm.MethodVisitor\",\"com.alibaba.fastjson.annotation.JSONCreator\",\"com.alibaba.fastjson.parser.deserializer.NumberDeserializer\",\"com.alibaba.fastjson.annotation.JSONType\",\"com.alibaba.fastjson.serializer.LabelFilter\",\"com.alibaba.fastjson.serializer.JavaBeanSerializer\",\"com.alibaba.fastjson.util.IdentityHashMap$Entry\",\"com.alibaba.fastjson.serializer.DoubleSerializer\",\"com.alibaba.fastjson.serializer.ASMSerializerFactory\",\"com.alibaba.fastjson.serializer.BooleanCodec\",\"com.alibaba.fastjson.parser.ParserConfig\",\"com.alibaba.fastjson.parser.Feature\",\"com.alibaba.fastjson.serializer.PropertyPreFilter\",\"com.alibaba.fastjson.parser.ParseContext\"],\"viewOfInstrumentedClasses\":[\"com.alibaba.fastjson.asm.ClassWriter\",\"com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer\",\"com.alibaba.fastjson.util.ASMUtils\",\"com.alibaba.fastjson.JSONPath\",\"com.alibaba.fastjson.parser.JSONScanner\",\"com.alibaba.fastjson.parser.JSONLexerBase\",\"com.alibaba.fastjson.parser.deserializer.ParseProcess\",\"com.alibaba.fastjson.serializer.JSONSerializable\",\"com.alibaba.fastjson.parser.deserializer.OptionalCodec\",\"com.alibaba.fastjson.serializer.SerializeWriter\",\"com.alibaba.fastjson.serializer.ReferenceCodec\",\"com.alibaba.fastjson.JSONException\",\"com.alibaba.fastjson.serializer.ObjectArrayCodec\",\"com.alibaba.fastjson.serializer.ToStringSerializer\",\"com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer\",\"com.alibaba.fastjson.serializer.SerialContext\",\"com.alibaba.fastjson.serializer.AfterFilter\",\"com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer\",\"com.alibaba.fastjson.serializer.ObjectSerializer\",\"com.alibaba.fastjson.TypeReference\",\"com.alibaba.fastjson.asm.Item\",\"com.alibaba.fastjson.serializer.MapSerializer\",\"com.alibaba.fastjson.serializer.DateCodec\",\"com.alibaba.fastjson.parser.deserializer.EnumDeserializer\",\"com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer\",\"com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider\",\"com.alibaba.fastjson.serializer.BigDecimalCodec\",\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\",\"com.alibaba.fastjson.util.FieldInfo\",\"com.alibaba.fastjson.annotation.JSONField\",\"com.alibaba.fastjson.serializer.PropertyFilter\",\"com.alibaba.fastjson.parser.SymbolTable\",\"com.alibaba.fastjson.serializer.NameFilter\",\"com.alibaba.fastjson.serializer.ListSerializer\",\"com.alibaba.fastjson.JSONArray\",\"com.alibaba.fastjson.JSONAware\",\"com.alibaba.fastjson.serializer.LongCodec\",\"com.alibaba.fastjson.util.ASMClassLoader\",\"com.alibaba.fastjson.PropertyNamingStrategy\",\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\",\"com.alibaba.fastjson.parser.JSONToken\",\"com.alibaba.fastjson.serializer.AppendableSerializer\",\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\",\"com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer\",\"com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer\",\"com.alibaba.fastjson.serializer.ContextValueFilter\",\"com.alibaba.fastjson.util.ServiceLoader\",\"com.alibaba.fastjson.serializer.ASMSerializerFactory$Context\",\"com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer\",\"com.alibaba.fastjson.serializer.ContextObjectSerializer\",\"com.alibaba.fastjson.parser.DefaultJSONParser\",\"com.alibaba.fastjson.parser.deserializer.MapDeserializer\",\"com.alibaba.fastjson.serializer.BeanContext\",\"com.alibaba.fastjson.serializer.AutowiredObjectSerializer\",\"com.alibaba.fastjson.util.IdentityHashMap\",\"com.alibaba.fastjson.serializer.BigIntegerCodec\",\"com.alibaba.fastjson.JSON\",\"com.alibaba.fastjson.serializer.StringCodec\",\"com.alibaba.fastjson.serializer.SerializeFilterable\",\"com.alibaba.fastjson.JSONWriter\",\"com.alibaba.fastjson.asm.Opcodes\",\"com.alibaba.fastjson.JSONReader\",\"com.alibaba.fastjson.JSONStreamAware\",\"com.alibaba.fastjson.asm.MethodWriter\",\"com.alibaba.fastjson.serializer.SerializeBeanInfo\",\"com.alibaba.fastjson.serializer.SerializerFeature\",\"com.alibaba.fastjson.TypeReference$1\",\"com.alibaba.fastjson.serializer.CalendarCodec\",\"com.alibaba.fastjson.PropertyNamingStrategy$1\",\"com.alibaba.fastjson.util.IOUtils\",\"com.alibaba.fastjson.util.TypeUtils\",\"com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer\",\"com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory\",\"com.alibaba.fastjson.serializer.MiscCodec\",\"com.alibaba.fastjson.util.IOUtils$1\",\"com.alibaba.fastjson.serializer.IntegerCodec\",\"com.alibaba.fastjson.serializer.SerializeFilter\",\"com.alibaba.fastjson.JSONPObject\",\"com.alibaba.fastjson.parser.deserializer.ExtraProcessor\",\"com.alibaba.fastjson.serializer.BeforeFilter\",\"com.alibaba.fastjson.parser.deserializer.ExtraProcessable\",\"com.alibaba.fastjson.serializer.ArraySerializer\",\"com.alibaba.fastjson.util.ParameterizedTypeImpl\",\"com.alibaba.fastjson.parser.deserializer.TimeDeserializer\",\"com.alibaba.fastjson.JSONObject\",\"com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer\",\"com.alibaba.fastjson.serializer.CharacterCodec\",\"com.alibaba.fastjson.parser.deserializer.ObjectDeserializer\",\"com.alibaba.fastjson.asm.ByteVector\",\"com.alibaba.fastjson.parser.JSONLexer\",\"com.alibaba.fastjson.asm.Label\",\"com.alibaba.fastjson.util.ASMClassLoader$1\",\"com.alibaba.fastjson.asm.FieldWriter\",\"com.alibaba.fastjson.serializer.JSONSerializer\",\"com.alibaba.fastjson.util.JavaBeanInfo\",\"com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer\",\"com.alibaba.fastjson.serializer.SerializeConfig\",\"com.alibaba.fastjson.serializer.AtomicCodec\",\"com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer\",\"com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo\",\"com.alibaba.fastjson.asm.Type\",\"com.alibaba.fastjson.serializer.FieldSerializer\",\"com.alibaba.fastjson.serializer.FloatCodec\",\"com.alibaba.fastjson.parser.JSONReaderScanner\",\"com.alibaba.fastjson.serializer.ValueFilter\",\"com.alibaba.fastjson.JSONPathException\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\",\"com.alibaba.fastjson.serializer.Labels\",\"com.alibaba.fastjson.serializer.CollectionCodec\",\"com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer\",\"com.alibaba.fastjson.parser.deserializer.PropertyProcessable\",\"com.alibaba.fastjson.serializer.CharArrayCodec\",\"com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context\",\"com.alibaba.fastjson.asm.MethodVisitor\",\"com.alibaba.fastjson.annotation.JSONCreator\",\"com.alibaba.fastjson.parser.deserializer.NumberDeserializer\",\"com.alibaba.fastjson.annotation.JSONType\",\"com.alibaba.fastjson.serializer.LabelFilter\",\"com.alibaba.fastjson.serializer.JavaBeanSerializer\",\"com.alibaba.fastjson.util.IdentityHashMap$Entry\",\"com.alibaba.fastjson.serializer.DoubleSerializer\",\"com.alibaba.fastjson.serializer.ASMSerializerFactory\",\"com.alibaba.fastjson.serializer.BooleanCodec\",\"com.alibaba.fastjson.parser.ParserConfig\",\"com.alibaba.fastjson.parser.Feature\",\"com.alibaba.fastjson.serializer.PropertyPreFilter\",\"com.alibaba.fastjson.parser.ParseContext\"]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Float float0 = new Float(434.8115679);
      assertEquals(434.81155F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Class<Field> class0 = Field.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      boolean boolean3 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean4 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy1;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Random.setNextRandom((-2894));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)14, bigInteger0.byteValue());
      assertEquals((short)14, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger1.negate();
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Double double0 = Double.valueOf((-1868.3352707347033));
      assertEquals((-1868.3352707347033), (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte byte0 = TypeUtils.castToByte(double0);
      assertEquals((byte) (-76), (byte)byte0);
      assertNotNull(byte0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      Double double1 = TypeUtils.castToDouble(bigInteger2);
      assertEquals((-2.00219035E9), (double)double1, 0.01);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(double1);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      
      String string0 = TypeUtils.castToString(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(string0);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      MathContext mathContext0 = MathContext.DECIMAL128;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-627L), mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-627), bigDecimal0.shortValue());
      assertEquals((byte) (-115), bigDecimal0.byteValue());
      
      String string1 = File.separator;
      assertEquals("/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Byte byte1 = TypeUtils.castToByte((Object) null);
      assertNull(byte1);
      
      boolean boolean0 = TypeUtils.isNumber("/");
      assertFalse(boolean0);
      
      Float float0 = TypeUtils.castToFloat(byte0);
      assertEquals((-76.0F), (float)float0, 0.01F);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(float0);
      
      Class<TimeZone> class0 = TimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Double double2 = jSONObject0.getDouble(")B&;$L");
      assertNull(double2);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      String string0 = "null";
      String string1 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Class<IllegalThreadStateException> class1 = IllegalThreadStateException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("%1K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%1K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      String string0 = outOfMemoryError0.getLocalizedMessage();
      assertNull(string0);
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(outOfMemoryError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = JSON.defaultLocale;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader1.setClassAssertionStatus("getClass", true);
      assertSame(classLoader1, classLoader0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      AtomicLong atomicLong0 = new AtomicLong(1228L);
      assertNotNull(atomicLong0);
      assertEquals((byte) (-52), atomicLong0.byteValue());
      assertEquals(1228, atomicLong0.intValue());
      assertEquals(1228L, atomicLong0.get());
      assertEquals((short)1228, atomicLong0.shortValue());
      assertEquals(1228.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("1228", atomicLong0.toString());
      assertEquals(1228.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(1228L, atomicLong0.longValue());
      
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      VerifyError verifyError0 = new VerifyError("getClass");
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError: getClass", verifyError0.toString());
      assertEquals("getClass", verifyError0.getMessage());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) verifyError0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.VerifyError\",\"localizedMessage\":\"getClass\",\"message\":\"getClass\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor54\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)14, bigInteger0.shortValue());
      assertEquals((byte)14, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger1.negate();
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)87, (byte)0, (byte)14}, byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotNull(bigInteger2);
      assertEquals((short)14, bigInteger1.shortValue());
      assertEquals((byte)14, bigInteger1.byteValue());
      assertEquals((byte) (-14), bigInteger2.byteValue());
      assertEquals((short) (-14), bigInteger2.shortValue());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      MockThread mockThread1 = new MockThread();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      boolean boolean0 = MockThread.interrupted();
      assertFalse(boolean0);
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      String string0 = "";
      Class<?> class1 = TypeUtils.loadClass("", classLoader1, false);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertNotSame(mockThread1, mockThread0);
      assertNull(class1);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = "gMm9{VdbDU\"7;_x;A^";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gMm9{VdbDU\"7;_x;A^");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = new Boolean("gMm9{VdbDU\"7;_x;A^");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertNotNull(class0);
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotNull(class1);
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ArrayList<FieldInfo> arrayList1 = new ArrayList<FieldInfo>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Dimension dimension0 = new Dimension();
      assertNotNull(dimension0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      boolean boolean1 = treeMap1.replace("SL2`m8w&", "(CLjava/lang/String;D)V", "(CLjava/lang/String;D)V");
      assertFalse(boolean1);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(treeMap1, treeMap0);
      assertEquals(0, treeMap1.size());
      
      Map.Entry<String, String> map_Entry0 = treeMap0.floorEntry("(CLjava/lang/String;D)V");
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertNotSame(treeMap0, treeMap1);
      assertNull(map_Entry0);
      assertEquals(0, treeMap0.size());
      
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertNotSame(treeMap0, treeMap1);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
      
      Class<Method> class1 = Method.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      boolean boolean2 = MockThread.interrupted();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      Class<?> class2 = TypeUtils.loadClass("[D", classLoader1, false);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class [D", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<?> class3 = TypeUtils.getRawClass(class1);
      assertFalse(class3.equals((Object)class2));
      assertNotSame(class3, class2);
      assertNotNull(class3);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.reflect.Method", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertEquals(17, class3.getModifiers());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<StackTraceElement> class4 = StackTraceElement.class;
      boolean boolean3 = TypeUtils.isKotlin(class4);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      SQLDataException sQLDataException0 = new SQLDataException("N");
      assertNotNull(sQLDataException0);
      assertEquals("N", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: N", sQLDataException0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader2, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constructor<NumberDeserializer>[] constructorArray0 = (Constructor<NumberDeserializer>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short short0 = new Short((short) (-2100));
      assertEquals((short) (-2100), (short)short0);
      assertNotNull(short0);
      
      long long0 = Short.toUnsignedLong((short)39);
      assertEquals(39L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      parserConfig0.setDefaultClassLoader(classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      long long1 = Short.toUnsignedLong((short) (-2100));
      assertEquals(63436L, long1);
      assertFalse(long1 == long0);
      
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A?Ob~y?]}et+;tL");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("is5toString");
      assertNull(class0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      TreeMap<String, Field> treeMap2 = new TreeMap<String, Field>((SortedMap<String, ? extends Field>) treeMap1);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertTrue(treeMap2.equals((Object)treeMap0));
      assertTrue(treeMap2.equals((Object)treeMap1));
      assertNotNull(treeMap2);
      assertEquals(0, treeMap1.size());
      assertEquals(0, treeMap2.size());
      
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("is5toString");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"is5toString\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Float float0 = new Float(434.8115679);
      assertEquals(434.81155F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Class<Field> class0 = Field.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = weakHashMap0.put("<|", "childContext");
      assertNull(string0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      String string1 = weakHashMap1.replace("x5y@", "%ZYqKPrj+D");
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNull(string1);
      
      Class<Timestamp> class1 = Timestamp.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap1, propertyNamingStrategy0, false);
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertNotNull(serializeBeanInfo1);
      
      String string2 = TypeUtils.decapitalize("AU");
      assertEquals("AU", string2);
      assertNotNull(string2);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<Short> class2 = Short.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "childContext", (Type) class2, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"childContext\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertNotNull(linkedHashMap1);
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      
      TypeUtils.clearClassMapping();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      AtomicLong atomicLong0 = new AtomicLong(1517L);
      assertNotNull(atomicLong0);
      assertEquals(1517.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)1517, atomicLong0.shortValue());
      assertEquals(1517.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(1517, atomicLong0.intValue());
      assertEquals(1517L, atomicLong0.get());
      assertEquals(1517L, atomicLong0.longValue());
      assertEquals((byte) (-19), atomicLong0.byteValue());
      assertEquals("1517", atomicLong0.toString());
      
      long long0 = atomicLong0.incrementAndGet();
      assertEquals(1518L, long0);
      assertEquals((short)1518, atomicLong0.shortValue());
      assertEquals(1518L, atomicLong0.get());
      assertEquals(1518, atomicLong0.intValue());
      assertEquals(1518.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte) (-18), atomicLong0.byteValue());
      assertEquals(1518.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(1518L, atomicLong0.longValue());
      assertEquals("1518", atomicLong0.toString());
      
      long long1 = atomicLong0.getAndSet((-3033L));
      assertEquals(1518L, long1);
      assertTrue(long1 == long0);
      assertEquals((-3033L), atomicLong0.get());
      assertEquals((-3033), atomicLong0.intValue());
      assertEquals((-3033.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-3033.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-3033L), atomicLong0.longValue());
      assertEquals((short) (-3033), atomicLong0.shortValue());
      assertEquals("-3033", atomicLong0.toString());
      assertEquals((byte)39, atomicLong0.byteValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      parserConfig0.setAsmEnable(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      classLoader0.setDefaultAssertionStatus(true);
      parserConfig0.setDefaultClassLoader(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<ImageCapabilities> class3 = ImageCapabilities.class;
      Field field0 = ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", hashMap0);
      assertNull(field0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      FieldInfo fieldInfo0 = new FieldInfo("[I", class3, class0, class2, (Field) null, 57, (-1187), (-1187));
      assertNotNull(fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("[I", fieldInfo0.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1187), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-1187), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      assertNotNull(beanContext0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("[I", fieldInfo0.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals("[I", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals((-1187), beanContext0.getFeatures());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1187), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-1187), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      Class<?> class4 = beanContext0.getFieldClass();
      assertSame(class1, class4);
      assertSame(class1, class2);
      assertSame(class2, class4);
      assertSame(class2, class1);
      assertSame(class4, class2);
      assertSame(class4, class1);
      assertNotNull(class4);
      assertNull(fieldInfo0.getFormat());
      assertEquals("[I", fieldInfo0.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals("[I", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals((-1187), beanContext0.getFeatures());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class4.toString());
      assertFalse(class4.isPrimitive());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1187), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-1187), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) fieldInfo0.fieldClass;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], fieldInfo0.fieldClass);
      assertNotNull(parameterizedTypeImpl0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("[I", fieldInfo0.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1187), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-1187), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class3, parameterizedTypeImpl0);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      assertNull(fieldInfo0.getFormat());
      assertEquals("[I", fieldInfo0.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-1187), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals((-1187), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fieldInfo0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Lorg.springframework.util.LinkedMultiValueMap");
      assertEquals(26574655511921781L, long0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("q4}dar_");
      assertNotNull(threadGroup0);
      assertEquals("q4}dar_", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread("java.util.HashMap");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      assertEquals("q4}dar_", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertEquals("q4}dar_", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      Class<?> class0 = TypeUtils.loadClass("org.springframework.remoting.support.RemoteInvocationResult", classLoader0, false);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNull(class0);
      assertEquals("q4}dar_", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      Class<?> class1 = TypeUtils.getClassFromMapping("ZaGZ58`ml");
      assertNull(class1);
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) null;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      typeArray0[5] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, (Type) null, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertSame(classLoader1, classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader1);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) threadGroup0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@2e9b1f19
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
