/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:02:02 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212674);
      String string0 = "z";
      classWriter0.visitInnerClass("z", "z", "z", 285212684);
      classWriter0.addType("z");
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-90);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1475));
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2821);
      classWriter0.toByteArray();
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 192);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1469));
      int int0 = classWriter0.addType("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.toByteArray();
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2826);
      Long long0 = new Long(1);
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 18;
      ClassWriter classWriter0 = new ClassWriter(18);
      String string0 = "nK7f";
      FieldWriter fieldWriter0 = null;
      classWriter0.firstField = null;
      classWriter0.newUTF8("nK7f");
      classWriter0.newConstItem("nK7f");
      double double0 = 0.0;
      classWriter0.typeTable = null;
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2839);
      Long long0 = new Long(1);
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2821);
      Item item0 = classWriter0.newFieldItem("java/lang/Class", "java/lang/Class", "java/lang/Class");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2821);
      Item item0 = classWriter0.newMethodItem("EnclosingMethod", "EnclosingMethod", "EnclosingMethod", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(263);
      Item[] itemArray0 = new Item[6];
      Item item0 = new Item(83);
      itemArray0[0] = item0;
      Item item1 = classWriter0.newConstItem("Synthetic");
      itemArray0[1] = item1;
      Item item2 = classWriter0.key2;
      itemArray0[2] = item2;
      Item item3 = classWriter0.key2;
      itemArray0[3] = item3;
      item1.strVal3 = "_c\"MBtj'CA5L S";
      Item item4 = classWriter0.newFieldItem("org.apache.commons.io.filefilter.TrueFileFilter", "Z0+wH7SYA", "org.apache.commons.io.filefilter.TrueFileFilter");
      item4.index = 2;
      item4.intVal = 3650;
      itemArray0[4] = item4;
      Item item5 = classWriter0.key;
      item4.strVal2 = "#>,&t(X$B*x3W|TD.>7";
      itemArray0[5] = item5;
      classWriter0.typeTable = itemArray0;
      classWriter0.newMethod("Synthetic", "Synthetic", "Synthetic", false);
      classWriter0.addType("AQ|]2zO[VKi{");
      item5.longVal = (-551L);
      Item item6 = classWriter0.newMethodItem("", "0{<4(Ku>A", "Synthetic", false);
      assertFalse(item6.equals((Object)item5));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      classWriter0.visitOuterClass("ydeg?)+\"", "ydeg?)+\"", "ydeg?)+\"");
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("value ", "FC*GPt|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'value .class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1879));
      String string0 = "cnz%33@kc0m7?'^qxY";
      classWriter0.newField("cnz%33@kc0m7?'^qxY", "cnz%33@kc0m7?'^qxY", "cnz%33@kc0m7?'^qxY");
      Item[] itemArray0 = new Item[2];
      Item item0 = classWriter0.newInteger(502);
      itemArray0[0] = item0;
      Item item1 = classWriter0.key3;
      itemArray0[1] = item1;
      classWriter0.typeTable = itemArray0;
      String string1 = "EnclosingMethod";
      classWriter0.visitField(623, "cnz%33@kc0m7?'^qxY", "EnclosingMethod", "EnclosingMethod", "EnclosingMethod");
      classWriter0.visitSource("cnz%33@kc0m7?'^qxY", "EnclosingMethod");
      classWriter0.toByteArray();
      Locale locale0 = Locale.CHINA;
      item0.strVal3 = "cnz%33@kc0m7?'^qxY";
      Chronology chronology0 = Chronology.ofLocale(locale0);
      chronology0.equals(classWriter0);
      Chronology.getAvailableChronologies();
      // Undeclared exception!
      try { 
        chronology0.dateYearDay((-4155), 3568);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 3568
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      Integer integer0 = new Integer((-2087));
      Item item0 = classWriter0.newConstItem(integer0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4493));
      classWriter0.newMethod("Qb8/csEZ_nP=UONR?", "Qb8/csEZ_nP=UONR?", "yE{[IZu", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xqz9_g8WMDkq*!";
      stringArray0[1] = "xqz9_g8WMDkq*!";
      classWriter0.visit(3160, 5, "", "", "xqz9_g8WMDkq*!", stringArray0);
      Item item0 = classWriter0.newInteger((-4747));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      String string0 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        classWriter0.visit(101, 10, "", "", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      String[] stringArray0 = new String[0];
      classWriter0.visit(3, 4862, "f=<9D%Q0A5]dk", "f=<9D%Q0A5]dk", "f=<9D%Q0A5]dk", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-358));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rrZw";
      stringArray0[1] = "Q#oJ{YG/6";
      stringArray0[2] = "rrZw";
      stringArray0[3] = "Q#oJ{YG/6";
      stringArray0[4] = "rrZw";
      stringArray0[5] = "rrZw";
      stringArray0[6] = "kY3h";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(0, "rrZw", "rrZw", "Q#oJ{YG/6", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]zt9gsSgKCdjv0@KKk";
      classWriter0.visitMethod((-1), "SourceFile", "", "]zt9gsSgKCdjv0@KKk", stringArray0);
      classWriter0.visitOuterClass("Ee<x", "", (String) null);
      classWriter0.newClass("The FileFilter must not be null");
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(16, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(58);
      Boolean boolean0 = Boolean.TRUE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777219);
      classWriter0.newMethodItem(">P[1mLbV", "u", ">P[1mLbV", false);
      classWriter0.newInteger(16777219);
      classWriter0.newFloat((-5509.264F));
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      classWriter0.newConstItem(boolean0);
      classWriter0.newInteger(16777219);
      classWriter0.visitSource(">P[1mLbV", "u");
      // Undeclared exception!
      try { 
        classWriter0.visitOuterClass((String) null, "SourceFile", ">y/N,~jc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@12306a43
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      classWriter0.lastMethod = null;
      classWriter0.typeTable = null;
      classWriter0.visitAnnotation("c}] !}h',3o", false);
      classWriter0.toByteArray();
      classWriter0.newDouble(0.0);
      classWriter0.visitOuterClass(".s.IFJDCS", "_?B$=7", "ZGrt.;QyfhC{1");
      int int0 = classWriter0.addUninitializedType("3en", 47);
      assertEquals(1, int0);
      
      classWriter0.newLong(0L);
      int int1 = classWriter0.addType("SourceFile");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1398));
      classWriter0.visitAnnotation("Label offset position has not been resolved yet", false);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        classWriter0.newConst(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@e731f89
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      classWriter0.lastMethod = null;
      classWriter0.typeTable = null;
      classWriter0.visitAnnotation("c}] !}h',3o", false);
      classWriter0.toByteArray();
      classWriter0.newDouble(0.0);
      classWriter0.visitOuterClass(".s.IFJDCS", "_?B$=7", "ZGrt.;QyfhC{1");
      classWriter0.addUninitializedType("3en", 47);
      Item item0 = classWriter0.newLong(0L);
      Item item1 = classWriter0.newMethodItem("3en", "_?B$=7", "ZGrt.;QyfhC{1", false);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-200));
      classWriter0.thisName = "_AgIG}X&@6|x/r U~";
      Long long0 = new Long(2);
      Long.max(2, 1);
      classWriter0.newConstItem(long0);
      classWriter0.visitInnerClass("RuntimeVisibleAnnotations", "", "", (-200));
      classWriter0.visitSource("_AgIG}X&@6|x/r U~", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1322);
      classWriter0.newLong(0L);
      Item[] itemArray0 = new Item[4];
      Item item0 = classWriter0.key3;
      itemArray0[0] = item0;
      ClassWriter classWriter1 = null;
      try {
        classWriter1 = new ClassWriter((ClassReader) null, 1534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      classWriter0.newDouble(3);
      classWriter0.toByteArray();
      classWriter0.newFloat(3);
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(256L);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      Item item0 = classWriter0.newFloat(256L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2821);
      classWriter0.newInteger(2821);
      classWriter0.visitSource((String) null, "Synthetic");
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("", (String) null, "PS:/Hf!$@X\"n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      classWriter0.visitInnerClass("", "", "", 2995);
      String string0 = null;
      Attribute attribute0 = new Attribute((String) null);
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(55);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.TrueFileFilter", "wheel.asm.ClassWriter");
      Type type0 = Type.LONG_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2592);
      classWriter0.newField("", "", "");
      String string0 = "";
      String string1 = "";
      classWriter0.visitField(2592, "", "", (String) null, "");
      classWriter0.toByteArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.visit(2592, 2592, "", (String) null, "*2>r<_8", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter0.newLong(0L);
      classWriter0.addUninitializedType("PrIr7HE 8XvL<", 16);
      classWriter0.toByteArray();
      String[] stringArray0 = new String[0];
      classWriter0.visit(0, (-1216), "PrIr7HE 8XvL<", "", "PrIr7HE 8XvL<", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      classWriter0.visit(16, 16, "Signature", "", "", (String[]) null);
      // Undeclared exception!
      try { 
        classWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2821);
      Long long0 = new Long(1);
      classWriter0.newConst(long0);
      Item item0 = classWriter0.newLong(1L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2821);
      classWriter0.addUninitializedType("Deprecated", 2821);
      classWriter0.addType("r)Xp}JerD;E2x\"iZJ");
      Class<Long> class0 = Long.class;
      Type.getType(class0);
      Type type0 = Type.getReturnType("Deprecated");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(8, "", "^.Q4-Ehe", "^.Q4-Ehe", type0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      classWriter0.visitInnerClass("Synthetic", "9tj(bZ.^<5bj ", "U", 16);
      classWriter0.visitInnerClass("U", "U", "U", 16);
      int int0 = classWriter0.newUTF8("U");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2821);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      Item item0 = classWriter0.newFloat(2821);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2809);
      Item item0 = classWriter0.newDouble(2809);
      Item item1 = classWriter0.newFloat(2809);
      classWriter0.visitEnd();
      Item item2 = classWriter0.newFloat(2809);
      assertSame(item2, item1);
      
      Item item3 = classWriter0.newDouble(769.875172);
      classWriter0.visitOuterClass("HN", (String) null, "])]2Cs$");
      Item item4 = classWriter0.newDouble(2809);
      assertNotNull(item4);
      assertSame(item4, item0);
      assertNotSame(item4, item3);
      assertNotSame(item4, item1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1806));
      classWriter0.newNameType("_AgUrG}X&\u000E|x/r U~", "_AgUrG}X&\u000E|x/r U~");
      classWriter0.newConst("_AgUrG}X&\u000E|x/r U~");
      classWriter0.newConstItem("_AgUrG}X&\u000E|x/r U~");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("u;JX'_EV", "org.apache.commons.io.filefilter.DirectoryFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: u;JX'_EV
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.visitAnnotation("L", true);
      Item item0 = classWriter0.newFieldItem("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      Item item1 = classWriter0.newFieldItem("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.newMethodItem("", "", "", false);
      classWriter0.newMethodItem("", "", "", false);
      int int0 = classWriter0.addUninitializedType("", 131072);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.TrueFileFilter", 13);
      classWriter0.newFloat(13);
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.TrueFileFilter", 13);
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      Item item0 = new Item();
      classWriter0.newMethodItem("org.apache.commons.io.filefilter.DirectoryFileFilter", "RuntimeInvisibleAnnotations", "java/lang/Object", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(13, (-427));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(647);
      classWriter0.thisName = "";
      byte[] byteArray0 = classWriter0.toByteArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      classWriter0.visit(647, (-1904), "", (String) null, (String) null, (String[]) null);
      classWriter0.newLong(647);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(51);
      classWriter0.newMethodItem("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", false);
      classWriter0.newMethodItem("Deprecated", "System", "wheel.asm.ClassWriter", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":";
      classWriter0.visit((-1205), (-19), "kh", "wheel.asm.ClassWriter", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      byte[] byteArray1 = classWriter0.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
  }
}
