/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:45:21 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.SYSSEQUENCESRowFactory;
import org.apache.derby.impl.store.raw.data.AllocPage;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("~W'!^", "~W'!^", "~W'!^");
      assertEquals("'~W'!^'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "", stringArray0);
      assertEquals(" as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("exec", "drop index", stringArray0, "exec", stringArray0[0], stringArray0);
      assertEquals("exec join exec as null on drop index.null = null.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop index");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.normalize("(99Rb/:n", true);
      assertEquals("(99Rb / : n", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "(99Rb/:n";
      String string1 = SQLUtil.leftJoin((String) null, stringArray0, "(99Rb / : n", (String) null, stringArray0);
      assertEquals("left join (99Rb / : n as null on null.null = null.null and null.(99Rb/:n = null.(99Rb/:n", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBConstraint dBConstraint0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.isQuery("kp&W$!AF|v=j ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WmzT>,A3l}Iy`Y";
      stringArray0[1] = "kp&W$!AF|v=j ";
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("'", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.normalize("null = null", false);
      assertTrue(string1.equals((Object)string0));
      
      DBSchema dBSchema0 = new DBSchema("null = null");
      String string2 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema null = null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("wAl+9DQLkx'l^YC");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select into";
      String string0 = SQLUtil.renderColumnListWithTableName("select into", stringArray0);
      assertEquals("select into.select into", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%vs)c|#\"LI}<Gz";
      stringArray0[1] = "%vs)c|#\"LI}<Gz";
      stringArray0[2] = "%vs)c|#\"LI}<Gz";
      String string0 = SQLUtil.renderColumnListWithTableName("%vs)c|#\"LI}<Gz", stringArray0);
      assertEquals("%vs)c|#\"LI}<Gz.%vs)c|#\"LI}<Gz, %vs)c|#\"LI}<Gz.%vs)c|#\"LI}<Gz, %vs)c|#\"LI}<Gz.%vs)c|#\"LI}<Gz", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("select into", true);
      assertEquals("select into", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("\":XVGJL?m1huuMup2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\":XVGJL?m1huuMup2", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \":XVGJL?m1huuMup2 UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = " DEFAULT ";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(,  DEFAULT )", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.getForeignKeyConstraints();
      DBDataType dBDataType0 = DBDataType.getInstance(90096, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" DEFAULT ", defaultDBTable0, dBDataType0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" DEFAULT ", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals(" DEFAULT   NULL", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(" DEFAULT ,  DEFAULT ", string2);
      
      String string3 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" = '' AND  DEFAULT  = ' DEFAULT '", string3);
      
      boolean boolean1 = SQLUtil.isDDL(" DEFAULT   NULL");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(40);
      SQLUtil.addRequiredCondition("alter index", stringBuilder0);
      String string0 = SQLUtil.renderValue(stringBuilder1);
      assertEquals("40 and alter index", stringBuilder1.toString());
      assertEquals("40 and alter index", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("&Q~wzcpf(T)q.b,]Ya", true);
      assertEquals("& Q ~ wzcpf (T) q.b, ] Ya", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewdrop materialized view");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "k/x'9Sej_(1rw7M", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      String string0 = SQLUtil.join("", "select", stringArray0, "", "left", stringArray0);
      assertEquals(" as left on select.null = left.null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("S", true);
      assertEquals("S", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(39, "~OfUTQX[9fz>}kwAgM1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~OfUTQX[9fz>}kwAgM1", (DBTable) null, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("~OfUTQX[9fz>}kwAgM1", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("~OfUTQX[9fz>}kwAgM1 ~OFUTQX[9FZ>}KWAGM1(3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = " DEFAULT ";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      DBDataType.getInstance((-551), "drop materialized viewxmlparse");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select into$a4^1-i5$k#dma=oeog", false, defaultDBTable0, "callxmlparse");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("\":XVGJL?m1huuMup2", false);
      assertEquals("\":XVGJL?m1huuMup2\"", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.normalize("cv6K;2#BY@};", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter tableecr83uh{*\"\"", true);
      assertEquals("alter tableecr83uh { * \"\"", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableecr83uh{*\"\"");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@foBr";
      stringArray0[1] = "@foBr";
      stringArray0[2] = "@foBr";
      stringArray0[3] = "@foBr";
      stringArray0[4] = "@foBr";
      stringArray0[5] = "@foBr";
      stringArray0[6] = "@foBr";
      stringArray0[7] = "@foBr";
      stringArray0[8] = "@foBr";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "@foBr", false, stringArray0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("@foBr");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.CursorResultSet[]";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.CursorResultSet[]";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.execute.CursorResultSet[]", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.apache.derby.iapi.sql.execute.CursorResultSet[]", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      StringBuilder stringBuilder0 = new StringBuilder(3004);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      SQLUtil.addRequiredCondition("org.apache.derby.iapi.sql.execute.CursorResultSet[]", stringBuilder1);
      assertEquals("org.apache.derby.iapi.sql.execute.CursorResultSet[]", stringBuilder1.toString());
      
      SQLUtil.normalize("setNCharacterStream(int, Reader)", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.apache.derby.iapi.sql.execute.CursorResultSet[] UNIQUE (org.apache.derby.iapi.sql.execute.CursorResultSet[], org.apache.derby.iapi.sql.execute.CursorResultSet[])", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.CursorResultSet[]";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("BLOB", (DBSchema) null);
      defaultDBTable1.getForeignKeyConstraints();
      DBDataType.getInstance(90096, "BLOB");
      DBDataType dBDataType0 = DBDataType.getInstance((-1909486178), "BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fM;(nE!O:sYcj", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ECR83uh{*\"\"", defaultDBTable0, 1289, "");
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      defaultDBColumn0.getNotNullConstraint();
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ECR83uh{*\"\"  NULL", false, stringArray0);
      String string0 = SYSSEQUENCESRowFactory.TABLENAME_STRING;
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ECR83uh{*\"\"  NULL");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8.0";
      stringArray0[1] = "8.0";
      stringArray0[2] = "8.0";
      stringArray0[3] = "8.0";
      stringArray0[4] = "8.0";
      stringArray0[5] = "8.0";
      stringArray0[6] = "8.0";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8.0", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 8.0 FOREIGN KEY (8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0) REFERENCES null(8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0)", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete9g&pnmj.~wt]");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDML("");
      SQLUtil.mutatesDataOrStructure("Cp1251");
      SQLUtil.parseColumnTypeAndSize("");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      Writer writer0 = bufferedWriter0.append((CharSequence) "Cp1251");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execn2j } cq ] q_");
      String[] stringArray0 = new String[2];
      defaultDBTable0.equals("execn2j } cq ] q_");
      stringArray0[0] = "execn2j } cq ] q_";
      stringArray0[1] = "execn2j } cq ] q_";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM execn2j } cq ] q_ WHERE execn2j } cq ] q_ = 'execn2j } cq ] q_' AND execn2j } cq ] q_ = 'execn2j } cq ] q_'", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "exec", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder(90102);
      SQLUtil.addOptionalCondition("exec", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("7*'`wD", true);
      assertEquals("7 * '`wD'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("7*'`wD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.CursorResultSet[]";
      stringArray0[1] = "org.apache.derby.iapi.sql.execute.CursorResultSet[]";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.execute.CursorResultSet[]", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.apache.derby.iapi.sql.execute.CursorResultSet[]", true, dBUniqueConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder(3004);
      String string0 = SQLUtil.normalize("getFetchSize", true);
      assertEquals("getFetchSize", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session3]@");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = ",|r*ov$Dn8/ckj";
      stringArray0[2] = null;
      stringArray0[3] = "`RM";
      stringArray0[4] = null;
      stringArray0[5] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("7Ay:D01law$/r\"");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("7Ay:D01law$/r\"", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7Ay:D01law$/r\"");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "7Ay:D01law$/r\"");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.join("exec", "drop index", stringArray0, "exec", stringArray0[0], stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(65, "exec");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer1, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = PermDescriptor.USAGE_PRIV;
      assertEquals("USAGE", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompositeDBObject<DBPackage> compositeDBObject0 = (CompositeDBObject<DBPackage>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("select", compositeDBObject0);
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("select", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("i<f]X<=e`w", dBCatalog0);
      dBCatalog0.removeSchema(dBSchema0);
      SQLUtil.join("exec", "drop index", stringArray0, "exec", stringArray0[0], stringArray0);
      SQLUtil.normalize("c0NO)(U\"[B0N)I", true);
      SQLUtil.mutatesDataOrStructure("i<f]X<=e`w");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "exec");
      SQLUtil.addOptionalCondition("exec", stringBuilder1);
      assertEquals("exec or exec", stringBuilder1.toString());
      assertEquals("exec or exec", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(5, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName((DBObject) null);
      String string0 = Page.DIAG_MINIMUM_REC_SIZE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("h2.defaultMaxOperationMemory");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", true, (String[]) null);
      String string0 = null;
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(" DEFAULT ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, (String) null, true, (String[]) null);
      dBPrimaryKeyConstraint0.setOwner(dBTable0);
      StringBuilder stringBuilder0 = new StringBuilder(1974);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      dBUniqueIndex0.isIdentical(dBUniqueConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(dBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("-(A^NXIOPr8JP", true);
      assertEquals("- (A ^ NXIOPr8JP", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("\"@C( Wmascj@3^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: \"@C( Wmascj@3^
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize(">c^k*l`k)=m*Vm(kY", true);
      assertEquals("> c ^  k * l ` k) = m * Vm (kY", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ECR83uh{*\"\"", defaultDBTable0, 1289, "");
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      defaultDBColumn0.setDefaultValue("");
      defaultDBColumn0.getNotNullConstraint();
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ECR83uh{*\"\"  DEFAULT  NULL", false, stringArray0);
      String string0 = SYSSEQUENCESRowFactory.TABLENAME_STRING;
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ECR83uh{*\"\"  DEFAULT  NULL");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-648), "");
      MockFile mockFile0 = new MockFile("SHA1PRNG");
      File file0 = FileUtil.canonicalFile("SHA1PRNG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = AllocPage.TEST_MULTIPLE_ALLOC_PAGE;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2196), "");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 232, "");
      defaultDBColumn0.getNotNullConstraint();
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "`";
      stringArray0[3] = "";
      stringArray0[4] = "null  NULL";
      stringArray0[5] = "null  NULL";
      stringArray0[6] = "null  NULL";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SYSSEQUENCESRowFactory.TABLENAME_STRING;
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("null  NULL");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("select into");
      stringReader0.skip(12L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("update()", defaultDBTable0, 44, "update()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-1719875083), "");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("select into", defaultDBTable0, (DBDataType) null);
      SQLUtil.normalize("`#{$;*K(bH", true);
      SQLUtil.mutatesDataOrStructure("$$+V7?");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("XBM07.D");
      File file0 = mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.normalize(")5j~e", false);
      assertEquals(") 5j ~ e", string0);
      
      Boolean boolean0 = new Boolean("m=g[T9~j");
      Character character0 = new Character(')');
      String string1 = SQLUtil.substituteMarkers("create materialized view", ") 5j ~ e", character0);
      assertEquals("create materialized view", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 1289, "");
      File file0 = FileUtil.canonicalFile("");
      FileUtil.canonicalFile(file0);
      String string0 = "*/Dq(IA(";
      String string1 = "getTime(String,Calendar)";
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("*/Dq(IA(", defaultDBTable0, 668, "getTime(String,Calendar)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.isDML("");
      SQLUtil.normalize("delete2-%t[cu0n`zt.#dj?w", false);
      SQLUtil.mutatesDataOrStructure("delete2 - % t [ cu0n ` zt.# dj ? w");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 8, "KA");
      SQLUtil.renderColumn(defaultDBColumn0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      SQLUtil.mutatesStructure("5");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = SQLUtil.normalize("", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.removeComments("/*");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }
}
