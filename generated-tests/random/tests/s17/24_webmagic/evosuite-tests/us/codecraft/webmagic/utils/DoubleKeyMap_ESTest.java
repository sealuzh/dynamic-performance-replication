/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 01:09:47 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(class0);
      Integer integer0 = new Integer((-1498));
      Integer integer1 = doubleKeyMap0.put("", (Object) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer((-1498));
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Map<Object, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(map0);
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) integer0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(map0);
      Map<Integer, String> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0);
      Map<Integer, Map<String, HashMap<Object, String>>> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(1524);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, HashMap<Object, String>>(map0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(integer0, "Fc?aasEUF", hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0);
      Integer integer0 = new Integer(1524);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put(integer0, hashMap1);
      doubleKeyMap0.remove(integer0, "uwNhO\"E3}f");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.put("", "", "");
      String string0 = doubleKeyMap0.remove("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.put("", "", "");
      String string0 = doubleKeyMap0.put("", "", "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<Object, String>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Integer>(hashMap0);
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      String string0 = doubleKeyMap1.get((Object) "", "ck [7u47$eOmG:3*psR");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<Map<Object, Integer>, Object>> hashMap0 = new HashMap<String, Map<Map<Object, Integer>, Object>>();
      HashMap<Map<Object, Integer>, Object> hashMap1 = new HashMap<Map<Object, Integer>, Object>();
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, Map<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, Object>(hashMap0);
      DoubleKeyMap<HashMap<Integer, Integer>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Integer, String>();
      Map<String, Map<String, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, String, String> doubleKeyMap2 = new DoubleKeyMap<String, String, String>(map0);
      Map<Object, Integer> map1 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap0.get("", map1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<String, String>>();
      HashMap<String, String> hashMap0 = doubleKeyMap0.remove((String) null, (String) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      Map<String, String> map0 = doubleKeyMap0.remove("");
      assertNull(map0);
  }
}
