/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:25:26 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("nop -> ");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.Compiler$1");
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 7, true);
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 7);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("");
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(":");
      assertEquals(":", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = RE2.quoteMeta(":");
      assertEquals(":", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("SlSV=m;0");
      assertEquals("SlSV=m;0", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("SlSV=m;0", 1636, (byte)121, 8243, (int[]) null, 1636);
      assertEquals("SlSV=m;0", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("AR=:7Yqdlg-");
      assertEquals("AR=:7Yqdlg-", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("AR=:7Yqdlg-", "AR=:7Yqdlg-");
      assertEquals("AR=:7Yqdlg-", rE2_0.toString());
      assertEquals("AR=:7Yqdlg-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("bad inst");
      assertEquals("bad inst", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("bad inst", "bad inst");
      assertEquals("bad inst", rE2_0.toString());
      assertEquals("bad inst", string0);
      assertNotNull(string0);
      
      rE2_0.reset();
      assertEquals("bad inst", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 64287);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("UTF-8");
      assertEquals("UTF-8", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-207));
      assertEquals("UTF-8", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("s~#oI$h_|Lttp", 1);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("oluIMg }jlW");
      assertEquals("oluIMg }jlW", rE2_0.toString());
      assertNotNull(rE2_0);
      
      RE2 rE2_1 = RE2.compile("");
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(rE2_1);
      
      List<byte[][]> list0 = rE2_1.findAllUTF8Submatch(byteArray0, (-9));
      assertEquals("", rE2_1.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("qPGQW]ub");
      assertEquals("qPGQW]ub", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 1711);
      assertEquals("qPGQW]ub", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("r");
      assertEquals("r", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.longest;
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertEquals("r", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertEquals("can't happen", string0);
      assertNotNull(string0);
      
      String string1 = rE2_0.toString();
      assertEquals("can't happen", rE2_0.toString());
      assertTrue(string1.equals((Object)string0));
      assertEquals("can't happen", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RE2 rE2_0 = RE2.compile("CK` ");
      assertEquals("CK` ", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("CK` ", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("gK6xdR*`MR1#;");
      assertEquals("gK6xdR*`MR1#;", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("gK6xdR*`MR1#;", 932);
      assertEquals("gK6xdR*`MR1#;", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("w]");
      assertEquals("w]", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("error parsing regexp: ");
      assertEquals("w]", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("2{Z#&*P");
      assertEquals("can't happen", rE2_0.toString());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("", 949);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RE2.quoteMeta("0LtJJ|O{B[lO0yT+buQ");
      assertEquals("0LtJJ\\|O\\{B\\[lO0yT\\+buQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("?gy", (-621), false);
      assertEquals("?gy", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("?gy", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 157);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("regexp: unhandled case in compile");
      assertEquals("regexp: unhandled case in compile", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 137);
      assertEquals("regexp: unhandled case in compile", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("{Kuy");
      assertEquals("{Kuy", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex(":AB8w;JWnq)");
      assertEquals("{Kuy", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("diz,*W!\"H0$>{bQt", 2472, false);
      assertEquals("diz,*W!\"H0$>{bQt", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("diz,*W!\"H0$>{bQt", 2472);
      assertEquals("diz,*W!\"H0$>{bQt", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", 9);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertEquals("can't happen", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("AR=:7Yqdlg-");
      assertEquals("AR=:7Yqdlg-", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("AR=:7Yqdlg-");
      assertEquals("AR=:7Yqdlg-", rE2_0.toString());
      assertEquals("AR=:7Yqdlg-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("OvSFN3a{.~");
      assertEquals("OvSFN3a{.~", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("[:alnum:]", 1679);
      assertEquals("OvSFN3a{.~", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("9$-TEghXK=]-", (-1215), false);
      assertEquals("9$-TEghXK=]-", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)32);
      assertEquals("9$-TEghXK=]-", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.longest;
      assertTrue(boolean0);
      
      List<String> list0 = rE2_0.findAll("", (-2360));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("RUNE1");
      assertEquals("RUNE1", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("RUNE1", 924);
      assertEquals("RUNE1", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 924);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("divz,t*W!\"H0$>{bQt", 2472, true);
      assertEquals("divz,t*W!\"H0$>{bQt", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("divz,t*W!\"H0$>{bQt", 2472);
      assertEquals("divz,t*W!\"H0$>{bQt", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("SlSV=m;0");
      assertEquals("SlSV=m;0", rE2_0.toString());
      assertNotNull(rE2_0);
      
      // Undeclared exception!
      try { 
        rE2_0.match("SlSV=m;0", (byte)121, (byte)121, (byte)121, (int[]) null, (byte)121);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(":");
      assertEquals(":", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll(":", ":");
      assertEquals(":", rE2_0.toString());
      assertEquals(":", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = RE2.match("jV<$}\"iS=1>knk'", "jV<$}\"iS=1>knk'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("f");
      assertEquals("f", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("f", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-2571));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "(?-m:$)";
      RE2 rE2_0 = RE2.compile("(?-m:$)");
      assertEquals("(?-m:$)", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string1 = rE2_0.replaceAll("(?-m:$)", "(?-m:$)");
      assertEquals("(?-m:$)", rE2_0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("(?-m:$)(?-m:$)", string1);
      assertNotNull(string1);
      
      String string2 = "*R.7<@!.{~G=$w";
      byte byte0 = (byte)4;
      try { 
        RE2.compilePOSIX("*R.7<@!.{~G=$w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("AWiT~_8;", (String) null);
      assertEquals("", rE2_0.toString());
      assertEquals("nullAWiT~_8;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.longest;
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2970;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2970;
      intArray0[4] = 2970;
      intArray0[5] = 2970;
      intArray0[6] = 1;
      boolean boolean0 = rE2_0.match("can't happen", 1, 2970, 2970, intArray0, 1);
      assertEquals("can't happen", rE2_0.toString());
      assertArrayEquals(new int[] {2970, 1, 1, 2970, 2970, 2970, 1}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      rE2_0.prefixRune = 1189;
      assertEquals("", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 1017);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(list0);
      
      List<String[]> list1 = rE2_0.findAllSubmatch(",]>", (byte)0);
      assertEquals("", rE2_0.toString());
      assertNull(list1);
      
      int[] intArray0 = new int[12];
      intArray0[1] = 1017;
      intArray0[3] = (int) (byte)0;
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
      
      machine0.init(3166);
      assertEquals("", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.match(",]>", (byte)0, 3166, (byte)0, intArray0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertEquals("", rE2_0.toString());
      assertNotNull(stringArray0);
      
      boolean boolean0 = rE2_0.match("");
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 1012);
      assertEquals("", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(list0);
      
      RE2 rE2_1 = RE2.compileImpl("", (-1714), true);
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(rE2_1);
      
      List<int[]> list1 = rE2_1.findAllIndex("", 4);
      assertEquals("", rE2_1.toString());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(list1);
      
      int[] intArray0 = rE2_1.findIndex("");
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(intArray0);
      
      int[] intArray1 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean1 = rE2_1.match("7N>", (byte)0, 4, 4, (int[]) null, 345);
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(rE2_1, rE2_0);
      
      int int0 = rE2_1.numberOfCapturingGroups();
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals(0, int0);
      assertNotSame(rE2_1, rE2_0);
      
      // Undeclared exception!
      try { 
        rE2_1.findAll((String) null, (-1253));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(?-m:$)");
      assertEquals("(?-m:$)", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("(?-m:$)", 14);
      assertEquals("(?-m:$)", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }
}
