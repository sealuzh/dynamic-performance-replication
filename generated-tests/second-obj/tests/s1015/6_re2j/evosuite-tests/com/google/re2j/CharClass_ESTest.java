/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:12:21 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-881);
      intArray0[1] = (-881);
      intArray0[2] = (-881);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 4057);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[1];
      intArray1[0] = 1072046;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(2410, 10);
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(1829, (-353));
      CharClass charClass2 = charClass0.appendFoldedRange(7, 7);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(1838, 1838);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 519;
      intArray0[1] = (-1534);
      intArray0[2] = 1103983;
      intArray0[3] = 79;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(65, (-1534));
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1268);
      intArray0[1] = (-1268);
      intArray0[2] = 9671;
      intArray0[2] = 983039;
      intArray0[4] = (-765);
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-1268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral((-435), (-843));
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(42894, 7992);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2217;
      intArray0[1] = 456;
      intArray0[2] = 0;
      intArray0[2] = 452;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][6];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[3];
      intArray2[0] = 2217;
      intArray2[1] = 452;
      intArray2[2] = 1114111;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      CharClass charClass1 = charClass0.appendTable(intArray1);
      charClass1.cleanClass();
      charClass0.appendClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
      charClass1.appendFoldedRange(0, 65);
      assertArrayEquals(new int[] {0, 1114111, 2217, 456}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1829, (-353));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3895;
      intArray0[3] = 405;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {3895, 0, 0, 405}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(405, 3895);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {3895, 0, 0, 405}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange((-1), 678);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {3895, 0, 0, 405}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2528;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2528}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2410, 2410);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2528}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 2410);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[5];
      intArray1[0] = 65;
      intArray1[1] = 2333;
      intArray1[2] = 119172;
      intArray1[3] = 0;
      intArray1[4] = 2451;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 119172);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendFoldedRange(2451, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = (-1642);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, (-1642)}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals("[0x0 0x0-0xfffff996]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 0, (-1642)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-728);
      int int0 = 0;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-728), 0, 0}, intArray0);
      
      int[][] intArray1 = new int[3][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[2];
      intArray1[1] = 378;
      CharClass charClass0 = new CharClass(intArray1);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 378}, intArray1);
      
      CharClass charClass1 = charClass0.appendRange(378, (-1));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 378}, intArray1);
      
      CharClass charClass2 = charClass1.appendClass(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 378}, intArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[0];
      CharClass charClass0 = new CharClass(intArray1);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray1);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      
      int[] intArray2 = charClass2.toArray();
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3912;
      intArray0[1] = 3912;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {3912, 3912, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[9][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendTable(intArray1);
      charClass1.appendTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      CharClass.charClassToString(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3901;
      int int0 = 11631;
      intArray0[2] = 11631;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange(3901, 11631);
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 3901;
      intArray0[0] = 3901;
      int int1 = 524287;
      intArray0[2] = 11631;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2455);
      intArray0[1] = (-1014);
      intArray0[2] = (-1112);
      intArray0[3] = (-68);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3901;
      intArray0[1] = (-728);
      intArray0[2] = 0;
      intArray0[3] = 397;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(2893, 0);
      charClass1.cleanClass();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange((-1787), 0);
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[6];
      CharClass charClass0 = new CharClass(intArray1);
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-8632096));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.cleanClass();
      charClass1.negateClass();
      charClass2.toArray();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-728);
      intArray0[3] = 397;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-1800), (-728));
      charClass1.cleanClass();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[2];
      intArray1[1] = (-8632096);
      CharClass charClass0 = new CharClass(intArray1);
      CharClass charClass1 = charClass0.appendRange((-1), (-1));
      charClass1.negateClass();
      charClass0.appendClassWithSign(intArray1, (-1));
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[2] = (-2922);
      intArray0[3] = 1105509;
      intArray0[4] = 780;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][6];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1114111);
      charClass0.appendFoldedRange(66639, 1114111);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      CharClass charClass3 = charClass2.appendLiteral(1114111, 1114111);
      int[] intArray1 = new int[0];
      CharClass charClass4 = charClass3.appendNegatedClass(intArray1);
      CharClass charClass5 = charClass4.negateClass();
      charClass5.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 3895;
      intArray0[0] = 3895;
      int int1 = 678;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass2.appendRange(intArray0[0], int0);
      CharClass charClass5 = charClass0.negateClass();
      charClass5.appendRange(intArray0[0], int1);
      CharClass charClass6 = charClass3.appendClass(intArray1[1]);
      charClass6.appendNegatedTable(intArray1);
      CharGroup charGroup0 = null;
      boolean boolean0 = true;
      charClass4.appendGroup(charGroup0, boolean0);
      charClass2.appendRange(int1, int1);
      charClass6.cleanClass();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3901;
      intArray0[1] = 3901;
      intArray0[2] = 0;
      int int0 = 397;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[9][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.negateClass();
      charClass1.appendLiteral(3900, 66640);
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[8] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      int int1 = (-418);
      charClass1.appendRange(int1, intArray0[2]);
      charClass0.appendTableWithSign(intArray1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(1, 1);
      int[][] intArray1 = new int[2][6];
      int[] intArray2 = new int[5];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[4] = 1;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3901;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[9][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      charClass0.negateClass();
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      charClass0.cleanClass();
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendRange(678, 1);
      int int0 = 64;
      CharClass charClass2 = charClass0.appendRange(64, 64);
      int[] intArray2 = new int[0];
      charClass1.appendClass(intArray2);
      charClass2.appendNegatedTable(intArray1);
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
