/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 21:09:17 GMT 2019
 */

package org.apache.commons.imaging.common.mylzw;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteOrder;
import org.apache.commons.imaging.common.mylzw.MyLzwCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MyLzwCompressor_ESTest extends MyLzwCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1366), byteOrder0, true);
      assertNotNull(myLzwCompressor0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-45), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      // Undeclared exception!
      myLzwCompressor0.compress(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder1);
      assertNotNull(byteOrder3);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertSame(byteOrder4, byteOrder1);
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder2);
      assertNotNull(byteOrder4);
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-3511), byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder5 = ByteOrder.nativeOrder();
      assertSame(byteOrder5, byteOrder1);
      assertSame(byteOrder5, byteOrder0);
      assertSame(byteOrder5, byteOrder4);
      assertSame(byteOrder5, byteOrder2);
      assertSame(byteOrder5, byteOrder3);
      assertNotNull(byteOrder5);
      assertEquals("LITTLE_ENDIAN", byteOrder5.toString());
      
      byteArray0[0] = (byte) (-120);
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder5);
      assertSame(byteOrder0, byteOrder4);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byteArray0[1] = (byte)71;
      ByteOrder byteOrder6 = ByteOrder.nativeOrder();
      assertSame(byteOrder6, byteOrder2);
      assertSame(byteOrder6, byteOrder4);
      assertSame(byteOrder6, byteOrder0);
      assertSame(byteOrder6, byteOrder1);
      assertSame(byteOrder6, byteOrder5);
      assertSame(byteOrder6, byteOrder3);
      assertNotNull(byteOrder6);
      assertEquals("LITTLE_ENDIAN", byteOrder6.toString());
      
      try { 
        myLzwCompressor0.compress(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1142), byteOrder0, false, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1366), byteOrder0, false, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1665, byteOrder0, false, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)63;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(491, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertNotNull(byteOrder3);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byteArray0[0] = (byte)48;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, false, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(480, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      byteArray0[0] = (byte)85;
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      byte byte0 = (byte)125;
      byteArray0[1] = (byte)125;
      byte byte1 = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte3 = (byte)0;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        myLzwCompressor0.compress(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-2365), byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      // Undeclared exception!
      try { 
        myLzwCompressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-2208), byteOrder0, true, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1), byteOrder0, false, myLzwCompressor_Listener0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertNotNull(myLzwCompressor0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      byte[] byteArray0 = new byte[0];
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1366), byteOrder0, false, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[0];
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-86);
      myLzwCompressor0.compress(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor1 = new MyLzwCompressor((byte) (-115), byteOrder1, true, myLzwCompressor_Listener0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, false, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      myLzwCompressor0.compress(byteArray0);
      ByteOrder.nativeOrder();
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      ByteOrder.nativeOrder();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-895), byteOrder0, false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        myLzwCompressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }
}
