/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:14:02 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InvokeInstruction;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)0);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals("sipush", sIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(34);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(606);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      FNEG fNEG0 = new FNEG();
      FNEG fNEG1 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(sWAP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-94));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals((short)16, bIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitFSTORE((FSTORE) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      I2S i2S0 = new I2S();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SASTORE sASTORE0 = new SASTORE();
      GETFIELD gETFIELD0 = new GETFIELD(227);
      DSTORE dSTORE0 = new DSTORE(227);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals(2, dSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2F i2F0 = new I2F();
      GETSTATIC gETSTATIC0 = new GETSTATIC(25);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals("getstatic", gETSTATIC0.getName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      ILOAD iLOAD0 = new ILOAD(1621);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals(4, iLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitInvokeInstruction((InvokeInstruction) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitJSR_W((JSR_W) null);
      InstructionList instructionList0 = new InstructionList();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 202);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE(2127);
      ARRAYLENGTH aRRAYLENGTH0 = (ARRAYLENGTH)InstructionConstants.ARRAYLENGTH;
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      ISUB iSUB0 = new ISUB();
      IREM iREM0 = new IREM();
      assertEquals(1, iREM0.getLength());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      InstructionList instructionList0 = new InstructionList(i2S0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instConstraintVisitor0.visitGOTO(gOTO0);
      assertEquals((short)167, gOTO0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals(1, fCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      assertEquals((short)9, lCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCONST dCONST0 = new DCONST(0.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!HeT0&k;EtF<");
      LCONST lCONST0 = null;
      try {
        lCONST0 = new LCONST((-2290L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LCONST can be used only for 0 and 1: -2290
         //
         verifyException("org.apache.bcel.generic.LCONST", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR jSR0 = new JSR((InstructionHandle) null);
      instConstraintVisitor0.visitJSR(jSR0);
      assertEquals("jsr", jSR0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3761);
      ObjectType objectType0 = new ObjectType("    il.append(");
      OperandStack operandStack0 = new OperandStack(3761, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IALOAD iALOAD0 = new IALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIALOAD(iALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IALOAD constraint violated: The 'index' is not of type int but of type     il.append(.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3761);
      ObjectType objectType0 = new ObjectType("    il.append(");
      OperandStack operandStack0 = new OperandStack(3761);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: Cannot consume 4 stack slots: only 0 slot(s) left on stack!
         // Stack:
         // Slots used: 0 MaxStack: 3761.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2D l2D0 = new L2D();
      LocalVariables localVariables0 = new LocalVariables(1810);
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("' as expected.");
      OperandStack operandStack0 = new OperandStack(1810, objectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.getClone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables2 = new LocalVariables(1810);
      localVariables1.getClone();
      LLOAD lLOAD0 = new LLOAD(1810);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(lLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(177);
      Frame frame0 = new Frame(177, 177);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      localVariables0.getClone();
      FCMPG fCMPG0 = new FCMPG();
      LUSHR lUSHR0 = new LUSHR();
      IREM iREM0 = new IREM();
      IINC iINC0 = new IINC(177, 65535);
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(999);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals((short)25, aLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      nOP0.toString(false);
      FLOAD fLOAD0 = new FLOAD(21);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals((short)23, fLOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH((short)0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2889);
      ObjectType objectType0 = new ObjectType("    il.append(");
      OperandStack operandStack0 = new OperandStack(2889, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD((LADD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2D l2D0 = new L2D();
      LocalVariables localVariables0 = new LocalVariables(1);
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("@@%zLyKXtF");
      OperandStack operandStack0 = new OperandStack(163, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type '@@%zLyKXtF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3761);
      ObjectType objectType0 = new ObjectType("    il.append(");
      OperandStack operandStack0 = new OperandStack(3761, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type '    il.append('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3761);
      ObjectType objectType0 = new ObjectType("    il.append(");
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      OperandStack operandStack0 = new OperandStack(3761, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.pop((-1));
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(3761, (-1));
      IREM iREM0 = new IREM();
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type '    il.append('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(68, objectType0);
      LocalVariables localVariables0 = new LocalVariables(68);
      localVariables0.getClone();
      localVariables0.getClone();
      localVariables0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType(">m_1993HR\"uP");
      OperandStack operandStack0 = new OperandStack(1883, objectType0);
      LocalVariables localVariables0 = new LocalVariables(178);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      DSTORE dSTORE0 = new DSTORE(178);
      dSTORE0.consumeStack(constantPoolGen0);
      IINC iINC0 = new IINC(1883, 36);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3761);
      ObjectType objectType0 = new ObjectType(" ");
      OperandStack operandStack0 = new OperandStack(3761, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      OperandStack operandStack2 = new OperandStack(3761);
      operandStack2.pop((-5735));
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(226, 3761);
      I2F i2F0 = new I2F();
      I2F i2F1 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type ' '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(177);
      Frame frame0 = new Frame(177, 177);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      localVariables0.getClone();
      FCMPG fCMPG0 = new FCMPG();
      LUSHR lUSHR0 = new LUSHR();
      IREM iREM0 = new IREM();
      IINC iINC0 = new IINC(3, 3);
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("'");
      OperandStack operandStack0 = new OperandStack(146, objectType0);
      LocalVariables localVariables0 = new LocalVariables(146);
      LocalVariables localVariables1 = new LocalVariables(146);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      operandStack0.getClone();
      localVariables1.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        aRRAYLENGTH0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3761);
      ObjectType objectType0 = new ObjectType("    il.append(");
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      OperandStack operandStack0 = new OperandStack(3761, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.pop((-1));
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(3761, (-1));
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type '    il.append('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("f=");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR((LXOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2D l2D0 = new L2D();
      LocalVariables localVariables0 = new LocalVariables(1);
      String string0 = "@@%zLyKXtF";
      ObjectType objectType0 = new ObjectType("@@%zLyKXtF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      Boolean.valueOf(true);
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type '@@%zLyKXtF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH((short)0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("daload");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      localVariables0.set((short)0, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'daload'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(742, objectType0);
      LocalVariables localVariables0 = new LocalVariables(14);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(14);
      localVariables0.clone();
      ObjectType objectType1 = new ObjectType("");
      Frame.getThis();
      Type.getMethodSignature(objectType0, objectType1.NO_ARGS);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      short short0 = Constants.FNEG;
      short short1 = Constants.LOR;
      short short2 = Constants.F2L;
      int int0 = Constants.MAX_SHORT;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) 65535);
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE((SASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(144);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack1 = new OperandStack((-1));
      OperandStack operandStack2 = operandStack1.getClone();
      operandStack2.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FASTORE fASTORE0 = new FASTORE();
      fASTORE0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type '@@zLyKXYF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 219;
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      float float0 = 1.0F;
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@%zLyKXtF");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      InstructionList instructionList0 = new InstructionList(iSHR0);
      I2C i2C0 = new I2C();
      i2C0.toString();
      L2I l2I1 = new L2I();
      int int0 = Pattern.DOTALL;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type '@@%zLyKXtF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(1883, objectType0);
      LocalVariables localVariables0 = new LocalVariables(170);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+@@%zLKX-F");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FRETURN fRETURN0 = new FRETURN();
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Stack next-to-top must be of type int[] but is '");
      OperandStack operandStack0 = new OperandStack(125, objectType0);
      LocalVariables localVariables0 = new LocalVariables(125);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ATHROW aTHROW0 = new ATHROW();
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      LRETURN lRETURN0 = new LRETURN();
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals(1, dUP0.getLength());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2D l2D0 = new L2D();
      LocalVariables localVariables0 = new LocalVariables(1);
      ObjectType objectType0 = new ObjectType("@@%zLyKXtF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      FDIV fDIV0 = new FDIV();
      LALOAD lALOAD0 = new LALOAD();
      IMUL iMUL0 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type '@@%zLyKXtF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+@@%zLKX-F");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(866, objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(1169);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(3766);
      ObjectType objectType0 = new ObjectType("  hs il.apend(");
      LocalVariables localVariables1 = new LocalVariables(3766);
      localVariables0.merge(localVariables1);
      OperandStack operandStack0 = new OperandStack(3766, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.pop((-21));
      instConstraintVisitor0.setFrame(frame0);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type '  hs il.apend('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("[a8(V`tD5t*\"!=");
      OperandStack operandStack0 = new OperandStack(79, objectType0);
      Frame.getThis();
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      LocalVariables localVariables0 = new LocalVariables(79);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.equals("[a8(V`tD5t*\"!=");
      operandStack0.clone();
      frame0.clone();
      operandStack0.clone();
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type '[a8(V`tD5t*\"!='.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(115, objectType0);
      LocalVariables localVariables0 = new LocalVariables(999);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean.valueOf(true);
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type '6B5orh@j&Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@%zLyKXtF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LDIV lDIV2 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type '@@%zLyKXtF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1824);
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(1824, objectType0);
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type '6B5orh@j&Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("[a8(V`tD5t*\"!=");
      LocalVariables localVariables0 = new LocalVariables(79);
      OperandStack operandStack0 = new OperandStack(79, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame.setThis((UninitializedObjectType) null);
      localVariables0.toString();
      frame0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DUP2 dUP2_0 = new DUP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(68, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.initializeObject(uninitializedObjectType0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(216, uninitializedObjectType0.THROWABLE);
      LocalVariables localVariables1 = new LocalVariables(1175);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(181, objectType0);
      LocalVariables localVariables0 = new LocalVariables(46);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = frame1.getClone();
      frame2.clone();
      instConstraintVisitor0.setFrame(frame2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is '+@@%zLKX-F' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("ru2>]=*DV");
      OperandStack operandStack0 = new OperandStack(741, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(157);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FRETURN fRETURN0 = new FRETURN();
      BALOAD bALOAD0 = new BALOAD();
      short short0 = Constants.FNEG;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) (short)118);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      instructionList0.copy();
      MethodGen methodGen0 = new MethodGen((short)118, objectType0, objectType0.NO_ARGS, (String[]) null, "ru2>]=*DV", "Cannot push NULL onto OperandStack.", instructionList0, constantPoolGen0);
      instConstraintVisitor0.setMethodGen(methodGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR((LOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2D l2D0 = new L2D();
      LocalVariables localVariables0 = new LocalVariables(1824);
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(1824, objectType0);
      localVariables0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject((UninitializedObjectType) null);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LADD lADD0 = new LADD();
      LADD lADD1 = new LADD();
      DALOAD dALOAD0 = new DALOAD();
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type '6B5orh@j&Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("ru2>]=*DV");
      int int0 = 741;
      OperandStack operandStack0 = new OperandStack(741, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(157);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FRETURN fRETURN0 = new FRETURN();
      BALOAD bALOAD0 = new BALOAD();
      short short0 = Constants.IXOR;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) (short)130);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      pUSH0.getInstructionList();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY((ANEWARRAY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      LocalVariables localVariables0 = new LocalVariables(223);
      OperandStack operandStack0 = new OperandStack(223, referenceType0.STRINGBUFFER);
      localVariables0.set(151, referenceType0);
      localVariables0.getClone();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0F);
      BasicType basicType0 = Type.DOUBLE;
      Frame frame1 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DCMPL dCMPL0 = new DCMPL();
      dCMPL0.toString(constantPool0);
      DCMPL dCMPL1 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      LocalVariables localVariables0 = new LocalVariables(68);
      OperandStack operandStack0 = new OperandStack(68);
      OperandStack operandStack1 = new OperandStack(1139, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame1 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(1139);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Au");
      OperandStack operandStack0 = new OperandStack(79, objectType0);
      Frame.getThis();
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      LocalVariables localVariables0 = new LocalVariables(79);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'Au'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(";%%2{");
      LocalVariables localVariables0 = new LocalVariables(121);
      OperandStack operandStack0 = new OperandStack(121, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      localVariables0.toString();
      frame0.clone();
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      String string0 = Constants.ILLEGAL_TYPE;
      L2F l2F0 = new L2F();
      L2F l2F1 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1824);
      localVariables0.toString();
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack((byte)75, objectType0);
      LocalVariables localVariables1 = new LocalVariables(869);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type '6B5orh@j&Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(87, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2858);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ISTORE iSTORE0 = new ISTORE(0);
      DNEG dNEG0 = new DNEG();
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      int int0 = 219;
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      float float0 = 1.0F;
      InstructionList instructionList0 = new InstructionList();
      instructionList0.findHandle((-444));
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH((short)0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("daload");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      ObjectType.getInstance("daload");
      localVariables0.set((short)0, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LADD lADD0 = null;
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'daload'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+@@%zLKX-F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      operandStack0.clone();
      localVariables0.getClone();
      Frame frame0 = new Frame(177, 1175);
      instConstraintVisitor0.setFrame(frame0);
      FRETURN fRETURN0 = new FRETURN();
      BALOAD bALOAD0 = new BALOAD();
      short short0 = Constants.FNEG;
      DLOAD dLOAD0 = new DLOAD((short)118);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(dLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DLOAD constraint violated: Read-Access on local variable 118 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      InstructionList instructionList0 = new InstructionList(iSHR0);
      I2C i2C0 = new I2C();
      i2C0.toString();
      L2I l2I1 = new L2I();
      int int0 = Pattern.DOTALL;
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(115, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(999);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type '6B5orh@j&Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH((short)0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("daload");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      localVariables0.set((short)0, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      LLOAD lLOAD0 = new LLOAD((short)0);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'daload'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Z[15?");
      OperandStack operandStack0 = new OperandStack(807, objectType0);
      LocalVariables localVariables0 = new LocalVariables(177);
      LocalVariables localVariables1 = new LocalVariables(177);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame.setThis((UninitializedObjectType) null);
      operandStack0.pop((-2716));
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.toString();
      LSTORE lSTORE0 = new LSTORE(177);
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'Z[15?'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LDIV lDIV1 = new LDIV();
      ObjectType objectType0 = ObjectType.getInstance("e");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NEW.getType() returning a non-reference type?!");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      I2B i2B0 = new I2B();
      LocalVariables localVariables0 = new LocalVariables(2);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack1);
      LocalVariables localVariables1 = new LocalVariables(201);
      localVariables0.getClone();
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type 'e'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(1883, objectType0);
      LocalVariables localVariables0 = new LocalVariables(178);
      LocalVariables localVariables1 = new LocalVariables(178);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      L2F l2F0 = new L2F();
      F2D f2D0 = new F2D();
      short short0 = (short)628;
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(930, (short)628);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '628' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("[a8(V`tD5t*\"!=");
      LocalVariables localVariables0 = new LocalVariables(121);
      OperandStack operandStack0 = new OperandStack(121, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.ILLEGAL_OPCODE;
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame2);
      String string1 = Constants.ILLEGAL_TYPE;
      POP pOP0 = new POP();
      POP pOP1 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(121);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(iNVOKESTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(1920, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(1920);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = new Frame(48, (-2849));
      frame1.clone();
      Frame frame2 = frame0.getClone();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame2);
      I2B i2B0 = new I2B();
      ConstantString constantString0 = new ConstantString(48);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantString constantString1 = new ConstantString(constantString0);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Frame frame3 = new Frame(localVariables1, operandStack1);
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_0;
      aLOAD0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ((IF_ACMPEQ) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+@@%zX-F");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(177);
      localVariables0.getClone();
      lDIV0.copy();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      InstructionList instructionList0 = new InstructionList(iSHR0);
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDIV0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type '+@@%zX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(9);
      ObjectType objectType0 = new ObjectType("aload");
      OperandStack operandStack0 = new OperandStack(9, objectType0);
      localVariables0.set((short)0, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'aload'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("@@%zLyKXtF");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(177);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DSUB dSUB0 = new DSUB();
      localVariables0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      CASTORE cASTORE0 = new CASTORE();
      FCMPG fCMPG0 = new FCMPG();
      F2D f2D0 = new F2D();
      LUSHR lUSHR0 = new LUSHR();
      IREM iREM0 = new IREM();
      LUSHR lUSHR1 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR((LUSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(144);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      FADD fADD0 = new FADD();
      fADD0.toString(true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type '@@zLyKXYF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localVariables0.toString();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LocalVariables localVariables1 = new LocalVariables(177);
      I2B i2B0 = new I2B();
      i2B0.toString();
      ASTORE aSTORE0 = new ASTORE(5);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+@@%zX-F");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1164);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      InstructionList instructionList0 = new InstructionList(iSHR0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lDIV0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class +@@%zX-F: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: +@@%zX-F.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("+@@%zX-F");
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1164);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      InstructionList instructionList0 = new InstructionList(iSHR0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type '+@@%zX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(223);
      OperandStack operandStack0 = new OperandStack(223, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("OperandStack too small, should have thrown proper Exception elsewhere. Stack: ");
      constantPoolGen0.getConstantPool();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0F);
      BasicType basicType0 = Type.DOUBLE;
      LocalVariables localVariables1 = new LocalVariables(223);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ((IFEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = (Frame)frame0.clone();
      frame1.equals(referenceType0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      I2B i2B0 = new I2B();
      ConstantString constantString0 = new ConstantString((-3273));
      localVariables0.toString();
      OperandStack operandStack1 = new OperandStack(203, referenceType0.STRINGBUFFER);
      Frame frame2 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      IADD iADD0 = new IADD();
      IADD iADD1 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(146, objectType0);
      LocalVariables localVariables0 = new LocalVariables(146);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      InstructionList instructionList0 = new InstructionList(lDIV0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      MONITORENTER mONITORENTER1 = new MONITORENTER();
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(178, objectType0);
      LocalVariables localVariables0 = new LocalVariables(178);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOR iOR0 = new IOR();
      frame0.equals(iOR0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor1.setFrame(frame0);
      F2I f2I0 = new F2I();
      F2I f2I1 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitF2I(f2I1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      objectType0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      OperandStack operandStack0 = new OperandStack(178, objectType0);
      LocalVariables localVariables0 = new LocalVariables(178);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FRETURN fRETURN0 = new FRETURN();
      OperandStack operandStack1 = new OperandStack(178, objectType0);
      LocalVariables localVariables1 = new LocalVariables(178);
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRING);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(219);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'java.lang.String'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = (Frame)frame0.clone();
      frame1.equals(referenceType0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      I2B i2B0 = new I2B();
      ConstantString constantString0 = new ConstantString((-3284));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantString constantString1 = new ConstantString((-3284));
      frame0.equals(constantString1);
      LocalVariables localVariables1 = new LocalVariables(103);
      frame0.getClone();
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("ru2>]=*DV");
      OperandStack operandStack0 = new OperandStack(741, objectType0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(157);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame.getThis();
      operandStack1.initializeObject((UninitializedObjectType) null);
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LADD lADD0 = new LADD();
      LADD lADD1 = new LADD();
      DALOAD dALOAD0 = new DALOAD();
      D2I d2I0 = new D2I();
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type 'ru2>]=*DV'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.equals(operandStack1);
      Frame frame1 = (Frame)frame0.clone();
      instConstraintVisitor0.setFrame(frame1);
      I2B i2B0 = new I2B();
      LocalVariables localVariables1 = new LocalVariables(219);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b>f/~w");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b>f/~w");
      I2S i2S0 = new I2S();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      i2S0.copy();
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(68, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1175);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FCMPG fCMPG0 = new FCMPG();
      F2D f2D0 = new F2D();
      LUSHR lUSHR0 = new LUSHR();
      IREM iREM0 = new IREM();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(177);
      LocalVariables localVariables0 = new LocalVariables(1175);
      LocalVariables localVariables1 = new LocalVariables(177);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      OperandStack operandStack1 = new OperandStack(1, objectType0);
      LocalVariables localVariables2 = new LocalVariables(161);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      operandStack0.push(objectType0);
      localVariables0.getClone();
      Frame frame1 = frame0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.toString();
      Type.getMethodSignature(uninitializedObjectType0, objectType0.NO_ARGS);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame1);
      FADD fADD0 = new FADD();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<UNINITIALIZED OBJECT OF TYPE '+@@%zLKX-F'>");
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(5);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i ");
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type '6B5orh@j&Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(223);
      OperandStack operandStack0 = new OperandStack(223, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 678;
      LocalVariables localVariables1 = new LocalVariables(678);
      localVariables0.getClone();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      DUP_X1 dUP_X1_1 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = new OperandStack(219, referenceType0.OBJECT);
      OperandStack operandStack2 = new OperandStack(219, referenceType0.CLASS);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.equals(operandStack1);
      Frame frame1 = frame0.getClone();
      operandStack2.clone();
      LocalVariables localVariables1 = new LocalVariables(2223);
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FRETURN fRETURN0 = new FRETURN();
      short short0 = Constants.FNEG;
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      byte byte0 = Constants.CONSTANT_Float;
      PUSH pUSH0 = new PUSH(constantPoolGen1, (Number) (byte)4);
      pUSH0.getInstructionList();
      InstructionList instructionList0 = new InstructionList();
      PUSH pUSH1 = new PUSH(constantPoolGen1, false);
      instructionList0.getStart();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(143, objectType0);
      LocalVariables localVariables0 = new LocalVariables(143);
      LocalVariables localVariables1 = new LocalVariables(143);
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      ISHR iSHR0 = (ISHR)InstructionConstants.ISHR;
      ISTORE iSTORE0 = new ISTORE(112);
      DNEG dNEG0 = new DNEG();
      DNEG dNEG1 = new DNEG();
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD((GETFIELD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      LocalVariables localVariables0 = new LocalVariables(258);
      OperandStack operandStack0 = new OperandStack(258, referenceType0.STRINGBUFFER);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      OperandStack operandStack1 = new OperandStack((byte)120, referenceType0.STRING);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LocalVariables localVariables1 = new LocalVariables((byte)120);
      LocalVariables localVariables2 = new LocalVariables(4);
      localVariables0.getClone();
      localVariables2.clone();
      DCMPG dCMPG0 = new DCMPG();
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(144);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      Frame.setThis(uninitializedObjectType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Frame frame1 = new Frame(localVariables0, operandStack0);
      operandStack0.pop((-48));
      instConstraintVisitor0.setFrame(frame1);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL((FMUL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("F0o4eKC2U^i/Q@uFY`");
      OperandStack operandStack0 = new OperandStack(131, objectType0);
      OperandStack operandStack1 = new OperandStack(131, objectType0);
      operandStack0.merge(operandStack1);
      LocalVariables localVariables0 = new LocalVariables(131);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localVariables0.clone();
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      DSTORE dSTORE0 = new DSTORE(131);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'F0o4eKC2U^i.Q@uFY`'; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Z[15?");
      OperandStack operandStack0 = new OperandStack(807, objectType0);
      LocalVariables localVariables0 = new LocalVariables(177);
      LocalVariables localVariables1 = new LocalVariables(177);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      L2I l2I0 = new L2I();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      Frame.setThis((UninitializedObjectType) null);
      operandStack0.pop((-2716));
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      operandStack0.toString();
      F2I f2I0 = new F2I();
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND((IAND) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH((short)0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2);
      ObjectType objectType0 = new ObjectType("daload");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      localVariables0.set((short)0, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'daload'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ObjectType objectType0 = new ObjectType("+@%@K<-F");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r]5k@raC9");
      OperandStack operandStack0 = new OperandStack(191, objectType0);
      IREM iREM0 = new IREM();
      operandStack0.equals(iREM0);
      LocalVariables localVariables0 = new LocalVariables(0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L+@%@K<-F;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      LALOAD lALOAD0 = new LALOAD();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      OperandStack operandStack0 = new OperandStack(539, referenceType0.STRINGBUFFER);
      Frame.setThis((UninitializedObjectType) null);
      Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(539);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRINGBUFFER);
      Frame.setThis((UninitializedObjectType) null);
      String string0 = Constants.ILLEGAL_TYPE;
      POP pOP0 = new POP();
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(144);
      Frame frame0 = new Frame(144, 144);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DSTORE dSTORE0 = new DSTORE(1883);
      dSTORE0.setIndex(873);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Z[15?");
      OperandStack operandStack0 = new OperandStack(807, objectType0);
      LocalVariables localVariables0 = new LocalVariables(42);
      localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'Z[15?'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@%@K<-F");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r]5k@raC9");
      OperandStack operandStack0 = new OperandStack(191, objectType0);
      IREM iREM0 = new IREM();
      operandStack0.equals(iREM0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      frame0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = Constants.ILLEGAL_TYPE;
      Boolean boolean0 = Boolean.TRUE;
      OperandStack operandStack1 = new OperandStack(227, objectType0);
      LocalVariables localVariables1 = new LocalVariables(146);
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L+@%@K<-F;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH((short)0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2889);
      ObjectType objectType0 = new ObjectType("    il.append(");
      OperandStack operandStack0 = new OperandStack(2889, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type '    il.append('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("@@%zLyKXtF");
      int int0 = 177;
      OperandStack operandStack0 = new OperandStack(177, objectType0);
      LocalVariables localVariables0 = new LocalVariables(177);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DSUB dSUB0 = new DSUB();
      localVariables0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expecting a CONSTANT_Class referencing an array type. [Constraintnot found in The Java Virtual Machine Specfication, Second Edition, 4.8.1]");
      ATHROW aTHROW0 = new ATHROW();
      byte[] byteArray0 = new byte[2];
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type '@@%zLyKXtF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      IREM iREM0 = new IREM();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(758);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      L2F l2F0 = new L2F();
      l2F0.toString();
      F2D f2D0 = new F2D();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      ObjectType objectType0 = new ObjectType("<z=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(200, objectType0);
      LocalVariables localVariables0 = new LocalVariables(200);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FREM fREM0 = new FREM();
      DNEG dNEG0 = new DNEG();
      OperandStack operandStack1 = new OperandStack(200, objectType0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(2026);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      cHECKCAST0.produceStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(68, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1175);
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitISTORE((ISTORE) null);
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ICONST iCONST0 = new ICONST(5);
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals(1, iCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("[a8(V`tD5t*\"!=");
      LocalVariables localVariables0 = new LocalVariables(79);
      OperandStack operandStack0 = new OperandStack(79, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame.setThis((UninitializedObjectType) null);
      localVariables0.toString();
      frame0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      iF_ICMPNE0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type '[a8(V`tD5t*\"!='.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 219;
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = (Frame)frame0.clone();
      instConstraintVisitor0.setFrame(frame1);
      I2B i2B0 = new I2B();
      LocalVariables localVariables1 = new LocalVariables(219);
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("[a8(V`tD5t*\"!=");
      LocalVariables localVariables0 = new LocalVariables(79);
      OperandStack operandStack0 = new OperandStack(79, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      localVariables0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-110);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      frame0.clone();
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type '[a8(V`tD5t*\"!='.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(212);
      ObjectType objectType0 = ObjectType.getInstance("%");
      Type.getType("S)vCe");
      OperandStack operandStack0 = new OperandStack(212, objectType0);
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(152);
      localVariables0.clone();
      localVariables0.getClone();
      OperandStack operandStack1 = operandStack0.getClone();
      int int0 = (-659);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(144);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      Frame.setThis((UninitializedObjectType) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-397.42F));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFGT iFGT0 = new IFGT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type '@@zLyKXYF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(173, objectType0);
      LocalVariables localVariables0 = new LocalVariables(173);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("R:^kl|_Z+g>^_jNTW", "@@zLyKXYF", "R:^kl|_Z+g>^_jNTW");
      constantPoolGen0.getConstantPool();
      IUSHR iUSHR0 = new IUSHR();
      DNEG dNEG0 = new DNEG();
      DSUB dSUB0 = new DSUB();
      LREM lREM0 = new LREM();
      F2I f2I0 = new F2I();
      FMUL fMUL0 = new FMUL();
      LRETURN lRETURN0 = new LRETURN();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type '@@zLyKXYF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1170);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uninitializedObjectType0.isAssignmentCompatibleWith(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      OperandStack operandStack1 = new OperandStack((-1));
      OperandStack operandStack2 = operandStack1.getClone();
      operandStack2.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ASTORE aSTORE0 = new ASTORE(1170);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type '@@zLyKXYF'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1175);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.CLASS);
      OperandStack operandStack1 = operandStack0.getClone();
      UninitializedObjectType uninitializedObjectType2 = new UninitializedObjectType(uninitializedObjectType0.CLASS);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      UninitializedObjectType uninitializedObjectType3 = new UninitializedObjectType(uninitializedObjectType2.STRINGBUFFER);
      UninitializedObjectType uninitializedObjectType4 = new UninitializedObjectType(uninitializedObjectType0.STRING);
      operandStack1.toString();
      OperandStack operandStack2 = new OperandStack(1175, uninitializedObjectType4.OBJECT);
      operandStack1.push(uninitializedObjectType0);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame0);
      FRETURN fRETURN0 = new FRETURN();
      BALOAD bALOAD0 = new BALOAD();
      D2L d2L0 = new D2L();
      D2L d2L1 = new D2L();
      RET rET0 = new RET(144);
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 144.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(223);
      OperandStack operandStack0 = new OperandStack(223, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0F);
      BasicType basicType0 = Type.DOUBLE;
      LocalVariables localVariables1 = new LocalVariables(223);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame1);
      Frame.getThis();
      I2L i2L0 = new I2L();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      ARETURN aRETURN0 = new ARETURN();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ATHROW constraint violated: The 'objectref' is not of class Throwable or of a subclass of Throwable, but of 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = ObjectType.getInstance("Stack next-to-top must be of type int[] but is '");
      OperandStack operandStack0 = new OperandStack(125, objectType0);
      LocalVariables localVariables0 = new LocalVariables(125);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      LOR lOR0 = new LOR();
      Boolean boolean0 = Boolean.TRUE;
      DNEG dNEG0 = new DNEG();
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type 'Stack next-to-top must be of type int[] but is ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.THROWABLE);
      operandStack0.getClone();
      OperandStack operandStack1 = new OperandStack(200, referenceType0.STRING);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      I2B i2B0 = new I2B();
      ConstantString constantString0 = new ConstantString(68);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack1.push(referenceType0);
      operandStack1.getClone();
      FCMPG fCMPG0 = new FCMPG();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(103);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ATHROW aTHROW0 = new ATHROW();
      instConstraintVisitor0.visitATHROW(aTHROW0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN((FRETURN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(212);
      ObjectType objectType0 = ObjectType.getInstance("%");
      Type.getType("S)vCe");
      OperandStack operandStack0 = new OperandStack(212, objectType0);
      operandStack0.push(objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(152);
      localVariables0.clone();
      localVariables0.getClone();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(152, 152);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = (Frame)frame0.clone();
      instConstraintVisitor0.setFrame(frame1);
      I2B i2B0 = new I2B();
      LocalVariables localVariables1 = new LocalVariables(219);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY((NEWARRAY) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("+@@%zLKX-F");
      OperandStack operandStack0 = new OperandStack(143, objectType0);
      LocalVariables localVariables0 = new LocalVariables(143);
      localVariables0.clone();
      LocalVariables localVariables1 = new LocalVariables(143);
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(frame0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      frame0.getClone();
      I2B i2B0 = new I2B();
      InstructionHandle instructionHandle0 = null;
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type '+@@%zLKX-F'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ReferenceType referenceType0 = Type.NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(219);
      OperandStack operandStack0 = new OperandStack(219, referenceType0.STRINGBUFFER);
      OperandStack operandStack1 = operandStack0.getClone();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1.0F);
      LocalVariables localVariables1 = new LocalVariables(219);
      localVariables1.getClone();
      localVariables0.clone();
      LocalVariables localVariables2 = new LocalVariables(219);
      OperandStack operandStack2 = new OperandStack((-2802));
      ATHROW aTHROW0 = new ATHROW();
      InstructionHandle instructionHandle0 = null;
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLE constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.StringBuffer'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ObjectType objectType0 = new ObjectType("@@zLyKXYF");
      OperandStack operandStack0 = new OperandStack(144, objectType0);
      LocalVariables localVariables0 = new LocalVariables(144);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(objectType0, uninitializedObjectType0.NO_ARGS);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-397.42F));
      localVariables0.getClone();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      instConstraintVisitor0.visitIFNULL((IFNULL) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      ObjectType objectType0 = new ObjectType("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(1910, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1910);
      ObjectType.getInstance("1?sdVfOe*m/");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      I2B i2B0 = new I2B();
      ConstantString constantString0 = new ConstantString(1910);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantString constantString1 = new ConstantString(constantString0);
      localVariables0.getClone();
      DSUB dSUB0 = new DSUB();
      LREM lREM0 = new LREM();
      F2I f2I0 = new F2I();
      NEW nEW0 = new NEW(1910);
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      ObjectType objectType0 = ObjectType.getInstance("6B5orh@j&Y");
      OperandStack operandStack0 = new OperandStack(1920, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1920);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      instConstraintVisitor0.setFrame(frame1);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables1 = new LocalVariables(1920);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
      ObjectType objectType1 = ObjectType.getInstance("()L6B5orh@j&Y;");
      try { 
        objectType0.subclassOf(objectType1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Exception while looking for class 6B5orh@j&Y: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: 6B5orh@j&Y.class
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }
}
