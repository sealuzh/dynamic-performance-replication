/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:25:06 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.DateTimeException;
import java.time.MonthDay;
import java.time.chrono.JapaneseDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockMonthDay;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2605);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(2605);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2605, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.removeAll(jSONArray1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(989, (Object) mockMinguoDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H]/MGOZ/8Sa6#`c`]<");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(211);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(980);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(980, object0);
      jSONArray1.add((Object) iterator0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(980);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.Object@7fd72eb9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(984);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 984
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.equals(mockThaiBuddhistDate0);
      int int0 = Calendar.NOVEMBER;
      boolean boolean0 = jSONArray0.contains(mockThaiBuddhistDate0);
      assertFalse(boolean0);
      
      jSONArray0.getRelatedArray();
      Object object0 = jSONArray0.clone();
      assertTrue(object0.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(969);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 969, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      int int0 = (-1458);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      boolean boolean0 = jSONArray0.retainAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3910);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3910, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H\"#]/MG$Z/8SaQ#`c`]<");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      Object object0 = new Object();
      jSONArray0.setComponentType((Type) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      JSONArray jSONArray0 = new JSONArray(1481);
      jSONArray0.getComponentType();
      jSONArray0.set(954, (Object) null);
      assertEquals(955, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, "");
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray[] jSONArrayArray0 = new JSONArray[1];
      jSONArrayArray0[0] = jSONArray1;
      JSONArray[] jSONArrayArray1 = jSONArray1.toArray(jSONArrayArray0);
      assertSame(jSONArrayArray0, jSONArrayArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(961);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 961, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("");
      Object object0 = new Object();
      jSONArray0.setRelatedArray(object0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      jSONArray0.remove((Object) integer0);
      jSONArray0.set(0, linkedList0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.set(989, (Object) null);
      jSONArray0.getObject(348, (Type) null);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      jSONArray0.hashCode();
      jSONArray0.indexOf(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(984);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 984, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H]/MGOZ/8Sa6#`c`]<");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.toString();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getLongValue(95);
      jSONArray0.getFloatValue(95);
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertEquals(990, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      linkedList0.add((Method) null);
      jSONArray0.containsAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(955, 3089);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.set(996, object0);
      jSONArray0.getShortValue(989);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = new JSONArray(989);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 997
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((byte)1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.iterator();
      jSONArray0.set(989, jSONArray1);
      Integer integer0 = new Integer(3089);
      jSONArray0.iterator();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("parse error : ", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class0, class0, class0, (Field) null, 989, 989, 3089);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONArray cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray(989);
      ParserConfig parserConfig0 = new ParserConfig(false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-825), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.set(989, object0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.Object@210ee5b4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      JSONArray jSONArray0 = new JSONArray((byte)1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1275, byteArray0);
      jSONArray0.equals(mockThaiBuddhistDate0);
      int int0 = jSONArray1.getIntValue((byte)1);
      assertEquals(1276, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(10);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-910));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.add((-580), (Object) 989);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      JSONArray jSONArray0 = new JSONArray((byte)1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)1, byteArray0);
      jSONArray0.equals(mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue((byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [B@7dfc3570
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(980, object0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(980);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.Object@714bb52c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3089, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray1.iterator();
      jSONArray0.fluentSet(3089, jSONArray1);
      jSONArray2.getJSONArray(3089);
      byte byte0 = jSONArray0.getByteValue(238);
      assertEquals(3090, jSONArray0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((byte)1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.iterator();
      jSONArray0.fluentSet(3089, jSONArray1);
      jSONArray0.getJSONArray(979);
      double double0 = jSONArray0.getDoubleValue((byte)1);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((byte)1);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2387, iterator0);
      jSONArray0.getBooleanValue(931);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.fluentAdd((Object) iterator0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(2387);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.fluentSet((byte)1, byteArray0);
      jSONArray0.equals(mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.lastIndexOf(mockMinguoDate0);
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3041);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3041, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H]/MGOZ/8Sa6#`c`]<");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(jSONArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[0];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) mockThaiBuddhistDate0, serializeConfig0, serializeFilterArray0, 956, serializerFeatureArray0);
      jSONArray1.set(989, (Object) null);
      jSONArray1.getLongValue(87);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(990, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.set(989, (Object) null);
      float float0 = jSONArray1.getFloatValue(95);
      assertEquals(990, jSONArray1.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(3089, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      LinkedList<MockHijrahDate> linkedList0 = new LinkedList<MockHijrahDate>();
      jSONArray2.fluentRemoveAll(jSONArray1);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        jSONArray2.getBigInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "H]/MGOZ/8Sa6#`c`]+<");
      JSONArray jSONArray2 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.set(0, "");
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.set(3075, (Object) null);
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray2.getBoolean((byte)80);
      jSONArray1.getJSONObject((byte)80);
      // Undeclared exception!
      try { 
        jSONArray2.forEach((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.iterator();
      jSONArray0.set(989, jSONArray1);
      Integer integer0 = new Integer(3089);
      jSONArray0.getObject(971, (Type) null);
      MockDate mockDate0 = new MockDate(0L);
      jSONArray0.iterator();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      jSONArray1.getByteValue(0);
      jSONArray0.getJSONObject(919);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((byte)1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.iterator();
      jSONArray0.fluentSet(3089, jSONArray0);
      jSONArray0.getJSONArray(979);
      double double0 = jSONArray0.getDoubleValue((byte)1);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      LinkedList<MockThaiBuddhistDate> linkedList0 = new LinkedList<MockThaiBuddhistDate>();
      jSONArray2.toJavaList(class0);
      jSONArray0.set(3087, (Object) null);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(989, (Collection<?>) jSONArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray2.getObject(703, (Type) class0);
      jSONArray1.getBoolean(3063);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONObject((-91));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((byte)1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.iterator();
      jSONArray0.set(989, jSONArray1);
      Integer integer0 = new Integer(3089);
      jSONArray1.getObject(23, (Type) null);
      MockDate mockDate0 = new MockDate(5431L);
      jSONArray1.iterator();
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("\"[T.", concurrentHashMap0);
      int int0 = 977;
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class0, (Type) null, (Field) null, 977, 984, 1);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      jSONArray0.fluentSet(1, pushbackInputStream0);
      jSONArray0.getJSONArray(984);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.io.PushbackInputStream@583ed1ac
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.clear();
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Type type0 = null;
      jSONArray2.set(3089, "");
      int int0 = 87;
      int int1 = 1755;
      jSONArray1.getLongValue(1755);
      jSONArray0.getObject(87, (Type) null);
      jSONArray0.getBoolean(3089);
      // Undeclared exception!
      try { 
        MockMonthDay.of(3089, 3089);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear: 3089
         //
         verifyException("java.time.Month", e);
      }
  }
}
