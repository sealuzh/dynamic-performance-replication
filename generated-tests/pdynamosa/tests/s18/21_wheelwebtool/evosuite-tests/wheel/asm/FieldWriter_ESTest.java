/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:45:51 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32746);
      classWriter0.index = (-1137);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32746, "f4!(h% +uWM", "f4!(h% +uWM", "f4!(h% +uWM", "f4!(h% +uWM");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32746);
      classWriter0.index = (-1137);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32746, "f4!(h% +uWM", "f4!(h% +uWM", "f4!(h% +uWM", "f4!(h% +uWM");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1593));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "8(e", "8(e", "", (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1593));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "8(e", "8(e", "", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 9, "", "RuntimeInvisibleAnnotations", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2631), "oc~~,.vQ]!&\"5", "", "", "RuntimeInvisibleAnnotations");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 1472, "CGr", "", "CGr", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1628, 1373);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 9, "", "org.apache.commons.io.filefilter.DirectoryFileFilter", "", byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.ByteArrayInputStream@6c25bb68
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(252);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeInvisibleAnnotations", "<1FQPY", "RuntimeInvisibleAnnotations", (Object) null);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32767);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32767, "bK", "RuntimeInvisibleAnnotations", "bK", "bK");
      fieldWriter0.visitAnnotation("dktcfy>D5YM=J[i>hlr", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2467), "RuntimeInvisibleAnnotations", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32746);
      classWriter0.version = (-684);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32746, "f4!(% +uWM", "f4!(% +uWM", "f4!(% +uWM", "f4!(% +uWM");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 7, "", "Z2}0b)ANXW-jpBx", "", (Object) null);
      fieldWriter0.visitAnnotation("Z2}0b)ANXW-jpBx", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 8, "L^(.UunP u/F.a35r", "The list of names must not be null", (String) null, "");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2467), "RuntimeInvisibleAnnotations", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32734);
      classWriter0.version = 1125;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32734, "b_K", "b_K", "b_K", "b_K");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32767);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32767, "bK", "RuntimeInvisibleAnnotations", "bK", "bK");
      fieldWriter0.visitAnnotation("dktcfy>D5YM=J[i>hlr", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1025));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32767, "", "T", "", "RuntimeInvisibleAnnotations");
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1600));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1078, "a'nbY=m'IvBBH*zH}5F", "a'nbY=m'IvBBH*zH}5F", "", (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 245, "a'nbY=m'IvBBH*zH}5F", "w5N5}|", "-@uE", (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1529);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2467), "RuntimeInvisibleAnnotations", "", "", "");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1600));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1078, "a'nbY=m'IvBBH*zH}5F", "a'nbY=m'IvBBH*zH}5F", "", (Object) null);
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.FalseFileFilter");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
