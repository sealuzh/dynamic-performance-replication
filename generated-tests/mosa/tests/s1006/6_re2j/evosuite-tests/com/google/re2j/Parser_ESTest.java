/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:22:18 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", (-52));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Parser.parse("R;}TCI'(eBCxevEf}AE", (-451));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `R;}TCI'(eBCxevEf}AE`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        Parser.parse("R;}TCI'(eBCxevEf}AE", (-2204));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `R;}TCI'(eBCxevEf}AE`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp regexp0 = Parser.parse("GKjs.|", 493);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PVKJ", 2460);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pVKJ", (-407));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:er:]", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        Parser.parse("if|~!ww[56aa", 132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[56aa`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("'q^CfK(jT$EwJ)", 2917);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        Parser.parse("Dh?zp(", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Dh?zp(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp regexp0 = Parser.parse("ygg*<7", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".'|7.Ipp6OX=05", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8+nc9Mxe6`=", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P=DxrW|}", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        Parser.parse("g)AzgL]l.OA_4 ", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        Parser.parse("(?<", 408);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".,YT,'v:d", 108);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        Parser.parse("[:N0Bhi7!>Q@x", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:N0Bhi7!>Q@x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:er:]", 493);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        Parser.parse("R;}TCI'(eBCxevEf}AE", (-439));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `R;}TCI'(eBCxevEf}AE`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp regexp0 = Parser.parse("6=i0-`0!hQ5mlk?t>4<", 65);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Y>$Q+J*", (-48));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{ #L'ePcR7u?", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        Parser.parse("??", 2917);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `??`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=o{r:{", 777);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|48h&ou}Q4", (-415));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p}^VKJ", 493);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ary_l; z0snST9B{6x", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        Parser.parse("(?<", 2917);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        Parser.parse("(?", 2917);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P", 3549);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      try { 
        Parser.parse("[", (-2800));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp regexp0 = Parser.parse("eg4=1~s6udm`|E%", 1841);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp regexp0 = Parser.parse("vTrYG>K6^$,>9b", (-172));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Y", 76);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D$jcmw~n%Y8", 2013);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp regexp0 = Parser.parse("y\"l-iD|", 76);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 2917);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w", 109);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w", 8136);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?s:.)", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        Parser.parse(".+*?()|[]{}^$", 3533);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\n", (-415));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-319);
      Regexp regexp0 = Parser.parse("5u[.d{y>F>[H]|P;g@", (-319));
      assertNotNull(regexp0);
      
      String string0 = "u6#[nzY\\a/QCy>JYd{";
      try { 
        Parser.parse("u6#[nzYa/QCy>JYd{", (-319));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[nzYa/QCy>JYd{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp regexp0 = Parser.parse("U|WHWG}-RVx|vD-", 44013);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\r", 493);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp regexp0 = Parser.parse("KSmUA%_", 96);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("r]DaGQZqa]", (-1223));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 96);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        Parser.parse("&-|hL2q?N);", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        Parser.parse("jt[6/0\"a6-C,<$Bd/.'", (-1332));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[6/0\"a6-C,<$Bd/.'`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      try { 
        Parser.parse("[:", 2529);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      try { 
        Parser.parse("8z[-", 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 97;
      try { 
        Parser.parse("nu[]<ee@$LW", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]<ee@$LW`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp regexp0 = Parser.parse("0g$tS@5<AzqP56*@y$", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp regexp0 = Parser.parse("xgt7N\u0005''x!", 76);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      try { 
        Parser.parse("qAU[lzY\u0006rE", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[lzY\u0006rE`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0003", (-491));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p{r:]", 44013);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", 65597);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", 44013);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[2:]", 81);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:r:]", 96);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("bvI{2", 9313);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      try { 
        Parser.parse("^f.5;9>FGC[-=o5=p", 44013);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-=o5=p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 1057);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      try { 
        Parser.parse("^f.5;9>FGC[-=o5=p", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-=o5=p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Mh^5-/|L6x%yX+", 3392);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("pgja6P~", (-2056));
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("Mh^5-/|L6x%yX+", 49);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("|", 3392);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      try { 
        Parser.parse("_[w", 8136);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[w`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Qtv7f+", (-1816));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Regexp regexp0 = Parser.parse("DAq\"hu(PdxO8uA)", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Regexp regexp0 = Parser.parse("<`LLc\u0002RDuH-8", 97);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 1480);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("tV7f+", 93);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("zlyGp%[~-Veo1&`0C", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `~-V`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Parser parser0 = new Parser("OcubS`MD_#4=xlsM", (-17));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("pN- |pt&<J9`:+2O", 3252);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Regexp regexp0 = Parser.parse("5E", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp regexp0 = Parser.parse("/D|'{68y_Pv:0^L", (-267));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^v0a?x{10FFFF}]", 2085);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 2077);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      try { 
        Parser.parse("cz~\u0001m4(.jIuVf*y5v", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `cz~\u0001m4(.jIuVf*y5v`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Regexp regexp0 = Parser.parse("!S\u0007v", 3533);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      try { 
        Parser.parse("DIkKV[iQdp+-", 2505);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[iQdp+-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pZ4", 3533);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{", 3533);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000^b", 293);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[:LW", 102);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%BRmIqXT]", (-2239));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x0a-x{10FFFF}]", 2085);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-|]", 65116);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      try { 
        Parser.parse("[x0-x{10FFF}", (-1632));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[x0-x{10FFF}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x0a-x{10FFFmF}]", 2085);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pZB4", 1988);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".|]NQmt:Lh<Y81p8o", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x0a-x{10FF}]", 312);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">", 109);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("d", 2025);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("d", 231);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      Parser parser0 = new Parser(">", 109);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = "9xf\"<3 e\\pL}O";
      Regexp regexp0 = Parser.parse("9xf\"<3 epL}O", (-1291));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      regexp0.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2268, (-1291));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}]", 2077);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Noncharacter_Code_Point", 2077);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("QUEST", 2077);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      int int0 = (-2836);
      Regexp regexp0 = Parser.parse("knIckWVw*ws91|A:p+", (-2836));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("\u0004I,M7", (-2836));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
  }
}
