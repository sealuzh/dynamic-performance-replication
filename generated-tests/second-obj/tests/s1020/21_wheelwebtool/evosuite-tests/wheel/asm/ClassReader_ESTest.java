/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:48:18 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitSource((String) null, (String) null);
      Attribute attribute0 = new Attribute("LocalVariableTable");
      Attribute attribute1 = new Attribute("LocalVariableTable");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.readInt(1);
      classReader1.getSuperName();
      classReader1.getSuperName();
      ClassReader classReader2 = new ClassReader(classReader0.b, 8, 1);
      // Undeclared exception!
      try { 
        classReader2.copyPool(classWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      Label[] labelArray0 = new Label[1];
      Label label0 = new Label();
      Label label1 = classReader0.readLabel(0, labelArray0);
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.getClassName();
      classReader0.getClassName();
      classWriter0.newMethod("LineNumberTable", "org/apache/commons/io/filefilter/CanReadFileFilter", "u_PT?3RzHe2 G*'Uv[v", true);
      Object object0 = label1.info;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/apache/commons/io/filefilter/CanReadFileFilter");
      classReader0.readByte(1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[3] = 'c';
      classReader0.readLong(7);
      // Undeclared exception!
      try { 
        classReader0.getItem(251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 251
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'n';
      charArray0[3] = 'h';
      classReader0.getSuperName();
      charArray0[4] = ':';
      charArray0[5] = '!';
      classReader0.readShort(10);
      // Undeclared exception!
      try { 
        classReader0.readConst(10, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(33);
      classReader0.accept((ClassVisitor) classWriter0, 33);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      int int0 = 139;
      classReader0.accept((ClassVisitor) classWriter0, 139);
      classReader0.getSuperName();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = '#';
      charArray0[3] = ':';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '#';
      charArray0[7] = ':';
      charArray0[8] = '#';
      // Undeclared exception!
      try { 
        classReader0.readConst(870, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 870
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[2] = 'c';
      Object object0 = new Object();
      assertNotNull(object0);
      
      charArray0[3] = 'h';
      charArray0[4] = ':';
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      classReader0.accept((ClassVisitor) classAdapter0, 0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 293, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1175
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      String string1 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string1);
      
      String string2 = classReader0.getSuperName();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string2);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertFalse(boolean0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 883, 1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(883, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(899, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(33, classReader0.getAccess());
      assertEquals(0, classReader1.getAccess());
      assertNotNull(classReader1);
      
      // Undeclared exception!
      try { 
        classReader1.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(1046);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      classWriter0.firstField = null;
      Attribute attribute0 = new Attribute("iG$J}b4F");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      
      int int0 = classReader0.getAccess();
      assertEquals(33, int0);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(33, classReader0.getAccess());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader0.readConst(33, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      Attribute[] attributeArray0 = new Attribute[4];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      Label[] labelArray0 = new Label[1];
      Label label0 = new Label();
      assertNotNull(label0);
      
      labelArray0[0] = label0;
      Label label1 = classReader0.readLabel(0, labelArray0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(label1);
      assertSame(label1, label0);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      
      String string1 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string1);
      
      String string2 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string2);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = '\u0000';
      charArray0[4] = 'c';
      charArray0[5] = '\u0000';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      int int0 = classWriter0.newMethod("LineNumberTable", "org/apache/commons/io/filefilter/CanReadFileFilter", "u_PT?3RzHe2 G*'Uv[v", true);
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Object object0 = label1.info;
      assertNull(object0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/apache/commons/io/filefilter/CanReadFileFilter");
      assertFalse(boolean0);
      
      int int1 = classReader0.readByte(1);
      assertFalse(int1 == int0);
      assertEquals(254, int1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Y';
      charArray1[1] = '\u0000';
      charArray1[2] = 'c';
      charArray1[3] = 'c';
      long long0 = classReader0.readLong(7);
      assertEquals(3386765236849410080L, long0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(883, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.getItem(251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 251
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[6];
      Attribute[] attributeArray0 = new Attribute[4];
      Item item0 = new Item(1);
      assertNotNull(item0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(string0);
      
      int int0 = 52;
      Object object0 = classReader0.readConst(52, charArray0);
      assertFalse(object0.equals((Object)int0));
      assertEquals(2048, object0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(object0);
      
      long long0 = classReader0.readLong(2276);
      assertEquals(5279148195397763840L, long0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2659, 3040);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23683
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      assertEquals(3040, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Attribute[] attributeArray0 = new Attribute[4];
      Item item0 = new Item(1);
      assertNotNull(item0);
      
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 1);
      assertEquals(3040, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1537, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(3040, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = classReader0.readConst(90, charArray0);
      assertFalse(object0.equals((Object)string0));
      assertEquals("\u0001\uA240\n\u0001\uB240\n", object0);
      assertEquals(3040, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertArrayEquals(new char[] {'\u0001', '\uA240', '\n', '\u0001', '\uB240', '\n'}, charArray0);
      assertNotNull(object0);
      
      Item[] itemArray0 = new Item[7];
      itemArray0[0] = item0;
      itemArray0[1] = item0;
      itemArray0[2] = item0;
      itemArray0[3] = item0;
      itemArray0[4] = item0;
      itemArray0[5] = item0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(90);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.PipedInputStream@77386f43
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      
      String string1 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", string1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string1);
      
      Attribute attribute0 = new Attribute("iG$J}b4F");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Attribute attribute1 = attribute0.next;
      assertNull(attribute1);
      
      String string2 = classReader0.getSuperName();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string2);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string2);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      
      int int0 = Frame.NULL;
      assertEquals(16777221, int0);
      
      String string3 = classReader1.getSuperName();
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string3);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(string3);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader1.b);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(boolean0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      ClassReader classReader2 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1057, classReader2.getAccess());
      assertNotNull(classReader2);
      
      String[] stringArray0 = classReader2.getInterfaces();
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1057, classReader2.getAccess());
      assertNotNull(stringArray0);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      
      String[] stringArray1 = classReader1.getInterfaces();
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(stringArray1);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = classReader1.getSuperName();
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string4);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(string4);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      
      int int1 = classReader1.getItem(2);
      assertFalse(int1 == int0);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertEquals(16, int1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      
      char[] charArray0 = new char[1];
      ClassWriter classWriter0 = new ClassWriter((-1107));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader1.copyPool(classWriter0);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      
      String[] stringArray2 = classReader2.getInterfaces();
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1057, classReader2.getAccess());
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      
      charArray0[0] = 'm';
      // Undeclared exception!
      try { 
        classReader2.readConst(883, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 883
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      assertEquals(3040, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Attribute[] attributeArray0 = new Attribute[4];
      Item item0 = new Item(1);
      assertNotNull(item0);
      
      int int0 = 11;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 11);
      assertEquals(3040, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1537, classReader0.getAccess());
      
      Integer integer0 = (Integer)classReader0.readConst(107, charArray0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(13, (int)integer0);
      assertEquals(3040, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(integer0);
      
      classWriter0.thisName = "long";
      long long0 = classReader0.readLong(1);
      assertEquals((-91551935198383615L), long0);
      assertEquals(3040, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1537, classReader0.getAccess());
      
      int int1 = 619;
      ClassReader classReader1 = new ClassReader(classReader0.b, 619, 3040);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(3040, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2391, classReader1.header);
      assertEquals(1537, classReader0.getAccess());
      assertEquals(256, classReader1.getAccess());
      assertNotNull(classReader1);
      
      // Undeclared exception!
      try { 
        classReader1.copyPool(classWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newConstItem("wheel.asm.Opcodes");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(item0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(string0);
      
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(3040, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1537, classReader0.getAccess());
      
      Attribute attribute0 = new Attribute("&T|Ss6Yf");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2355, 753);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23683
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)111;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)7, (byte) (-31), (byte) (-73), (byte)111}, byteArray0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3040, classReader0.header);
      assertEquals(1537, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Attribute[] attributeArray0 = new Attribute[4];
      Item item0 = new Item(1);
      assertNotNull(item0);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Opcodes", "wheel.asm.Opcodes");
      assertEquals("wheel.asm.Opcodes", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 2);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(3040, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1537, classReader0.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.readConst(645, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 645
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      char[] charArray0 = new char[6];
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      Attribute[] attributeArray0 = new Attribute[9];
      classWriter0.newInteger(3040);
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 11);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.readConst(90, charArray0);
      classWriter0.newDouble(1.0);
      int int0 = 2286;
      classReader0.readLong(2286);
      ClassReader classReader1 = new ClassReader(classReader0.b, 606, 3040);
      // Undeclared exception!
      try { 
        classReader1.copyPool(classWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
