/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:51:50 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.setOwner(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("E1a1o{?oYLG");
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("E1a1o{?oYLG", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.setFilename("d=Y#z)~:!");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "e8 `J@{WtCJ";
      findWithCapabilities0.setFilename("-packages");
      findWithCapabilities0.find();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("-packages");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[6];
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      stringArray0[0] = "ua`]Vd ).c,RkN(Na ";
      stringArray0[1] = "";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      stringArray0[2] = "Num Attributes: ";
      stringArray0[3] = "  Setting canonical user options";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      stringArray0[4] = "";
      stringArray0[5] = "[KC";
      CapabilitiesHandler capabilitiesHandler0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.setSize(44);
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("ich:");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("&6infCSr--");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals("&6infCSr--", findWithCapabilities0.getFilename());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "";
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("Variance: ");
      findWithCapabilities0.setCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tMust handle relational classes.";
      stringArray0[1] = "not-missing-att-values";
      stringArray0[2] = "-no-class";
      stringArray0[3] = "not-nominal-atts";
      stringArray0[4] = "3Dm#F83h[l";
      stringArray0[5] = "\tMust handle relational classes.";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-not-nominal-class";
      stringArray0[1] = "*Nq~eDO$JO=8qiK'[4M";
      stringArray0[2] = "problem found!\n\tFirst set: ";
      stringArray0[3] = "vMP!zpAz!&g)rJ";
      stringArray0[4] = "\tMust handle nominal classes.";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      String string0 = "\nSearching for the following Capabilities:";
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "Od=Y#z)~:!";
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "Od=Y#z)~:!";
      findWithCapabilities0.setFilename("Od=Y#z)~:!");
      findWithCapabilities0.getFilename();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "";
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      findWithCapabilities0.m_Filename = "COyLvLH=>5U/";
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "";
      SingleIndex singleIndex0 = new SingleIndex("cV4qrG#");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      singleIndex0.setSingleIndex("-generic");
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      singleIndex0.setSingleIndex("weka/core/Capabilities.props");
      findWithCapabilities0.handles(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex(";kyKYh<v:)@uk(P9FrX");
      singleIndex0.setSingleIndex("\n  Getting canonical user options: ");
      findWithCapabilities0.setClassIndex("not-unary-class");
      findWithCapabilities0.getHandler();
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.m_Superclass = "d=Ywz)~:!";
      findWithCapabilities0.setClassIndex("-binary-atts");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.getOptions();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      Random.setNextRandom((-1808));
      findWithCapabilities0.getHandler();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.setFilename("-silent");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=#)~!";
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("ich:");
      findWithCapabilities0.getFilename();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_STARTTAG;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      String string1 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAllClassDependencies();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-62);
      byteArray0[3] = (byte)5;
      SingleIndex singleIndex0 = new SingleIndex("weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      capabilities0.disableAllAttributeDependencies();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities3.setCapabilities(capabilities1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities3.enableNot(capabilities_Capability1);
      findWithCapabilities1.enableNot(capabilities_Capability1);
      assertNotSame(findWithCapabilities1, findWithCapabilities3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"";
      stringArray0[1] = "Can't compute variance because attribute is not numeric!";
      stringArray0[2] = "\tThe number of instances in relational/bag attributes (default 10).";
      stringArray0[3] = "-not-date-class";
      stringArray0[4] = "coEuc0Em";
      stringArray0[5] = "p#.2*rTJB/8L ;3";
      stringArray0[6] = "All values set to one: ";
      stringArray0[7] = "[a`qByL}#E< Y^";
      stringArray0[8] = "<!-- technical-plaintext-start -->";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      capabilities0.capabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setCapabilities(capabilities1);
      capabilities1.getOtherCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("42");
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String string0 = findWithCapabilities1.getRevision();
      findWithCapabilities0.getOptions();
      String string1 = findWithCapabilities0.getFilename();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=#)~!";
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("ich:");
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAllClassDependencies();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)5;
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      findWithCapabilities0.listOptions();
      capabilities0.disableAllAttributeDependencies();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities3.setCapabilities(capabilities1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities3.enableNot(capabilities_Capability1);
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities3.disable(capabilities_Capability3);
      assertEquals("", findWithCapabilities3.getFilename());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "42");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      capabilities0.and(capabilities2);
      Capabilities capabilities3 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities3;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "42";
      stringArray0[1] = "42";
      stringArray0[2] = "|2";
      stringArray0[3] = "42";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      try { 
        capabilities0.testWithFail((Instances) null, 1529, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.core.FindWithCapabilities: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(1);
      System.setCurrentTimeMillis(1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-122);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_MissingClassValuesTest = false;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      capabilities0.disableAllAttributeDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.setClassIndex("pbd}ni*I?P(4CLTJ");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("2Y\"XOhS");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.toSource("[a`qByL}#E< Y^", 0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getMatches();
      capabilities0.capabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      SingleIndex singleIndex0 = new SingleIndex();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities1.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tThe number of relational attributes (default 0).";
      stringArray0[1] = "-not-no-class";
      stringArray0[2] = "$Revision: 8034 $";
      stringArray0[3] = "a";
      stringArray0[4] = "pty";
      stringArray0[5] = "weka.version";
      stringArray0[6] = "\tMust handle binary attributes.";
      stringArray0[7] = "2G8hP&ay47";
      stringArray0[8] = "nominal-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      TestInstances.arrayToList(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.find();
      Random.setNextRandom(99);
      findWithCapabilities0.getOptions();
      findWithCapabilities1.disableNot((Capabilities.Capability) null);
      assertNotSame(findWithCapabilities1, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d=Y#z)~:!");
      findWithCapabilities0.setFilename("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      assertTrue(vector0.equals((Object)vector1));
      
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      SingleIndex singleIndex0 = new SingleIndex("i-z!$0`q2hMr,7");
      singleIndex0.setSingleIndex("weka/core/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      singleIndex0.setSingleIndex("fU*4fgNq3mytF#");
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.getRevision();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      SingleIndex singleIndex0 = new SingleIndex("i-z!$0`q2hMr,7");
      singleIndex0.setSingleIndex("weka/core/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      singleIndex0.setSingleIndex("fU*4fgNq3mytF#");
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.m_Superclass = "d=Ywz)~:!";
      findWithCapabilities0.setClassIndex("-binary-atts");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("i-h:");
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      capabilities0.capabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.listOptions();
      findWithCapabilities1.setCapabilities(capabilities1);
      findWithCapabilities1.find();
      findWithCapabilities1.getRevision();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "GZtM&^xQ";
      stringArray0[1] = "-missing-class-values";
      stringArray0[2] = "X&B}j*!NrruL7v]t_=w";
      stringArray0[3] = "V/p(h1w";
      stringArray0[4] = "^M@j/_";
      stringArray0[5] = "j}%Q";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tThe number of relational attributes (default 0).";
      stringArray0[1] = "-not-no-class";
      stringArray0[2] = "$Revision: 8034 $";
      stringArray0[3] = "a";
      stringArray0[4] = "pty";
      stringArray0[5] = "weka.version";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities2.enableNot(capabilities_Capability1);
      findWithCapabilities1.setClassIndex("\tThe number of relational attributes (default 0).");
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("d=Y#z)~:!");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      capabilities1.capabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities2 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.getNotCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities1.m_ClassIndex = singleIndex0;
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=#)~!";
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_STARTTAG;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      String string1 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      findWithCapabilities1.getNotCapabilities();
      capabilities0.disableAllClassDependencies();
      SingleIndex singleIndex0 = new SingleIndex("d=#)~!");
      findWithCapabilities0.listOptions();
      capabilities0.disableAllAttributeDependencies();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities3.m_Capabilities;
      findWithCapabilities2.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.enableNot(capabilities_Capability2);
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability3);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("42");
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String string0 = findWithCapabilities1.getRevision();
      findWithCapabilities0.getOptions();
      String string1 = findWithCapabilities0.getFilename();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.find();
      Random.setNextRandom(1);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y ");
      Random.setNextRandom(168);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      System.setCurrentTimeMillis(168);
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 68);
      Capabilities.forInstances(instances0, false);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      Random.setNextRandom(168);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "Ld=z~:!";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("42");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities1.find();
      Vector<String> vector2 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      findWithCapabilities1.find();
      findWithCapabilities1.getRevision();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability4);
      findWithCapabilities1.enable(capabilities_Capability3);
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=#)~!";
      findWithCapabilities0.getMisses();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities2.getNotCapabilities();
      capabilities1.capabilities();
      capabilities1.enableAllAttributes();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities1.getCapabilities();
      SingleIndex singleIndex1 = new SingleIndex();
      findWithCapabilities0.listOptions();
      findWithCapabilities2.getRevision();
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.capabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.setCapabilities(capabilities1);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.capabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getNotCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray1);
      String[] stringArray2 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.capabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      capabilities0.getRevision();
      Capabilities capabilities2 = findWithCapabilities1.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.setCapabilities(capabilities2);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities1.getRevision();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("d=Y#z)~:!");
      capabilities0.capabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setCapabilities(capabilities1);
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities1.listOptions();
      findWithCapabilities2.setCapabilities(capabilities2);
      findWithCapabilities1.find();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities.main(stringArray0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities2.m_Handler;
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability3);
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex(" //vN81W|]0]8");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("d=Y#z)~:!");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      boolean boolean0 = capabilities0.m_MinimumNumberInstancesTest;
      capabilities0.dependencies();
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setOptions(stringArray0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("42");
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex(" ");
      findWithCapabilities0.setFilename("\tSuperclass to look for in the packages.\n");
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d=Y#z)~:!");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("42");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities1.setCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      String string1 = TestInstances.arrayToList(stringArray0);
      assertEquals("-num-instances,1,-superclass,d=Y#z)~:!", string1);
      
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      findWithCapabilities1.setOptions(stringArray0);
      capabilities0.disableAll();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Vector<String> vector1 = findWithCapabilities0.m_Matches;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      String[] stringArray2 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities2.m_GenericPropertiesCreator = true;
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.m_ClassIndex = null;
      String string2 = findWithCapabilities3.getClassIndex();
      assertEquals("-1", string2);
      
      findWithCapabilities0.listOptions();
      assertEquals("", findWithCapabilities0.getFilename());
  }
}
