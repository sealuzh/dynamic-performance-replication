/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 20:45:12 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.put((Object) null, "us.codecraft.webmagic.utils.DoubleKeyMap", "us.codecraft.webmagic.utils.DoubleKeyMap");
      String string0 = doubleKeyMap0.remove((Object) null, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertEquals("us.codecraft.webmagic.utils.DoubleKeyMap", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.put((Object) "us.codecraft.webmagic.utils.DoubleKeyMap", "#7", "wrong proto type map ");
      Map<String, String> map0 = doubleKeyMap0.remove((Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>>();
      DoubleKeyMap<String, Integer, HashMap<Object, Map<Object, Object>>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, HashMap<Object, Map<Object, Object>>>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, String>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      HashMap<Map<Object, Object>, Object> hashMap0 = doubleKeyMap0.remove(map1, (Object) doubleKeyMap1);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>();
      String string0 = doubleKeyMap0.remove((Object) doubleKeyMap1, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Object, Object>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = doubleKeyMap0.put((Map<Object, Integer>) hashMap1, (Object) hashMap0, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer((-996));
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      Object object0 = new Object();
      HashMap<Map<Object, Object>, Object> hashMap0 = doubleKeyMap0.get(map0, object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null, class0);
      String string0 = doubleKeyMap0.get((Object) null, "' JZlmdz}`#a\"tSh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0, class0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(map0);
      Object object0 = doubleKeyMap2.get((Object) doubleKeyMap0, "fkUa~Q;p`LsJ2");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, String>();
      DoubleKeyMap<Object, Map<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, Object>();
      Map<Map<Object, Object>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (String) null, (String) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>(1675);
      Object object0 = new Object();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, object0, (Object) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap0.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, Object>>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.put((Object) null, "us.codecraft.webmagic.utils.DoubleKeyMap", (String) null);
      String string0 = doubleKeyMap0.remove((Object) null, "]N>4\"<.S6ACUkpF");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.put((Object) null, (String) null, "wrong proto type map ");
      String string0 = doubleKeyMap0.put((Object) null, (String) null, (String) null);
      assertEquals("wrong proto type map ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      HashMap<Map<Object, Object>, Object> hashMap0 = doubleKeyMap0.get(map0, (Object) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, HashMap<Map<Object, Object>, Object>>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, HashMap<Map<Object, Object>, Object>>>();
      DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>>(hashMap0);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      HashMap<Object, HashMap<Map<Object, Object>, Object>> hashMap1 = new HashMap<Object, HashMap<Map<Object, Object>, Object>>();
      hashMap0.put(map0, hashMap1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      HashMap<Map<Object, Object>, Object> hashMap3 = doubleKeyMap0.get(map0, (Object) hashMap2);
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
