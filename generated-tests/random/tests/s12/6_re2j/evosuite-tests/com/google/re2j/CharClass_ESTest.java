/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:04:36 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = (-1273);
      intArray0[3] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 1, (-1273), 1}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-1273));
      assertArrayEquals(new int[] {2, 1, (-1273), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {2, 1, (-1273), 1114111}, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {2, 1, (-1273), 1114111}, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {2, 1, (-1273), 1114111}, intArray0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1, (-1));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[2][1];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-883);
      intArray0[1] = (-2218);
      intArray0[2] = 1480;
      intArray0[3] = 120457;
      intArray0[4] = (-2109771);
      intArray0[5] = (-740);
      intArray0[6] = 1216;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-883), (-2218), 1480, 120457, (-2109771), (-740), 1216}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[6][3];
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 120457;
      intArray2[1] = (-2109771);
      intArray2[2] = (-2218);
      intArray2[3] = (-2218);
      intArray2[4] = 1480;
      intArray2[5] = (-740);
      intArray2[6] = (-740);
      intArray2[7] = (-883);
      intArray2[8] = 1216;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-2109771));
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-883), (-2218), 1480, 120457, (-2109771), (-740), 1114111}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1255, 1255);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-1180), 119946);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[0][2];
      CharClass charClass3 = charClass2.appendTable(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[4];
      intArray1[0] = 119946;
      intArray1[1] = 119946;
      intArray1[2] = (-1180);
      intArray1[3] = 1255;
      CharClass charClass4 = charClass3.appendClass(intArray1);
      assertArrayEquals(new int[] {119946, 119946, (-1180), 1255}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendLiteral(119946, 65);
      assertArrayEquals(new int[] {119946, 119946, (-1180), 1255}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertArrayEquals(new int[] {119946, 119946, (-1180), 1255}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][4];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      int[] intArray1 = new int[2];
      intArray1[0] = 2113;
      intArray1[1] = 7525;
      CharClass charClass2 = charClass1.appendClass(intArray1);
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendTableWithSign(intArray0, 7525);
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendRange(2113, 4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      int int0 = (-2543);
      CharClass charClass5 = charClass3.appendLiteral(7936, (-2543));
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass5.appendRange(2113, 1);
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass7.appendClassWithSign(intArray1, 7936);
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.cleanClass();
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass7.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass10);
      
      int[][] intArray2 = new int[2][4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass11 = charClass10.appendNegatedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {2113, 7525}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass11);
      
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      // Undeclared exception!
      try { 
        charClass4.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2144;
      intArray0[1] = 4096;
      intArray0[2] = (-2098407);
      intArray0[3] = 1350;
      intArray0[4] = 2146;
      intArray0[5] = 66640;
      intArray0[6] = 1793;
      intArray0[7] = 113;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2144, 4096, (-2098407), 1350, 2146, 66640, 1793, 113}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {2144, 4096, (-2098407), 1350, 2144, 66640, 1793, 113}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(2144, (-2108226));
      assertArrayEquals(new int[] {2144, 4096, (-2098407), 1350, 2144, 66640, 1793, 113}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertArrayEquals(new int[] {2144, 4096, (-2098407), 1350, 2144, 66640, 1793, 113}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, (-629));
      assertArrayEquals(new int[] {2144, 4096, (-2098407), 1350, 2144, 66640, 1793, 113}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][9];
      int[] intArray1 = new int[7];
      intArray1[0] = 3375;
      intArray1[1] = (-470);
      intArray1[2] = 1642;
      intArray1[3] = 1;
      intArray1[4] = (-1773);
      intArray1[5] = (-1);
      intArray1[6] = (-4555);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray2[1] = 1642;
      intArray2[2] = 8667;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1);
      intArray3[1] = 1642;
      intArray3[2] = 3375;
      intArray3[3] = (-1);
      intArray3[4] = 1642;
      intArray3[5] = (-470);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 1;
      intArray5[1] = (-4555);
      intArray5[2] = 8667;
      intArray5[3] = (-1);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 1642;
      intArray6[1] = (-1);
      intArray6[2] = 1642;
      intArray6[3] = (-622);
      intArray6[4] = (-4555);
      intArray6[5] = 1;
      intArray6[6] = 1;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      int int0 = 3878;
      intArray0[0] = 3878;
      int int1 = 3835;
      intArray0[1] = 3835;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {3878, 3835}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {3878, 3835}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 1114111;
      intArray0[2] = 1841;
      intArray0[3] = 2675;
      intArray0[4] = 1;
      intArray0[5] = (-3247);
      intArray0[6] = (-1051);
      intArray0[7] = (-3069);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 1114111, 1841, 2675, 1, (-3247), (-1051), (-3069)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {2, 1114111, 1841, 2675, 1, (-3247), (-1051), (-3069)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-3247));
      assertArrayEquals(new int[] {2, 1114111, 1841, 2675, 1, (-3247), (-1051), (-3069)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      int int0 = 3878;
      intArray0[0] = 3878;
      int int1 = 3835;
      intArray0[1] = 3835;
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {3878, 3835}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {3878, 3835}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 60897);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      
      intArray2[0] = 2;
      intArray2[1] = 193;
      intArray2[2] = 2;
      intArray2[3] = 2;
      CharClass charClass4 = charClass1.appendFoldedClass(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 193, 2, 2}, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendRange(2, 2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendNegatedClass(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 193, 2, 2}, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.appendFoldedRange((-3292), 5742);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 193, 2, 2}, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass6.appendRange(2, 3197);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 193, 2, 2}, intArray2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass9.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass10);
      
      int[] intArray3 = charClass0.toArray();
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertArrayEquals(new int[] {}, intArray3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertEquals(0, intArray3.length);
      assertNotNull(intArray3);
      
      CharClass charClass11 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass11);
      
      CharClass charClass12 = charClass4.appendLiteral(2, 193);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertArrayEquals(new int[] {2, 193, 2, 2}, intArray2);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass11);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass6);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass12);
      
      int[] intArray4 = charClass11.toArray();
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertArrayEquals(new int[] {0, 1114111}, intArray4);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass11);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray4.length);
      assertNotNull(intArray4);
      
      CharClass charClass13 = charClass1.appendClassWithSign(intArray2, 2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray3));
      assertArrayEquals(new int[] {2, 193, 2, 2}, intArray2);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass11);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray3);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass12);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass13);
      
      CharClass charClass14 = charClass4.appendFoldedRange(60896, 2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray3));
      assertArrayEquals(new int[] {2, 193, 2, 2}, intArray2);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass11);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray3);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass5);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass13);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass14);
      
      CharClass charClass15 = charClass10.appendRange(12334, 64);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass15);
      assertSame(charClass9, charClass14);
      assertSame(charClass9, charClass12);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass15);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass13);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass5);
      assertSame(charClass10, charClass13);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass15);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass15);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass11);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass5);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass15);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = (-1445);
      CharClass.charClassToString((int[]) null, (-1445));
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[8][0];
      int[] intArray1 = new int[8];
      intArray1[0] = 1145;
      intArray1[1] = 706;
      intArray1[2] = 1854;
      intArray1[3] = (-4292);
      intArray1[4] = (-2473);
      intArray1[5] = (-990);
      intArray1[6] = 4;
      intArray1[7] = 91;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 4;
      intArray2[1] = (-990);
      intArray2[2] = 1145;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 706;
      intArray3[1] = 1854;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = (-2473);
      intArray4[1] = (-4292);
      intArray4[2] = (-4292);
      intArray4[3] = 1145;
      intArray4[4] = 706;
      intArray4[5] = 859;
      intArray4[6] = (-2473);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      intArray6[0] = (-2473);
      intArray6[1] = 1145;
      intArray6[2] = 91;
      intArray6[3] = (-4292);
      intArray6[4] = 91;
      intArray6[5] = (-2473);
      intArray6[6] = (-990);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 859;
      intArray7[1] = 859;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      intArray8[0] = (-4292);
      intArray8[1] = (-2473);
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 530;
      intArray0[1] = (-6470);
      intArray0[2] = 84;
      intArray0[3] = 43002;
      intArray0[4] = (-449);
      intArray0[5] = (-188);
      intArray0[6] = 505;
      intArray0[7] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 43002);
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 65);
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass0.appendFoldedRange((-188), 505);
      charClass3.appendClassWithSign(intArray0, 91);
      charClass0.appendRange(16, 120071);
      String string0 = charClass3.toString();
      assertEquals("[0x212-0xffffe6ba 0x54-0xa7fa 0xfffffe3f-0xffffff44 0x54-0xa7fa 0x212-0xffffe6ba 0xfffffe3f-0xffffff44 0x54-0xa7fa 0x212-0xffffe6ba 0xfffffe3f-0x41 0x1f9-0x5b 0x61-0x6b 0x42-0x4c 0x212a 0x6c-0x73 0x4d-0x54 0x17f 0x74-0x7a 0x55-0x6b 0x41-0x4b 0x212a 0x6c-0x73 0x4c-0x53 0x17f 0x74-0xb5 0x54-0x5a 0x39c 0x3bc 0xb6-0xc5 0xe0-0xe5 0x212b 0xc6-0xd8 0xe6-0xf6 0xf8-0xfe 0xd9-0xe0 0x1e9e 0xc0-0xc4 0xe1-0xe5 0x212b 0xc5-0xd6 0xe6-0xff 0xd8-0xde 0x178 0xff-0x17f 0x53 0x73 0x180-0x181 0x243 0x253-0x254 0x182-0x18e 0x256-0x257 0x1dd 0x18f-0x190 0x259 0x25b 0x191-0x194 0x260 0x263 0x195-0x196 0x1f6 0x268-0x269 0x197-0x19c 0x23d 0x26f 0x19d-0x19e 0x272 0x220 0x19f-0x1a6 0x275 0x280 0x1a7-0x1ae 0x283 0x288 0x1af-0x1b7 0x28a-0x28b 0x292 0x1b8-0x1dd 0x1f7 0x18e 0x1de-0x1f7 0x195 0x1bf 0x54-0xa7fa 0x212-0xffffe6ba 0xfffffe3f-0xffffff44 0x10-0x1d507]", string0);
      
      CharClass charClass5 = charClass1.appendLiteral((-683), 120071);
      charClass5.appendRange((-214), 91);
      int[] intArray2 = charClass4.toArray();
      assertEquals(172, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2);
      intArray0[1] = 2474;
      intArray0[2] = (-156);
      intArray0[3] = (-2635);
      intArray0[4] = (-3309);
      intArray0[5] = 96;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendClass(intArray0);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      charClass4.appendTableWithSign(intArray1, (-156));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1497);
      intArray0[1] = (-1769);
      intArray0[2] = 1113;
      intArray0[3] = 329;
      intArray0[4] = (-2074);
      intArray0[6] = 1114112;
      intArray0[7] = 907;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 544);
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendRange(4193, 4193);
      CharClass charClass5 = charClass4.appendFoldedRange(544, (-1769));
      charClass5.toString();
      charClass3.appendFoldedClass(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 6150;
      intArray1[1] = 329;
      intArray1[2] = (-2883);
      intArray1[3] = (-1769);
      intArray1[4] = 907;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 2965;
      intArray0[0] = 2965;
      CharClass charClass0 = new CharClass(intArray0);
      int int1 = (-2846);
      CharClass charClass1 = charClass0.appendRange(2965, (-2846));
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
