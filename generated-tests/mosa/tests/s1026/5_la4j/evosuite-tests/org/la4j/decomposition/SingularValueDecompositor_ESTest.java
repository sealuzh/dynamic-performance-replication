/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:48:08 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.vector.functor.VectorAccumulator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(25, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(15, mockRandom0);
      assertEquals(15, denseMatrix0.columns());
      assertEquals(15, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(15, denseMatrix0.columns());
      assertEquals(15, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(15, denseMatrix0.columns());
      assertEquals(15, denseMatrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 444);
      assertEquals(444, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      assertEquals(444, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(444, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(8, 2);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(8, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.nonZeroIteratorOfColumn(2);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(8, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(vectorIterator0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(8, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(8, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(matrixArray0);
      
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertFalse(matrixArray1.equals((Object)matrixArray0));
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(8, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotSame(matrixArray1, matrixArray0);
      assertNotNull(matrixArray1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2330.064838658188);
      doubleArray1[1] = (-848.4005479621);
      doubleArray1[2] = (-2177.244);
      doubleArray1[3] = 2779.595;
      doubleArray1[4] = 2117.76;
      doubleArray1[5] = 0.9645900314637027;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 3147.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-848.4005479621);
      doubleArray2[1] = (-2177.244);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 2779.595;
      doubleArray2[4] = (-2330.064838658188);
      doubleArray2[5] = (-1677.0923145766);
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (-1.0);
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(3147.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, rowMajorSparseMatrix0.cardinality());
      assertEquals((-2330.064838658188), rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray3 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(3147.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, rowMajorSparseMatrix0.cardinality());
      assertEquals((-2330.064838658188), rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      assertEquals(3147.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, rowMajorSparseMatrix0.cardinality());
      assertEquals((-2330.064838658188), rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(3147.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, rowMajorSparseMatrix0.cardinality());
      assertEquals((-2330.064838658188), rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(matrixArray0);
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(rowMajorSparseMatrix0);
      assertEquals(3147.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, rowMajorSparseMatrix0.cardinality());
      assertEquals((-2330.064838658188), rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(8, rowMajorSparseMatrix0.columns());
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(boolean0);
  }
}
