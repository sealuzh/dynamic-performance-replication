/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 00:45:03 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      RE2.quoteMeta("TK`iN0n-rU@Q=");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-33);
      rE2_0.findAllUTF8(byteArray0, (byte)83);
      List<String> list0 = rE2_0.findAll("", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("MATCH");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 40);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAll("", 16);
      byte[] byteArray0 = new byte[1];
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 50);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("8n}T\"J{v' 2x]");
      Machine machine0 = rE2_0.get();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)74;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 216);
      RE2.match("c<A", "8n}T\"J{v' 2x]");
      rE2_0.put(machine0);
      rE2_0.findSubmatchIndex("8n}T\"J{v' 2x]");
      rE2_0.findAll("8n}T\"J{v' 2x]", (-2158));
      try { 
        RE2.match("A3$mT^[c~t8", "A3$mT^[c~t8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[c~t8`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 827);
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("UTF-8");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "com.google.re2j.RE2";
      RE2 rE2_0 = RE2.compileImpl("com.google.re2j.RE2", 0, false);
      rE2_0.findSubmatch("com.google.re2j.RE2");
      RE2 rE2_1 = RE2.compilePOSIX("com.google.re2j.RE2");
      rE2_0.findAllIndex("", 0);
      Machine machine0 = new Machine(rE2_0);
      rE2_0.prefixComplete = true;
      rE2_0.put(machine0);
      Machine machine1 = rE2_0.get();
      rE2_0.reset();
      int int0 = 91;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      MachineInput machineInput0 = MachineInput.fromUTF16("", 0, (-381));
      machine1.match(machineInput0, (-381), 0);
      rE2_1.match("com.google.re2j.RE2", 0, 0, 91, intArray0, 0);
      rE2_1.findAllIndex("b", 0);
      // Undeclared exception!
      try { 
        machineInput0.context((-2902));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("vc:x?&<J=");
      List<int[]> list0 = rE2_0.findAllIndex("}q", 2);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("HO`Fl5");
      int[] intArray0 = new int[1];
      boolean boolean0 = rE2_0.match("HO`Fl5", 2, 2, 16, intArray0, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = new int[0];
      rE2_0.match("", 2445, 13, 13, intArray0, 13);
      List<String[]> list0 = rE2_0.findAllSubmatch("", 13);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 267, true);
      byte[] byteArray0 = new byte[2];
      RE2 rE2_1 = RE2.compileImpl("", 0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)34;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-5);
      byteArray1[7] = (byte)41;
      rE2_1.matchUTF8(byteArray1);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byte[] byteArray2 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray2);
      
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray1, 0);
      assertNull(list0);
      
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-20);
      byteArray3[2] = (byte) (-5);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("Sm");
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("IDS_Binary_Operator");
      rE2_0.findSubmatch("IDS_Binary_Operator");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.find("Greek");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 8);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("        ");
      rE2_0.findAllSubmatchIndex("8cU*>g Nj(.=1o", 762);
      rE2_0.match("");
      rE2_0.find("");
      rE2_0.match("");
      rE2_0.get();
      // Undeclared exception!
      try { 
        RE2.compilePOSIX((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "/_Ll]*dnmPki";
      RE2 rE2_0 = RE2.compilePOSIX("/_Ll]*dnmPki");
      Machine machine0 = rE2_0.get();
      String string1 = "^-/O:p@";
      int int0 = 891;
      rE2_0.findAllSubmatch("^-/O:p@", 891);
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8(byteArray0);
      int int1 = 91;
      RE2.compileImpl("/_Ll]*dnmPki", 91, true);
      int int2 = 4;
      int int3 = 7;
      // Undeclared exception!
      try { 
        machine0.init((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 16, true);
      rE2_0.reset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)16;
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findAllSubmatchIndex("", 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = (int) (byte)16;
      rE2_0.match("", 1554, (-93), 0, intArray0, 0);
      RE2.quoteMeta("");
      rE2_0.findUTF8(byteArray0);
      rE2_0.get();
      String string0 = null;
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst((String) null, "Id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.replaceFirst("", "8M[?`Q#D{5o*");
      // Undeclared exception!
      try { 
        rE2_0.find((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("R,+j)aTzw[pP", 455, true);
      rE2_0.replaceFirst("R,+j)aTzw[pP", "R,+j)aTzw[pP");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)85;
      rE2_0.findUTF8(byteArray0);
      try { 
        RE2.compilePOSIX("R,+j)aTzw[pP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[1];
      rE2_0.findUTF8Submatch(byteArray0);
      // Undeclared exception!
      try { 
        rE2_0.findSubmatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("\"*o", 5, true);
      byte[] byteArray0 = new byte[2];
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      rE2_0.findAllUTF8(byteArray0, 1934);
      rE2_0.numberOfCapturingGroups();
      // Undeclared exception!
      try { 
        rE2_0.findIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)0;
      rE2_0.findAllUTF8Index(byteArray0, (-103));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte)0;
      rE2_0.findAllUTF8(byteArray1, 0);
      rE2_0.replaceAll("", "F{O|cF@t^^2|sMa");
      rE2_0.prefixUTF8 = byteArray1;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray1, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("BGTg");
      rE2_0.find("BGTg");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      rE2_0.findIndex("BGTg");
      rE2_0.numberOfCapturingGroups();
      List<String> list0 = rE2_0.findAll("BGTg", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("i87,TIPu%+$G");
      int[] intArray0 = rE2_0.findIndex("i87,TIPu%+$G");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("T#", 1119, false);
      RE2.quoteMeta(">a*|w8/-mxIB&UdQ^!");
      rE2_0.match("T#");
      byte[] byteArray0 = new byte[0];
      rE2_0.matchUTF8(byteArray0);
      RE2.match("T#", "T#");
      rE2_0.matchUTF8(byteArray0);
      RE2 rE2_1 = RE2.compilePOSIX("vxJv2D");
      rE2_0.findAll("2Mk5_Y3]U]{uao7s", 128);
      int[] intArray0 = rE2_1.findIndex("9XS9x`6Y%cv@JV?Q");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("mdK~=Z^ZRmKN^\"s", 6, true);
      byte[] byteArray0 = new byte[3];
      rE2_0.findAllUTF8Index(byteArray0, 32);
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      RE2 rE2_1 = RE2.compileImpl("", (byte)42, false);
      rE2_0.findAllIndex("mdK~=Z^ZRmKN^\"s", (byte)42);
      byte[] byteArray1 = new byte[0];
      rE2_1.findUTF8Submatch(byteArray1);
      rE2_0.findUTF8(byteArray0);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray1, 3097);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("D+O&");
      rE2_0.get();
      RE2 rE2_1 = RE2.compile("");
      int[] intArray0 = new int[1];
      intArray0[0] = 1524;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-92);
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.match("D+O&", 7, 0, 1524, intArray0, (-1931));
      Machine machine0 = new Machine(rE2_1);
      rE2_0.put(machine0);
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("D+O&", (-1358));
      assertEquals(5, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "com.google.re2j.RE2";
      RE2 rE2_0 = RE2.compileImpl("com.google.re2j.RE2", 0, true);
      String string1 = "";
      rE2_0.findIndex("com.google.re2j.RE2");
      RE2 rE2_1 = RE2.compile("");
      String string2 = "jM]#.[PE#~pr >-k,";
      rE2_0.replaceAll("jM]#.[PE#~pr >-k,", "");
      rE2_0.findAllIndex("", 4550);
      byte[] byteArray0 = null;
      String string3 = "";
      RE2.compileImpl("", 2338, true);
      rE2_0.findAllSubmatch("", (-897));
      String string4 = "";
      rE2_1.replaceFirst(";", "(?-s:.)");
      RE2.compilePOSIX("");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = rE2_0.findIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      rE2_0.reset();
      String string0 = rE2_0.replaceFirst("", "RQ<");
      assertEquals("RQ<", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)39;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-128));
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "a9HN\\`C;k>,zA";
      RE2 rE2_0 = new RE2("a9HN`C;k>,zA");
      rE2_0.toString();
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)29;
      byte byte1 = (byte) (-22);
      byteArray1[2] = (byte) (-22);
      rE2_0.findUTF8SubmatchIndex(byteArray1);
      int int0 = (-8);
      int int1 = 2355;
      rE2_0.match("a9HN`C;k>,zA", (byte)29, (-8), 2355, (int[]) null, (-8));
      RE2.compilePOSIX("a9HN`C;k>,zA");
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'C';
      charArray0[2] = '5';
      charArray0[3] = '+';
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, (int) (byte) (-22), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-35));
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findIndex("");
      rE2_0.reset();
      rE2_0.replaceFirst("", "RQ<");
      byte[] byteArray0 = new byte[3];
      RE2 rE2_1 = RE2.compile("");
      rE2_1.findAllUTF8Submatch(byteArray0, (byte) (-116));
      Machine machine0 = new Machine(rE2_1);
      RE2 rE2_2 = RE2.compile("RQ<");
      rE2_2.put(machine0);
      assertEquals("RQ<", rE2_2.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-2199), false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      List<String[]> list0 = rE2_0.findAllSubmatch("", 16);
      assertNotNull(list0);
      
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)98;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      
      rE2_0.findUTF8(byteArray0);
      List<byte[][]> list1 = rE2_0.findAllUTF8Submatch(byteArray0, (-2451));
      assertEquals(1, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findIndex("");
      rE2_0.reset();
      rE2_0.replaceFirst("", "RQ<");
      byte[] byteArray0 = new byte[3];
      RE2.compile("");
      rE2_0.numberOfCapturingGroups();
      int[] intArray0 = new int[2];
      intArray0[0] = 3133;
      intArray0[1] = (int) (byte) (-116);
      // Undeclared exception!
      try { 
        rE2_0.match("RQ<", 0, 0, 2445, intArray0, 3133);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findIndex("");
      rE2_0.reset();
      rE2_0.replaceFirst("", "RQ<");
      rE2_0.findAllSubmatch("", 7);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-17);
      rE2_0.findUTF8Submatch(byteArray0);
      RE2.quoteMeta("");
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      RE2 rE2_1 = RE2.compileImpl("", (-3865), false);
      rE2_1.replaceAll("Hs?\"c%0Od-", "");
      List<byte[][]> list0 = rE2_1.findAllUTF8Submatch(byteArray1, 106);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      boolean boolean0 = rE2_0.match("", 0, 0, 2071, (int[]) null, 2071);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-2189));
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("$");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("y\"h[:k|<5G-kI'WN", (-3462));
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string0 = rE2_0.replaceAll("$", "$");
      assertEquals("$$", string0);
  }
}
