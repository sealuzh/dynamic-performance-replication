/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:15:34 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(863, 863, 863);
      int int0 = 913;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      String string0 = "[1yX*7i!$jZfY";
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols0);
      cRSMatrix1.mkString((NumberFormat) decimalFormat0, string0, string0);
      cRSMatrix0.toBinary();
      int int1 = 1;
      cRSMatrix0.getOrElse(int0, int1, int0);
      int int2 = 7;
      int int3 = (-1133);
      CRSMatrix.from1DArray(int2, int3, doubleArray0);
      int int4 = 1000;
      double double1 = (-6608.4);
      cRSMatrix0.set(int4, int0, double1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-517L));
      // Undeclared exception!
      try { 
        CRSMatrix.random(Integer.MAX_VALUE, 0, (double) Integer.MAX_VALUE, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(32, cRSMatrix0.rows());
      assertEquals(32.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(3086, 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3086
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CRSMatrix.from1DArray(1, 1, doubleArray0);
      byte byte0 = (byte) (-68);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("Z\"#OfrfrsYV;9 {V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.max();
      MockRandom mockRandom1 = new MockRandom(0L);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(1529, 1529, (double) 0, (Random) mockRandom0);
      cRSMatrix1.eachInRow(1529, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 10;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 289;
      doubleArray0[1] = (double) 289;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(10, 289, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[18];
      doubleArray1[0] = (-38.4363162789);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[15] = (-3146.4854462624);
      CRSMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double[][] doubleArray0 = new double[6][1];
      Matrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2155);
      // Undeclared exception!
      try { 
        CRSMatrix.block(rowMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 48, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(440);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 440
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copy();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 64;
      cRSMatrix0.eachNonZeroInColumn(64, (VectorProcedure) null);
      int[] intArray0 = new int[14];
      intArray0[1] = 64;
      intArray0[2] = 64;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 621;
      int int1 = 1000;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1000, 2, 1000);
      Matrix matrix0 = cRSMatrix0.copy();
      cRSMatrix0.min();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(621, (-2438), matrixFunction0);
      int int2 = (-1);
      int int3 = (-2569);
      Matrix matrix1 = cRSMatrix0.insert(matrix0, 10, 2, (-1), (-1), 0, (-2569));
      CRSMatrix.block(cRSMatrix0, matrix0, matrix0, matrix1);
      cRSMatrix0.sliceBottomRight(int3, int3);
      String string0 = null;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket(string0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, matrix0);
      cRSMatrix0.subtract((double) int1);
      int int4 = (-271);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(int4, vectorProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric(int2, (double) int0, (Random) mockRandom0);
      cRSMatrix2.rowMajorIterator();
      cRSMatrix2.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2157);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(2146, 2146, matrixFunction0);
      cRSMatrix0.each((MatrixProcedure) null);
      String string0 = null;
      SparseVector sparseVector0 = SparseVector.fromMatrixMarket(string0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(1514, vectorProcedure0);
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.getColumn(5);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3313.91494627106);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, (-3313.91494627106));
      cRSMatrix0.iterator();
      cRSMatrix0.minInRow(2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3928.3083228855508);
      cRSMatrix0.sum();
      Matrix.zero(1, 2162);
      cRSMatrix0.columnMajorIterator();
      Matrix.diagonal(1, 3928.3083228855508);
      org.evosuite.runtime.Random.setNextRandom(3);
      int int0 = 9981;
      cRSMatrix0.slice(93, (-1105), 93, 2162);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (-1.0), (double)9981).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformColumn(1, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      Integer integer0 = new Integer(0);
      MockRandom mockRandom1 = new MockRandom((-52L));
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1529, 1529, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.set((byte)13, 0, (-3147.4515));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.minInRow((byte)13);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      String string0 = "";
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(string0);
      ooPlaceMatricesAddition0.applySymmetric((RowMajorSparseMatrix) cRSMatrix0, columnMajorSparseMatrix0);
      cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      int int0 = 1501;
      CRSMatrix.identity(int0);
      CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      DenseMatrix.identity(32);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = (double) 32;
      doubleArray1[2] = (double) 32;
      doubleArray1[3] = (double) 32;
      doubleArray1[4] = (double) 32;
      doubleArray1[5] = (double) 32;
      doubleArray1[6] = (double) 32;
      doubleArray1[7] = (double) 32;
      doubleArray1[8] = (double) 32;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 32;
      doubleArray2[1] = (double) 32;
      doubleArray2[2] = (double) 32;
      doubleArray2[3] = (double) 32;
      doubleArray2[4] = (double) 32;
      doubleArray2[5] = (double) 32;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 32;
      doubleArray3[1] = (double) 32;
      doubleArray3[2] = (double) 32;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(23, vectorProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("_ITNqoy.Z9F66");
      int int1 = 37;
      int int2 = (-3477);
      int int3 = 741;
      cRSMatrix0.slice(int1, int2, int0, int3);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(int0, vectorProcedure1);
      cRSMatrix1.getRow(int3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.add((double) 3);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-21);
      byte byte0 = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      cRSMatrix0.sum();
      int int0 = 1;
      Matrix.zero(1, 2162);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2368.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(1, vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(1, 2145, (-0.6017382170802225));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2145' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1529;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1529, 1529);
      cRSMatrix0.setRow(20, (-216.2504329));
      int int1 = 1734;
      DenseVector.unit(int1);
      int int2 = 1164;
      int int3 = 933;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int2, int3, int0);
      cRSMatrix1.nonZeroRowMajorIterator();
      org.evosuite.runtime.Random.setNextRandom(int0);
      String string0 = "j>}";
      CRSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.getColumn((-2432));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("9");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      Matrix.zero(2177, 2177);
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.minInRow(2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2177;
      cRSMatrix0.getColumn(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)20;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      Matrix.zero(2177, 2177);
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.minInRow(2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2177;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2177;
      doubleArray0[4] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 2177;
      intArray0[1] = 1634;
      intArray0[2] = 2177;
      intArray0[3] = 2565;
      intArray0[4] = 132;
      intArray0[5] = 2177;
      intArray0[6] = 2;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      cRSMatrix0.iteratorOfNonZeroRows();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(10, 1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1002, (-0.4375));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(46, vectorProcedure0);
      cRSMatrix0.copyOfShape(48, 33);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1994.4545845082557);
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(48, vectorProcedure0);
      byte byte0 = (byte)1;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      int int1 = 2177;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int2 = 2;
      double double0 = cRSMatrix0.minInRow(2);
      cRSMatrix0.toRowMajorSparseMatrix();
      int int3 = 30;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2177, 30, 2177);
      cRSMatrix0.select((int[]) null, (int[]) null);
      cRSMatrix1.copyOfShape(int1, int2);
      cRSMatrix0.setAll(int3);
      cRSMatrix1.rowMajorIterator();
      cRSMatrix0.setAll(double0);
      int int4 = (-2114);
      cRSMatrix1.nonZeroIteratorOfRow(int4);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CRSMatrix.random(int3, int1, (double) int4, (Random) mockRandom0);
      cRSMatrix1.isColumnMajor();
      cRSMatrix1.copy();
      CRSMatrix.zero(int1, int1);
      int int5 = (-1672);
      cRSMatrix0.getColumn(int5);
      int int6 = (-2768);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int6, int0);
      cRSMatrix2.min();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-6073L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(10, (-89.3383));
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '11' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 7;
      int int1 = 36;
      RowMajorSparseMatrix.zero(7, 36);
      cRSMatrix0.shuffle();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      Matrix matrix0 = Matrix.zero(2177, 2177);
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.minInRow(2);
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      cRSMatrix1.multiplyByItsTranspose();
      columnMajorSparseMatrix0.toString();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, matrix0, columnMajorSparseMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      Matrix.zero(2177, 2177);
      cRSMatrix0.min();
      byte byte0 = (byte) (-82);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3928.3083228855508);
      int int0 = 2162;
      cRSMatrix0.sum();
      Matrix.zero(2162, 2162);
      cRSMatrix0.rank();
      cRSMatrix0.toBinary();
      Double double0 = new Double(2368.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(3, 2162, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2157);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1546.5879)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(2146, 2146, matrixFunction0);
      cRSMatrix0.each((MatrixProcedure) null);
      String string0 = null;
      SparseVector sparseVector0 = SparseVector.fromMatrixMarket(string0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      CRSMatrix cRSMatrix1 = new CRSMatrix(995, 3, 2162);
      Matrix.identity(958);
      Matrix matrix0 = cRSMatrix0.copy();
      matrix0.multiply((Matrix) cRSMatrix0);
      cRSMatrix0.min();
      CRSMatrix cRSMatrix2 = new CRSMatrix();
      Matrix matrix1 = cRSMatrix2.insert((Matrix) cRSMatrix1);
      int int0 = 0;
      CRSMatrix.identity(int0);
      CRSMatrix.block(matrix0, matrix1, cRSMatrix0, cRSMatrix2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix.identity(5144);
      cRSMatrix0.product();
      cRSMatrix0.setAll((-3996.62244042));
      cRSMatrix0.rowMajorIterator();
      int int0 = (-342);
      cRSMatrix0.getOrElse((-342), (-342), (-342));
      cRSMatrix0.maxInRow(int0);
      double double0 = (-0.4375);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int0, double0);
      cRSMatrix1.euclideanNorm();
      int int1 = 9;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInColumn(int1, vectorProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.foldColumns(vectorAccumulator0);
      int int2 = 2137;
      CRSMatrix.identity(int2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("9");
      double double0 = Double.NEGATIVE_INFINITY;
      Matrix matrix0 = cRSMatrix0.subtract(Double.NEGATIVE_INFINITY);
      byte byte0 = (byte) (-82);
      byte byte1 = (byte)73;
      cRSMatrix0.isColumnMajor();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, cRSMatrix0, matrix0, matrix0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        cRSMatrix1.minInRow((byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1000);
      int int0 = 30;
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1000).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.blank();
      cRSMatrix0.updateAt(30, 30, matrixFunction0);
      int int1 = 3685;
      int int2 = 1;
      Double double0 = new Double((-1658.0));
      cRSMatrix0.minInRow(30);
      cRSMatrix0.maxInRow(1);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      CRSMatrix.randomSymmetric(297, (double) 3685, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.random(int1, int2, mockRandom0);
      ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) cRSMatrix0);
      double[][] doubleArrayArray0 = null;
      Matrix.from2DArray(doubleArrayArray0);
      int int3 = (-2495);
      int int4 = (-1859);
      CRSMatrix cRSMatrix1 = new CRSMatrix(int3, int4, int1);
      matrix0.blankOfShape(int0, int3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      Matrix matrix0 = cRSMatrix0.copy();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix1.rotate();
      cRSMatrix0.min();
      matrix0.iteratorOfRow(0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 1.0);
      Matrix.zero(2177, 2177);
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[3][0];
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      cRSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cRSMatrix1.slice(915, 1711, 7, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [915..7][1711..2].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2177);
      Matrix matrix0 = sparseMatrix0.blankOfRows(2249);
      matrix0.columnMajorIterator();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(33, 33);
      Matrix.zero(2177, 2177);
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix0.blank();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.updateAt(13, 2177, matrixFunction0);
      Double double0 = new Double(2);
      matrix0.minInRow(2177);
      matrix0.maxInRow(1);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      CRSMatrix.randomSymmetric(297, (double) 2249, (Random) mockRandom0);
      CRSMatrix.block(sparseMatrix0, matrix0, matrix0, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(10, 10);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.minInRow(2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2177;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2177;
      doubleArray0[4] = (double) 2;
      int[] intArray0 = new int[7];
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix1.nonZeroRowMajorIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumn(2, vectorAccumulator0);
      cRSMatrix0.maxInRow(2);
      cRSMatrix0.getColumn(2);
      cRSMatrix1.toBinary();
      cRSMatrix0.nonZeroRowMajorIterator();
      org.evosuite.runtime.Random.setNextRandom(2177);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 2196;
      Matrix matrix0 = Matrix.zero(2196, 2196);
      CRSMatrix cRSMatrix0 = new CRSMatrix(18, 2196, 18);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.copyOfRows(2);
      CRSMatrix cRSMatrix3 = CRSMatrix.from2DArray((double[][]) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-70);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-124);
      byteArray0[1] = byte1;
      byte byte2 = (byte)94;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-27);
      byteArray0[3] = byte3;
      byte byte4 = (byte)54;
      byteArray0[4] = byte4;
      CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.iteratorOfNonZeroRows();
      int int1 = 2089;
      CRSMatrix cRSMatrix4 = CRSMatrix.zero(int0, int1);
      Matrix matrix1 = cRSMatrix4.kroneckerProduct(matrix0);
      cRSMatrix2.nonZeroRowMajorIterator();
      int int2 = (-2594);
      int int3 = 35;
      CRSMatrix cRSMatrix5 = new CRSMatrix(int2, int3, int0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      int int4 = 30;
      cRSMatrix4.maxInRow(int4);
      int int5 = 309;
      Matrix matrix2 = cRSMatrix0.copyOfRows(int5);
      CRSMatrix.block(cRSMatrix3, cRSMatrix0, matrix2, matrix1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(3813L);
      CRSMatrix cRSMatrix0 = new CRSMatrix(20, 0);
      mockRandom0.nextFloat();
      cRSMatrix0.setRow(0, 1929.072781070358);
      int int1 = 29;
      DenseVector.unit(29);
      int int2 = (-1061);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(29, (-1061), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 29x-1061
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3928.3083228855508);
      cRSMatrix0.sum();
      Matrix.zero(1, 2162);
      cRSMatrix0.columnMajorIterator();
      Matrix matrix0 = Matrix.diagonal(1, 3928.3083228855508);
      Matrix.identity(1916);
      org.evosuite.runtime.Random.setNextRandom(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(11784.924968656653).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      int int0 = Double.BYTES;
      cRSMatrix0.toBinary();
      Double double0 = new Double(2162);
      matrix0.set((-82), 2436, 3928.3083228855508);
      int int1 = 2195;
      matrix0.maxInColumn(int1);
      MatrixProcedure matrixProcedure0 = null;
      matrix0.each(matrixProcedure0);
      int int2 = 2146518574;
      int int3 = 8;
      double double1 = (-1808.7);
      matrix0.set(int2, int3, double1);
      int int4 = 2927;
      org.evosuite.runtime.Random.setNextRandom(int4);
      int int5 = 6;
      CRSMatrix.diagonal(int5, int3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3928.3083228855508);
      cRSMatrix0.sum();
      Matrix.zero(1, 2162);
      cRSMatrix0.columnMajorIterator();
      Matrix matrix0 = Matrix.diagonal(1, 3928.3083228855508);
      Matrix.identity(1916);
      org.evosuite.runtime.Random.setNextRandom(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      int int0 = Double.BYTES;
      cRSMatrix0.toBinary();
      Double double0 = new Double(2162);
      matrix0.set((-82), 2436, 3928.3083228855508);
      int int1 = 2195;
      matrix0.maxInColumn(int1);
      MatrixProcedure matrixProcedure0 = null;
      matrix0.each(matrixProcedure0);
      int int2 = 2146518574;
      int int3 = 8;
      double double1 = (-1808.7);
      matrix0.set(int2, int3, double1);
      int int4 = 2927;
      org.evosuite.runtime.Random.setNextRandom(int4);
      int int5 = 6;
      CRSMatrix.diagonal(int5, int3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(3, 0.0, (Random) mockRandom0);
      cRSMatrix0.max();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(2);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.forEach(consumer0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInColumn(3, vectorProcedure0);
      byte byte0 = (byte)16;
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byte byte1 = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.minInRow(2);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2177;
      doubleArray0[4] = (double) 2;
      int[] intArray0 = new int[7];
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix0.maxInRow(8);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix2 = CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix cRSMatrix3 = CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix cRSMatrix4 = (CRSMatrix)cRSMatrix3.multiply(0.0);
      CRSMatrix.zero(10, 8);
      cRSMatrix2.kroneckerProduct(cRSMatrix4);
      CRSMatrix.zero(10, 920);
      cRSMatrix1.setAll(1876.086364643);
      CRSMatrix.from1DArray(2177, 1461, doubleArray0);
      byte[] byteArray0 = null;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1000;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1000);
      int int1 = 30;
      cRSMatrix0.nonZeroRowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)30, 1204.0992, (double)1000, 2054.37548, (double)30).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(30, vectorFunction0);
      matrix0.copyOfColumns(int0);
      matrix0.iterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.insert((Matrix) cRSMatrix0);
      int int2 = (-1001);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int2, int1);
      int int3 = 13;
      cRSMatrix0.getRow(int3);
      double double0 = 588.7674;
      int int4 = 88;
      cRSMatrix1.set(int4, int2, double0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(979);
      int int0 = 30;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)30, 1204.0992, (double)979, 2054.37548, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.iterator();
      Matrix matrix0 = cRSMatrix0.transformRow(30, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRow(1286, vectorAccumulator0);
      double double0 = (-1855.8719);
      double double1 = 0.964;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      double double2 = 1.0;
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, double1, double2, (double)int0).when(vectorAccumulator1).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      int int0 = 2177;
      cRSMatrix0.max();
      int int1 = 1529;
      MockRandom mockRandom0 = new MockRandom(1635L);
      long long0 = (-1040L);
      MockRandom mockRandom1 = new MockRandom((-1040L));
      // Undeclared exception!
      try { 
        CRSMatrix.random(1497, 10, (-80.9652997), (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2155;
      doubleArray0[4] = (double) 2;
      int[] intArray0 = new int[7];
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 1029);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1029, 1029, 2);
      cRSMatrix0.setAll(2.0);
      RowMajorSparseMatrix.zero(2, 985);
      mockRandom0.longs();
      cRSMatrix0.maxInRow(1);
      cRSMatrix1.nonZeroAt(2155, 1);
      int int1 = 979;
      MatrixFunction matrixFunction0 = null;
      cRSMatrix1.updateAt(int0, int1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.min();
      int int0 = 3086;
      cRSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(3086);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3086
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3928.3083228855508);
      int int0 = 1;
      Matrix.zero(1, 3);
      double double0 = 2368.0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 1.0);
      cRSMatrix0.nonZeroIterator();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(48, 48, 1.0, (Random) mockRandom0);
      Matrix.zero(48, 48);
      CRSMatrix.diagonal(48, 0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)7, 2368.0, 1.0, (-162.40118)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      CRSMatrix.fromMatrixMarket((String) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3928.3083228855508);
      cRSMatrix0.sum();
      Matrix.zero(1, 2162);
      cRSMatrix0.columnMajorIterator();
      Matrix matrix0 = Matrix.diagonal(1, 3928.3083228855508);
      org.evosuite.runtime.Random.setNextRandom(3);
      Matrix matrix1 = cRSMatrix0.slice(93, (-1105), 93, 2162);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix2 = cRSMatrix0.transformColumn(1, vectorFunction0);
      Matrix matrix3 = cRSMatrix0.slice(1, (-1011), 85, 9981);
      CRSMatrix.block(matrix2, matrix0, matrix3, matrix1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      int int1 = 2177;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.minInRow(2);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2177, 2177, 2177);
      rowMajorSparseMatrix0.subtract(0.0);
      cRSMatrix1.copyOfShape(2177, 2);
      cRSMatrix0.setAll(10);
      cRSMatrix1.rowMajorIterator();
      int int2 = (-2114);
      cRSMatrix1.nonZeroIteratorOfRow((-2114));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CRSMatrix.random(int1, int1, (double) int2, (Random) mockRandom0);
      cRSMatrix1.isColumnMajor();
      cRSMatrix1.copy();
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix.randomSymmetric(int1, (double) int0, (Random) mockRandom1);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3928.3083228855508);
      cRSMatrix0.sum();
      Matrix.zero(1, 2162);
      int int1 = (-527);
      cRSMatrix0.nonZeroRowMajorIterator();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(3, 1, 3);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 1.0);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2177);
      sparseMatrix0.blankOfRows(10);
      int int0 = 33;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(33, 33);
      Matrix.zero(2177, 2177);
      cRSMatrix0.minInRow(2);
      int int1 = 8;
      Random random0 = null;
      CRSMatrix.randomSymmetric(8, 1.0, (Random) null);
      String string0 = "/7S KMu&H@e5='e?";
      int int2 = 1000;
      double double0 = 1953.2961607561815;
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.random(int2, int1, double0, (Random) mockRandom0);
      CRSMatrix cRSMatrix2 = CRSMatrix.fromCSV(string0);
      int int3 = 222;
      int int4 = 748;
      double double1 = (-0.792198001938128);
      cRSMatrix2.getOrElse(int4, int0, double1);
      CRSMatrix cRSMatrix3 = CRSMatrix.block(cRSMatrix2, cRSMatrix1, sparseMatrix0, cRSMatrix0);
      int int5 = 2204;
      cRSMatrix3.getOrElse(int0, int5, int3);
      int int6 = 1099;
      ((CRSMatrix) sparseMatrix0).iteratorOfRow(int6);
      CRSMatrix.randomSymmetric(int5, (double) int6, random0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1000;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1000);
      int int1 = 30;
      cRSMatrix0.nonZeroRowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1658.0), 1204.0992, 1410.9279686057, (-1658.0), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(30, vectorFunction0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      matrix0.iterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = cRSMatrix0.blank();
      ((CRSMatrix) rowMajorSparseMatrix0).min();
      cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      int int2 = 2243;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(int0);
      cRSMatrix0.columnMajorIterator();
      Matrix matrix2 = cRSMatrix1.removeRow(int0);
      CRSMatrix.block(rowMajorSparseMatrix0, matrix0, matrix2, matrix1);
      matrix1.copyOfShape(int1, int2);
  }
}
