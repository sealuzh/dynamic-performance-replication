/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:04:28 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.event.InputEvent;
import java.io.IOException;
import java.io.PipedReader;
import java.util.Random;
import javax.accessibility.AccessibleContext;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.plaf.synth.SynthSplitPaneUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.filters.AllFilter;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      XML xML0 = new XML();
      Canvas canvas0 = new Canvas();
      SynthSplitPaneUI synthSplitPaneUI0 = new SynthSplitPaneUI();
      Canvas canvas1 = new Canvas();
      CostMatrix costMatrix0 = new CostMatrix(26);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "debugTipText";
      stringArray0[1] = "setDeleteEmptyBins";
      stringArray0[2] = "setLossFunction";
      stringArray0[3] = "lambdaTipText";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      KDTree kDTree0 = new KDTree(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(4.9E-324, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.recall(2);
      evaluation0.numInstances();
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      AbstractClassifier.runClassifier(multiClassClassifierUpdateable0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances1, costMatrix0);
      evaluation0.SFEntropyGain();
      Version.MAJOR = 0;
      instances1.spliterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation0.weightedAreaUnderPRC();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedTruePositiveRate();
      int int0 = (-166);
      evaluation0.areaUnderPRC((-166));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      // Undeclared exception!
      try { 
        instances1.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation("@data");
      evaluation0.rootRelativeSquaredError();
      Instances instances2 = testInstances0.getData();
      try { 
        evaluation0.evaluateModel((Classifier) multiClassClassifierUpdateable0, instances2, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.getRevision();
      REPTree rEPTree0 = new REPTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      instances0.spliterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      String[] stringArray0 = multiClassClassifierUpdateable0.getOptions();
      testInstances0.setOptions(stringArray0);
      evaluation0.addNumericTrainClass(2, 2);
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.evaluateModel((Classifier) rEPTree0, instances0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MockRandom mockRandom0 = new MockRandom((-2));
      multiClassClassifierUpdateable0.setSeed((-2));
      mockRandom0.longs(1456L, (long) 3, 1548L);
      Evaluation.getGlobalInfo(multiClassClassifierUpdateable0);
      Evaluation.makeOptionString(multiClassClassifierUpdateable0, true);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.fMeasure(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation((String) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.errorRate();
      evaluation0.pctUnclassified();
      evaluation0.getRevision();
      evaluation0.weightedMatthewsCorrelation();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      instances1.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      evaluation0.rootMeanPriorSquaredError();
      Instances instances2 = new Instances(instances0, (-2));
      String string0 = SVMLightLoader.FILE_EXTENSION;
      evaluation0.weightedPrecision();
      try { 
        Evaluation.handleCostOption("&p@}jrfa", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      AbstractClassifier.runClassifier(multiClassClassifierUpdateable0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances1, costMatrix0);
      evaluation0.SFEntropyGain();
      Version.MAJOR = 0;
      instances1.spliterator();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1338));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1338
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedTruePositiveRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getRevision();
      multiClassClassifierUpdateable0.getCapabilities();
      instances0.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(".bsi", false);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      Instances instances1 = evaluation0.getHeader();
      Instances instances2 = evaluation0.getHeader();
      MockRandom mockRandom0 = new MockRandom((-1));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.numInstances();
      Instances instances3 = new Instances(instances1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "getTechnicalInformation");
      SGD sGD0 = new SGD();
      MockRandom mockRandom1 = new MockRandom(1L);
      MockRandom mockRandom2 = new MockRandom(1);
      Evaluation evaluation1 = new Evaluation(instances2);
      double double0 = evaluation1.m_SumPriorAbsErr;
      evaluation1.m_TotalCoverage = (double) 2;
      sGD0.buildClassifier(instances2);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation1.toCumulativeMarginDistributionString();
      evaluation1.meanAbsoluteError();
      evaluation0.setPriors(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.SFPriorEntropy();
      evaluation0.weightedFMeasure();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'F';
      evaluation0.num2ShortID(1343, charArray0, 10021);
      evaluation0.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      KDTree kDTree0 = new KDTree(instances0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SparseInstance sparseInstance0 = new SparseInstance(130);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      BayesNet bayesNet0 = new BayesNet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(28);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.pctIncorrect();
      System.setCurrentTimeMillis((-1807L));
      evaluation0.numInstances();
      evaluation0.addNumericTrainClass(Double.NaN, (-13.107222453141212));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances1.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MockRandom mockRandom0 = new MockRandom(2);
      mockRandom0.longs(0L, 0L, 2212L);
      instances1.spliterator();
      evaluation0.falseNegativeRate((-2123));
      evaluation0.rootRelativeSquaredError();
      evaluation0.toSummaryString("@relation", true);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifierUpdateable0, instances0, 29, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      instances1.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      Instances instances2 = new Instances(instances1);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_ConfLevel;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances2 = new TestInstances();
      try { 
        Evaluation.handleCostOption(".arff", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_ConfLevel;
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.totalCost();
      evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.m_MaxTarget;
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation((String) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.toSummaryString("b_F\"xRz:_WXA=;gl<", true);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation("@data");
      evaluation0.rootRelativeSquaredError();
      testInstances0.getData();
      evaluation0.setDiscardPredictions(true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.num2ShortID(21, (char[]) null, 0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.rootMeanSquaredError();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      instances1.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.getHeader();
      evaluation0.toMatrixString("");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators("seedTipText");
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      instances1.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      evaluation0.rootMeanPriorSquaredError();
      testInstances0.generate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1.431), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MockRandom mockRandom0 = new MockRandom((-1));
      multiClassClassifierUpdateable0.setSeed((-2));
      instances1.spliterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) multiClassClassifierUpdateable0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (double) (-2);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = 0.9940302114769565;
      evaluation0.m_TrainClassVals = doubleArray1;
      doubleArray0[0] = 0.9940302114769565;
      testInstances0.setNoClass(true);
      instances0.toSummaryString();
      evaluation0.weightedTruePositiveRate();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.getHeader();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.pctCorrect();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.FLOOR1;
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.totalCost();
      evaluation0.kappa();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation((String) null);
      evaluation0.rootRelativeSquaredError();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.errorRate();
      evaluation0.pctUnclassified();
      evaluation0.rootMeanPriorSquaredError();
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_SumAbsErr;
      testInstances0.generate(" ?    ");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.9940302114769565;
      int[] intArray0 = new int[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 91;
      intArray0[0] = 91;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-2));
      instances0.add((Instance) sparseInstance0);
      MockRandom mockRandom0 = new MockRandom(1583);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      instances0.add((Instance) sparseInstance0);
      AbstractClassifier.runClassifier(serializedClassifier0, testInstances0.DEFAULT_WORDS);
      evaluation0.KBRelativeInformation();
      evaluation0.KBMeanInformation();
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      REPTree rEPTree0 = new REPTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      instances0.deleteAttributeType((-2));
      MultiClassClassifierUpdateable.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.meanAbsoluteError();
      evaluation0.weightedTruePositiveRate();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      instances0.equalHeadersMsg(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      testInstances0.setNumInstances((-2144974199));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = NimbusStyle.SMALL_SCALE;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate(3);
      testInstances1.setNoClass(false);
      instances0.spliterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(0);
      evaluation0.useNoPriors();
      PipedReader pipedReader0 = new PipedReader();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.9940302114769565;
      int[] intArray0 = new int[2];
      intArray0[0] = 1583;
      intArray0[1] = 1583;
      SparseInstance sparseInstance0 = new SparseInstance(0.9940302114769565, doubleArray0, intArray0, (-2));
      instances0.add((Instance) sparseInstance0);
      evaluation0.meanPriorAbsoluteError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.toMatrixString();
      Version.VERSION = "!";
      double double0 = new Double(28);
      evaluation0.incorrect();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getRevision();
      multiClassClassifierUpdateable0.getCapabilities();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "\nEstimator options:\n\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      InputEvent.getModifiersExText(1);
      multiClassClassifierUpdateable0.getCapabilities();
      instances0.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("RM?%AZ9PIll ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.getHeader();
      TestInstances testInstances1 = new TestInstances();
      try { 
        Evaluation.handleCostOption("@data", 45);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      instances0.equalHeadersMsg(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      testInstances0.setNumInstances((-2144974199));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      double double0 = NimbusStyle.SMALL_SCALE;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate(3);
      testInstances1.setNoClass(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.getGlobalInfo(multiClassClassifierUpdateable1);
      evaluation0.makeDistribution(0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate("@data");
      String string0 = ScrollPaneConstants.HORIZONTAL_SCROLLBAR;
      Evaluation evaluation0 = new Evaluation(instances0);
      SynthSplitPaneUI synthSplitPaneUI0 = new SynthSplitPaneUI();
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      Dimension dimension0 = synthSplitPaneUI0.getMaximumSize(defaultTableCellRenderer0);
      Canvas canvas0 = new Canvas();
      canvas0.setMaximumSize(dimension0);
      synthSplitPaneUI0.getContext(defaultTableCellRenderer0);
      CostMatrix costMatrix0 = new CostMatrix(26);
      evaluation0.getDiscardPredictions();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_ConfLevel;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      instances0.add(instance0);
      Canvas canvas0 = new Canvas();
      evaluation0.equals(canvas0);
      double double1 = evaluation0.m_SumPriorAbsErr;
      evaluation0.getHeader();
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.rootRelativeSquaredError();
      evaluation0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      int[] intArray0 = new int[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[8] = 1583;
      MockRandom mockRandom0 = new MockRandom(1583);
      System.setCurrentTimeMillis(956L);
      MultiClassClassifierUpdateable.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.addNumericTrainClass(1583, (-2));
      evaluation0.addNumericTrainClass(1, 375.9952374288908);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.correct();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("0N*7i\"@G0-", "0N*7i\"@G0-", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation((String) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.errorRate();
      evaluation0.pctUnclassified();
      evaluation0.getRevision();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      AbstractClassifier.runClassifier(multiClassClassifierUpdateable0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances1, costMatrix0);
      evaluation0.SFEntropyGain();
      Version.MAJOR = 0;
      instances1.spliterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tonly the options are saved to the XML file, not the model.\n";
      stringArray0[1] = "e@]rY.1";
      stringArray0[2] = "V,h!!B|A+')";
      stringArray0[3] = "^}.N";
      stringArray0[4] = "m:'z;Rw }C9pr2'oWm1";
      stringArray0[5] = "-V";
      AbstractClassifier.runClassifier(bayesNet0, stringArray0);
      bayesNet0.getMeasure("Evaluation: No per class statistics possible!");
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation((String) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.toSummaryString("b_FxRz4_WXA=;gl<", true);
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.FLOOR1;
      testInstances0.setNumRelationalDate((byte)108);
      evaluation0.areaUnderROC((-1));
      evaluation0.addNumericTrainClass((-749.3), 0.1);
      TestInstances testInstances1 = new TestInstances();
      try { 
        Evaluation.handleCostOption(".arff", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.priorEntropy();
      evaluation0.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      evaluation0.getHeader();
      evaluation0.SFMeanPriorEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      evaluation0.incorrect();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.pctIncorrect();
      System.setCurrentTimeMillis(2);
      evaluation0.numInstances();
      evaluation0.addNumericTrainClass(0.0, (-1978.7233558));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1972.2395684289543;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, (-3003.4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -492809
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_ConfLevel;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      instances0.add(instance0);
      Canvas canvas0 = new Canvas();
      evaluation0.equals(canvas0);
      double double1 = evaluation0.m_SumPriorAbsErr;
      evaluation0.getHeader();
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.rootRelativeSquaredError();
      Vote vote0 = new Vote();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) vote0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      REPTree rEPTree0 = new REPTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MultiClassClassifierUpdateable.main(testInstances0.DEFAULT_WORDS);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom(2);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Evaluation.makeOptionString((Classifier) null, true);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.rootRelativeSquaredError();
      evaluation0.errorRate();
      evaluation0.pctUnclassified();
      evaluation0.getRevision();
      REPTree rEPTree0 = new REPTree();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = null;
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel((String) null, instances0, (-935), stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities.forInstances(instances0);
      instances0.equalHeadersMsg(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      evaluation0.numInstances();
      evaluation0.rootMeanPriorSquaredError();
      try { 
        evaluation0.updateStatsForPredictor(4200.5795072, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      REPTree rEPTree0 = new REPTree();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostMatrix costMatrix0 = new CostMatrix(58);
      try { 
        costMatrix0.getMaxCost((-267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -267
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      testInstances0.setRelation((String) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.errorRate();
      evaluation0.pctUnclassified();
      evaluation0.getRevision();
      double double1 = new Integer(3);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.handleCostOption((String) null, (-1));
      testInstances0.setNumInstances(579);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2), (double[]) null, intArray0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      AbstractClassifier.runClassifier(multiClassClassifierUpdateable0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances1, costMatrix0);
      evaluation0.SFEntropyGain();
      Version.MAJOR = 0;
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.pctUnclassified();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      double[] doubleArray0 = new double[9];
      evaluation1.addNumericTrainClass((-111.556942456493), 1);
      try { 
        evaluation0.evaluateModelOnce((-436.0), (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -436
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities.forInstances(instances0);
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.numInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass((-1384.929434487404), (-1));
      evaluation0.errorRate();
      evaluation0.pctUnclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.numInstances();
      evaluation0.getHeader();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 4.9E-324;
      SparseInstance sparseInstance0 = new SparseInstance(4.9E-324, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      Instances instances1 = new Instances(instances0, (-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      testInstances0.setMultiInstance(true);
      AbstractClassifier.runClassifier(multiClassClassifierUpdateable0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      instances1.spliterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation1.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MissingClass = (-2535.168272466);
      double double0 = evaluation0.m_SumAbsErr;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int[] intArray0 = new int[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 115;
      intArray0[0] = 1583;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-2));
      instances0.add((Instance) sparseInstance0);
      MockRandom mockRandom0 = new MockRandom();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SparseInstance sparseInstance1 = new SparseInstance((-1.7976931348623157E308), doubleArray0, intArray0, 28);
      evaluation0.getHeader();
      evaluation0.toMatrixString("getDisplayModelInOldFormat");
      evaluation0.weightedPrecision();
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      evaluation0.KBMeanInformation();
      double double0 = evaluation0.m_ConfLevel;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.toMatrixString(".cost");
      KDTree kDTree0 = new KDTree();
      evaluation0.SFSchemeEntropy();
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      instances1.spliterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      multiClassClassifierUpdateable0.getOptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      testInstances0.setOptions(stringArray0);
      Object[] objectArray0 = new Object[1];
      evaluation0.addNumericTrainClass(2861.1526184191, (-211L));
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.evaluateModel((Classifier) multiClassClassifierUpdateable0, instances1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.MultiClassClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      String string0 = ScrollPaneConstants.HORIZONTAL_SCROLLBAR;
      XML xML0 = new XML();
      instances1.indexOf(xML0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/DatabaseUtils.props");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setDiscardPredictions(false);
      IBk iBk0 = new IBk((-1));
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) iBk0;
      objectArray0[1] = (Object) iBk0;
      BallTree ballTree0 = new BallTree();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.getGlobalInfo(iBk0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.m_ConfLevel;
      evaluation0.m_NumTrainClassVals = (-806);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.totalCost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      boolean boolean1 = evaluation0.m_ComplexityStatisticsAvailable;
      try { 
        evaluation0.updateStatsForPredictor((-2), instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      String string0 = JOptionPane.INITIAL_SELECTION_VALUE_PROPERTY;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPredicted = (double) 2;
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      multiClassClassifierUpdateable0.setClassifier(naiveBayesUpdateable0);
      evaluation0.SFMeanPriorEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      evaluation0.incorrect();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.pctIncorrect();
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(5262L);
      instances0.stringFreeStructure();
      evaluation0.addNumericTrainClass((-327.96903), (-700.951195703));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.m_ComplexityStatisticsAvailable = false;
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      MockRandom mockRandom0 = new MockRandom(5262L);
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.EPSILON;
      double double1 = evaluation0.m_ConfLevel;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.totalCost();
      MockRandom mockRandom0 = new MockRandom((-2307L));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.numInstances();
      evaluation0.SFPriorEntropy();
      evaluation0.toCumulativeMarginDistributionString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.toSummaryString();
      CostMatrix costMatrix0 = new CostMatrix(1);
      evaluation0.toMatrixString("yAtB");
      KDTree kDTree0 = new KDTree();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.runClassifier(zeroR0, testInstances1.DEFAULT_WORDS);
      MockRandom mockRandom1 = new MockRandom(2);
      Evaluation.getGlobalInfo(serializedClassifier0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      evaluation0.weightedMatthewsCorrelation();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getRevision();
      multiClassClassifierUpdateable0.getCapabilities();
      instances0.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(".bsi", false);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      Instances instances1 = new Instances(instances0, (-1));
      Instances instances2 = evaluation0.getHeader();
      MockRandom mockRandom0 = new MockRandom((-1));
      evaluation0.numInstances();
      Instances instances3 = new Instances(instances1);
      MockRandom mockRandom1 = new MockRandom(0L);
      MockRandom mockRandom2 = new MockRandom(1);
      Evaluation evaluation1 = new Evaluation(instances2);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.pctUnclassified();
      evaluation1.getRevision();
      evaluation0.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      instances0.equalHeadersMsg(instances0);
      Version.MAJOR = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = NimbusStyle.SMALL_SCALE;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toSummaryString(false);
      evaluation0.addNumericTrainClass(2, (-2005.0780065629012));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getRevision();
      multiClassClassifierUpdateable0.getCapabilities();
      instances0.equalHeadersMsg(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("RM?%AZ9PIll ", false);
      instances0.getRandomNumberGenerator(0L);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.totalCost();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTrueNegativeRate();
      testInstances0.setSeed((byte)108);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      evaluation0.addNumericTrainClass(3, Double.NaN);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      MockRandom mockRandom0 = new MockRandom(0L);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.kappa();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation1.priorEntropy();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      evaluation0.weightedFalseNegativeRate();
      try { 
        matlabLoader1.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      XML xML0 = new XML();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances0);
      chebyshevDistance0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      testInstances0.setNumNominal(0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Instance instance1 = converterUtils_DataSource0.nextElement(instances1);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      instances0.add(instance1);
      Canvas canvas0 = new Canvas();
      instances1.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation1.evaluateModelOnce((Classifier) simpleLinearRegression0, instance1);
      try { 
        Evaluation.handleCostOption("68<3aj{.CH0t'^iYt#", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      String string0 = ScrollPaneConstants.HORIZONTAL_SCROLLBAR;
      XML xML0 = new XML();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances1);
      MockRandom mockRandom0 = new MockRandom();
      testInstances0.setNumNominal(0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      instances0.add(instance0);
      Canvas canvas0 = new Canvas();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.meanPriorAbsoluteError();
      double double0 = evaluation0.m_TotalCost;
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.meanAbsoluteError();
      evaluation2.weightedTruePositiveRate();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      evaluation0.evaluateModelOnce((Classifier) simpleLinearRegression0, instance0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      String string0 = ScrollPaneConstants.HORIZONTAL_SCROLLBAR;
      XML xML0 = new XML();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances1);
      instances0.indexOf(chebyshevDistance0);
      MockRandom mockRandom0 = new MockRandom();
      testInstances0.setNumNominal(0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      Instance instance1 = converterUtils_DataSource0.nextElement(instances0);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      instances0.add(instance0);
      Canvas canvas0 = new Canvas();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.meanPriorAbsoluteError();
      double double0 = evaluation0.m_TotalCost;
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.updateStatsForPredictor(0, instance1);
      evaluation2.meanAbsoluteError();
      evaluation1.weightedTruePositiveRate();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      JRip jRip0 = new JRip();
      evaluation2.evaluateModelOnce((Classifier) jRip0, instance0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.EPSILON;
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      testInstances1.setNumNominal((-1));
      evaluation0.SFMeanSchemeEntropy();
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      LogitBoost logitBoost0 = new LogitBoost();
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SystemInUtil.addInputLine("'pc9MA`ex");
      evaluation0.getHeader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.totalCost();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedTrueNegativeRate();
      testInstances0.setSeed(112);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.toClassDetailsString();
      evaluation0.useNoPriors();
      SGDText sGDText0 = new SGDText();
      sGDText0.getLossFunction();
      evaluation0.KBMeanInformation();
      evaluation0.trueNegativeRate((-1));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumFolds = (-2);
      evaluation0.priorEntropy();
      testInstances0.setNumRelationalDate((byte)108);
      DenseInstance denseInstance0 = new DenseInstance((byte)108);
      instances0.add((Instance) denseInstance0);
      evaluation0.addNumericTrainClass((-507.9108397334), (byte)108);
      evaluation0.addNumericTrainClass((-1), (-1.0));
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGDText sGDText0 = new SGDText();
      SystemInUtil.addInputLine("@data");
      double double0 = KStarConstants.LOG2;
      double double1 = evaluation1.m_WithClass;
      BallTree ballTree0 = new BallTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      evaluation0.KBRelativeInformation();
      ZeroR zeroR0 = new ZeroR();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      testInstances0.toString();
      Evaluation.getGlobalInfo(classifier0);
      evaluation1.toMatrixString(".cost");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      String string0 = AccessibleContext.ACCESSIBLE_COMPONENT_BOUNDS_CHANGED;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances1);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGDText sGDText0 = new SGDText();
      SystemInUtil.addInputLine(".bsi");
      double double0 = KStarConstants.LOG2;
      double double1 = evaluation0.m_WithClass;
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.m_SumPriorSqrErr;
      instances1.spliterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double double3 = evaluation2.m_SumSqrErr;
      evaluation0.pctUnclassified();
      ZeroR zeroR0 = new ZeroR();
      ZeroR zeroR1 = new ZeroR();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.toMatrixString("(>1x.U8XjA3s(8");
      evaluation1.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      XML xML0 = new XML();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances0);
      chebyshevDistance0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumNominal(0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances2);
      converterUtils_DataSource0.nextElement(instances2);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      instances1.add((Instance) denseInstance0);
      Canvas canvas0 = new Canvas();
      instances2.toSummaryString();
      Evaluation evaluation0 = new Evaluation(instances2);
      Evaluation evaluation1 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      try { 
        evaluation1.evaluateModelOnce((Classifier) inputMappedClassifier0, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }
}
