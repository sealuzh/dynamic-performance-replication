/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 23:49:36 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.Spliterator;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      System.setCurrentTimeMillis((-2598L));
      JSONObject jSONObject0 = new JSONObject(false);
      JSONArray jSONArray0 = new JSONArray(949);
      jSONArray0.remove((Object) jSONObject0);
      jSONArray0.add((Object) jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray0.get((-894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      int int0 = 2351;
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      jSONArray2.getFloat(573);
      Integer integer1 = new Integer(989);
      jSONArray0.getFloatValue(3068);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      jSONArray1.hashCode();
      jSONArray0.getFloatValue(989);
      jSONArray2.getString(1113);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray2.fluentRemove((Object) integer0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray5 = jSONArray4.fluentAdd((Object) jSONArray3);
      // Undeclared exception!
      jSONArray5.fluentRetainAll(jSONArray4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray(linkedList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      linkedList0.addAll((Collection<?>) jSONArray0);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-47);
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      linkedList0.add((Object) treeMap0);
      byteArray0[6] = (byte) (-50);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = jSONArray1.getJSONObject(0);
      boolean boolean1 = jSONArray1.add((Object) jSONObject0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.remove((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray0.set(0, (Object) null);
      jSONArray0.isEmpty();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONArray0.set(986, linkedList0);
      jSONArray0.toArray();
      jSONArray0.getFloatValue(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.hashCode();
      jSONArray0.getFloatValue(0);
      jSONArray0.getString(986);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1948);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1948, Size: 987
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = JSON.VERSION;
      String string1 = null;
      jSONArray0.set(0, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      jSONArray0.getDoubleValue(0);
      jSONArray0.fluentAdd(0, (Object) iterator0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-868));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.lastEntry();
      Properties properties0 = new Properties();
      Set<Object> set0 = properties0.keySet();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-1379), pipedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Integer> class0 = Integer.class;
      Class<SerializerFeature> class1 = SerializerFeature.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2, class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(2306);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer1 = new Integer(399);
      BigInteger bigInteger0 = BigInteger.TEN;
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      BigInteger bigInteger1 = BigInteger.ONE;
      int int0 = 1908;
      JSONArray jSONArray0 = new JSONArray(1908);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, fileSystemHandling0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(3046, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3046, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray0.set(0, (Object) null);
      jSONArray0.isEmpty();
      Class<Field> class0 = Field.class;
      List<Field> list0 = jSONArray0.toJavaList(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray1 = new JSONArray();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "@type";
      jSONArray1.containsAll(list0);
      Class<JSONArray> class1 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.subList(0, (-1072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1072)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      String string1 = null;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      jSONArray2.set(3068, 3089);
      jSONArray1.getBooleanValue(989);
      jSONArray0.getLong(979);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray3.getJSONObject(989);
      Integer integer0 = new Integer(3089);
      BigInteger bigInteger0 = BigInteger.TEN;
      jSONArray0.remove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3068
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      Integer integer0 = new Integer(86);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSON.toJSON((Object) integer0, parserConfig0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer1 = new Integer(2306);
      jSONArray2.set(989, integer1);
      jSONArray1.getBooleanValue(989);
      int int0 = 979;
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONObject(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.clone();
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray1.getDouble(0);
      jSONArray2.getShort((int) integer0);
      jSONArray0.getBoolean(2351);
      jSONArray0.getInteger(3068);
      Class<JSONArray> class0 = JSONArray.class;
      Integer integer1 = new Integer(989);
      jSONArray0.getObject(1, (Type) class0);
      jSONArray0.getDate(3065);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.getDate(3068);
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      int int0 = 3030;
      Object object0 = new Object();
      jSONArray0.set(3030, object0);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(3068);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3068, Size: 3031
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      jSONArray1.fluentRetainAll(jSONArray2);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)70;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      jSONArray2.lastIndexOf((Object) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray2.toArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.toArray();
      jSONArray0.containsAll(jSONArray2);
      jSONArray1.fluentRetainAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3069
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      String string1 = null;
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<BigInteger> class0 = BigInteger.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      jSONArray2.set(3068, 989);
      jSONArray1.getBooleanValue(989);
      jSONArray0.getLong(979);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray3.getJSONObject(989);
      jSONArray1.getBigInteger(0);
      jSONArray0.getByte(3068);
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray4 = jSONArray2.fluentSet(3089, (Object) null);
      jSONArray4.hashCode();
      jSONArray1.getString(3089);
      jSONArray4.listIterator();
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      int int0 = jSONArray0.indexOf(integer0);
      assertEquals(3090, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(0, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.getJSONObject(0);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.getObject((int) 0, (Type) class0);
      jSONArray0.add((Object) null);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(0);
      linkedHashSet0.add((String) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.containsAll(linkedHashSet0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      jSONArray1.containsAll(linkedList1);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedList1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(439);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 439, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "yyyy-MM-dd HH:mm:ss");
      Integer integer0 = new Integer(2339);
      jSONArray2.set(3068, integer0);
      jSONArray1.getBooleanValue(989);
      jSONArray0.getLong(979);
      jSONArray1.getJSONObject(989);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONArray0.remove((-330));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "9,yx\"1@";
      JSONArray jSONArray0 = new JSONArray();
      Class<SerializerFeature> class0 = SerializerFeature.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3060);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3060, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      jSONArray1.fluentRetainAll(jSONArray2);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[4] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[5] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[6] = serializerFeature4;
      int int0 = 2351;
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray1.getDouble(0);
      jSONArray0.getSqlDate(0);
      jSONArray2.getShort((int) integer0);
      jSONArray0.getBoolean(2351);
      jSONArray0.getInteger(3068);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(1, (Collection<?>) jSONArray0);
      jSONArray3.removeAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.getDate(3047);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3047, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      int int0 = 3068;
      Integer integer0 = new Integer(2339);
      jSONArray2.set(3068, integer0);
      jSONArray1.getBooleanValue(989);
      jSONArray0.getLong(979);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray1.getSqlDate(3068);
      jSONArray3.getJSONObject(989);
      jSONArray1.getBigInteger(0);
      Integer integer1 = new Integer(399);
      jSONArray2.getString(2657);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1133), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2339);
      jSONArray2.set(3068, integer0);
      jSONArray1.getBooleanValue(989);
      jSONArray0.getLong(979);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray3.getJSONObject(989);
      jSONArray1.getBigInteger(0);
      jSONArray3.getByte(2339);
      jSONArray2.toArray();
      jSONArray3.getShort(3049);
      jSONArray2.getBoolean(3068);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll((-1), (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 3069
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = JSON.VERSION;
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      int int0 = 899;
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      jSONArray1.clone();
      int int1 = 937;
      jSONArray0.set(937, serializerFeature0);
      jSONArray0.toArray();
      jSONArray0.getDouble(931);
      int int2 = 38;
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(937);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : IgnoreErrorGetter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray0.set(0, (Object) null);
      jSONArray0.toArray();
      jSONArray0.getBigInteger(0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(2808);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2808, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = JSON.VERSION;
      String string2 = null;
      int int0 = 3027;
      jSONArray0.set(3027, "1.2.46");
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3027);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3052, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      jSONArray1.toArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getTimestamp(1364);
      Integer integer0 = new Integer(6);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      Integer integer1 = new Integer(122);
      Integer integer2 = new Integer(989);
      jSONArray2.getString(3042);
      Class<JSONArray> class1 = JSONArray.class;
      jSONArray2.getObject(3040, class1);
      jSONArray1.indexOf((Object) null);
      jSONArray0.getObject(3089, (Type) class1);
      assertEquals(6106, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2339);
      jSONArray2.set(3068, integer0);
      jSONArray1.getBooleanValue(989);
      int int0 = 979;
      jSONArray0.getLong(979);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(3089, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3069
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(3089, (Object) null);
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) null);
      jSONArray2.fluentAdd((Object) jSONArray1);
      int int0 = 3068;
      int int1 = 0;
      JSONArray jSONArray3 = jSONArray0.getJSONArray(3089);
      jSONArray3.lastIndexOf(jSONArray0);
      Integer integer0 = new Integer(3089);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      jSONArray1.fluentRetainAll(jSONArray2);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[4] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[5] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[6] = serializerFeature4;
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray1.getDouble(0);
      jSONArray0.getSqlDate(0);
      jSONArray2.getShort((int) integer0);
      jSONArray0.getBoolean(2351);
      jSONArray0.getInteger(3068);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(1, (Collection<?>) jSONArray0);
      jSONArray3.getDate(3047);
      jSONArray1.listIterator(2351);
      // Undeclared exception!
      try { 
        jSONArray2.getSqlDate((-889275714));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(0, (Object) null);
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getIntValue(0);
      int int0 = 3767;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3767);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3767, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(3089, (Object) null);
      jSONArray0.set(19, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(19);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(0, "@type");
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSON.VERSION;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      JSON.parseObject((String) null, (Type) class0, (-1432), featureArray0);
      jSONArray1.set(3088, (Object) null);
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      jSONArray2.setComponentType(type0);
      Integer integer0 = new Integer(2389);
      Object object0 = new Object();
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray0.getByteValue(3068);
      jSONArray2.getBoolean(255);
      jSONArray3.fluentRemove((Object) null);
      jSONArray1.getJSONArray(25);
      int int0 = jSONArray1.size();
      assertEquals(3088, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray1.contains("yyyy-MM-dd HH:mm:ss");
      jSONArray0.getLong(979);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray3.getJSONObject(989);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3069
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(3089, (Object) null);
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getTimestamp(989);
      Integer integer0 = new Integer(96);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3061);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3089);
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) 3089;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 989;
      jSONArray0.getJSONObject(1093);
      jSONArray0.getLongValue(2759);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) null);
      Class<Integer> class0 = Integer.class;
      jSONArray2.toJavaList(class0);
      jSONArray1.equals(integer1);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      assertEquals(6184, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      Class<String> class0 = String.class;
      FieldInfo.getFieldType(class0, class0, class0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Integer integer0 = new Integer(8);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      jSONArray0.fluentRemove((Object) classLoader1);
      Integer integer1 = new Integer(3050);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSON.VERSION;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Class<Object> class0 = Object.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      jSONArray2.setComponentType(type0);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray0.getByteValue(3068);
      jSONArray2.getBoolean(255);
      jSONArray3.fluentRemove((Object) null);
      jSONArray1.getJSONArray(25);
      assertEquals(3068, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(3089, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getTimestamp(989);
      Integer integer0 = new Integer(96);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3061);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3089);
      jSONArray0.getDoubleValue((int) integerArray0[1]);
      jSONArray0.hashCode();
      jSONArray0.getFloatValue(3043);
      jSONArray0.getString(3059);
      jSONArray0.equals(integerArray0[1]);
      jSONArray0.getSqlDate(2701);
      jSONArray0.getJSONObject(3050);
      jSONArray0.size();
      jSONArray0.getInteger(2701);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(3089, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getTimestamp(989);
      int int0 = 96;
      Integer integer0 = new Integer(96);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3061);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3089);
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) 3089;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 989;
      integerArray0[6] = integer0;
      jSONArray0.getFloatValue(int0);
      jSONArray1.getString(989);
      jSONArray1.equals((Object) null);
      jSONArray0.getSqlDate(672);
      jSONArray0.containsAll(jSONArray1);
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertEquals(3090, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(3089, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getTimestamp(989);
      Integer integer0 = new Integer(96);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      jSONArray0.iterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      jSONArray1.getDoubleValue(96);
      JSONArray jSONArray2 = (JSONArray)jSONArray1.clone();
      jSONArray1.hashCode();
      float float0 = new Integer(989);
      Class<Annotation> class0 = Annotation.class;
      jSONArray2.getObject(989, class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      jSONArray0.lastIndexOf("yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "yyyy-MM-dd HH:mm:ss");
      int int0 = 3068;
      int int1 = 2351;
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSON.VERSION;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.lastEntry();
      jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.iterator();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3068, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, (Object) null);
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.lastEntry();
      int int0 = 2080;
      JSONArray jSONArray1 = jSONArray0.fluentSet(2080, treeMap0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(2080, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(3089, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getTimestamp(989);
      Integer integer0 = new Integer(96);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3061);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3089);
      integerArray0[2] = integer2;
      integerArray0[3] = (Integer) 3089;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 989;
      integerArray0[6] = integer0;
      integerArray0[7] = (Integer) 989;
      integerArray0[8] = (Integer) 3089;
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.getObject(1, class0);
      jSONArray0.indexOf(integer2);
      jSONArray0.getObject(45, (Type) class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(0, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      jSONArray0.iterator();
      jSONArray0.getDoubleValue(0);
      jSONArray0.hashCode();
      jSONArray0.getFloatValue(0);
      jSONArray0.getString(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.lastEntry();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1210, treeMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1210, (Object) null);
      jSONArray1.getBooleanValue(1);
      jSONArray0.toArray();
      jSONArray2.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        JSON.parseArray("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      treeMap0.lastEntry();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1210, treeMap0);
      jSONArray1.iterator();
      jSONArray1.getDoubleValue(989);
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1210);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      JSONArray jSONArray1 = new JSONArray(1232);
      jSONArray0.iterator();
      jSONArray0.equals(treeMap0);
      assertTrue(jSONArray0.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(0, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getTimestamp(0);
      jSONArray0.getBoolean(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type");
      // Undeclared exception!
      try { 
        jSONArray0.subList(989, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(989) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3070);
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) bigInteger0);
      JSONArray jSONArray3 = new JSONArray();
      JSONArray jSONArray4 = jSONArray2.fluentRemoveAll(jSONArray3);
      jSONArray4.fluentAdd((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.toArray((Class<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1210, treeMap0);
      jSONArray1.iterator();
      double double0 = jSONArray1.getDoubleValue(989);
      assertEquals(1211, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-42);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) bigInteger0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((byte)0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = new JSONObject(false);
      Set<String> set0 = jSONObject0.defaultLocale.getUnicodeLocaleAttributes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.setDefaultTypeKey("scan false error");
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.fluentRemoveAll(set0);
      jSONArray0.containsAll(jSONArray1);
      JSONObject jSONObject2 = new JSONObject(false);
      JSONObject jSONObject3 = new JSONObject(3089);
      Integer integer0 = new Integer(989);
      JSON.toJSONString((Object) integer0);
      JSONArray jSONArray3 = new JSONArray(3089);
      jSONObject3.put("q`dgc=W", (Object) jSONArray3);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache(" /B6+eqqlx", concurrentHashMap0);
      // Undeclared exception!
      try { 
        jSONArray2.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, type0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = JSON.VERSION;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Class<Object> class0 = Object.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      jSONArray2.setComponentType(type0);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      jSONArray1.getDouble(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      integerArray0[2] = (Integer) 989;
      integerArray0[3] = integer0;
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray3.getObject((int) integerArray0[2], class1);
      Class<Integer> class2 = Integer.class;
      jSONArray2.toJavaList(class2);
      assertEquals(3069, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONObject jSONObject0 = new JSONObject(true);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONObject0);
      jSONArray1.fluentAdd((Object) jSONArray0);
      Integer integer0 = new Integer(0);
      jSONArray0.set(989, jSONObject0);
      jSONArray0.toArray();
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = JSON.VERSION;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      jSONArray1.getDouble(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      integerArray0[2] = (Integer) 989;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 989;
      jSONArray1.toArray(integerArray0);
      jSONArray0.getSqlDate(0);
      jSONArray2.getShort((int) integerArray0[4]);
      jSONArray0.getBoolean(2351);
      jSONArray0.getInteger(573);
      assertEquals(3069, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSON.VERSION;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(989, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      jSONArray2.getFloat(573);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      integerArray0[2] = (Integer) 989;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 989;
      jSONArray1.toArray(integerArray0);
      jSONArray0.getSqlDate(0);
      jSONArray2.getShort((int) integerArray0[4]);
      assertEquals(990, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3084, integer0);
      jSONArray1.contains("yyyy-MM-dd HH:mm:ss");
      jSONArray0.getLong(979);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.get(891);
      short short0 = jSONArray2.getShortValue(3084);
      assertEquals(3085, jSONArray2.size());
      assertEquals((short)2351, short0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) bigInteger0);
      jSONArray1.set(3089, 3089);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray2);
      jSONArray3.contains((Object) null);
      jSONArray0.getLong(989);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-3473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      jSONArray2.getJSONArray(0);
      jSONArray1.lastIndexOf((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      jSONArray2.setRelatedArray((Object) null);
      jSONArray2.getFloat(573);
      jSONArray1.getDouble(0);
      jSONArray2.getDate(989);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.getByte(3089);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) null, parserConfig0);
      jSONArray0.getShortValue(3089);
      jSONArray1.isEmpty();
      jSONArray0.getLong((short)0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 26;
      JSONArray jSONArray0 = new JSONArray(26);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      Integer integer0 = new Integer((-32));
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.lastIndexOf(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(26, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray1.contains("yyyy-MM-dd HH:mm:ss");
      jSONArray0.getLong(979);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray3.getJSONObject(76);
      assertEquals(3069, jSONArray2.size());
      assertEquals(3069, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      jSONArray2.getFloat(573);
      jSONArray1.getDouble(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      integerArray0[2] = (Integer) 989;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 989;
      jSONArray1.toArray(integerArray0);
      assertEquals(3069, jSONArray1.size());
      
      jSONArray0.getSqlDate(0);
      jSONArray2.getShort((int) integerArray0[4]);
      assertEquals(3069, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "yyyy-MM-dd HH:mm:ss");
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray0.isEmpty();
      jSONArray2.getFloat(573);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.getByte(3089);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      jSONArray1.getShortValue(989);
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(3090, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-4);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-4);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jSONArray0.fluentRemove((Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.remove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3069
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      Integer integer0 = new Integer(2351);
      jSONArray2.set(3068, integer0);
      jSONArray2.toArray();
      jSONArray0.isEmpty();
      jSONArray2.getFloat(573);
      jSONArray1.getDouble(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      integerArray0[2] = (Integer) 989;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 989;
      jSONArray0.getLong(2351);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-3542));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.getByte(3089);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.getShort(3089);
      jSONArray2.getString(989);
      JSONArray jSONArray3 = jSONArray1.fluentRemove(989);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll(3089, (Collection<?>) jSONArray1);
      JSONArray jSONArray5 = jSONArray4.fluentClear();
      JSONArray jSONArray6 = jSONArray5.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray6.getByteValue(982);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 982, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONObject jSONObject0 = new JSONObject(989);
      jSONArray0.set(5206, jSONObject0);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      jSONArray0.fluentSet(1673, "");
      jSONArray0.getBigDecimal(5206);
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(5207, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Spliterator<Object> spliterator0 = jSONArray0.spliterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      jSONArray0.toArray(classArray0);
      jSONArray0.setRelatedArray(classArray0[0]);
      jSONArray0.remove((Object) spliterator0);
      Class<Integer> class1 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(951, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 951, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer[] integerArray0 = new Integer[0];
      jSONArray0.toArray(integerArray0);
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.get(863);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 863, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1357));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray(989);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, "com.alibaba.fastjson.JSONArray");
      jSONArray0.add(0, (Object) null);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1231);
      jSONArray0.toArray(integerArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_TYPE_KEY = "com.alibaba.fastjson.JSONArray";
      JSONObject[] jSONObjectArray0 = new JSONObject[0];
      jSONArray0.toArray(jSONObjectArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1, (Object) null);
      jSONArray0.toArray();
      jSONArray0.isEmpty();
      jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.remove(54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      jSONArray1.fluentAdd(0, (Object) "yyyy-MM-dd HH:mm:ss");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.getSqlDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<JSONArray, String> treeMap0 = new TreeMap<JSONArray, String>();
      Set<JSONArray> set0 = treeMap0.keySet();
      jSONArray0.addAll((Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set((-1), "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getString(1525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1525, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UjLf}5Z@$p)oMQo(*");
      JSONArray jSONArray1 = new JSONArray();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        JSON.parseObject("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(206);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray1.setRelatedArray(bigInteger0);
      assertEquals(1, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("Iwir7e;9l", treeMap0);
      Integer integer0 = new Integer(756);
      jSONArray0.lastIndexOf(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, bigInteger0);
      jSONArray1.set(989, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 275;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(275);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 275, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.setComponentType((Type) null);
      int int0 = (-88);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 2424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "@type");
      boolean boolean0 = jSONArray0.addAll((Collection<?>) jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-3172));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2436);
      Class<Integer> class0 = Integer.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(2404, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2404, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<BigInteger> class0 = BigInteger.class;
      Class<BigInteger> class1 = BigInteger.class;
      Class<JSONArray> class2 = JSONArray.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentSkipListMap0);
      FieldInfo fieldInfo0 = new FieldInfo("com.alibaba.fastjson.JSONArray", class0, class2, class2, (Field) null, 1937, (-1541), (-944));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      jSONArray0.fluentAdd((Object) null);
      beanContext0.getField();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-4578);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-4578));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-1034));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1034
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(615);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 615, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.add(989, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(439, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 439, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.add(186, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 186, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<BigInteger> class0 = BigInteger.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.setComponentType(class0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      JSONArray jSONArray2 = jSONArray1.fluentSet((-1), bigInteger0);
      jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray2.iterator();
      assertEquals(1, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<String, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(2354);
      boolean boolean0 = jSONArray0.retainAll(concurrentHashMap_KeySetView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1970));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<JSONArray, String> treeMap0 = new TreeMap<JSONArray, String>();
      Set<JSONArray> set0 = treeMap0.keySet();
      jSONArray0.addAll((Collection<?>) set0);
      jSONArray0.remove((Object) set0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(2440);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2440, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-930);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<String> class0 = String.class;
      int int1 = 2431;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("d`4iwBpJp", class0, 2431);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. d`4iwBpJp
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(1914);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1914, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UjLf}5Z@$p)oMQo(*");
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(2461);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2461, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(2429);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2429, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      Collection<JSONArray> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(245);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 245, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      boolean boolean0 = jSONArray0.contains(bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2456);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = ',';
      charArray0[2] = '0';
      charArray0[3] = 'X';
      charArray0[4] = 'D';
      charArray0[5] = '$';
      charArray0[6] = 'x';
      charArray0[7] = '?';
      charArray0[8] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 618);
      Class<JSONArray> class0 = JSONArray.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(collection0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray[] jSONArrayArray0 = new JSONArray[6];
      jSONArrayArray0[0] = jSONArray0;
      jSONArrayArray0[1] = jSONArray0;
      jSONArrayArray0[2] = jSONArray0;
      jSONArrayArray0[3] = jSONArray0;
      jSONArrayArray0[4] = jSONArray2;
      jSONArrayArray0[5] = jSONArray0;
      JSONArray[] jSONArrayArray1 = jSONArray2.toArray(jSONArrayArray0);
      assertSame(jSONArrayArray1, jSONArrayArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(2868);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2868, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) null);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(2461);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2461, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.MapSortField;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONStringWithDateFormat(jSONArray0, "@type", serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1245);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1245
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.add(object0);
      // Undeclared exception!
      try { 
        JSON.parseArray("X#ruy41|V[`C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-774));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 2864;
      JSONArray jSONArray0 = new JSONArray(2864);
      Integer integer0 = new Integer(1463);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2864, integer0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(jSONArray1.DEFAULT_GENERATE_FEATURE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(167);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 167, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-2137));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1246));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) "yyyy-MM-dd HH:mm:ss");
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.getDate((-1950));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2875);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(3089, 601);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 601
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(108);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2891, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3172);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3172, Size: 2892
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1037));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(1388);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1388, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1706));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1543), (-1543));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1543
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      ParserConfig parserConfig0 = null;
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = '=';
      charArray0[2] = '9';
      charArray0[3] = '$';
      charArray0[4] = 'B';
      charArray0[5] = 'E';
      charArray0[6] = 'K';
      charArray0[7] = 'H';
      charArray0[8] = 'J';
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 989, (ParserConfig) null, 989);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3226);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3226, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getString(1521);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1521, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) null, serializerFeatureArray0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.get(3156);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3156, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3131);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2415), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSONString((Object) jSONArray0);
      jSONArray0.set(1, (Object) null);
      jSONArray0.toArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(2, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(4186, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4186, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-811), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getString((-719));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONBytes((Object) jSONArray0, serializeFilterArray0, serializerFeatureArray0);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSON.parseArray((String) null);
      JSONArray jSONArray0 = new JSONArray(989);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd((-1574), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1574, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>(989, 1612.093F);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1443);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1443));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(1018, 1018);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1018
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 35;
      JSONArray jSONArray0 = new JSONArray(35);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-3798), (Collection<?>) set0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3798, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      jSONArray1.fluentAdd(0, (Object) "yyyy-MM-dd HH:mm:ss");
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      Set<String> set0 = jSONObject1.keySet();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-1936));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      Set<String> set0 = jSONObject1.keySet();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) "yyyy-MM-dd HH:mm:ss");
      jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(224);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 224, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1018);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1018);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1018, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = null;
      jSONArray0.fluentAdd((Object) null);
      int int0 = 4147;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      Set<String> set0 = jSONObject1.keySet();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1018);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.DisableASM;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.fluentClear();
      JSONObject jSONObject1 = new JSONObject(false);
      Set<String> set0 = jSONObject1.keySet();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Class<String> class0 = String.class;
      FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-3734), (Type) class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-778));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(2667);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray1.containsAll(linkedList0);
      int int0 = (-1199);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1001);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(1589);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1589, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue((-458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1001);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRemove(0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(93);
      int int0 = (-287);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3124);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray1.removeAll(linkedList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InternFieldNames;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowUnQuotedFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableCircularReferenceDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.CustomMapDeserializer;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowISO8601DateFormat;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.IgnoreAutoType;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.InitStringFieldAsEmpty;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : \u0000Yh\u0000O\u00006
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      Set<String> set0 = jSONObject1.keySet();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Class<String> class0 = String.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        jSONArray2.getObject(68, type0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      Integer integer0 = new Integer(1);
      jSONArray0.fluentAdd((Object) integer0);
      jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2891);
      jSONObject0.getJSONArray("");
      JSONArray jSONArray0 = new JSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(165, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 165, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-512));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONArray0.toJavaList(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(")", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ), pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-778));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1429);
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1429);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1429, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(893);
      String string0 = "lS,;L&.ow`zL05|E~\"!";
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("lS,;L&.ow`zL05|E~\"!", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : lS,;L&.ow`zL05|E~\"!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("C+~^J]`A `**P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
