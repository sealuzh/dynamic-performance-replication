/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:21:01 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(250);
      classWriter0.newLong(250);
      classWriter0.visitEnd();
      classWriter0.newClass("\"(k");
      classWriter0.newClass("EnclosingMethod");
      Attribute attribute0 = new Attribute("[ykN=]T");
      byte[] byteArray0 = new byte[1];
      classWriter0.visitAnnotation("S'~ enaz]taE`F09H", false);
      byteArray0[0] = (byte)0;
      attribute0.value = byteArray0;
      classWriter0.visitAttribute(attribute0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[ykN=]T";
      stringArray0[1] = "EnclosingMethod";
      stringArray0[2] = "[ykN=]T";
      stringArray0[3] = "";
      stringArray0[4] = "\"(k";
      stringArray0[5] = "EnclosingMethod";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(4, "[ykN=]T", "", "", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      Boolean boolean0 = new Boolean("G!Lkq`m\"<u[)i");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      Item item0 = classWriter0.newLong((-4180));
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      Label label0 = new Label();
      label0.inputStackTop = 2;
      Object object0 = label0.info;
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      classWriter0.visitSource("The list of names must not be null", "The list of names must not be null");
      // Undeclared exception!
      try { 
        classWriter0.newField("^U3'%`", (String) null, "The list of names must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(0);
      String string0 = "";
      classWriter0.addType("");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(16777228, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16777228
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.addType("EnclosingMethod");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'EnclosingMethod.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-4164));
      ClassWriter classWriter0 = new ClassWriter(13);
      Item item0 = new Item(33);
      Item item1 = classWriter0.newDouble(1554.6251988531);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "java/lang/String";
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 131072);
      classWriter0.visitField(8, "java/lang/String", "java/lang/String", "java/lang/String", (Object) null);
      classWriter0.newFloat(0.0F);
      classWriter0.visitSource("The FileFilter must not be null", "The FileFilter must not be null");
      Item item0 = classWriter0.newFloat(2);
      String string1 = ".class";
      classWriter0.newClass(".class");
      // Undeclared exception!
      try { 
        classWriter0.visitField(1641, "The FileFilter must not be null", "The FileFilter must not be null", "Bd3vxky6ed", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@22d
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classWriter0.index = 2130;
      classWriter0.newFloat((-4180));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-4180), (-4180));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      int int0 = Double.MAX_EXPONENT;
      classWriter0.newFloat(1023);
      classWriter0.visitEnd();
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.visitOuterClass(" llhJL#7IiCYU:kZ", (String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1134);
      classWriter0.visitOuterClass("g_be>u=?}R{WL$T", "g_be>u=?}R{WL$T", (String) null);
      int int0 = classWriter0.newUTF8("g_be>u=?}R{WL$T");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212673);
      classWriter0.newConstItem("");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      classWriter0.newFloat((-4180));
      classWriter0.visit(2057, 3329, "l][", "l][", "l][", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-4180);
      ClassWriter classWriter0 = new ClassWriter((-4180));
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        classWriter0.visit((-4180), (-4180), "The FilenameFilter must not be null", "The FilenameFilter must not be null", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "t?twoU", "My4@)Yzw@TK", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
      
      fieldWriter0.visitAnnotation("Ii(>NS^", false);
      Item item0 = classWriter0.newConstItem("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Ii(>NS^";
      stringArray0[2] = "HKf/z";
      stringArray0[3] = "";
      stringArray0[4] = "t?twoU";
      stringArray0[5] = "Ii(>NS^";
      stringArray0[6] = "Ii(>NS^";
      classWriter0.visit((-721), 24, "pU;`245&9", "HKf/z", "\"]*C,({A9", stringArray0);
      classWriter0.toByteArray();
      Item item1 = classWriter0.newFloat((-721));
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitOuterClass("#hqP|o$BdB{ES~7|;", "The array of names must not be null", "#hqP|o$BdB{ES~7|;");
      classWriter0.newUTF8("jY'^xv`");
      classWriter0.visitSource("org.apache.commons.io.filefilter.CanWriteFileFilter", "7QO.?GpjhT.");
      int int0 = Float.MIN_EXPONENT;
      classWriter0.newConstItem("jY'^xv`");
      classWriter0.visitInnerClass("#hqP|o$BdB{ES~7|;", (String) null, "jY'^xv`", 5);
      // Undeclared exception!
      try { 
        Character.getName((-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.newConst("wheel.asm.ClassWriter");
      classWriter0.visitInnerClass((String) null, (String) null, "wheel.asm.ClassWriter", 12);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("", "M^&");
      classWriter0.newClass("");
      ClassWriter classWriter1 = new ClassWriter((-2265));
      classWriter1.toByteArray();
      classWriter1.firstField = null;
      classWriter1.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      classWriter0.newLong(0L);
      classWriter0.newFieldItem("", "float", "");
      classWriter0.visitOuterClass(")j?z", (String) null, "Uwzxp!\"H-,^%zL\"");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      classWriter0.visitInnerClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "SourceFile", (-4180));
      classWriter0.addUninitializedType("szd]7R)h", (-4180));
      String string0 = classWriter0.getCommonSuperClass("java/lang/Object", "java/lang/String");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visit(2847, 2847, "ConstantValue", "ynBU|", "", (String[]) null);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("ynBU|");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      String[] stringArray0 = new String[0];
      classWriter0.visit(9, 1216, "icy((Td!kfj&~/X", "", "eaDUHko$T", stringArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("icy((Td!kfj&~/X");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      classWriter0.getCommonSuperClass("java/lang/String", "wheel.asm.ClassWriter");
      classWriter0.visit(Integer.MAX_VALUE, Integer.MAX_VALUE, "", "java/lang/Object", "", (String[]) null);
      classWriter0.newFloat(1.0F);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "icy((Td!kfj&~/X";
      classWriter0.visit((-14), (-14), ":A", ":A", "icy((Td!kfj&~/X", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      classWriter0.addUninitializedType("icy((Td!kfj&~/X", (-3945));
      int int0 = classWriter0.addUninitializedType("StackMapTable", (-200));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.newFloat(21);
      classWriter0.newLong(2);
      String[] stringArray0 = new String[0];
      classWriter1.visit(21, 26, "", (String) null, "9]3:$tkW-q", stringArray0);
      byte[] byteArray0 = classWriter1.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.visitInnerClass((String) null, "=FX{W", "wheel.asm.ClassWriter", 12);
      Item item0 = classWriter0.newFloat(12);
      Item item1 = classWriter0.newFloat(12);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(276);
      classWriter0.visitInnerClass("", "StackMap", "p!`CLM`P*x", 276);
      classWriter0.newMethod("", "p!`CLM`P*x", "", false);
      classWriter0.visitInnerClass("", "7?IR.~cy\"~U", "7?IR.~cy\"~U", 7);
      System.setCurrentTimeMillis(276);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(192);
      classWriter0.visitSource((String) null, "");
      assertNotSame(classWriter0, classWriter1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      classWriter0.addUninitializedType("szd]7R)h", (-4180));
      classWriter0.visitSource("", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      Item item0 = classWriter0.key3;
      ClassWriter classWriter1 = new ClassWriter(2);
      Boolean boolean0 = new Boolean("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 256, "", "Deprecated", "", boolean0);
      int int0 = classWriter1.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      Item item0 = classWriter0.newDouble(12);
      Item item1 = classWriter0.newDouble(0.0);
      Item item2 = classWriter0.newDouble(12);
      assertSame(item2, item0);
      assertNotSame(item2, item1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3346));
      Item item0 = classWriter0.newInteger((-3346));
      Item item1 = classWriter0.newInteger((-3346));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.newMethod("", "", "", true);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      Item item0 = classWriter0.newFieldItem("", "", "");
      Character character0 = Character.valueOf('b');
      classWriter0.visitField(26, "", "", "", character0);
      ClassWriter classWriter1 = new ClassWriter(26);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter0.visitOuterClass("wheel.asm.ClassWriter", "", "");
      Item item1 = classWriter1.newFloat(0.0F);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      ClassWriter classWriter1 = new ClassWriter(1943);
      classWriter1.visitOuterClass("The list of names must not be null", "", (String) null);
      Item item0 = classWriter1.newFloat((-4180));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Long long0 = new Long(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Item item0 = classWriter0.newConstItem(long0);
      Item item1 = classWriter0.newLong(0L);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(256);
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      Type type0 = Type.getType(class0);
      classWriter0.newConstItem(type0);
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, (String) null, "8ZH!o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q?DO");
      ClassWriter classWriter0 = new ClassWriter(32);
      Item item0 = new Item();
      classWriter0.visitSource("$jY^|L3)+Z)(", "R<0Ii");
      Type type0 = Type.SHORT_TYPE;
      classWriter0.newConstItem(type0);
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      classWriter0.toByteArray();
      Long long0 = new Long((-2954L));
      int int1 = classWriter0.newConst(long0);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(184);
      classWriter0.newConstItem("");
      classWriter0.addType("");
      classWriter0.addType("");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(32, 171);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.newField("Sp", "Sp", "Sp");
      classWriter0.visitSource("Sp", "Sp");
      Item item0 = classWriter0.newFieldItem("Sp", "Sp", "Sp");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-20));
      classWriter0.addUninitializedType("StackMap", (-20));
      int int0 = classWriter0.addUninitializedType("StackMap", (-20));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1079);
      String string0 = "org.apache.commons.io.filefilter.CanWriteFileFilter";
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "java/lang/String");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1079, 1079);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
