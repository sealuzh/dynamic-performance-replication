/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:18:23 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"Z{Gl=>4k;V\"#", 87);
      jSONReaderScanner0.scanFloat('^');
      jSONReaderScanner0.scanDate('o');
      assertEquals(87, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" e)sw=LDC O", (-422));
      char char0 = '0';
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      jSONScanner0.nextToken();
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      charArray0[7] = '0';
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match k - ), info : pos 2, json :  e)sw=LDC O
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("te");
      int int0 = (-3497);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-3497));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'I';
      charArray0[2] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 106, (-2349));
      int int0 = 526;
      int int1 = 32;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-3016));
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.resetStringPosition();
      char char0 = 'S';
      jSONScanner0.scanString('S');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-3016));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 76;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}8lDG>v9J .:XU3", 76);
      SymbolTable symbolTable0 = new SymbolTable(75);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '$');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">\"fZat6");
      stringReader0.read();
      stringReader0.read();
      int int0 = 120;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 120);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "l\\k})*c#h-D";
      int int0 = (-1);
      JSONScanner jSONScanner0 = new JSONScanner("lk})*c#h-D", (-1));
      int int1 = (-1782);
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONScanner0.config(feature0, true);
      jSONScanner0.sp = (-1782);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - l, info : pos 0, json : lk})*c#h-D
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" is not a primitive type", 108);
      jSONScanner0.scanLong('d');
      jSONScanner0.setToken(108);
      jSONScanner0.isEnabled(108, 108);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('d');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match d - i, info : pos 1, json :  is not a primitive type
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84, (-101));
      jSONReaderScanner0.scanFieldString(charArray0);
      Locale locale0 = new Locale("");
      Locale locale1 = Locale.UK;
      locale0.getDisplayName(locale1);
      jSONReaderScanner0.setLocale(locale0);
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      jSONScanner0.stringVal();
      jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.isEOF();
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = '4';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '#';
      charArray0[5] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 490);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, '4');
      jSONReaderScanner0.scanBoolean('@');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("0H$p^ie0Y");
      jSONScanner0.next();
      jSONScanner0.indexOf('e', 2048);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 's';
      charArray0[2] = '/';
      charArray0[3] = '!';
      charArray0[4] = 'V';
      charArray0[5] = 'C';
      charArray0[6] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 547, (-2147483587));
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.next();
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("illega str", (-1));
      jSONScanner0.info();
      jSONScanner0.scanFieldBigInteger(charArray0);
      Locale locale0 = new Locale("6%@V9PtfX=IVVp.", "6%@V9PtfX=IVVp.");
      jSONScanner0.setLocale(locale0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 57);
      char char0 = 'r';
      Class<Object> class0 = Object.class;
      jSONScanner0.nextIdent();
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanLong('r');
      jSONScanner0.isEnabled(57);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(VSK@Wa:X~6s");
      int int0 = 9981;
      jSONReaderScanner0.sp = 9981;
      char[] charArray0 = new char[7];
      char char0 = '`';
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(VSK@Wa:X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      int int0 = 123;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 601);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3392903);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 's';
      charArray0[2] = 'J';
      charArray0[3] = 'm';
      JSONLexerBase.readString(charArray0, 3);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PsJ");
      jSONReaderScanner0.nextToken(3);
      SymbolTable symbolTable0 = new SymbolTable(3);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '4');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(15);
      JSONScanner jSONScanner0 = new JSONScanner("PsJ");
      char[] charArray1 = new char[6];
      charArray1[0] = 's';
      charArray1[1] = 'J';
      charArray1[2] = '4';
      charArray1[3] = '4';
      charArray1[4] = 'm';
      charArray1[5] = 'm';
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONScanner0.scanDouble('J');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 76;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#{!^&X_nj[I.-?Gw", 76);
      char char0 = '^';
      jSONReaderScanner0.scanDouble('^');
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.isEnabled(feature0);
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      jSONReaderScanner0.scanFieldInt(charArray0);
      charArray0[6] = '^';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!sq");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'v';
      charArray0[4] = 'D';
      charArray0[5] = '*';
      charArray0[6] = '2';
      charArray0[7] = '@';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '5';
      charArray0[2] = 'c';
      charArray0[3] = 'v';
      charArray0[4] = '=';
      charArray0[5] = 'x';
      charArray0[6] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1260);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      jSONReaderScanner0.scanNumber();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.sp = 55;
      char[] charArray1 = new char[1];
      jSONReaderScanner0.scanType("set");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "set";
      objectArray0[1] = (Object) jSONReaderScanner0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "not support type ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("not support type ", objectArray0);
      charArray1[0] = 'b';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      jSONReaderScanner0.indexOf('~', 33);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!sq");
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = 'u';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanDate('%');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'U';
      char char0 = 'I';
      charArray0[2] = 'I';
      charArray0[3] = '2';
      char char1 = ';';
      charArray0[4] = ';';
      charArray0[5] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1690, 1690);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "unclosed.str.lit");
      jSONReaderScanner0.timeZone = (TimeZone) simpleTimeZone0;
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanIdent();
      boolean boolean0 = true;
      int int0 = 18;
      Locale locale0 = Locale.KOREAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\'';
      charArray0[2] = '=';
      charArray0[3] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('@');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a_B26|>|FLc");
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '`';
      charArray0[2] = '~';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.putChar('=');
      char[] charArray1 = new char[1];
      charArray1[0] = 'y';
      jSONScanner0.scanFieldFloatArray2(charArray1);
      Feature feature0 = Feature.SupportNonPublicField;
      jSONScanner0.config(feature0, false);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('&', '=', '7', 'j', 'y', '=');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";Q<E*.");
      char[] charArray0 = new char[1];
      jSONScanner0.nextToken();
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.pos = 55232;
      charArray0[0] = 'M';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 57);
      char char0 = 'r';
      Class<Object> class0 = Object.class;
      jSONScanner0.nextIdent();
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanLong('r');
      jSONScanner0.isEnabled(57);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, (-3635));
      SymbolTable symbolTable0 = new SymbolTable(34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '4');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Gz%c\f\"", 94);
      jSONScanner0.bytesValue();
      char char0 = 'S';
      jSONScanner0.putChar('S');
      jSONScanner0.scanBoolean('S');
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 0, json : Gz%c\f\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 34;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nun", 34);
      char char0 = '/';
      jSONReaderScanner0.scanString('/');
      int int1 = 411;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(411, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|^]T\"A:L!}y2");
      jSONReaderScanner0.scanString('|');
      jSONReaderScanner0.pos = 5;
      jSONReaderScanner0.scanString();
      jSONReaderScanner0.features = 52;
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.intValue();
      int int0 = 65;
      int int1 = (-1085);
      SymbolTable symbolTable0 = new SymbolTable(102);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("|+roB/*zx:%mO+Cs", 40, 56, 10, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t;~@", 108);
      int int0 = 2168;
      int int1 = 125;
      int int2 = 224;
      char char0 = 'x';
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'v';
      jSONReaderScanner0.scanBoolean('v');
      charArray0[3] = '[';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'J';
      charArray0[2] = '5';
      charArray0[3] = '8';
      charArray0[4] = 'I';
      charArray0[5] = 'o';
      charArray0[6] = '[';
      charArray0[7] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 975);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(334);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}2@9/!^I}R'Fz<Y}=", (-1710));
      jSONScanner0.scanUUID('$');
      jSONScanner0.scanDecimal('{');
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '<';
      charArray0[7] = '$';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextToken(22);
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "null";
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[3];
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      charArray0[0] = ')';
      char[] charArray1 = new char[2];
      charArray1[0] = ')';
      charArray1[1] = ')';
      jSONScanner0.scanFieldFloatArray2(charArray1);
      charArray0[1] = 'R';
      jSONScanner0.scanNumber();
      charArray0[2] = '2';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanString('R');
      jSONScanner0.scanDate(':');
      Feature feature0 = Feature.AllowSingleQuotes;
      // Undeclared exception!
      jSONScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".}CmxnqBM_", 31);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".}CmxnqBM_", 0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x7d02Q,-f");
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      jSONReaderScanner0.isRef();
      charArray0[1] = 'v';
      charArray0[2] = '=';
      charArray0[3] = 'v';
      charArray0[4] = 'B';
      charArray0[5] = '[';
      SymbolTable symbolTable0 = new SymbolTable(2535);
      jSONReaderScanner0.addSymbol(2535, 2535, 1873, symbolTable0);
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1029, 848);
      jSONReaderScanner0.matchField(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(14, 14);
      assertTrue(jSONReaderScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'd';
      charArray0[2] = 'w';
      charArray0[3] = '-';
      charArray0[4] = '$';
      charArray0[5] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2565, 2565);
      boolean boolean0 = jSONReaderScanner0.isEnabled((-2080), 46);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals(2565, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 708, 2389);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-|>#N[Dux-B5:4UHo", 59);
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '[';
      charArray0[2] = '2';
      charArray0[3] = '@';
      jSONScanner0.scanDecimal('2');
      jSONScanner0.scanDecimal('>');
      charArray0[4] = 'J';
      charArray0[5] = 'Z';
      charArray0[6] = '&';
      charArray0[7] = 'E';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 90;
      JSONScanner jSONScanner0 = new JSONScanner("false", 90);
      char[] charArray0 = null;
      jSONScanner0.scanIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.intValue();
      jSONScanner0.putChar('b');
      jSONScanner0.scanInt('*');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 2469;
      JSONScanner jSONScanner0 = new JSONScanner("Set", 2469);
      jSONScanner0.eofPos = 2469;
      char char0 = 'S';
      jSONScanner0.scanBoolean('S');
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextToken(1559);
      Locale locale0 = new Locale("\":\"", "fGp]");
      locale0.clone();
      locale0.getDisplayVariant();
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")&AH(qB{", 58);
      jSONScanner0.charAt(58);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(58);
      jSONScanner0.scanEnum(class0, symbolTable0, '\u001A');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("LN");
      jSONScanner0.scanNumber();
      Locale locale0 = new Locale("P2ZYn4~tg");
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanLong('-');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '/';
      charArray0[0] = '/';
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117, 117);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 1259);
      jSONReaderScanner0.scanNullOrNew();
      char[] charArray0 = new char[8];
      char char0 = 'R';
      charArray0[0] = 'R';
      charArray0[1] = 'B';
      char char1 = '_';
      charArray0[2] = '_';
      char char2 = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'm';
      charArray0[5] = '+';
      char char3 = 'C';
      charArray0[6] = 'C';
      char char4 = ')';
      charArray0[7] = ')';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", (-652));
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.tokenName();
      char[] charArray1 = new char[7];
      charArray1[0] = 'B';
      charArray1[1] = 'B';
      charArray1[2] = 'T';
      jSONScanner0.np = 20;
      charArray1[3] = 'B';
      charArray1[4] = 'B';
      charArray1[5] = 'B';
      charArray1[6] = 'B';
      jSONScanner0.matchField(charArray1);
      jSONScanner0.eofPos = (-632);
      jSONScanner0.indexOf('B', 20);
      jSONScanner0.setToken((-652));
      Object[] objectArray0 = new Object[4];
      jSONScanner0.scanNumber();
      objectArray0[0] = (Object) 'B';
      char[] charArray2 = new char[9];
      charArray2[0] = 'B';
      charArray2[1] = 'B';
      charArray2[2] = 'T';
      charArray2[3] = 'T';
      charArray2[4] = 'T';
      charArray2[5] = 'T';
      charArray2[6] = 'T';
      charArray2[7] = 'B';
      charArray2[8] = 'B';
      jSONScanner0.scanFieldLong(charArray2);
      assertEquals(2, jSONScanner0.token());
      
      objectArray0[1] = (Object) 'B';
      objectArray0[2] = (Object) 'B';
      objectArray0[3] = (Object) 'B';
      jSONScanner0.lexError("true", objectArray0);
      char char0 = jSONScanner0.getCurrent();
      assertEquals('t', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = ']';
      int int0 = 760;
      int int1 = (-292);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 760, (-292));
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanLong('\"');
      char char0 = 't';
      int int2 = 10;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      stringReader0.ready();
      int int0 = 90;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 90);
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'L';
      charArray0[2] = ')';
      charArray0[3] = 'i';
      stringReader0.read(charArray0);
      jSONReaderScanner0.isRef();
      char char0 = ' ';
      jSONReaderScanner0.scanLong(' ');
      Locale locale0 = Locale.FRANCE;
      Locale.getISOCountries();
      jSONReaderScanner0.setLocale(locale0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'f';
      charArray0[3] = ';';
      charArray0[4] = ']';
      charArray0[5] = 'V';
      charArray0[6] = '3';
      charArray0[7] = 'E';
      charArray0[8] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 7);
      jSONReaderScanner0.scanInt('4');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1065);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nun");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = (-671);
      JSONScanner jSONScanner0 = new JSONScanner("\"FLDi*|r", (-671));
      char char0 = 'a';
      jSONScanner0.scanFloat('a');
      char char1 = 'l';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]", (-1105));
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      jSONScanner0.scanInt('3');
      jSONScanner0.scanType("]");
      charArray0[1] = '!';
      char char0 = 'f';
      charArray0[2] = 'f';
      jSONScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.KOREAN;
      jSONScanner0.locale = locale0;
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken((-1105));
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N9()q25@9$nhhJk~");
      jSONScanner0.charAt(551);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Cbj\"");
      SymbolTable symbolTable0 = new SymbolTable(18);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('\"', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NotWriteRootClassName");
      jSONScanner0.getLocale();
      jSONScanner0.isRef();
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jSONScanner0.calendar = calendar0;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(2550);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - N, info : pos 0, json : NotWriteRootClassName
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "_)|</UMrnC5/AIQf3";
      int int0 = 1476;
      JSONScanner jSONScanner0 = new JSONScanner("_)|</UMrnC5/AIQf3", 1476);
      char char0 = '7';
      jSONScanner0.scanType("&/`jy");
      jSONScanner0.scanFloat('7');
      jSONScanner0.setToken(8);
      jSONScanner0.getFeatures();
      jSONScanner0.matchStat = 8;
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.");
      char char0 = 'K';
      ArrayList<String> arrayList0 = new ArrayList<String>();
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      arrayList0.add("oracle.sql.");
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanStringArray(arrayList0, 'K');
      char char1 = 'c';
      jSONScanner0.scanIdent();
      jSONScanner0.close();
      char char2 = 'E';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<-3y");
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = 'k';
      charArray0[2] = 'L';
      charArray0[3] = 'V';
      charArray0[4] = '>';
      charArray0[5] = 'F';
      charArray0[6] = 'r';
      charArray0[7] = '\\';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.charAt(1201);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('\u0000');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '-';
      charArray0[2] = 'y';
      charArray0[3] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.util.ASMUtils");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      jSONReaderScanner0.sp = 41;
      charArray0[0] = '.';
      char char0 = '.';
      charArray0[1] = '.';
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      char char1 = '0';
      charArray0[2] = '0';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 65);
      SymbolTable symbolTable0 = new SymbolTable(65);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '!');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9rB*`YwFA", 26);
      jSONScanner0.scanStringArray((Collection<String>) null, 'C');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9rB*`YwFA", (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" e)sw=LDC O", (-422));
      char char0 = '0';
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      charArray0[7] = '0';
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match k - e, info : pos 1, json :  e)sw=LDC O
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Gy<#}");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanString(' ');
      charArray0[0] = ' ';
      charArray0[1] = 'M';
      charArray0[2] = 'Z';
      jSONReaderScanner0.charArrayCompare(charArray0);
      charArray0[3] = 'T';
      char char0 = 'G';
      jSONReaderScanner0.stringDefaultValue = "Qe4yd.1ma7~z:Yeg";
      charArray0[4] = 'G';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("0acgTrz^", (-2), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = '7';
      charArray0[2] = '`';
      charArray0[3] = '-';
      charArray0[4] = 'n';
      charArray0[5] = 'w';
      charArray0[6] = 'r';
      charArray0[7] = 'l';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 83);
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'I';
      charArray0[2] = 'L';
      charArray0[3] = 'A';
      charArray0[4] = 'y';
      charArray0[5] = 'i';
      charArray0[6] = '~';
      charArray0[7] = 'j';
      charArray0[8] = '2';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat(' ');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8:?jX~");
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 't';
      charArray0[2] = 'N';
      charArray0[3] = '8';
      charArray0[4] = 'k';
      SymbolTable symbolTable0 = new SymbolTable(46);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-398), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'D';
      charArray0[2] = 'n';
      charArray0[3] = '*';
      charArray0[4] = ';';
      charArray0[5] = 'D';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 5);
      jSONScanner0.nextIdent();
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(5, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[0];
      TimeZone.getTimeZone("illegal identifier : ");
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117, 117);
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tM7{zHK", 14);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'P';
      charArray0[2] = 'B';
      charArray0[3] = '\\';
      charArray0[4] = 'k';
      charArray0[5] = '9';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed");
      jSONScanner0.info();
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-1596));
      jSONReaderScanner0.charAt(0);
      assertEquals((-1596), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" KDFpI,");
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '.';
      charArray0[2] = 'R';
      charArray0[3] = ';';
      charArray0[4] = '-';
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('M');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 85, (-604));
      Locale locale0 = Locale.GERMANY;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.locale.getScript();
      Locale.setDefault(jSONReaderScanner0.locale);
      jSONReaderScanner0.locale.getDisplayName();
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFloat('9');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 9 - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str");
      jSONReaderScanner0.nextToken(1008);
      jSONReaderScanner0.setToken((-85));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-85));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'r';
      charArray0[2] = 'f';
      charArray0[3] = ';';
      charArray0[4] = ']';
      charArray0[5] = 'V';
      charArray0[6] = '3';
      charArray0[7] = 'E';
      charArray0[8] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 7);
      int int0 = jSONReaderScanner0.scanInt('4');
      assertEquals(4, int0);
      assertEquals(7, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-1798);
      JSONScanner jSONScanner0 = new JSONScanner("X*N,N", (-1798));
      int int1 = (-3623);
      jSONScanner0.scanFloat('a');
      jSONScanner0.setToken((-3623));
      jSONScanner0.matchStat();
      JSONLexerBase.isWhitespace('U');
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, false);
      int int2 = (-1398);
      int int3 = 4544;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "illegal identifier : ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(1078);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanNumber();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.matchField(charArray1);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      jSONReaderScanner0.nextToken(1078);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.sbuf = charArray1;
      char char0 = 'u';
      jSONReaderScanner0.scanDecimal('^');
      jSONReaderScanner0.scanInt('u');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1078, 1078);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.bytesValue();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONReaderScanner0.scanStringArray(set0, '<');
      jSONReaderScanner0.isEnabled(1078);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.stringDefaultValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = ']';
      int int0 = 760;
      int int1 = (-292);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 760, (-292));
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanLong('\"');
      char char0 = 't';
      int int2 = 10;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", (-2460));
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('.');
      int int0 = jSONScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 119);
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ");
      jSONScanner0.scanNumber();
      jSONScanner0.isBlankInput();
      jSONScanner0.scanDecimal('Y');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 100);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7uh#aQUG`5Q");
      Feature feature0 = Feature.AllowISO8601DateFormat;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'T';
      charArray0[0] = 'T';
      charArray0[1] = '~';
      char char1 = 'j';
      charArray0[2] = 'j';
      char char2 = '7';
      charArray0[3] = '7';
      char char3 = 'I';
      charArray0[4] = 'I';
      int int0 = 9960;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9960, 9960);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dFGHj!1rk/");
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '{';
      charArray0[2] = 'y';
      charArray0[3] = 'G';
      charArray0[4] = '?';
      charArray0[5] = 'd';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken((-824));
      jSONScanner0.bytesValue();
      assertEquals('F', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "PAIR";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PAIR");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - P, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 960);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'i';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'J';
      charArray0[2] = '5';
      charArray0[3] = '8';
      charArray0[4] = 'I';
      charArray0[6] = '[';
      charArray0[7] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 975);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(334);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m");
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanDecimal('`');
      jSONReaderScanner0.close();
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = ')';
      charArray0[4] = '`';
      int int0 = 4943;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 4943);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '\'';
      charArray0[2] = '=';
      charArray0[3] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      double double0 = jSONReaderScanner0.scanDouble('@');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str.lit");
      int int0 = 9976;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 9976);
      jSONReaderScanner0.scanDecimal('.');
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '.';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 65, (-570));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "M?y0KV4q91t/fz<C";
      JSONScanner jSONScanner0 = new JSONScanner("M?y0KV4q91t/fz<C");
      jSONScanner0.nextIdent();
      jSONScanner0.getTimeZone();
      int int0 = 9995;
      char char0 = '.';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false", (-1129));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken(934);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      char char0 = 'W';
      jSONReaderScanner0.putChar('W');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 9976);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$A)I\"");
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = '/';
      charArray0[8] = 'f';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('f', 'f', 'f');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '\\';
      charArray0[2] = 'I';
      charArray0[3] = 'm';
      charArray0[4] = 'P';
      charArray0[5] = '2';
      charArray0[6] = 'N';
      charArray0[7] = 'r';
      int int0 = 4253;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4253, 4253);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanLong('N');
      jSONReaderScanner0.indexOf('I', 9970);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2384));
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      jSONScanner0.resetStringPosition();
      charArray0[1] = '>';
      charArray0[2] = 'M';
      charArray0[3] = 'Q';
      charArray0[4] = '3';
      charArray0[5] = 'a';
      charArray0[6] = 'Q';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      char char0 = '9';
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect [, actual ", 582);
      jSONScanner0.longValue();
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '3';
      charArray0[2] = 'v';
      charArray0[3] = 'K';
      charArray0[4] = '3';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanUUID('l');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('v', '3', 'v');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = 1316;
      SymbolTable symbolTable0 = new SymbolTable(1316);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false", 332);
      jSONScanner0.charAt(332);
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(332, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 21, (-176));
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?13TF._Vqc<;F");
      jSONScanner0.scanBoolean('S');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('S', 'e', 'S');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'h';
      charArray0[2] = 'Z';
      charArray0[3] = '>';
      charArray0[4] = ')';
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.stringVal();
      int int0 = 9;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = 'S';
      jSONScanner0.intValue();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'J';
      charArray0[2] = '5';
      charArray0[3] = '8';
      charArray0[4] = 'I';
      charArray0[5] = 'o';
      charArray0[6] = '[';
      charArray0[7] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 975);
      boolean boolean0 = jSONReaderScanner0.isEnabled(334);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = " H>uH*lk!Cor(l3";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" H>uH*lk!Cor(l3");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qS1F4]Q`MawM2ym=");
      jSONReaderScanner0.scanNumber();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals('q', jSONReaderScanner0.getCurrent());
      
      charArray0[0] = '!';
      charArray0[1] = 't';
      charArray0[2] = 'H';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 44);
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.matchStat = 999;
      jSONScanner0.scanLong('*');
      assertEquals(44, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n?=!1M~c[LYAr#[PDZI", 9981);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "mD90b6R:^bv\"";
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '1';
      jSONReaderScanner0.sbuf = charArray0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) "n?=!1M~c[LYAr#[PDZI";
      objectArray0[4] = (Object) "n?=!1M~c[LYAr#[PDZI";
      jSONReaderScanner0.lexError("mD90b6R:^bv\"", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qS1F4]Q`MawM2ym=");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 't';
      charArray0[2] = 'H';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 44);
      jSONScanner0.scanISO8601DateIfMatch(true);
      int int0 = 999;
      jSONScanner0.matchStat = 999;
      jSONScanner0.scanLong('*');
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 708, 2389);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8r");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 8, info : pos 0, json : 8r
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'U';
      charArray0[2] = 'T';
      charArray0[3] = '5';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Feature feature0 = Feature.OrderedField;
      jSONReaderScanner0.config(feature0, false);
      JSONScanner jSONScanner0 = new JSONScanner(":gJXkx>");
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.bp = 0;
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qS1F4]Q`MawM2ym=");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 't';
      charArray0[2] = 'H';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 44);
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.matchStat = 999;
      jSONScanner0.scanLong('*');
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('}');
      SymbolTable symbolTable0 = new SymbolTable(3253);
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 3253, 3253);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3253
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$sXgo`-NvHw");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'W';
      charArray0[2] = 'H';
      charArray0[3] = '6';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 14;
      JSONScanner jSONScanner0 = new JSONScanner("(#jJm^LQ'J@MPlM^", 14);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 35;
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((String) null, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.getTimeZone();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", (-1826));
      char[] charArray0 = new char[5];
      jSONScanner0.nextToken();
      char[] charArray1 = new char[7];
      charArray1[0] = 'J';
      charArray1[1] = 'J';
      charArray1[2] = 'J';
      charArray1[3] = 'J';
      charArray1[4] = 'q';
      charArray1[5] = 'J';
      charArray1[6] = 'J';
      jSONScanner0.matchField(charArray1);
      jSONScanner0.scanFieldBoolean(charArray0);
      charArray0[0] = 'J';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      charArray0[3] = '!';
      charArray0[4] = 'p';
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!sq");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 's';
      charArray0[2] = 'J';
      charArray0[3] = 'm';
      JSONLexerBase.readString(charArray0, 3);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PsJ");
      jSONReaderScanner0.scanInt('\'');
      jSONReaderScanner0.nextToken(3);
      SymbolTable symbolTable0 = new SymbolTable(3);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '4');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(21);
      JSONScanner jSONScanner0 = new JSONScanner("PsJ");
      char[] charArray1 = new char[6];
      charArray1[0] = 's';
      charArray1[1] = 'J';
      charArray1[2] = '4';
      charArray1[3] = '4';
      charArray1[4] = 'm';
      charArray1[5] = 'm';
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONScanner0.scanDouble('J');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.putChar('4');
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal setter");
      jSONScanner0.scanType("illegal setter");
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
