/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:02:51 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(3145, 3145);
      charClass1.appendFoldedRange(950, 3145);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange((-1), (-1));
      int[][] intArray0 = new int[1][8];
      charClass0.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 42735;
      intArray1[1] = (-1326);
      intArray1[2] = (-1326);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 65332;
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(5302, 5302);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-961), 218);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[3][8];
      charClass0.appendTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1071, 1071);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[3][8];
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-306), (-306));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, (-306), (-306), 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass3 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 0, (-306), (-306), 0, 0}, intArray0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      intArray0[1] = (-675);
      intArray0[2] = 7294;
      intArray0[3] = 0;
      intArray0[4] = (-874);
      intArray0[5] = 0;
      intArray0[6] = 2277;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral((-1), (-1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass3 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(568, 568);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendLiteral(3622, (-4));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(3403, 3403);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(4, 1114111);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange(1114111, 1114111);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(4183, 4183);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange(4183, (-3991));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 2151);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(107, 107);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(4183, 4183);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[3][8];
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][3];
      int int0 = 604;
      charClass0.appendTableWithSign(intArray0, 604);
      charClass0.appendLiteral(int0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = (-1374);
      intArray0[3] = (-341);
      intArray0[4] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][8];
      charClass0.appendTable(intArray1);
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      charClass2.cleanClass();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClassWithSign(intArray0, (-504));
      int[][] intArray1 = new int[1][2];
      intArray1[0] = intArray0;
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][3];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-3618));
      charClass1.negateClass();
      charClass0.toArray();
      charClass0.negateClass();
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][3];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-3618));
      charClass0.appendLiteral((-1473), (-3080));
      int[] intArray1 = charClass0.toArray();
      CharClass charClass2 = new CharClass(intArray1);
      charClass1.appendNegatedTable(intArray0);
      charClass2.appendFoldedClass(intArray1);
      CharClass.charClassToString(intArray1, 4);
      charClass2.appendTableWithSign(intArray0, 294);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 8050;
      intArray0[2] = 1799;
      intArray0[3] = 3658;
      intArray0[4] = (-1326);
      intArray0[5] = 2441;
      intArray0[6] = (-444);
      intArray0[7] = 42739;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendFoldedRange(66640, 66640);
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 66640;
      intArray1[1] = 66640;
      intArray1[2] = 66640;
      intArray0[0] = intArray1;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray0, 66640);
      charClass3.appendRange(66640, 66640);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][3];
      charClass0.appendLiteral((-1473), (-3618));
      CharClass charClass1 = charClass0.appendLiteral((-1473), (-3080));
      int[] intArray1 = charClass0.toArray();
      CharClass charClass2 = charClass0.negateClass();
      CharClass charClass3 = charClass2.negateClass();
      charClass2.appendNegatedClass(intArray1);
      charClass3.appendNegatedTable(intArray0);
      charClass1.appendNegatedTable(intArray0);
      charClass2.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CharClass charClass0 = new CharClass();
          int[][] intArray0 = new int[9][8];
          int[] intArray1 = new int[3];
          intArray1[0] = 65307;
          intArray1[1] = 128540;
          intArray1[2] = 1234;
          // Undeclared exception!
          charClass0.appendFoldedClass(intArray1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 65317;
      intArray0[1] = 65317;
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      charClass0.appendNegatedTable(intArray1);
  }
}
