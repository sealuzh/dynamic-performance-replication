/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:47:07 GMT 2019
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(6, 6, 6);
      int int0 = 0;
      basic1DMatrix0.copyOfShape(0, 6);
      basic1DMatrix0.trace();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byte byte1 = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 498;
      int int1 = (-1670);
      basic1DMatrix0.swapRows(498, (-1670));
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("Can not compute determinant of non-square matrix.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 4;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(4);
      Basic1DMatrix.unit(1827, 4);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      Basic1DMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(834, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(1, 0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(3, 195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.copyOfShape(1393, 29);
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit((-55), 2403);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      basic1DMatrix0.swapRows(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1607);
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray((-1607), 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1607x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(794);
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(794, basic1DMatrix0.columns());
      assertEquals(794, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(508L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(40, 40, mockRandom0);
      basic1DMatrix0.toRowVector();
      int int0 = (-370);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape((-370), (-370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -370x-370
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(349, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(349, 349);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix0, basic1DMatrix0, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 0, doubleArray0);
      DenseMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(0, 7, mockRandom0);
      basic1DMatrix0.setAll(530.5870626474);
      assertArrayEquals(new double[] {530.5870626474, 530.5870626474, 530.5870626474}, doubleArray0, 0.01);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      int int0 = 210;
      basic1DMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-486);
      // Undeclared exception!
      try { 
        Basic1DMatrix.identity((-486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -486x-486
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 9984;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4698;
      doubleArray0[1] = (double) 4698;
      doubleArray0[2] = 2377.1115903500063;
      doubleArray0[3] = (double) 9984;
      doubleArray0[4] = (double) 9984;
      doubleArray0[5] = (double) 4698;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(9984, 4698, doubleArray0);
      org.evosuite.runtime.Random.setNextRandom(9984);
      basic1DMatrix0.toBinary();
      Basic1DMatrix.diagonal(0, 9984);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)112;
      byteArray0[0] = (byte)112;
      byte byte1 = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byte byte2 = (byte)13;
      byteArray0[2] = (byte)13;
      byte byte3 = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byte byte4 = (byte)28;
      byteArray0[4] = (byte)28;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapColumns(10, (-2620));
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 9;
      int int1 = 219;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(9, 219);
      basic1DMatrix0.trace();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = 9.0;
      Matrix.from1DArray(9, 9, doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '220' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 214;
      basic1DMatrix0.swapColumns(214, 214);
      int int1 = (-2642);
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero(214, (-2642));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(3298, 4);
      assertEquals(4, basic1DMatrix0.columns());
      assertEquals(3298, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 3298;
      doubleArray2[1] = (double) 4;
      doubleArray2[2] = (double) 3298;
      doubleArray2[3] = (double) 3298;
      doubleArray2[4] = (double) 4;
      doubleArray2[5] = (double) 4;
      doubleArray2[6] = (double) 4;
      doubleArray2[7] = (double) 4;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1082.826692541);
      doubleArray3[1] = (double) 3298;
      doubleArray3[2] = (double) 4;
      doubleArray3[3] = (double) 3298;
      doubleArray3[4] = (double) 4;
      doubleArray3[5] = (double) 4;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1082.826692541);
      doubleArray4[1] = (-1082.826692541);
      doubleArray4[2] = (double) 4;
      doubleArray4[3] = (double) 3298;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (double) 4;
      doubleArray4[6] = (double) 4;
      doubleArray4[7] = (double) 3298;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 4;
      doubleArray5[2] = (double) 3298;
      doubleArray5[3] = (double) 4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1082.826692541);
      doubleArray6[2] = (double) 3298;
      doubleArray6[3] = (double) 4;
      doubleArray6[4] = (double) 3298;
      doubleArray0[5] = doubleArray6;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(6, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 224;
      Basic1DMatrix.diagonal(224, 224);
      int int1 = (-1421);
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) 224, 2609, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("org.la4j.LinearAlgebra$DecompositorFactory");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      int int0 = 807;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(807, 807);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, (DenseMatrix) basic1DMatrix0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(matrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
      matrix0.toColumnVector();
      MockRandom mockRandom0 = new MockRandom(1000L);
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix2, basic1DMatrix1, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      int int0 = (-1033);
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeRow((-1033));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-407);
      org.evosuite.runtime.Random.setNextRandom((-407));
      Basic1DMatrix basic1DMatrix0 = null;
      try {
        basic1DMatrix0 = new Basic1DMatrix((-407), (-407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -407x-407
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 631;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(631, 631);
      int int1 = 210;
      basic1DMatrix0.copyOfShape(631, 210);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(631, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 398161
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1894;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(1549);
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        Basic1DMatrix.random((-1686), 1894, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = (-1);
      int int1 = 37;
      // Undeclared exception!
      try { 
        DenseMatrix.unit((-1), 37);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.copyOfShape(1393, 0);
      assertEquals(1393, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 2335.59;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(1, 1, doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      ooPlaceOuterProduct0.partiallyApply(sparseVector0);
      SparseVector sparseVector1 = SparseVector.fromMap(hashMap0, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseVector1.transform(vectorFunction0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector1, sparseVector1);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom(869);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(1, 869, (double) 1, (Random) mockRandom0);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (DenseMatrix) basic1DMatrix0);
      Matrix.block(matrix1, basic1DMatrix0, basic1DMatrix0, matrix0);
      basic1DMatrix0.insert(matrix0);
      org.evosuite.runtime.Random.setNextRandom(1);
      Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.toBinary();
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 452;
      int int1 = 276;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      // Undeclared exception!
      Basic1DMatrix.random(452, 276, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-2083);
      int int1 = 0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.unit((-2083), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2083x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      basic1DMatrix0.diagonalProduct();
      basic1DMatrix0.fold(matrixAccumulator0);
      basic1DMatrix0.toDenseMatrix();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(2, 2);
      assertEquals(2, basic1DMatrix1.columns());
      assertEquals(2, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(13, mockRandom0);
      int int0 = 32;
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(32, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 416
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
