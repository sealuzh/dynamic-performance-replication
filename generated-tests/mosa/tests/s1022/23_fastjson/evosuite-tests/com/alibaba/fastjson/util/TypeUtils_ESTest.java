/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:40:22 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Clock;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayDeque;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("float", (ClassLoader) aSMClassLoader0);
      InstantiationError instantiationError0 = new InstantiationError();
      MockFile mockFile0 = new MockFile("create instance error, class ", "}.NzkN4(|E");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "}.NzkN4(|E");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // }.NzkN4(|E
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.lang.AutoCloseable");
      Locale locale0 = TypeUtils.toLocale("L");
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Byte> class0 = Byte.class;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isHibernateInitialized("gvK");
      TypeUtils.castToBytes("gvK");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("gvK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : gvK
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("6U_F7]b3WXlCd Z7[)");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Class<Properties> class0 = Properties.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "[|.Qn";
      TypeUtils.fnv1a_64("[|.Qn");
      TypeUtils.decapitalize("[|.Qn");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("[|.Qn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : [|.Qn
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      String string0 = "Vo\"xxCrghPF,,";
      TypeUtils.decapitalize("Vo\"xxCrghPF,,");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = TypeUtils.decapitalize(";Ss");
      assertEquals(";Ss", string0);
      
      Class<InternalError> class0 = InternalError.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.decapitalize("3a?t}S7");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("3a?t}S7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(";G?;!R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ;G?;!R
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.fnv1a_64("[|.|&n");
      Class<ClassLoader> class0 = ClassLoader.class;
      int int0 = Calendar.ERA;
      Class<NumberFormat> class1 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(10, list0.size());
      
      MockDate mockDate0 = new MockDate();
      Class<Float> class1 = Float.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<TimeUnit> class0 = TimeUnit.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaObjectDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, String> hashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToBoolean((Object) null);
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONType0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.getParserFeatures(class0);
      Class<ClassLoader> class1 = ClassLoader.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TypeUtils.fnv1a_64_lower("6U_F7]b3WXlCd Z7[)");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Boolean boolean0 = new Boolean("fastjson.parser.autoTypeSupport");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [calendarType, firstDayOfWeek, lenient, minimalDaysInFirstWeek, time, timeInMillis, timeZone, weekDateSupported, weekYear, weeksInWeekYear]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char char0 = JSONLexer.EOI;
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      assertNotNull(type0);
      
      Type type1 = TypeUtils.unwrapOptional(class0);
      assertNotSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.isHibernateInitialized("gvK");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.Object@70ffed04
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("", (ClassLoader) aSMClassLoader0);
      TypeUtils.loadClass("");
      TypeUtils.castToInt((Object) null);
      long long0 = TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.util.ASMUtils");
      assertEquals(8803372610994367866L, long0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.loadClass("L;x?G?Sk!@R");
      TypeUtils.castToInt((Object) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "L;x?G?Sk!@R";
      TypeUtils.loadClass("L;x?G?Sk!@R");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("L;x?G?Sk!@R", "n^7ITt419N");
      TypeUtils.toLocale("L;x?G?Sk!@R");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : SECONDS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.loadClass("sc[kt");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Class<?> class0 = TypeUtils.getClass(type0);
      Double.valueOf((-2547.1293840450176));
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.decapitalize("");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      TypeUtils.castToByte((Object) null);
      Class<InternalError> class0 = InternalError.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = new Boolean("");
      TypeUtils.castToTimestamp("");
      TypeUtils.fnv1a_64_lower("Lorg.springframework.util.LinkedMultiValueMap");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Class<Properties> class0 = Properties.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Collection collection0 = new ArrayDeque<InstantiationError>();
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.loadClass("`:Z%,;v`hsKkN", (ClassLoader) null);
      Constructor<LinkageError>[] constructorArray0 = (Constructor<LinkageError>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) "`:Z%,;v`hsKkN", class0);
      assertNotNull(string0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.decapitalize(":h/'oLdrb/yvtTS");
      TypeUtils.castToByte((Object) null);
      Class<Properties> class1 = Properties.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.keys();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(hashtable0);
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Double double0 = TypeUtils.castToDouble(bigDecimal0);
      assertEquals((-1.478777995E9), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char char0 = File.pathSeparatorChar;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("M5C+s;$", classLoader0);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      TypeUtils.castToByte((Object) null);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "oracle.sql.DATE");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass(";x?G?Sk!@R", classLoader0);
      TypeUtils.getGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(";x?G?Sk!@R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : ;x?G?Sk!@R
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hashtable<DecimalFormatSymbols, SQLTimeoutException> hashtable0 = new Hashtable<DecimalFormatSymbols, SQLTimeoutException>();
      TypeUtils.castToByte((Object) null);
      boolean boolean0 = TypeUtils.isHibernateInitialized(hashtable0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.fnv1a_64("[|.|&n");
      TypeUtils.decapitalize("[|.|&n");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("er9q", treeMap0);
      ParserConfig.getFieldFromCache("[|.|&n", treeMap0);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "o", fieldArray0);
      Class<Method> class1 = Method.class;
      FieldInfo fieldInfo0 = new FieldInfo("getName", class1, class1, class0, (Field) null, 3073, (-1058), 111);
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Byte byte0 = new Byte((byte)17);
      Type[] typeArray0 = new Type[1];
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      typeArray0[0] = type0;
      TypeUtils.getClassFromMapping("fastjson.parser.autoTypeSupport");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byte0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@cd9e24fc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.castToString("{Ss");
      MockDate mockDate0 = new MockDate(0, 0, 0, 261, 261);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : Thu Jan 11 01:21:00 GMT 1900
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";?G?!sR";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      TypeUtils.fnv1a_64_lower("r8sm");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.loadClass("L;x?G?Sk!@R");
      TypeUtils.castToInt((Object) null);
      TypeUtils.fnv1a_64_lower("n^7ITt419N");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.castToShort((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.fnv1a_64("[|.|&n");
      TypeUtils.decapitalize("[|.|&n");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl>();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) concurrentHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<TimeUnit> class0 = TimeUnit.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Constructor<SimpleTimeZone>[] constructorArray0 = (Constructor<SimpleTimeZone>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap1, propertyNamingStrategy0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.decapitalize("Z");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap1, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.decapitalize("{Ss");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("K,exa``5sdq_)8X/4pp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K,exa``5sdq_)8X/4pp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.isGenericParamType((Type) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Byte byte0 = new Byte((byte)16);
      Type[] typeArray0 = new Type[1];
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      typeArray0[0] = type0;
      TypeUtils.getClassFromMapping("fastjson.parser.autoTypeSupport");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, (Type) null);
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byte0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@fb439ee
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      TypeUtils.castToTimestamp((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TypeUtils.isKotlin(class1);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(hashtable0);
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashMap0, (Map<String, Field>) hashtable1, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("$^5[lYc=Ti");
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Throwable> class0 = Throwable.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Properties properties0 = new Properties();
      properties0.keySet();
      parserConfig0.configFromPropety(properties0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "$^5[lYc=Ti", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Throwable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("L;x?G?Sk!@R");
      assertNull(class0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Insets insets0 = new Insets(1857, 1037, 1122, 1037);
      assertNotNull(insets0);
      assertEquals(1122, insets0.bottom);
      assertEquals(1857, insets0.top);
      assertEquals(1037, insets0.left);
      assertEquals(1037, insets0.right);
      
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      TypeNotPresentException typeNotPresentException0 = TypeUtils.castToJavaBean((Object) "", class1);
      assertNull(typeNotPresentException0);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("L;x?G?Sk!@R");
      assertEquals("L;x?G?Sk!@R", illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError: L;x?G?Sk!@R", illegalAccessError0.toString());
      assertNotNull(illegalAccessError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(illegalAccessError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("L;x?G?Sk!@R");
      assertEquals("L;x?G?Sk!@R", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: L;x?G?Sk!@R", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchMethodError: L;x?G?Sk!@R
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      Class<?> class0 = TypeUtils.getClassFromMapping("componentType");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("componentType");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"componentType\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentRemove("*Fvd/");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("*Fvd/");
      assertNull(class1);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) genericArrayType0;
      typeArray0[4] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], type0);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<?> class2 = TypeUtils.loadClass("$VALUES");
      assertNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "*Fvd/", (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@679b811f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError("ch");
      assertEquals("ch", instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError: ch", instantiationError0.toString());
      assertNotNull(instantiationError0);
      
      ConcurrentHashMap<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ch", (String) null, instantiationError0);
      assertEquals("ch", instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError: ch", instantiationError0.toString());
      assertEquals("ch", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ch", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      instantiationError0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("ch", instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError: ch", instantiationError0.toString());
      assertEquals("ch", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ch", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*Fvd/";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("*Fvd/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : *Fvd/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) ")/", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      Class<InternalError> class0 = InternalError.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "ch";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("ch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ch
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("n^7ITt419N");
      assertEquals(2889067461153739561L, long0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.castToString("n^7ITt419N");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "EX#roP/=\\ c+)";
      Class<?> class0 = TypeUtils.loadClass("EX#roP/= c+)");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("L;x?G?Sk!@R");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L;x?G?Sk!@R\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bl nbNg&<o:Ut=");
      assertFalse(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Long long0 = Long.valueOf((-605L));
      assertEquals((-605L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-605.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(")^B9u_7E2.l{Q'");
      assertEquals(")^B9u_7E2.l{Q'", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_WEEK_DATE;
      assertNotNull(dateTimeFormatter0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Long long1 = Long.getLong(")^B9u_7E2.l{Q'", 571L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(571L, (long)long1);
      assertNotNull(long1);
      
      Integer integer0 = TypeUtils.castToInt(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(571, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("|.|,");
      assertEquals((-8979445174351383201L), long0);
      
      String string0 = TypeUtils.decapitalize("|.|,");
      assertEquals("|.|,", string0);
      assertNotNull(string0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      Class<String> class0 = String.class;
      String string1 = TypeUtils.castToJavaBean((Object) mockNullPointerException0, class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<Method> class1 = Method.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils.clearClassMapping();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      String string0 = TypeUtils.decapitalize("getMetaClass");
      assertEquals("getMetaClass", string0);
      assertNotNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertSame(parserConfig1, parserConfig0);
      
      parserConfig1.clearDeserializers();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertSame(parserConfig1, parserConfig0);
      
      ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getMetaClass", class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getMetaClass\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("BETWEEN", classLoader1, true);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertNull(class0);
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(classLoader1, classLoader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("BETWEEN");
      assertNull(class1);
      
      boolean boolean2 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = Long.valueOf((-605L));
      assertEquals((-605L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-605.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = "com.alibaba.fastjson.serializer.BooleanCodec";
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockThread mockThread0 = new MockThread("com.alibaba.fastjson.serializer.BooleanCodec");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      mockThread0.run();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.BooleanCodec", classLoader0, false);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class com.alibaba.fastjson.serializer.BooleanCodec", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class com.alibaba.fastjson.serializer.BooleanCodec", class0.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.alibaba.fastjson.serializer.BooleanCodec", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Locale locale0 = TypeUtils.toLocale("com.alibaba.fastjson.serializer.BooleanCodec");
      assertEquals("com.alibaba.fastjson.serializer.booleancodec", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("com.alibaba.fastjson.serializer.booleancodec", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      int int0 = TypeUtils.getParserFeatures(class2);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "com.alibaba.fastjson.serializer.BooleanCodec", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Long long0 = Long.valueOf((-605L));
      assertEquals((-605L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-605.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = TypeUtils.decapitalize(":h/'oLdrb/yvtTS");
      assertEquals(":h/'oLdrb/yvtTS", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("_~9R6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_~9R6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      String string0 = TypeUtils.decapitalize("Vno\"xxCrghPF,,");
      assertEquals("vno\"xxCrghPF,,", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+md~L#CS=");
      assertFalse(boolean0);
      
      Hashtable<DecimalFormatSymbols, SQLTimeoutException> hashtable0 = new Hashtable<DecimalFormatSymbols, SQLTimeoutException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<Annotation> class0 = Annotation.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(")_/JO:I;t3#(6DCO:P");
      assertEquals(")_/JO:I;t3#(6DCO:P", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Class<Method> class1 = Method.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      Random.setNextRandom(22);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "EX#roP/=\\ c+)";
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertNotNull(gridBagConstraints0);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals((-1), gridBagConstraints0.gridy);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.GridBagConstraints@36fd91b1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentRemove("*Fvd/");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotNull(jSONObject1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JobAttributes jobAttributes0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, parserConfig0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes0.getCopies());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getPrinter());
      assertNotNull(jobAttributes0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.ParserConfig@24f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("[|.|&n");
      assertEquals(4105196719881197212L, long0);
      
      String string0 = TypeUtils.decapitalize("[|.|&n");
      assertEquals("[|.|&n", string0);
      assertNotNull(string0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("[|.|&n", treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(field0);
      
      Field field1 = ParserConfig.getFieldFromCache("[|.|&n", treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(field1);
      
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Field[] fieldArray0 = new Field[0];
      Field field2 = TypeUtils.getField(class0, "[|.|&n", fieldArray0);
      assertNull(field2);
      
      Class<Method> class1 = Method.class;
      FieldInfo fieldInfo0 = new FieldInfo("getName", class1, class1, class0, (Field) null, 3068, 103, 103);
      assertEquals("getName", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      assertEquals(103, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(103, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<Short> class0 = Short.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class [S", class1.toString());
      assertNotNull(class1);
      
      Set<Map.Entry<String, Field>> set0 = (Set<Map.Entry<String, Field>>)weakHashMap0.entrySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        Date.valueOf("3W[A(_#n-X(V&{+$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      long long0 = TypeUtils.fnv1a_64("LE");
      assertEquals(655664105523207978L, long0);
      
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("Lorg.springframework.util.LinkedMultiValueMap", 38);
      assertEquals(45, stringCharacterIterator0.getEndIndex());
      assertEquals(38, stringCharacterIterator0.getIndex());
      assertEquals('a', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertNotNull(stringCharacterIterator0);
      
      char char0 = stringCharacterIterator0.first();
      assertEquals('L', char0);
      assertEquals(45, stringCharacterIterator0.getEndIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals('L', stringCharacterIterator0.current());
      
      stringCharacterIterator0.setText("LE");
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(2, stringCharacterIterator0.getEndIndex());
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals('L', stringCharacterIterator0.current());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LE";
      stringArray0[1] = "LE";
      stringArray0[2] = "Ljava.util.concurrent.ConcurrentSkipListMap";
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Collection collection0 = TypeUtils.createCollection(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(collection0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "scanInt";
      String string1 = "tr";
      boolean boolean0 = TypeUtils.isNumber("tr");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("tr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : tr
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentRemove(propertyNamingStrategy0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotNull(jSONObject1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      JobAttributes jobAttributes0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, (ParserConfig) null);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes0.getCopies());
      assertNull(jobAttributes0.getPrinter());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNotNull(jobAttributes0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("scanInt");
      assertNull(class0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Class<SQLDataException> class3 = SQLDataException.class;
      boolean boolean0 = TypeUtils.isPath(class3);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<MockJapaneseDate> class4 = MockJapaneseDate.class;
      boolean boolean1 = TypeUtils.isProxy(class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = TypeUtils.isKotlin(class4);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<NegativeArraySizeException> class5 = NegativeArraySizeException.class;
      Class<RuleBasedCollator> class6 = RuleBasedCollator.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class6, "fastjson.compatibleWithFieldName", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("scanInt", class5, class5, class1, (Field) null, 835, 15, 11);
      assertNull(fieldInfo0.getFormat());
      assertEquals("scanInt", fieldInfo0.toString());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(fieldInfo0);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(11, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("scanInt", fieldInfo0.toString());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("", beanContext0.getLabel());
      assertEquals(15, beanContext0.getFeatures());
      assertEquals("scanInt", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertNotNull(beanContext0);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(11, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      
      Method method0 = beanContext0.getMethod();
      assertNull(fieldInfo0.getFormat());
      assertEquals("scanInt", fieldInfo0.toString());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("", beanContext0.getLabel());
      assertEquals(15, beanContext0.getFeatures());
      assertEquals("scanInt", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertNull(method0);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(11, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      
      boolean boolean3 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = Long.valueOf((-605L));
      assertEquals((-605L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-605.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(")^B9u_7E2.l{Q'");
      assertEquals(")^B9u_7E2.l{Q'", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, ")^B9u_7E2.l{Q'");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals(")^B9u_7E2.l{Q'", threadGroup0.getName());
      assertEquals(")^B9u_7E2.l{Q'", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread(threadGroup1, ")^B9u_7E2.l{Q'");
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals(")^B9u_7E2.l{Q'", threadGroup0.getName());
      assertEquals(")^B9u_7E2.l{Q'", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      Date date0 = TypeUtils.castToSqlDate(byte0);
      assertNotNull(date0);
      
      Class<Rectangle> class0 = Rectangle.class;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      AtomicLong atomicLong0 = new AtomicLong((-605L));
      assertEquals((-605L), atomicLong0.get());
      assertEquals((short) (-605), atomicLong0.shortValue());
      assertEquals((-605L), atomicLong0.longValue());
      assertEquals((-605.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-605), atomicLong0.intValue());
      assertEquals("-605", atomicLong0.toString());
      assertEquals((-605.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-93), atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<Collator> class0 = Collator.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.Collator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Insets insets0 = new Insets((-2279), 95, 24, 38);
      assertNotNull(insets0);
      assertEquals(24, insets0.bottom);
      assertEquals(95, insets0.left);
      assertEquals((-2279), insets0.top);
      assertEquals(38, insets0.right);
      
      insets0.left = 50;
      Insets insets1 = (Insets)insets0.clone();
      assertTrue(insets1.equals((Object)insets0));
      assertNotNull(insets1);
      assertEquals(24, insets0.bottom);
      assertEquals(50, insets0.left);
      assertEquals((-2279), insets0.top);
      assertEquals(38, insets0.right);
      assertEquals((-2279), insets1.top);
      assertEquals(24, insets1.bottom);
      assertEquals(50, insets1.left);
      assertEquals(38, insets1.right);
      assertNotSame(insets0, insets1);
      assertNotSame(insets1, insets0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(linkedHashMap1);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) linkedHashMap1, false, propertyNamingStrategy0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertNotNull(ruleBasedCollator0);
      
      Class<Object> class1 = Object.class;
      RuleBasedCollator ruleBasedCollator1 = (RuleBasedCollator)TypeUtils.castToJavaBean((Object) ruleBasedCollator0, class1);
      assertEquals(2, ruleBasedCollator0.getStrength());
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator1.getStrength());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator1.getRules());
      assertEquals(0, ruleBasedCollator1.getDecomposition());
      assertNotNull(ruleBasedCollator1);
      assertSame(ruleBasedCollator0, ruleBasedCollator1);
      assertSame(ruleBasedCollator1, ruleBasedCollator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Insets insets0 = new Insets((-2279), 95, 24, 24);
      assertNotNull(insets0);
      assertEquals(24, insets0.right);
      assertEquals((-2279), insets0.top);
      assertEquals(95, insets0.left);
      assertEquals(24, insets0.bottom);
      
      ThreadGroup threadGroup0 = new ThreadGroup("_Vcg/e6FPvX.w0");
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "H o&6bPEq3M(VC[", (-2279));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, (Runnable) null);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(classLoader0);
      assertNotSame(mockThread1, mockThread0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      mockThread0.setContextClassLoader(aSMClassLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      
      MockThread mockThread2 = new MockThread(mockThread0, "org.springframework.util.LinkedCaseInsensitiveMap");
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(classLoader1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      
      Class<?> class0 = TypeUtils.loadClass("java.util.concurrent.ConcurrentSkipListSet", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.util.concurrent.ConcurrentSkipListSet", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      
      Class<Short> class1 = Short.TYPE;
      assertEquals("short", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertEquals("short", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNull(type0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("H o&6bPEq3M(VC[");
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: H o&6bPEq3M(VC[", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("H o&6bPEq3M(VC[", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = null;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, typeArray0[1]);
      assertEquals("short", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"bottom\":24,\"left\":95,\"right\":24,\"top\":-2279}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Time time0 = TypeUtils.castToSqlTime(stringArray0[0]);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.put(" !Z]\"y0\"", " !Z]\"y0\"");
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Integer integer0 = Integer.getInteger("Ljava.awt.Rectangle", (Integer) null);
      assertNull(integer0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long long0 = Long.valueOf((-605L));
      assertEquals((-605L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-605.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("com.alibaba.fastjson.serializer.BooleanCodec");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      Thread[] threadArray0 = new Thread[2];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.BooleanCodec", classLoader0, true);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertEquals("class com.alibaba.fastjson.serializer.BooleanCodec", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertNotNull(class0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Thread[com.alibaba.fastjson.serializer.BooleanCodec,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.max(0.0, 1.0);
      assertEquals(1.0, double1, 0.01);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals("1970-01-01 00:00:00.001", timestamp0.toString());
      assertEquals(1000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Double double0 = Double.valueOf(2568.44301);
      assertEquals(2568.44301, (double)double0, 0.01);
      assertNotNull(double0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(double0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Time time0 = TypeUtils.castToSqlTime(double0);
      assertEquals("00:00:02", time0.toString());
      assertNotNull(time0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Type[] typeArray0 = new Type[15];
      Class<?> class0 = TypeUtils.loadClass("^e^{");
      assertNull(class0);
      
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = TypeUtils.decapitalize("^e^{");
      assertEquals("^e^{", string0);
      assertNotNull(string0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      String string1 = type0.getTypeName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.getClass(type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError("H)zWhiKaK'I0gbN:S");
      assertEquals("H)zWhiKaK'I0gbN:S", instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError: H)zWhiKaK'I0gbN:S", instantiationError0.toString());
      assertNotNull(instantiationError0);
      
      ConcurrentHashMap<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<Field> class0 = Field.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H)zWhiKaK'I0gbN:S";
      stringArray0[1] = "M~";
      stringArray0[2] = "M~";
      stringArray0[3] = "M~";
      stringArray0[4] = "H)zWhiKaK'I0gbN:S";
      stringArray0[5] = "listContext";
      stringArray0[6] = "M~";
      stringArray0[7] = "M~";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      Class<Field> class1 = Field.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1);
      assertFalse(javaBeanSerializer1.equals((Object)javaBeanSerializer0));
      assertNotNull(javaBeanSerializer1);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertFalse(javaBeanSerializer0.equals((Object)javaBeanSerializer1));
      assertEquals("class java.lang.reflect.Field", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      assertSame(class0, class1);
      assertNotSame(javaBeanSerializer0, javaBeanSerializer1);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      byte[] byteArray0 = TypeUtils.castToBytes("M~");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Locale locale0 = TypeUtils.toLocale("M~");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("m~", locale0.toString());
      assertEquals("m~", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = TypeUtils.toLocale("NTM_Bk(");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("BK(", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ntm", locale1.getLanguage());
      assertEquals("ntm_BK(", locale1.toString());
      assertEquals("ntm", locale1.getISO3Language());
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class2.equals((Object)class1));
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      
      WeakHashMap<NumberFormatException, NoSuchMethodException> weakHashMap1 = new WeakHashMap<NumberFormatException, NoSuchMethodException>();
      assertNotNull(weakHashMap1);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      ThreadGroup threadGroup0 = new ThreadGroup("UTF-8");
      assertEquals("UTF-8", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup("fastjson.parser.deny");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("fastjson.parser.deny", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "fastjson.parser.deny");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertEquals("fastjson.parser.deny", threadGroup1.getName());
      assertEquals("fastjson.parser.deny", threadGroup2.getName());
      assertNotNull(threadGroup2);
      
      Insets insets0 = new Insets(4089, 28, (-2048195210), 28);
      assertNotNull(insets0);
      assertEquals(28, insets0.right);
      assertEquals(4089, insets0.top);
      assertEquals(28, insets0.left);
      assertEquals((-2048195210), insets0.bottom);
      
      Insets insets1 = (Insets)insets0.clone();
      assertTrue(insets1.equals((Object)insets0));
      assertNotNull(insets1);
      assertEquals(28, insets0.right);
      assertEquals(4089, insets0.top);
      assertEquals(28, insets0.left);
      assertEquals((-2048195210), insets0.bottom);
      assertEquals(28, insets1.left);
      assertEquals((-2048195210), insets1.bottom);
      assertEquals(28, insets1.right);
      assertEquals(4089, insets1.top);
      assertNotSame(insets0, insets1);
      assertNotSame(insets1, insets0);
      
      Integer integer0 = new Integer((-1073741823));
      assertEquals((-1073741823), (int)integer0);
      assertNotNull(integer0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Short short0 = TypeUtils.castToShort(integer0);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Constructor<LinkageError>[] constructorArray0 = (Constructor<LinkageError>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, ParameterizedTypeImpl>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Byte byte0 = new Byte((byte)17);
      assertEquals((byte)17, (byte)byte0);
      assertNotNull(byte0);
      
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class [Z", class1.toString());
      assertNotNull(class1);
      
      typeArray0[0] = (Type) class1;
      Class<?> class2 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeSupport");
      assertNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class [Z", class1.toString());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byte0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@16d17ebb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char char0 = JSONLexer.EOI;
      assertEquals('\u001A', char0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(string0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      AtomicLong atomicLong0 = new AtomicLong(0);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      Byte byte0 = TypeUtils.castToByte(atomicLong0);
      assertEquals((byte)0, (byte)byte0);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.longValue());
      assertNotNull(byte0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("/417");
      assertNull(class0);
      
      Random.setNextRandom((-4274));
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/417");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isKotlin((Class) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Random.setNextRandom(1428);
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<SQLWarning> class1 = SQLWarning.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      NavigableMap<String, Field> navigableMap0 = treeMap0.subMap("+&o@8tn5\\C&,Ic", false, "-", false);
      assertEquals(0, treeMap0.size());
      assertTrue(navigableMap0.isEmpty());
      assertEquals(0, navigableMap0.size());
      assertNotNull(navigableMap0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("D6?\u0004YQpaT<cAe-", "D6?\u0004YQpaT<cAe-", sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("D6?\u0004YQpaT<cAe-", sQLWarning0.getMessage());
      assertEquals("D6?\u0004YQpaT<cAe-", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: D6?\u0004YQpaT<cAe-", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      Locale locale0 = TypeUtils.toLocale("d<&X_m:S");
      assertEquals("M:S", locale0.getCountry());
      assertEquals("d<&x_M:S", locale0.toString());
      assertEquals("d<&x", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Class<Float> class2 = Float.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("-");
      assertNotNull(mockIllegalAccessException0);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class2);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("Z1V`V", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("Primitive", class0, class0, class0, (Field) null, (-1472), 158, (-3683));
      assertEquals("Primitive", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      assertEquals(158, fieldInfo0.serialzeFeatures);
      assertEquals((-3683), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertEquals("Primitive", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals(158, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("Primitive", beanContext0.getName());
      assertNotNull(beanContext0);
      assertEquals(158, fieldInfo0.serialzeFeatures);
      assertEquals((-3683), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanContext0.getAnnation(class1);
      assertEquals("Primitive", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals(158, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("Primitive", beanContext0.getName());
      assertNull(annotation0);
      assertEquals(158, fieldInfo0.serialzeFeatures);
      assertEquals((-3683), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      Class<?> class2 = beanContext0.getFieldClass();
      assertEquals("Primitive", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals(158, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("Primitive", beanContext0.getName());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.text.SimpleDateFormat", class2.toString());
      assertNotNull(class2);
      assertEquals(158, fieldInfo0.serialzeFeatures);
      assertEquals((-3683), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertEquals("Primitive", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals(158, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("Primitive", beanContext0.getName());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.text.SimpleDateFormat", class2.toString());
      assertNull(type0);
      assertEquals(158, fieldInfo0.serialzeFeatures);
      assertEquals((-3683), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      
      ThreadGroup threadGroup0 = new ThreadGroup(")_]JO:I;t3#(6DCO:4");
      assertEquals(")_]JO:I;t3#(6DCO:4", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, ")_]JO:I;t3#(6DCO:4");
      assertEquals(")_]JO:I;t3#(6DCO:4", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(")_]JO:I;t3#(6DCO:4", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "(FZ)V", 1L);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(")_]JO:I;t3#(6DCO:4", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(")_]JO:I;t3#(6DCO:4", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(")_]JO:I;t3#(6DCO:4", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Class<SQLException> class3 = SQLException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class3);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertEquals(")_]JO:I;t3#(6DCO:4", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(throwableDeserializer0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      long long0 = new Integer((-1472));
      assertEquals((-1472), long0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Boolean boolean0 = new Boolean(")_]JO:I;t3#(6DCO:4");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(fieldInfo0.fieldClass);
      assertFalse(class4.equals((Object)class2));
      assertEquals("Primitive", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertNotNull(class4);
      assertEquals(158, fieldInfo0.serialzeFeatures);
      assertEquals((-3683), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertNotSame(class4, class2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<TimeUnit> class0 = TimeUnit.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = DateFormat.MINUTE_FIELD;
      assertEquals(6, int0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONObject jSONObject0 = new JSONObject(6);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentRemove("*Fvd/");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      Class<JobAttributes> class0 = JobAttributes.class;
      Date date0 = jSONObject0.getObject("yyyy-MM-dd HH:mm:ss", (Type) class0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNull(date0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONObject0, jSONObject1);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JobAttributes jobAttributes0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(1, jobAttributes0.getMinPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getCopies());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertNull(jobAttributes0.getPrinter());
      assertNull(jobAttributes0.getFileName());
      assertNotNull(jobAttributes0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertSame(jSONObject0, jSONObject1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("jP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : jP
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("_Vcg/e6FPvX.w0");
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("java.util.concurrent.ConcurrentSkipListSet", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("_Vcg/e6FPvX.w0", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isInterface());
      assertEquals("class java.util.concurrent.ConcurrentSkipListSet", class0.toString());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<Short> class1 = Short.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("java.util.concurrent.ConcurrentSkipListSet");
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("0ZlcT62pM7lnP2:-U ");
      assertEquals((-1277569081922111623L), long0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("Z", weakHashMap0);
      assertNull(field0);
      
      Field field1 = weakHashMap0.put("Z", (Field) null);
      assertNull(field1);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Character character1 = TypeUtils.castToChar("Z");
      assertEquals('Z', (char)character1);
      assertNotNull(character1);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Set<Object> set0 = properties0.keySet();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      parserConfig0.configFromPropety(properties0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "*Fvd/", (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("/417");
      assertNull(class0);
      
      Random.setNextRandom((-4274));
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/417");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isKotlin((Class) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      long long0 = TypeUtils.fnv1a_64_lower("/417");
      assertEquals((-6149550265399022914L), long0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("$^5[lYc=Ti");
      assertEquals(104067063986085483L, long0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Class<Long> class0 = Long.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      parserConfig0.configFromPropety(properties0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "$^5[lYc=Ti", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : $^5[lYc=Ti
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Set<Object> set0 = properties0.keySet();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      parserConfig0.configFromPropety(properties0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", "org.springframework.security.core.context.SecurityContextImpl", 804);
      assertEquals("fastjson.parser.autoTypeSupport.fastjson.parser.autoTypeSupport(org.springframework.security.core.context.SecurityContextImpl:804)", stackTraceElement0.toString());
      assertEquals(804, stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.autoTypeSupport", stackTraceElement0.getMethodName());
      assertEquals("org.springframework.security.core.context.SecurityContextImpl", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("fastjson.parser.autoTypeSupport", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+0");
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("+0");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Timestamp.valueOf("+0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      String string0 = TypeUtils.decapitalize("Vo\"xxCrghPF,,");
      assertEquals("vo\"xxCrghPF,,", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("+md~L#CS=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+md~L#CS=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("/417");
      assertNull(class0);
      
      Random.setNextRandom((-4274));
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/417");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isKotlin((Class) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Random.setNextRandom(1428);
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<SQLWarning> class1 = SQLWarning.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      assertFalse(list1.equals((Object)list0));
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      java.util.Date date0 = TypeUtils.castToDate("");
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("/417");
      assertNull(class0);
      
      Random.setNextRandom((-4274));
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/417");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isKotlin((Class) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Random.setNextRandom(1428);
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      System.setCurrentTimeMillis((-4274));
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
      
      Class<Timestamp> class1 = Timestamp.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Timestamp timestamp0 = TypeUtils.castToEnum((Object) "", class1, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(timestamp0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ljava.util.concurrent.ConcurrentSkipListSet", (Throwable) null);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: Ljava.util.concurrent.ConcurrentSkipListSet", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      String string1 = TypeUtils.castToString(parserConfig0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(string1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat("o");
      assertTrue(choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertNotNull(choiceFormat0);
      
      Class<RenderingHints> class2 = RenderingHints.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "ch");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("originalNumberFormat", "ch", (-1324));
      assertEquals("java.sql.SQLSyntaxErrorException: originalNumberFormat", sQLSyntaxErrorException0.toString());
      assertEquals((-1324), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("ch", sQLSyntaxErrorException0.getSQLState());
      assertEquals("originalNumberFormat", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("ch", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: originalNumberFormat", sQLSyntaxErrorException0.toString());
      assertEquals((-1324), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("ch", sQLSyntaxErrorException0.getSQLState());
      assertEquals("originalNumberFormat", sQLSyntaxErrorException0.getMessage());
      assertEquals("ch", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type ch not present", typeNotPresentException0.toString());
      assertEquals("Type ch not present", typeNotPresentException0.getMessage());
      assertNotNull(typeNotPresentException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("DATE_FIELD", "B!", 13);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: DATE_FIELD", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("B!", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("DATE_FIELD", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(13, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      String string0 = sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("DATE_FIELD", string0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: DATE_FIELD", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("B!", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("DATE_FIELD", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(13, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(string0);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("B!", "ch", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: originalNumberFormat", sQLSyntaxErrorException0.toString());
      assertEquals((-1324), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("ch", sQLSyntaxErrorException0.getSQLState());
      assertEquals("originalNumberFormat", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLWarning: B!", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("ch", sQLWarning0.getSQLState());
      assertEquals("B!", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      Class<?> class0 = TypeUtils.loadClass("syntax error, ", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 24;
      Insets insets0 = new Insets((-2279), 95, 24, 24);
      assertNotNull(insets0);
      assertEquals(24, insets0.right);
      assertEquals(24, insets0.bottom);
      assertEquals((-2279), insets0.top);
      assertEquals(95, insets0.left);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      
      parserConfig1.configFromPropety(properties0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotSame(parserConfig1, parserConfig0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      Locale locale0 = TypeUtils.toLocale("javax.persistence.OneToMany");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("javax.persistence.onetomany", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("javax.persistence.onetomany", locale0.toString());
      assertNotNull(locale0);
      
      Hashtable<Collator, StackTraceElementDeserializer> hashtable2 = new Hashtable<Collator, StackTraceElementDeserializer>();
      assertEquals(0, hashtable2.size());
      assertTrue(hashtable2.isEmpty());
      assertNotNull(hashtable2);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashtable2);
      assertEquals(0, hashtable2.size());
      assertTrue(hashtable2.isEmpty());
      assertNull(bigDecimal0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.OneToMany", (ClassLoader) aSMClassLoader0, true);
      assertTrue(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertEquals("interface javax.persistence.OneToMany", class0.toString());
      assertFalse(class0.isPrimitive());
      assertTrue(class0.isAnnotation());
      assertEquals(9729, class0.getModifiers());
      assertNotNull(class0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("scanInt");
      assertNull(class0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getPrinter());
      assertNull(jobAttributes0.getFileName());
      assertEquals(1, jobAttributes0.getCopies());
      assertNotNull(jobAttributes0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("+md~L#CS=");
      assertEquals("+md~L#CS=", noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException: +md~L#CS=", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Boolean> class3 = Boolean.TYPE;
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertNotNull(class3);
      
      Class class4 = (Class)TypeUtils.getCollectionItemType(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class4.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertNotNull(class4);
      assertSame(class4, class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      String string0 = TypeUtils.decapitalize("Vo\"xxCrghPF,,");
      assertEquals("vo\"xxCrghPF,,", string0);
      assertNotNull(string0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, false);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = TypeUtils.isKotlin(class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Field[] fieldArray0 = new Field[1];
      Field field0 = ParserConfig.getFieldFromCache("java.sql.SQLDataException", weakHashMap0);
      assertNull(field0);
      
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "java.sql.SQLDataException", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          byte[] byteArray0 = new byte[2];
          byteArray0[0] = (byte)0;
          byteArray0[1] = (byte)52;
          boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          assertArrayEquals(new byte[] {(byte)0, (byte)52}, byteArray0);
          assertFalse(boolean0);
          
          int int0 = DateFormat.MINUTE_FIELD;
          assertEquals(6, int0);
          
          Object object0 = new Object();
          assertNotNull(object0);
          
          Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
          assertEquals(0, hashtable0.size());
          assertTrue(hashtable0.isEmpty());
          assertNotNull(hashtable0);
          
          Class<Rectangle> class0 = Rectangle.class;
          WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
          assertNotNull(weakHashMap0);
          
          String string0 = weakHashMap0.put("49|Vw?K", "49|Vw?K");
          assertNull(string0);
          
          PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
          List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
          assertEquals(0, hashtable0.size());
          assertTrue(hashtable0.isEmpty());
          assertTrue(list0.isEmpty());
          assertEquals(0, list0.size());
          assertNotNull(list0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertNotNull(hashtable1);
      
      Locale locale0 = TypeUtils.toLocale("javax.persistence.OneToMany");
      assertEquals("", locale0.getISO3Country());
      assertEquals("javax.persistence.onetomany", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("javax.persistence.onetomany", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Hashtable<Collator, StackTraceElementDeserializer> hashtable2 = new Hashtable<Collator, StackTraceElementDeserializer>();
      assertEquals(0, hashtable2.size());
      assertTrue(hashtable2.isEmpty());
      assertNotNull(hashtable2);
      
      Class<String> class0 = String.class;
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<String> class1 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
