/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:01:27 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.Month;
import java.util.List;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlSerializer;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Form form0 = new Form("i}r\";uo.&Rj<}9<E");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i}r\";uo.&Rj<}9<E";
      Radio radio0 = new Radio(form0, "i}r\";uo.&Rj<}9<E", "_nvL");
      radio0.attributes(stringArray0);
      assertEquals("i}r\";uo.&Rj<}9<E", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("strike");
      Component component0 = errorPage0.var((Object) actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) null);
      assertTrue(component0._isGeneratedId());
      
      component0.id("org.mvel.conversion.PrimArrayHandler$1");
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = component0.h1((Object) "9Lht");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "LX", "8~f{$F'|9kM<?g*C^9");
      Table table0 = new Table(checkbox0, "N;u/@");
      TableBlock tableBlock0 = table0.colgroup();
      TableRow tableRow0 = tableBlock0.tr();
      tableRow0.getComponentId();
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("frame");
      xmlEntityRef0.eval("frame");
      assertEquals("frame", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getXhtmlAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map("<LhBzIPRX><o-Yh}K7");
      Component component1 = component0.param("<LhBzIPRX><o-Yh}K7", "<LhBzIPRX><o-Yh}K7");
      List<CharSequence> list0 = component1._getRenderHints();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("", "CG!c_Pp");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.h2(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Form form0 = new Form(":[]`fMGaQ[:i$yNGI");
      ElExpression elExpression0 = new ElExpression("");
      List<Component> list0 = form0.findAll(elExpression0);
      assertEquals(":[]`fMGaQ[:i$yNGI", form0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      xmlEntityRef0.el((String) null);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Form form0 = new Form("&k-Z{e]L%/,j_OdTeq");
      Component component0 = form0.clasS("&k-Z{e]L%/,j_OdTeq");
      assertEquals("&k-Z{e]L%/,j_OdTeq", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      Component component0 = tableBlock0.actionBinding("");
      assertEquals("TableBlock_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "ld", "|@dtBXyn:Z\"{np");
      // Undeclared exception!
      try { 
        textArea0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("T&%9->`{5N<");
      // Undeclared exception!
      try { 
        form0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Form form0 = new Form("V&");
      // Undeclared exception!
      try { 
        form0.reset(".&1'YKH4266P7qvzDe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("uslpu4wX;K1_Xd");
      // Undeclared exception!
      try { 
        form0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "9>&RHKPF04J", "9>&RHKPF04J");
      Checkbox checkbox0 = new Checkbox(numberInput0, "", "9>&RHKPF04J");
      // Undeclared exception!
      try { 
        checkbox0.placeholder("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Oz{~+${',Sq1/@t}F/");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "strike", "strike");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p((Object) hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "Ty` ]mcXSFDq");
      Checkbox checkbox0 = new Checkbox(block0, "Ty` ]mcXSFDq", "_w$Hp");
      // Undeclared exception!
      try { 
        checkbox0.ol();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.label((Object) " (attr value=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Form form0 = new Form("table");
      // Undeclared exception!
      try { 
        form0.img((String) null, "i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Form form0 = new Form((String) null);
      TextInput textInput0 = new TextInput(form0, "utod?8:hk3]&ZWfI}#", "utod?8:hk3]&ZWfI}#");
      // Undeclared exception!
      try { 
        textInput0.i();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Form form0 = new Form("A@j&[@X6]B;'v[");
      // Undeclared exception!
      try { 
        form0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("f|e;rg_");
      // Undeclared exception!
      try { 
        form0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("/kgBGD");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "Colgroup component can be added only to a Table.", "/kgBGD");
      // Undeclared exception!
      try { 
        hidden0.h2((Object) hidden0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Factory initialization was incomplete - has not tried ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("value");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "The prefix must not be null");
      TableBlock tableBlock0 = table0.thead();
      ActionExpression actionExpression0 = new ActionExpression("The prefix must not be null");
      // Undeclared exception!
      try { 
        tableBlock0.form((String) null, actionExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "ZR$'xue", "ZR$'xue");
      FileInput fileInput0 = new FileInput(checkbox0, "9Lht", "tgx(CeuWj^8+)d");
      // Undeclared exception!
      try { 
        fileInput0.find("9Lht");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 9Lht on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form("Qu.!Z");
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select((Component) null, "vF=hReXzjj<udU", "vF=hReXzjj<udU", stringSelectModel0, "vF=hReXzjj<udU");
      // Undeclared exception!
      try { 
        select0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(">:]d.gAZ0Blxw@4x");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, ">:]d.gAZ0Blxw@4x", "1");
      // Undeclared exception!
      try { 
        fileInput0.cite((Object) "1");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      // Undeclared exception!
      try { 
        checkbox0.big((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("%3-PyzQ-XMF\"T");
      // Undeclared exception!
      try { 
        form0.base("%3-PyzQ-XMF\"T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("CHECKCAST java/lang/Long");
      // Undeclared exception!
      try { 
        xmlEntityRef0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "B0.1");
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        checkbox0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "ins", "\fe]qmQMUpg[1");
      // Undeclared exception!
      try { 
        submit0.addFirst((Component) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Form form0 = new Form((String) null);
      NumberInput numberInput0 = new NumberInput(form0, "var", "var", (CharSequence) null);
      assertEquals("wheel_components_Form", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "5(=", ":,iT]2FIS=");
      ActionExpression actionExpression0 = new ActionExpression(":`F|HP+j^bQ");
      Form form0 = new Form(numberInput0, "button", actionExpression0);
      Checkbox checkbox0 = new Checkbox(numberInput0, ":,iT]2FIS=", "[EV:5h5ImK5af(8^");
      form0.addFormElement(checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = Boolean.TRUE;
      Text text0 = new Text(errorPage0, boolean0);
      StandaloneComponent standaloneComponent0 = text0._getTopLevelComponent(true);
      assertTrue(text0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "%oWTFSq@W7j$", "%oWTFSq@W7j$");
      Component component0 = checkbox0.attribute("9Lht", "9Lht");
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "", "");
      TableBlock tableBlock0 = new TableBlock(textArea0);
      tableBlock0.getEngine();
      assertTrue(textArea0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("frame");
      xmlEntityRef0.afterAdd();
      assertEquals("frame", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Form form0 = new Form(":[]`fMGaQ[:i$yNGI");
      // Undeclared exception!
      try { 
        form0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Form form0 = new Form("link");
      Submit submit0 = new Submit(form0, "link", "link");
      Checkbox checkbox0 = new Checkbox(submit0, "link", "f<d)I");
      // Undeclared exception!
      try { 
        checkbox0.required();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map("<LhBzIPRX><o-Yh}K7");
      Component component1 = component0.meta();
      assertEquals("Any_1", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.String@0000000014", "java.lang.String@0000000014");
      // Undeclared exception!
      try { 
        errorPage0.remove((Component) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Form form0 = new Form("wheel.components.ActionExpression@0000000005");
      // Undeclared exception!
      try { 
        form0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TextArea textArea0 = new TextArea(checkbox0, "xx}*ax>$H(U2Mo?n", "");
      Component component0 = textArea0.end();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wfzr-GRWl");
      TableBlock tableBlock0 = table0.thead();
      Link link0 = new Link(tableBlock0, tableBlock0);
      // Undeclared exception!
      try { 
        link0.end("blockquote");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'blockquote'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      Any any0 = tableBlock0.col();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2083), "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      any0.dateFormat("", mockGregorianCalendar0);
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("X>~yawXTL|z5zm");
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "CAu`", "X>~yawXTL|z5zm", "CAu`");
      TextArea textArea0 = new TextArea(dateInput0, "X>~yawXTL|z5zm", "\"Wu0j^^mtZle^");
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        textArea0.dateFormat("_", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("could not optimize construtor: ");
      Image image0 = new Image(errorPage0, actionExpression0, actionExpression0);
      Table table0 = new Table(image0, "could not optimize construtor: ");
      ElExpression elExpression0 = new ElExpression((String) null);
      Component component0 = table0.kbd((Object) elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.object();
      ElExpression elExpression0 = new ElExpression("$$");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate finder expression ' $$'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = (Table)errorPage0.table();
      table0.thead();
      ActionExpression actionExpression0 = new ActionExpression("The prefix must not be null");
      actionExpression0.setOwner(errorPage0);
      // Undeclared exception!
      try { 
        actionExpression0.getUpdateTarget();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(errorPage0, "Method '", ">Y", stringSelectModel0, ">Y");
      TableRow tableRow0 = new TableRow(select0);
      Table table0 = new Table(tableRow0, "java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        table0.get("org.mvel.optimizers.impl.refl.ConstructorAccessor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'org.mvel.optimizers.impl.refl.ConstructorAccessor'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ISAh(b{");
      // Undeclared exception!
      try { 
        xmlEntityRef0.up(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("[.IGzj");
      Component component0 = xmlEntityRef0.up((-1974));
      assertEquals("[.IGzj", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      boolean boolean0 = errorPage0.equals(double0);
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      boolean boolean0 = errorPage0.equals((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.big((Object) null);
      component0._clear();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Block block0 = (Block)component0.ins();
      Block block1 = (Block)block0.addInternalRenderHint("org.mvel.conversion.FloatCH$3");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "#Q&)W|wqe.O5RM", "#Q&)W|wqe.O5RM");
      Table table0 = new Table(errorPage0, "8W6=f29,tw#h-w7");
      TableBlock tableBlock0 = table0.tbody();
      // Undeclared exception!
      try { 
        tableBlock0.add(radio0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Component component1 = component0.ins();
      component1.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("4~@2'rMX,WRZ[f]-Er");
      xmlEntityRef0._getVisibleForm(true);
      assertEquals("4~@2'rMX,WRZ[f]-Er", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "e[", "e[");
      Form form0 = textInput0._getVisibleForm(false);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "5(=", ":,iT]2FIS=");
      ActionExpression actionExpression0 = new ActionExpression(":`F|HP+j^bQ");
      Form form0 = new Form(numberInput0, "button", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("1iXw_yBV3");
      Any any0 = new Any(errorPage0, actionExpression0);
      Table table0 = new Table(any0, "1iXw_yBV3");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.id(" standalone=");
      assertTrue(any0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "V)", "org.apache.commons.io.filefilter.AndFileFilter");
      // Undeclared exception!
      try { 
        fileInput0.id("~9c>6");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Month month0 = Month.JANUARY;
      LocalDate localDate0 = MockLocalDate.of(4, month0, 4);
      Component component0 = errorPage0.samp((Object) localDate0);
      assertTrue(component0._isGeneratedId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Form form0 = new Form("`QHT<;HQ S3ua");
      form0.renderComponent((XmlSerializer) null);
      assertEquals("`QHT<;HQ S3ua", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.actionBinding("p");
      ActionExpression actionExpression0 = errorPage0._getAction();
      assertNotNull(actionExpression0);
      assertEquals("wheel_ErrorPage", actionExpression0.getSourceId());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select((Component) null, "vF=hReXzjj<udU", "vF=hReXzjj<udU", stringSelectModel0, "vF=hReXzjj<udU");
      ActionExpression actionExpression0 = select0._getAction();
      assertNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Component with id ");
      String[] stringArray0 = new String[8];
      Component component0 = xmlEntityRef0.attributes(stringArray0);
      assertEquals("Component with id ", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "@u", "@u", "@u");
      Table table0 = new Table(dateInput0, "@u");
      TableBlock tableBlock0 = table0.colgroup();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        tableBlock0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.attributes((String[]) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("could not optimize construtor: ");
      Image image0 = new Image(errorPage0, actionExpression0, actionExpression0);
      Table table0 = new Table(image0, "could not optimize construtor: ");
      TableBlock tableBlock0 = table0.tfoot();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "could not optimize construtor: ");
      Block block0 = tableBlock0.renderHint(stringBuilder0);
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("could not optimize construtor: ", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Component component1 = component0.ins();
      Component component2 = component1.code();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.link();
      Component component1 = component0.em((Object) errorPage0);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Component component1 = errorPage0.entity("org.mvel.conversion.FloatCH$3");
      TableBlock tableBlock0 = new TableBlock(component1, "uFZ(NR1,u`y");
      TableRow tableRow0 = tableBlock0.tr();
      Table table0 = new Table(tableRow0, "uFZ(NR1,u`y");
      Component component2 = table0.cite((Object) component0);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("uFZ(NR1,u`y", table0.getComponentId());
      assertEquals("org.mvel.conversion.FloatCH$3", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "%oWTFSq@W7j$", "%oWTFSq@W7j$");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("tt");
      // Undeclared exception!
      try { 
        checkbox0.del((Object) xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "Component container: ", "Component container: ");
      // Undeclared exception!
      try { 
        fileInput0.h5((Object) "Component container: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Zv9w!J;l;dh>4");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.sup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "div", "div");
      // Undeclared exception!
      try { 
        submit0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        form0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("could not optimize construtor: ");
      Image image0 = new Image(errorPage0, actionExpression0, actionExpression0);
      Table table0 = new Table(image0, "could not optimize construtor: ");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.span();
      assertFalse(table0._isGeneratedId());
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Integer integer0 = new Integer(45);
      Component component1 = component0.pre((Object) integer0);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableBlock0.addFirst(tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}GV(Dv/nTOekUfr+`%");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.select("]YC9e=", dynamicSelectModel0, "}GV(Dv/nTOekUfr+`%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "/xx+9h", "/xx+9h");
      // Undeclared exception!
      try { 
        submit0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Form form0 = new Form("action");
      Byte byte0 = new Byte((byte) (-26));
      // Undeclared exception!
      try { 
        form0.a((Object) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) null);
      DateInput dateInput0 = new DateInput(component0, "org.mvel.conversion.PrimArrayHandler$1", "org.mvel.conversion.PrimArrayHandler$1", "org.mvel.conversion.PrimArrayHandler$1");
      ElExpression elExpression0 = new ElExpression("org.mvel.conversion.PrimArrayHandler$1");
      // Undeclared exception!
      try { 
        dateInput0.samp((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Form form0 = new Form("[QAer");
      // Undeclared exception!
      try { 
        form0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "", "", "", (ISelectModel) null, true);
      // Undeclared exception!
      try { 
        select0.reset("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("could not optimize construtor: ");
      Image image0 = new Image(errorPage0, actionExpression0, actionExpression0);
      Table table0 = new Table(image0, "could not optimize construtor: ");
      Component component0 = table0.ol();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("could not optimize construtor: ", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Form form0 = new Form("l^ 0Q<IMN");
      // Undeclared exception!
      try { 
        form0.wBlock("l^ 0Q<IMN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "AG~`9rXjL)8a*", "eUJ");
      // Undeclared exception!
      try { 
        textArea0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd((Object) null);
      component0._setParent(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Form form0 = new Form("&k-Z{e]L%/,j_OdTeq");
      // Undeclared exception!
      try { 
        form0.address((Object) "&k-Z{e]L%/,j_OdTeq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "", "", "", (ISelectModel) null, true);
      select0._clear();
      assertTrue(select0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel_ErrorPage");
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Form form0 = new Form("blockquote");
      // Undeclared exception!
      try { 
        form0.textarea("sub");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("1iXw_yBV3");
      Any any0 = new Any(errorPage0, actionExpression0);
      Table table0 = new Table(any0, "1iXw_yBV3");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.u((Object) tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Form form0 = new Form(".kT<");
      TextInput textInput0 = new TextInput(form0, ".kT<", ".kT<");
      // Undeclared exception!
      try { 
        textInput0.br();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Form form0 = new Form("=-+l1rY}x0Ra&|<'Y,8");
      Radio radio0 = new Radio(form0, "G%7:Wkp;.V_NmPv", "Cannot add a form element. No surrounding form found.");
      // Undeclared exception!
      try { 
        radio0.textInput("=-+l1rY}x0Ra&|<'Y,8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("g7!");
      // Undeclared exception!
      try { 
        xmlEntityRef0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action("j'");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("#O_ 5j&");
      // Undeclared exception!
      try { 
        xmlEntityRef0.rawText("#O_ 5j&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "numberInputError");
      Component component0 = table0.sub();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("numberInputError", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.submit("radio");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      Component component1 = component0.link();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "optgroup", "optgroup");
      // Undeclared exception!
      try { 
        submit0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "map", "map");
      // Undeclared exception!
      try { 
        checkbox0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        component0.message("-}Vl", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strike();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Select select0 = new Select((Component) null, "sE&", "sE&", (ISelectModel) null, "sE&");
      // Undeclared exception!
      try { 
        select0.h1((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      Component component1 = component0.noframes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_3", component1.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "input stream can not be null");
      Component component0 = table0.i();
      assertFalse(table0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "8),wZh0(,w", "8),wZh0(,w");
      // Undeclared exception!
      try { 
        checkbox0.dd((Object) "8),wZh0(,w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Form form0 = new Form("div");
      // Undeclared exception!
      try { 
        form0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Form form0 = new Form("}M0)or");
      // Undeclared exception!
      try { 
        form0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.script();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      // Undeclared exception!
      try { 
        tableRow0.hidden(")^\"}&8d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wfzr-GRWl");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      table0.small((Object) mockGregorianCalendar0);
      assertEquals("wfzr-GRWl", table0.getComponentId());
      
      table0.id("9Lht");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.sub((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      DateInput dateInput0 = new DateInput(table0, (String) null, "expected ELEMENT or ENTITY after <! in DTD not ", (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.htmlText(table0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.big((Object) null);
      Component component1 = component0.li((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Form form0 = new Form("%3kr+=^");
      Checkbox checkbox0 = new Checkbox(form0, "%3kr+=^", "%3kr+=^");
      // Undeclared exception!
      try { 
        checkbox0.h5();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "", "java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        numberInput0.h3((Object) "t3k<<y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.code((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "onsubmit", "onsubmit");
      // Undeclared exception!
      try { 
        textInput0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.numberInput("", (CharSequence) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.text("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      Label label0 = new Label(errorPage0, errorPage0);
      TextInput textInput0 = new TextInput(component0, "^C]d=n<-.0f(", "span");
      Component component1 = label0.h4((Object) textInput0);
      assertTrue(component1._isGeneratedId());
      assertFalse(textInput0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "kbd", "kbd");
      // Undeclared exception!
      try { 
        hidden0.span((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "Ty` ]mcXSFDq");
      Component component0 = block0.b();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Form form0 = new Form(",fn5x=8TIFBi2]Q");
      // Undeclared exception!
      try { 
        form0.buttonInput(",fn5x=8TIFBi2]Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.passwordInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      // Undeclared exception!
      try { 
        block0.encode("blockquote");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.param((CharSequence) null, "org.apache.commons.io.filefilter.EmptyFileFilter");
      // Undeclared exception!
      try { 
        component0.var((Object) "org.apache.commons.io.filefilter.EmptyFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "wfzr-GRWl");
      TableBlock tableBlock0 = table0.thead();
      Link link0 = new Link(tableBlock0, tableBlock0);
      Component component0 = link0.pre();
      assertTrue(component0._isGeneratedId());
      assertEquals("wfzr-GRWl", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "yes", "Fo,vmM[/");
      // Undeclared exception!
      try { 
        checkbox0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "", "", "", (ISelectModel) null, true);
      select0.acronym();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(select0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt((Object) "");
      Component component1 = component0.bdo((CharSequence) null);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Form form0 = new Form("p._O|HbQXZ#Z");
      Checkbox checkbox0 = new Checkbox(form0, "p._O|HbQXZ#Z", "wheel_ErrorPage");
      // Undeclared exception!
      try { 
        checkbox0.radio((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "]Y}");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("]Y}", table0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      TextInput textInput0 = new TextInput(component0, "[^#@[p3?=O&pk", "VA(klGMp\"N|RiIj1");
      Component component1 = errorPage0.abbr((Object) textInput0);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("VA(klGMp\"N|RiIj1", textInput0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("frame");
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      TableRow tableRow0 = tableBlock0.tr();
      // Undeclared exception!
      try { 
        tableRow0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "numberInputError");
      Component component0 = table0.address();
      DateInput dateInput0 = new DateInput(component0, "numberInputError", "Checkbox", "numberInputError");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1222, 1222, 434, 1222, 17);
      // Undeclared exception!
      try { 
        dateInput0._applyFormat(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'java.lang.String@0000000009'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "numberInputError");
      Checkbox checkbox0 = new Checkbox(table0, "numberInputError", "numberInputError");
      String string0 = checkbox0.getComponentName();
      assertEquals("Checkbox", string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.base("span");
      // Undeclared exception!
      try { 
        component0.title(")x{ExcGoF!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "LX", "8~f{$F'|9kM<?g*C^9");
      // Undeclared exception!
      try { 
        checkbox0.strike((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "only one docdecl allowed in XML document", "only one docdecl allowed in XML document");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        submit0.q(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Form form0 = new Form("|UbX6>");
      // Undeclared exception!
      try { 
        form0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Form form0 = new Form("blockquote");
      // Undeclared exception!
      try { 
        form0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Form form0 = new Form("dl");
      // Undeclared exception!
      try { 
        form0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "lY>Cr[", "lY>Cr[");
      // Undeclared exception!
      try { 
        fileInput0.s((Object) "lY>Cr[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Form form0 = new Form("blockquote");
      Submit submit0 = new Submit(form0, "blockquote", "yp%&jujWK!uRR");
      // Undeclared exception!
      try { 
        submit0.imageSubmit("J@-kd", "wAb${jN*=m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("$~;4xJybA=D?sx?^");
      Component component0 = errorPage0.form("$~;4xJybA=D?sx?^", actionExpression0);
      assertEquals("$~;4xJybA=D?sx?^", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "java.lang.String@0000000004", "all names passed as arguments must be internedwhen NAMES INTERNED feature is enabled", "java.lang.String@0000000004");
      // Undeclared exception!
      try { 
        dateInput0.form(")");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      Component component0 = errorPage0.legend((Object) double0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Component component1 = component0.dl();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Month month0 = Month.JANUARY;
      LocalDate localDate0 = MockLocalDate.of(4, month0, 4);
      Component component0 = errorPage0.samp((Object) localDate0);
      MockDate mockDate0 = new MockDate();
      component0._applyFormat(mockDate0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "]Y}");
      TableRow tableRow0 = table0.tr();
      Component component0 = tableRow0.img("pre", "Q!/{h-);(?T^");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("]Y}", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Form form0 = new Form("1M!RKMN~Fwm");
      // Undeclared exception!
      try { 
        form0.numberInput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("[djy[`bp|BT");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      ElExpression elExpression0 = new ElExpression("org.apache.commons.io.filefilter.NameFileFilter");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkboxGroup("[djy[`bp|BT", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("BUzt&DK:YH`0[(8");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i((Object) "BUzt&DK:YH`0[(8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.fileInput("a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      // Undeclared exception!
      try { 
        component0.title("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      checkbox0.getAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 1005, 17);
      Component component0 = errorPage0.b((Object) mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        component0.checkbox((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "Failed to initialize SimpleDateFormat with pattern '", "Failed to initialize SimpleDateFormat with pattern '");
      // Undeclared exception!
      try { 
        fileInput0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "input stream can not be null");
      Component component0 = table0.p((Object) "input stream can not be null");
      Component component1 = component0.strong();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      errorPage0.ins((Object) checkbox0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("java.lang.String@0000000014");
      assertFalse(block0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      Byte byte0 = new Byte((byte)4);
      Text text0 = new Text(errorPage0, byte0);
      Link link0 = new Link(errorPage0, text0);
      Component component1 = component0.acronym((Object) link0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      String[] stringArray0 = new String[0];
      Component component1 = component0.area(stringArray0);
      assertEquals("Any_1", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      Component component1 = component0.s();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.requestFocus();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Form form0 = new Form(" start tag <");
      // Undeclared exception!
      try { 
        form0.dateInput(" start tag <", " start tag <");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "L", "L");
      Select select0 = new Select(hidden0, "X", "()Ljava/lang/String;", (ISelectModel) null, "L");
      Component component0 = select0.sup((Object) hidden0);
      assertTrue(component0._isGeneratedId());
      assertEquals("()Ljava/lang/String;", select0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Form form0 = new Form("ARS5RnW;Qy08e");
      Checkbox checkbox0 = new Checkbox(form0, "ARS5RnW;Qy08e", "ARS5RnW;Qy08e");
      // Undeclared exception!
      try { 
        checkbox0.small();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.frame((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Form form0 = new Form("f[O6t-jl5Wwg");
      // Undeclared exception!
      try { 
        form0.kbd((Object) "f[O6t-jl5Wwg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "", "No corresponding component found for end expression '", "");
      // Undeclared exception!
      try { 
        dateInput0.samp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label();
      ElExpression elExpression0 = new ElExpression("div");
      // Undeclared exception!
      try { 
        component0.fileInput("element", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map("<LhBzIPRX><o-Yh}K7");
      Integer integer0 = Integer.valueOf(0);
      Component component1 = component0.strong((Object) integer0);
      Component component2 = component1.fieldset();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component2.getComponentId());
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Form form0 = new Form("3Hm<uKv_z\"kT");
      // Undeclared exception!
      try { 
        form0.dfn((Object) "3Hm<uKv_z\"kT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "R_L", "-?(s>-3?,!;Atm}sV");
      // Undeclared exception!
      try { 
        textArea0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      Component component0 = errorPage0.h6((Object) actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.clasS("");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "\"UP@MgcKMd?!", "\"UP@MgcKMd?!");
      Checkbox checkbox0 = new Checkbox(fileInput0, "\"UP@MgcKMd?!", "[*rZ'A}5");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        checkbox0.multiSelect("entity reference name can not contain character ", stringSelectModel0, "entity reference name can not contain character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Component component1 = component0.legend();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) null);
      Component component1 = component0.ins();
      Component component2 = component1.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "@u", "@u", "@u");
      Table table0 = new Table(dateInput0, "@u");
      Component component0 = table0.dt((Object) dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "!oD5v`)", "!oD5v`)");
      // Undeclared exception!
      try { 
        submit0.dd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
