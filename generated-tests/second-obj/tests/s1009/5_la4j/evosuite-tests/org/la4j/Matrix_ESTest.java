/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:35:31 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(7, 1265, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.eachInColumn(1952, vectorProcedure0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1952' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      cRSMatrix0.swapRows(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.updateColumn(187, vectorFunction0);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 17, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
      int[] intArray0 = new int[9];
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).each(matrixProcedure0);
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[6] = 53;
      intArray0[7] = 0;
      intArray0[8] = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachInColumn(5, vectorProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformRow(0, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      int int0 = (-2590);
      sparseMatrix0.determinant();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transformColumn(0, vectorFunction0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero((-2590), (-1459), (-2216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2590x-1459
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3, 6);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertEquals(3, sparseMatrix0.columns());
      assertEquals(3, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV("z`gds");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1172.645212);
      doubleArray0[0] = doubleArray1;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        Matrix.constant(45, (-2729), (-2321.35184));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 47;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(4167, 47);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setColumn(4167, (double) 4167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(637, vectorAccumulator0);
      int int0 = 7;
      Matrix matrix0 = cCSMatrix0.blankOfRows(7);
      matrix0.rowMajorIterator();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = (-474);
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1518), (-1518), (double) (-474), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.nonZeroIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = Matrix.unit(0, 0);
      int int0 = 0;
      Matrix matrix1 = matrix0.sliceTopLeft(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 0, (-2147483478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-2147483478
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3335, 4, 4);
      Matrix matrix0 = rowMajorSparseMatrix0.sliceBottomRight(3335, 4);
      matrix0.eachInColumn(4, (VectorProcedure) null);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("\"S;c0e7kvnZ[JaF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.nonZeroIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.rotate();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(3172, 3172);
      basic2DMatrix0.sliceTopLeft(0, 3172);
      basic2DMatrix0.each((MatrixProcedure) null);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.hashCode();
      int int0 = 823;
      int int1 = (-1705);
      int int2 = (-13);
      int int3 = 3;
      columnMajorSparseMatrix0.insert((Matrix) cRSMatrix0, int0, int1, int2, int3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 5;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 5);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      MockRandom mockRandom0 = new MockRandom(5);
      Matrix matrix1 = Matrix.randomSymmetric(5, mockRandom0);
      mockRandom0.doubles((long) 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cCSMatrix0, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 5 rows and 5 cols at 0, 0 in a 0x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.hashCode();
      int int0 = 48;
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '48' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        Matrix.identity((-1346));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.insert((Matrix) cCSMatrix0, 0, 0);
      cCSMatrix1.multiply((Matrix) cCSMatrix0);
      int int0 = 3335;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        Matrix.from1DArray(6, (-1), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 6x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(0, 0);
      Matrix matrix0 = denseMatrix0.power(0);
      rowMajorSparseMatrix0.setAll(1.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRows(vectorAccumulator0);
      int int0 = (-1518);
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1518), 0, 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(956);
      denseMatrix0.iteratorOfColumn(956);
      // Undeclared exception!
      denseMatrix0.power(16);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.nonZeroIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      SparseMatrix.block(matrix0, matrix0, columnMajorSparseMatrix0, matrix0);
      matrix0.divide(0);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      int int1 = 3011;
      DenseMatrix.zero(0, 3011);
      int int2 = 629;
      int int3 = 3648;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.zero(3011, 576, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 5);
      CCSMatrix cCSMatrix1 = new CCSMatrix(5, 5, 5);
      MockRandom mockRandom0 = new MockRandom(5);
      Matrix matrix0 = Matrix.randomSymmetric(0, (Random) null);
      mockRandom0.doubles((long) 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix1.insert((Matrix) cCSMatrix0, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 5 rows and 5 cols at 0, 0 from a 0x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 4;
      RowMajorSparseMatrix.zero(3335, 4, 4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 4);
      columnMajorSparseMatrix0.subtract((Matrix) columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.get(3335, 3335);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3335' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.hashCode();
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      intArray0[1] = 0;
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      matrix0.toCSV(numberFormat0);
      matrix0.infinityNorm();
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInRow(2119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2119
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      rowMajorSparseMatrix1.transpose();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 45);
      denseMatrix0.equals((Matrix) rowMajorSparseMatrix1, 2585.66293602);
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      denseMatrix0.mkString(numberFormat0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.hashCode();
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, 48, (-3338), (-3338), 1948);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -3338x1948
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.subtract(2687.3);
      Matrix matrix1 = cCSMatrix0.multiply(0.0);
      matrix1.setRow(38, 4606.253372658);
      cCSMatrix0.multiplyByItsTranspose();
      matrix0.maxInRow((-1621));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      cCSMatrix0.multiply(vector0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(38, mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("         ");
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      matrix0.blank();
      Matrix matrix1 = rowMajorSparseMatrix0.subtract(1.0);
      doubleArray1[0] = (-1172.645212);
      doubleArray0[0] = doubleArray1;
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.non(advancedMatrixPredicate0);
      matrix0.swapRows(163, 163);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(163, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '163' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 7;
      int int1 = 1265;
      int int2 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(7, 1265, 0);
      int int3 = 1952;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.identity(1265);
      matrix0.product();
      Matrix matrix1 = matrix0.add((double) int2);
      Matrix.unit(int3, int1);
      double double0 = matrix1.maxInRow(int0);
      matrix0.norm();
      matrix0.trace();
      Matrix matrix2 = matrix1.subtract((Matrix) sparseMatrix0);
      String string0 = "org.la4j.Vectors";
      Matrix matrix3 = Matrix.fromMatrixMarket(string0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      matrix3.diagonalProduct();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, int1);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      sparseMatrix0.insertRow(int3, vector0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = double0;
      double double1 = 0.0;
      ooPlaceVectorHadamardProduct0.ensureApplicableTo(vector0, sparseVector0);
      doubleArray0[2] = double1;
      Matrix.from1DArray(int0, int2, doubleArray0);
      int int4 = 8;
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix2.eachInColumn(int4, vectorProcedure1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 178;
      Matrix.diagonal(9, 9);
      doubleArray0[1] = (double) 9;
      Matrix matrix0 = Matrix.from1DArray(178, 9, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int1 = 0;
      CRSMatrix cRSMatrix1 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      cRSMatrix0.hashCode();
      // Undeclared exception!
      try { 
        cRSMatrix1.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2755;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2755);
      denseMatrix0.iteratorOfColumn(2180);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-987));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -987.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2634, 2634);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.removeColumn(5);
      denseMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.hashCode();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 0, 4770L);
      rowMajorSparseMatrix0.mkString(":&*5Bi8UAoF)cx", "3J@pA[[F*c");
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((-2466), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2466x-2466
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(30, 7);
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      denseMatrix0.mkString("K6}lzvDIy", "<b)");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.transformColumn(30, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3335, 4, 4);
      Matrix matrix0 = rowMajorSparseMatrix0.sliceBottomRight(3335, 4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 0.0);
      columnMajorSparseMatrix0.max();
      Matrix matrix1 = columnMajorSparseMatrix0.blank();
      columnMajorSparseMatrix0.toCSV();
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = matrix0.toColumnMajorSparseMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      columnMajorSparseMatrix1.non(advancedMatrixPredicate0);
      matrix1.removeLastColumn();
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix1.updateRow(3335, (VectorFunction) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.hashCode();
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 48, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int1 = 0;
      CRSMatrix cRSMatrix1 = (CRSMatrix)SparseMatrix.zero(0, 17, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      CRSMatrix cRSMatrix2 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      rowMajorSparseMatrix0.hashCode();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix2.ensureIndexesAreInBounds((-1081), 894);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1081' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      rowMajorSparseMatrix1.transpose();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 630);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      rowMajorSparseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 7;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(45, 3140);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3632, 612, 3140);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      denseMatrix0.equals(matrix0, (double) int0);
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      denseMatrix0.mkString(numberFormat0);
      Vector vector0 = null;
      matrix0.multiply(vector0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix0.is(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(2, 2);
      basic2DMatrix0.ensureDimensionsAreCorrect(2, 2);
      int int0 = 54;
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceBottomRight(54, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [54..2][2..2].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3335, 4, 4);
      rowMajorSparseMatrix0.sliceBottomRight(3335, 4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 0.0);
      columnMajorSparseMatrix0.max();
      int int0 = 188;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(188, 4, 3335);
      int int1 = (-1073);
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow((-1073));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("         ");
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.transpose();
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1172.645212);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1172.645212);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow(6, (-1172.645212));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(7);
      // Undeclared exception!
      try { 
        basic2DMatrix0.eachInColumn(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 2;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(2, 2);
      basic2DMatrix0.ensureDimensionsAreCorrect(2, 2);
      int int1 = 179;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.foldColumn(34, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 3011);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Locale.getISOLanguages();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      denseMatrix0.equals(matrix0, (double) 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseMatrix0.mkString((NumberFormat) decimalFormat0);
      denseMatrix0.minInColumn(1000);
      rowMajorSparseMatrix0.transform((MatrixFunction) null);
      denseMatrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 3011);
      Locale locale1 = Locale.KOREA;
      NumberFormat.getPercentInstance();
      denseMatrix0.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.nonZeroIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0, cRSMatrix0);
      cRSMatrix0.iterator();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1918, 0, 0);
      denseMatrix0.minInRow(2);
      int int0 = 37;
      denseMatrix0.maxInRow(37);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      inPlaceCopyMatrixToMatrix0.partiallyApply(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("{C{S7.BEc!CbR@)3:/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 3335;
      int int1 = 4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3335, 4, 4);
      Matrix matrix0 = rowMajorSparseMatrix0.sliceBottomRight(3335, 4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 0.0);
      columnMajorSparseMatrix0.max();
      columnMajorSparseMatrix0.blank();
      columnMajorSparseMatrix0.toCSV();
      matrix0.toColumnMajorSparseMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 10, 10);
      cRSMatrix0.determinant();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(10, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(7, 7);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      decimalFormat0.setGroupingSize(7);
      denseMatrix0.mkString((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 3011);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Locale.getISOLanguages();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.transpose();
      denseMatrix0.equals(matrix0, (double) 0);
      denseMatrix0.iterator();
      matrix0.toCSV();
      int int1 = (-686);
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -686.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3335, 4, 4);
      Matrix matrix0 = rowMajorSparseMatrix0.sliceBottomRight(3335, 4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 0.0);
      columnMajorSparseMatrix0.max();
      Matrix matrix1 = columnMajorSparseMatrix0.blank();
      columnMajorSparseMatrix0.toCSV();
      matrix0.toColumnMajorSparseMatrix();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        matrix1.removeColumn(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      cCSMatrix0.nonZeroIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = cCSMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[2] = 7;
      intArray0[3] = (-1133);
      intArray0[7] = 7;
      intArray0[2] = 0;
      intArray0[6] = 0;
      intArray0[1] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 7, 0, (double[]) null, intArray0, intArray0);
      Matrix matrix0 = cRSMatrix0.removeFirstColumn();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      matrix0.toString();
      // Undeclared exception!
      try { 
        cRSMatrix0.get(0, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = null;
          int[] intArray0 = new int[8];
          intArray0[0] = 0;
          intArray0[1] = 0;
          intArray0[2] = 7;
          intArray0[3] = (-1133);
          intArray0[4] = 7;
          intArray0[5] = 0;
          CRSMatrix cRSMatrix0 = new CRSMatrix(7, 7, 0, (double[]) null, intArray0, intArray0);
          int int0 = 6;
          Matrix matrix0 = cRSMatrix0.removeFirstColumn();
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          matrix0.update(matrixFunction0);
          // Undeclared exception!
          try { 
            cRSMatrix0.get((-1133), 6);
            fail("Expecting exception: IndexOutOfBoundsException");
          
          } catch(IndexOutOfBoundsException e) {
             //
             // Row '-1133' is invalid.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.update(matrixFunction0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.hashCode();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfColumns((-671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-671
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2, 0);
      basic2DMatrix0.ensureDimensionsAreCorrect(2, 942);
      int int1 = 54;
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      basic2DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceBottomRight(54, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [54..2][2..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 3011);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Locale.getISOLanguages();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      rowMajorSparseMatrix0.hadamardProduct(denseMatrix0);
      rowMajorSparseMatrix0.swapColumns(32, 3011);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformRow((-1910), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1910
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(816, 816);
      ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int0 = 32;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(21, 32);
      rowMajorSparseMatrix0.blankOfColumns(2);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((DenseMatrix) null, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.maxInRow(int0);
      String string0 = "z[oAE/.MY\"^x{inpV/";
      Matrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 178;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 178;
      Matrix.diagonal(178, 178);
      doubleArray0[1] = (double) 178;
      Matrix matrix0 = Matrix.from1DArray(178, 178, doubleArray0);
      Matrix matrix1 = matrix0.sliceTopLeft(178, 178);
      int int1 = 26;
      int int2 = (-821);
      matrix1.set(int1, int2, doubleArray0[1]);
      matrix0.removeLastRow();
      double[][] doubleArray1 = new double[4][3];
      String string0 = "*cl=wpMJd`Bpcs'";
      Matrix.fromMatrixMarket(string0);
      int int3 = (-3080);
      matrix0.blankOfColumns(int3);
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(int0, int3, doubleArray1[2]);
      int int4 = (-2085);
      cRSMatrix0.nonZeroIteratorOfRow(int4);
      int int5 = (-1417);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(int0, vectorFunction0);
      int int6 = (-151);
      int int7 = 1153;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int6, int7);
      MockRandom mockRandom0 = new MockRandom();
      int int8 = 48;
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int6, int8, (double) int5, (Random) mockRandom0);
      Vector vector0 = cRSMatrix1.getRow(int8);
      CRSMatrix cRSMatrix3 = new CRSMatrix();
      cRSMatrix2.setRow(int6, vector0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 3011);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Locale.getISOLanguages();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      denseMatrix0.equals(matrix0, (double) 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseMatrix0.mkString((NumberFormat) decimalFormat0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 3011);
      rowMajorSparseMatrix0.hadamardProduct(denseMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      denseMatrix0.infinityNorm();
      rowMajorSparseMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        matrix0.is((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.subtract(2687.3);
      Matrix matrix1 = cCSMatrix0.multiply(0.0);
      matrix1.swapRows((-2215), (-2215));
      matrix1.setRow(38, 4606.253372658);
      cCSMatrix0.multiplyByItsTranspose();
      matrix0.iterator();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(38, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3335, 4, 4);
      Matrix matrix0 = rowMajorSparseMatrix0.sliceBottomRight(3335, 4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 0.0);
      columnMajorSparseMatrix0.max();
      Matrix matrix1 = columnMajorSparseMatrix0.blank();
      columnMajorSparseMatrix0.toCSV();
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = matrix0.toColumnMajorSparseMatrix();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      columnMajorSparseMatrix1.non(advancedMatrixPredicate0);
      matrix1.removeLastColumn();
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateRow((-5573), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-5573' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)RowMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix1.transpose();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.unit(9, 45);
      basic2DMatrix0.equals((Matrix) cRSMatrix1, 2585.66293602);
      Locale locale0 = Locale.KOREA;
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.partiallyApply((RowMajorSparseMatrix) cRSMatrix1);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatrixHadamardProduct0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
      basic2DMatrix1.kroneckerProduct(cRSMatrix1);
      rowMajorSparseMatrix0.add((-206.6));
      cCSMatrix0.setColumn(0, 2593.29220456675);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1918, 5004, 0);
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 2;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(2, 0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureDimensionsAreCorrect(2, (-2608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2x-2608
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      CCSMatrix.zero(0, 0);
      int int1 = 3335;
      cCSMatrix0.copyOfRows(3335);
      Random random0 = null;
      Matrix.unit(0, 3335);
      // Undeclared exception!
      try { 
        cCSMatrix1.swapColumns(3335, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3336
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.zero(0, 0, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      cRSMatrix1.hashCode();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) rowMajorSparseMatrix0, 0, 0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 1 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 178;
      doubleArray0[1] = (double) 9;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 230;
      MockRandom mockRandom0 = new MockRandom(230);
      // Undeclared exception!
      Matrix.random(230, 230, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      double double0 = new Double(32);
      matrix0.swapRows(163, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 2668.975196699102);
      CRSMatrix cRSMatrix1 = new CRSMatrix(32, 32, 32);
      Matrix matrix0 = cRSMatrix1.transpose();
      cRSMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        matrix0.swapRows(163, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '163' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1918, 5004, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInColumn(0, vectorProcedure0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(53);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(0, vectorFunction0);
      Vector vector0 = cRSMatrix0.getRow(17);
      cRSMatrix0.setRow(670, vector0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(188);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 9);
      int int0 = 945;
      Matrix matrix0 = cRSMatrix0.blankOfColumns(945);
      Matrix.unit(188, 17);
      Matrix matrix1 = matrix0.sliceTopLeft(946, 178);
      DenseMatrix denseMatrix0 = matrix1.toDenseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      String string0 = "$tU.n^VeIUo";
      ((CCSMatrix) columnMajorSparseMatrix0).columnMajorIterator();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromMatrixMarket(string0);
      int int1 = 7;
      denseMatrix0.swapRows(int1, int0);
      inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      denseMatrix0.euclideanNorm();
      int int2 = (-2744);
      int int3 = Integer.MAX_VALUE;
      int int4 = 656;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int2, int3, int4);
      String string1 = "v IhgF\"";
      cRSMatrix1.mkString(string1, string1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("         ");
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      int int0 = 163;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 1 cols at 0, 0 in a 1x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(16, 0.0);
      int int0 = 925;
      int int1 = 7;
      // Undeclared exception!
      denseMatrix0.power(7);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 37;
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(196, 37);
      cCSMatrix0.ensureDimensionsAreCorrect(196, 37);
      cCSMatrix0.sliceBottomRight(37, 8);
      CRSMatrix.fromMatrixMarket("][");
      String string0 = "";
      String string1 = "Cannot have negative source position: ";
      RowMajorSparseMatrix.fromMatrixMarket(string1);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(int0);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket(string0);
      inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      double[][] doubleArray0 = new double[0][1];
      Matrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.copy();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      doubleArray0[0] = (double) 0;
      MockRandom mockRandom0 = new MockRandom(0);
      Vector vector0 = Vector.random(0, mockRandom0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(1, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      int int1 = 5;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 5);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom(5);
      Matrix matrix0 = Matrix.randomSymmetric(5, mockRandom0);
      mockRandom0.doubles((long) 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix1.insert((Matrix) cCSMatrix0, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 5 rows and 5 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.nonZeroIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = Matrix.unit(0, 0);
      int int0 = 0;
      Matrix matrix1 = matrix0.sliceTopLeft(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 0, (-2147483475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-2147483475
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("         ");
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      matrix0.swapRows(163, 163);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 2791;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 163, (-600), 2791, 2791);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 163, -600
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3335, 4, 4);
      rowMajorSparseMatrix0.sliceBottomRight(3335, 4);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4, 0.0);
      columnMajorSparseMatrix0.max();
      int int0 = 188;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(188, 4, 3335);
      int int1 = (-1073);
      denseMatrix0.setRow(1, (double) (-1073));
      DenseMatrix denseMatrix1 = DenseMatrix.diagonal(2915, 1.0);
      denseMatrix1.maxInRow(188);
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix1);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1733);
      cRSMatrix1.removeFirstRow();
      Matrix matrix0 = cRSMatrix1.multiplyByItsTranspose();
      CRSMatrix cRSMatrix2 = CRSMatrix.block(matrix0, cRSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int0 = 5;
      Vector vector0 = ((CRSMatrix) rowMajorSparseMatrix0).getRow(int0);
      int int1 = 48;
      cRSMatrix2.setRow(int1, vector0);
      String string0 = "org.la4j.inversion.NoPivotGaussInverter";
      matrix0.fail(string0);
      rowMajorSparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix1.insert((Matrix) cCSMatrix0, 0, 0);
      Matrix matrix1 = cCSMatrix1.multiply((Matrix) cCSMatrix0);
      Matrix matrix2 = cCSMatrix0.copyOfRows(3335);
      Matrix matrix3 = Matrix.unit(0, 3335);
      cCSMatrix1.swapColumns(3335, 3335);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      matrix3.multiply(vector0);
      Matrix matrix4 = Matrix.randomSymmetric(0, (Random) null);
      Matrix matrix5 = Matrix.zero(0, 0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix5.mkString(numberFormat0);
      matrix4.kroneckerProduct(matrix2);
      matrix0.updateRow(3335, (VectorFunction) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      ooPlaceMatricesMultiplication0.ensureApplicableTo(matrix1, cCSMatrix1);
      // Undeclared exception!
      try { 
        matrix5.getRow(3335);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3335
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 3011);
      Locale locale0 = Locale.TAIWAN;
      denseMatrix0.toSparseMatrix();
      locale0.stripExtensions();
      Locale.getISOLanguages();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, 0, (-1898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 0x-1898
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 72;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      Matrix matrix0 = Matrix.randomSymmetric(72, mockRandom0);
      // Undeclared exception!
      matrix0.divide(72);
  }
}
