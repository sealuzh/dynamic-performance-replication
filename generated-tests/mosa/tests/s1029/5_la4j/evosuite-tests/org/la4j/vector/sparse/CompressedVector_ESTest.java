/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:16:16 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(4);
      assertEquals(4, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(5);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(5, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: matrix.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2759);
      // Undeclared exception!
      try { 
        CompressedVector.random(2759, (double) 2759, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("Ewb8qms|2Mz&cV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.random((-54), (double) (-54), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(32, (-639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -639.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      String string0 = compressedVector0.toString();
      assertEquals("", string0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(6);
      assertEquals(6, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -40
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(3, 2908);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2908.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1998, vectorFunction0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '5' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(203);
      compressedVector0.setAll(203);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(9, 9);
      compressedVector0.setAll(0.0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.random(1, (double) 1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(4784, 0.0, (Random) mockRandom0);
      assertEquals(4784, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1), (-3682));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(13, 9);
      compressedVector0.setAll(9);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(7);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 13);
      compressedVector0.swapElements(13, 1);
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(13);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(13);
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-594), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(17, 17);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(7, 17);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(13, 9);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll((-2018));
      assertEquals(13, compressedVector0.length());
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, (-2018));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1099, 1099);
      assertEquals(1099, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1099, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)4, (byte)75, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(1099);
      assertNotNull(mockRandom0);
      
      compressedVector0.swapElements(5, 1099);
      assertEquals(1099, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(1099, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1099, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)4, (byte)75, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1515));
      assertNotNull(integer0);
      assertEquals((-1515), (int)integer0);
      
      Long long0 = new Long((-1515));
      assertNotNull(long0);
      assertEquals((-1515L), (long)long0);
      
      Long long1 = hashMap0.put(integer0, long0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(long1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-259));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-352.60312853496663)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1998, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1099, 1099);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1099, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2158.3937);
      assertEquals(1099, compressedVector0.cardinality());
      assertEquals(1099, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.sliceLeft(1099);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(4);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(4);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-3845), vectorFunction0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(2146705574, 2146705574);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(1);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(9, 9);
      assertEquals(9, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      org.evosuite.runtime.Random.setNextRandom((-2018));
      compressedVector0.setAll((-2018));
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.cardinality());
      
      compressedVector0.swapElements(9, (-2018));
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-2018));
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.cardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(29);
      assertEquals(29, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(8.0);
      assertEquals(29, compressedVector0.cardinality());
      assertEquals(29, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      Double double0 = ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertEquals(29, compressedVector0.cardinality());
      assertEquals(29, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(double0);
      assertEquals(1856.0, (double)double0, 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertEquals(29, compressedVector0.cardinality());
      assertEquals(29, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(29);
      assertEquals(29, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(18, (-0.4372126475611777));
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.034482758620689655, compressedVector1.density(), 0.01);
      assertEquals(29, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.transform(vectorFunction0);
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.034482758620689655, compressedVector1.density(), 0.01);
      assertEquals(29, compressedVector1.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(29, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator0 = compressedVector1.iterator();
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.034482758620689655, compressedVector1.density(), 0.01);
      assertEquals(29, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2863);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2863, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(10);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2863, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(10, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2100.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {2100.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {2100.0}, doubleArray0, 0.01);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(234);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(234, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(234);
      assertEquals(234, compressedVector0.length());
      assertEquals(234, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(234, compressedVector0.length());
      assertEquals(234, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Long long0 = new Long(727L);
      assertNotNull(long0);
      assertEquals(727L, (long)long0);
      
      Long long1 = hashMap0.put(integer0, long0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(long1);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2141438192);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.669758873899826E-10, compressedVector0.density(), 0.01);
      assertEquals(2141438192, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      compressedVector0.each(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(17);
      assertEquals(17, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(8, 0);
      assertEquals(17, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      assertEquals(4, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(4);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(4);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.hadamardProduct(compressedVector0);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector2.cardinality());
      assertEquals(4, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(4, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      Double double0 = ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(double0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(64.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 13);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(13);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertFalse(boolean0);
      
      compressedVector0.setAll((-1.0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(7, vectorFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4, 4);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      compressedVector0.setAll(2008.03462351795);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction1);
      assertEquals(4, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.75, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      
      compressedVector0.setAll(4);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10);
      assertEquals(10, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertEquals(10, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.toSparseVector();
      assertEquals(10, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(10, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, compressedVector2);
      assertSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      
      compressedVector0.setAll(10);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.set(0, 0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(4);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(4);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.hadamardProduct(compressedVector0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(4, compressedVector2.cardinality());
      assertEquals(4, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2318.00191502135, (-1152.58869124304), (double)4, 2799.13).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      
      double double0 = compressedVector1.max();
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertEquals(2799.13, double0, 0.01);
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector2.copyOfLength(4);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(4, compressedVector2.cardinality());
      assertEquals(4, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1.0, compressedVector3.density(), 0.01);
      assertEquals(4, compressedVector3.length());
      assertEquals(4, compressedVector3.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotNull(compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(29);
      assertEquals(29, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = new CompressedVector(29, 29);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(29, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(29, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(29, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      compressedVector0.set(18, (-0.4372126475611777));
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(0.034482758620689655, compressedVector3.density(), 0.01);
      assertEquals(29, compressedVector3.length());
      assertEquals(1, compressedVector3.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector3, compressedVector1);
      assertSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotNull(compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-0.4372126475611777)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector3.updateAt((-1454), vectorFunction0);
      assertEquals(29, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.06896551724137931, compressedVector0.density(), 0.01);
      assertEquals(0.06896551724137931, compressedVector3.density(), 0.01);
      assertEquals(29, compressedVector3.length());
      assertEquals(2, compressedVector3.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector3, compressedVector1);
      assertSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(29);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = new CompressedVector(29, 29);
      assertEquals(29, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(29, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      
      compressedVector0.set(18, (-0.4372126475611777));
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      compressedVector0.swapElements(710, 18);
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(8);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(8, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer(7);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      
      Integer integer2 = hashMap0.put(integer1, integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 20);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(20, compressedVector0.length());
      assertEquals(0.05, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      boolean boolean0 = compressedVector1.nonZeroAt((-1386));
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(8);
      compressedVector0.set(3, 2129.167491322);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(20, compressedVector0.length());
      assertEquals(0.1, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(29);
      assertEquals(29, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(18, (-0.4372126475611777));
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(18, 3);
      assertEquals(29, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(27);
      assertNotNull(integer0);
      assertEquals(27, (int)integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 27;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = (double) 27;
      doubleArray0[3] = (double) 27;
      doubleArray0[5] = (double) 27;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      assertNotNull(byteArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(27.0, 27.0, 1155.0, 27.0, 27.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.8333333333333334, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.setAll(27.0);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      compressedVector0.swapElements(27, 27);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      boolean boolean0 = compressedVector0.nonZeroAt(27);
      assertEquals(6, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 0.0, 27.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(29);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertEquals(29, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.set(18, (-0.4372126475611777));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = compressedVector1.equals((Object) compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertEquals(29, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(boolean0);
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      Double double0 = ooPlaceInnerProduct0.apply((SparseVector) compressedVector1, (SparseVector) compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      assertEquals(29, compressedVector0.length());
      assertEquals(29, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(double0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(29);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(29, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(18, (-0.4372126475611777));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(29, compressedVector0.length());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(18, 29);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(29, compressedVector0.length());
      assertEquals(0.034482758620689655, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-2572.6697), (-2572.6697), (-2572.6697)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      
      compressedVector0.swapElements((-1), 0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
  }
}
