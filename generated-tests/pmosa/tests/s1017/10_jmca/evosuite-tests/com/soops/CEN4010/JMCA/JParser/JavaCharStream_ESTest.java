/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 11:09:57 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.ReInit((Reader) null, 0, 0, 0);
      javaCharStream0.ReInit((Reader) null, 15, 0, 15);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 6, 44, 6);
      javaCharStream0.ReInit((Reader) pipedReader0, 6, 1941);
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 0, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\'');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2051);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 2051, 2051);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 3, 95, 95);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(6);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, (-1), 44, 6);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reader reader0 = null;
      int int0 = (-1);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1), (-1));
      javaCharStream0.inputStream = null;
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '_';
      charArray0[2] = 'y';
      charArray0[3] = 'B';
      charArray0[4] = '#';
      charArray0[5] = 'E';
      charArray0[6] = 'j';
      charArray0[7] = 'f';
      charArray0[8] = '2';
      javaCharStream0.buffer = charArray0;
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-1287));
      byteArrayInputStream0.mark((byte)86);
      byteArrayInputStream0.skip((byte)0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1, (-1));
      byteArrayInputStream0.mark(1375);
      byteArrayInputStream0.skip((-2487L));
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      byteArrayInputStream0.skip((-2487L));
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('Z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-447), (-447));
      javaCharStream0.inputStream = null;
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('W');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 420, (-1), 420);
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '\\';
      charArray0[2] = '0';
      charArray0[3] = ':';
      charArray0[4] = '<';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      javaCharStream0.ReInit((Reader) charArrayReader0, (int) (byte)42, (int) (byte) (-103));
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.ReInit((Reader) null, 0, 0, 0);
      javaCharStream0.ReInit((Reader) null, 15, 0, 15);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)92;
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)15;
      int int0 = 1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-1287));
      byteArrayInputStream0.mark((byte)86);
      byteArrayInputStream0.skip((byte)0);
      char char0 = 'Y';
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 31, 0);
      javaCharStream0.ReInit((Reader) null);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 0, 597, 0);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.BeginToken();
      javaCharStream0.adjustBeginLineColumn(2200, (-3374));
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader(")");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      javaCharStream0.getColumn();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      javaCharStream0.backup(8);
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.adjustBeginLineColumn(0, 8);
      assertEquals(8, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.bufpos = 83;
      javaCharStream0.backup(2);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) null, (-1), (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Reader reader0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 31, 31);
      int[] intArray0 = new int[0];
      javaCharStream0.bufsize = (-2325);
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 31, 31);
      int[] intArray0 = new int[0];
      javaCharStream0.bufline = intArray0;
      javaCharStream0.bufsize = (-2325);
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
      
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 10, 60);
      javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = 31;
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 31, 31);
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char char0 = 'D';
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.skip(0L);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 31, 31);
      javaCharStream0.maxNextCharInd = 31;
      javaCharStream0.bufpos = (-2325);
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Reader reader0 = null;
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 31, 31);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 81, 81);
      javaCharStream0.GetSuffix(100);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JavaCharStream.hexval('6');
      PipedReader pipedReader0 = new PipedReader();
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('C');
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, (-2277), 63);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      javaCharStream0.ReInit((InputStream) bufferedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('9');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.GetSuffix(9);
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, (-2272), 63);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)12, (byte) (-15));
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\f', char0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char char0 = 'J';
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JavaCharStream.hexval('F');
      MockFile mockFile0 = new MockFile("5c!V)+;^BKi}i$", "5c!V)+;^BKi}i$");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 4, 4);
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, 13, 72);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char char0 = 'V';
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JavaCharStream.hexval('0');
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 55, 55, 0);
      javaCharStream0.prevCharIsCR = false;
      javaCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('9');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IsbM!XV#~pey',L15}");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 80, 1, 1);
      javaCharStream0.ReInit((Reader) null);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 104);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      javaCharStream0.Done();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 1, 1);
      javaCharStream0.getBeginLine();
      char[] charArray0 = javaCharStream0.GetSuffix(5);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('1');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('1');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char char0 = 'H';
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-47);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-399), (-399));
      javaCharStream0.BeginToken();
      javaCharStream0.UpdateLineColumn('\u0006');
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-397), javaCharStream0.getBeginColumn());
      assertEquals('\uFFFD', char0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JavaCharStream.hexval('a');
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JavaCharStream.hexval('B');
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 91, (byte) (-52));
      javaCharStream0.BeginToken();
      javaCharStream0.getBeginLine();
      javaCharStream0.ReadByte();
      javaCharStream0.getBeginColumn();
      javaCharStream0.ExpandBuff(true);
      assertEquals(4096, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.bufpos = 117;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.adjustBeginLineColumn((-821), 4275);
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.available = (-1);
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.tokenBegin = 63;
      javaCharStream0.available = (-1);
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.backup((byte)93);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(4003, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.available = 117;
      javaCharStream0.backup(117);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      javaCharStream0.BeginToken();
      assertEquals(3979, javaCharStream0.bufpos);
      
      javaCharStream1.ReInit((Reader) null, 3979, 1205);
      assertEquals((-1), javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('5');
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      javaCharStream0.prevCharIsCR = true;
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('5');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.available = (-4134);
      javaCharStream0.prevCharIsCR = true;
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.inBuf = 1;
      javaCharStream0.readChar();
      javaCharStream0.ReInit((Reader) null, 177, (-2552), 177);
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u000B', char0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.bufpos = (-2226);
      javaCharStream0.available = (-2226);
      javaCharStream0.AdjustBuffSize();
      assertEquals((-2226), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-270), (byte)9);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('\t', char0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      javaCharStream0.readChar();
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(']', char0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      char char0 = File.pathSeparatorChar;
      javaCharStream0.readChar();
      char char1 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('\\', char1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte) (-10);
      byteArray1[5] = (byte)86;
      byteArray1[6] = (byte) (-10);
      byteArray1[7] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      javaCharStream0.AdjustBuffSize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      javaCharStream0.readChar();
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('\\', char0);
  }
}
