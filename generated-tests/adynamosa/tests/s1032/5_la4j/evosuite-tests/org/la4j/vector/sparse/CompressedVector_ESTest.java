/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 03:01:38 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 111.09544686841454;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      compressedVector0.product();
      Integer integer0 = new Integer(782);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-3186);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0L;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = 111.09544686841454;
      doubleArray1[7] = (double) 782;
      doubleArray1[8] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 37;
      intArray0[1] = (-3186);
      CompressedVector compressedVector1 = new CompressedVector(782, (-3186), doubleArray1, intArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector1.to(vectorFactory0);
      compressedVector1.manhattanNorm();
      MockRandom mockRandom1 = new MockRandom();
      int int0 = (-669);
      // Undeclared exception!
      try { 
        compressedVector0.get((-669));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-669' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1672L));
      Integer integer0 = new Integer(41);
      Integer integer1 = new Integer(41);
      Integer integer2 = new Integer(41);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-479);
      intArray0[3] = 41;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      CompressedVector compressedVector0 = new CompressedVector(41, (-1), (double[]) null, intArray0);
      double double0 = new Integer((-1));
      // Undeclared exception!
      try { 
        compressedVector0.isZeroAt(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 80.94117;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = new Integer(782);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(782, mockRandom0);
      compressedVector0.equals((Object) denseVector0);
      compressedVector0.swapElements((-4001), 2);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(782, vectorFunction0);
      boolean boolean0 = compressedVector0.nonZeroAt((-1233));
      assertFalse(boolean0);
      
      compressedVector0.swapElements(2, 2);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 80.94117;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      double double0 = compressedVector0.product();
      Integer integer0 = new Integer(782);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(782, mockRandom0);
      compressedVector0.equals((Object) denseVector0);
      compressedVector0.swapElements((-4001), 2);
      Integer integer1 = new Integer(2);
      double double1 = compressedVector0.sum();
      assertEquals(double1, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom();
      Random.setNextRandom(10);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      Collection<Byte> collection0 = hashMap0.values();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(collection0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-4001));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(119L);
      DenseVector.random(940, mockRandom0);
      CompressedVector compressedVector0 = new CompressedVector(940);
      Byte byte0 = new Byte((byte) (-103));
      compressedVector0.equals((Object) byte0);
      compressedVector0.swapElements(0, (-4781));
      compressedVector0.swapElements(1000, (-4781));
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      Double.isFinite((byte) (-103));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1531);
      Integer integer3 = new Integer((-1613));
      Integer.getInteger("");
      hashMap0.put(integer1, integer0);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 2);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 940;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 940);
      compressedVector0.euclideanNorm();
      compressedVector0.isZeroAt(940);
      compressedVector0.nonZeroAt(940);
      compressedVector0.toRowMatrix();
      String string0 = compressedVector0.toString();
      CompressedVector compressedVector1 = CompressedVector.fromCSV(string0);
      compressedVector1.toBinary();
      compressedVector0.toRowMatrix();
      double double0 = new Double(940);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((-2983), vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse((-2983), 940.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-2983' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(940);
      byte[] byteArray0 = compressedVector0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, 0.0, 987.47, (-2387.425125227), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(vectorPredicate0).test(anyInt() , anyDouble());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(940, vectorFunction1);
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)940).when(vectorFunction2).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(940, vectorFunction2);
      CompressedVector compressedVector1 = CompressedVector.zero(905, 0);
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      compressedVector2.toRowMatrix();
      compressedVector1.toCSV();
      compressedVector0.is(vectorPredicate0);
      VectorFunction vectorFunction3 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)905).when(vectorFunction3).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1674), vectorFunction3);
      compressedVector0.swapElements(0, 940);
      VectorFunction vectorFunction4 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(987.47).when(vectorFunction4).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(1614, vectorFunction4);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      compressedVector0.set(0, 0);
      assertEquals(0.0010638297872340426, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1672L));
      int int0 = 7;
      mockRandom0.ints(0L, 7, 1412);
      CompressedVector compressedVector0 = CompressedVector.random(41, 1.0, (java.util.Random) mockRandom0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.shuffle();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)41).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(41, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1672L));
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-1672L);
      doubleArray0[2] = (-9.63369);
      doubleArray0[3] = (double) (-1672L);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(57, byteArray0.length);
      
      compressedVector0.toRowMatrix();
      double double0 = compressedVector0.get(2);
      assertEquals((-9.63369), double0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1672.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      double double1 = compressedVector0.getOrElse(2, (-1672.0));
      assertEquals((-1672.0), double1, 0.01);
      
      MockRandom mockRandom1 = new MockRandom((-1672L));
      compressedVector0.iterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      MockRandom mockRandom2 = new MockRandom();
      compressedVector0.set(2, Double.NEGATIVE_INFINITY);
      assertEquals(0.75, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 80.94117;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Float float0 = new Float(80.94117);
      compressedVector0.product();
      MockRandom mockRandom0 = new MockRandom(795);
      mockRandom0.doubles();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.is(vectorPredicate0);
      assertFalse(boolean0);
      
      DenseVector.constant(795, 80.94117);
      compressedVector0.swapElements(2, (-760));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 80.94117;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = new Integer(782);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(782, mockRandom0);
      compressedVector0.equals((Object) denseVector0);
      compressedVector0.swapElements((-4001), 2);
      compressedVector0.swapElements(4391, (-4001));
      assertEquals(1, compressedVector0.cardinality());
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      Double double1 = ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertEquals(6551.4730009689, (double)double1, 0.01);
      
      Double.isFinite(0.0);
      compressedVector0.equals((Object) "%1-1xrI[zf?\"J>M");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(25, byteArray0.length);
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-4674.0);
      doubleArray0[2] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.blankOfLength(9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 2466;
      Integer integer0 = new Integer(2466);
      Integer integer1 = new Integer(2466);
      hashMap0.put(integer1, (Integer) null);
      int int1 = 968;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 968);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-4674.0);
      doubleArray0[2] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      int int0 = (-535);
      compressedVector0.swapElements((-1825), (-535));
      double double0 = 1.0;
      compressedVector0.set(0, 1.0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("A`I0I8W;.'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 940);
      compressedVector0.euclideanNorm();
      compressedVector0.isZeroAt(940);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)940).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1607, vectorFunction0);
      compressedVector0.nonZeroAt(1607);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(10, vectorFunction1);
      compressedVector0.set(10, 1607);
      // Undeclared exception!
      try { 
        compressedVector0.set(1607, (-2766.9471196));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1607' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-9.633694379619635);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(25, byteArray0.length);
      
      compressedVector0.toRowMatrix();
      compressedVector0.swapElements(1, 1129);
      compressedVector0.swapElements(1, (-552));
      CompressedVector compressedVector1 = CompressedVector.zero(1129);
      compressedVector1.toString();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(6, vectorFunction0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 940;
      doubleArray0[1] = (double) 940;
      doubleArray0[2] = (double) 940;
      doubleArray0[3] = (double) 940;
      doubleArray0[4] = (double) 940;
      doubleArray0[5] = (double) 940;
      CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.product();
      assertEquals(6.89869781056E17, double0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3252.15214)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(6, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      CompressedVector.zero(0, 0);
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SparseVector.random(0, (-2280.1), (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5632);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Vector vector0 = Vector.unit(3198);
      compressedVector0.equals(vector0, (double) 3198);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.is(vectorPredicate0);
      assertFalse(boolean0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(776);
      hashMap0.remove((Object) vectorFunction0, (Object) vectorFunction0);
      DenseVector.zero(5632);
      compressedVector0.swapElements(776, (-552));
      compressedVector0.swapElements(5632, 148);
      CompressedVector compressedVector1 = CompressedVector.zero(3198);
      compressedVector0.getOrElse(5598, 492.1081560306927);
      compressedVector1.nonZeroIterator();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-552);
      doubleArray0[1] = (double) 148;
      doubleArray0[2] = (double) 5598;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (double) (-552);
      doubleArray0[6] = 2.319146086866359;
      doubleArray0[7] = 492.1081560306927;
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 307.73912050095;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.multiply(307.73912050095);
      compressedVector0.spliterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 3;
      Integer integer0 = new Integer(3);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector.random(2964, mockRandom0);
      CompressedVector.zero(32);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      Double double0 = ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector1);
      compressedVector0.equals((Object) double0);
      CompressedVector compressedVector2 = new CompressedVector(4342);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2964, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 8;
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      hashMap0.put(integer0, (Integer) 8);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1672L));
      CompressedVector compressedVector0 = CompressedVector.random(41, 1.0, (java.util.Random) mockRandom0);
      assertEquals(41, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      compressedVector0.toDenseVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, (-3646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5632);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-358.0), 1784.02827039384, 1784.02827039384, (-1.0), (-698.848924566819)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      int int0 = 934;
      compressedVector0.set(934, 934);
      CompressedVector.zero(5632, 6);
      // Undeclared exception!
      compressedVector0.update(vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 5632;
      CompressedVector compressedVector0 = new CompressedVector(5632);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.2, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      int int1 = 934;
      int int2 = 6;
      CompressedVector.zero(5632, 6);
      // Undeclared exception!
      compressedVector0.update(vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5632);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0, 1.0, (double)5632, 386.114390574).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.set(934, 934);
      CompressedVector.zero(5632, 6);
      // Undeclared exception!
      compressedVector0.update(vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.zero(1142);
      compressedVector0.euclideanNorm();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 940);
      compressedVector0.euclideanNorm();
      compressedVector0.isZeroAt(940);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)940).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1607, vectorFunction0);
      compressedVector0.nonZeroAt(1607);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1607, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1408, 1408);
      compressedVector0.shuffle();
      int int0 = (-3768);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-3768), vectorFunction0);
      int int1 = 1113;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>(1113);
      CompressedVector.fromMap(hashMap0, 1408);
      // Undeclared exception!
      try { 
        compressedVector0.set(1408, (-3768));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1408' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1152;
      doubleArray0[1] = (double) 1152;
      doubleArray0[2] = (double) 1152;
      doubleArray0[3] = (double) 1152;
      doubleArray0[4] = (double) 1152;
      doubleArray0[5] = (double) 1152;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      Integer integer0 = new Integer(1152);
      compressedVector0.equals((Object) integer0);
      compressedVector0.swapElements((-1), (-1537));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-4001), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      CompressedVector.fromBinary(byteArray0);
      CompressedVector.fromCSV("");
      int int0 = 0;
      int int1 = (-1945532795);
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, (-1945532795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1945532795.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-9.633694379619635);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      compressedVector0.toRowMatrix();
      compressedVector0.get(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1887.4775479303303)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      double double0 = compressedVector0.getOrElse(0, 2.0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals((-1887.4775479303303), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 940);
      compressedVector0.euclideanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)940).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1602, vectorFunction0);
      boolean boolean0 = compressedVector0.nonZeroAt(1602);
      assertEquals(1, compressedVector0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-320), (-320));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-320' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 940;
      doubleArray0[1] = (double) 940;
      doubleArray0[2] = (double) 940;
      doubleArray0[3] = (double) 940;
      doubleArray0[4] = (double) 940;
      doubleArray0[5] = (double) 940;
      CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(0.8333333333333334, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 34);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-757), 34);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1), (-757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 2121276020;
      doubleArray0[3] = (double) 2121276020;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt((-654));
      assertEquals(4, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 940;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(940);
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-1073741824));
      hashMap0.put(integer1, integer1);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 940);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      double double0 = (-3796.5484466);
      // Undeclared exception!
      try { 
        compressedVector0.select((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 940;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 940);
      compressedVector0.euclideanNorm();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1602, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1602' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1759));
      linkedList0.add(integer0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1672L));
      CompressedVector compressedVector0 = CompressedVector.random(41, 1.0, (java.util.Random) mockRandom0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(0.8780487804878049, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1672L));
      mockRandom0.ints(0L, 7, 1412);
      CompressedVector compressedVector0 = CompressedVector.random(41, 1.0, (java.util.Random) mockRandom0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(41, vectorFunction0);
      double double0 = compressedVector0.getOrElse(10, 10);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(41, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 940);
      compressedVector0.euclideanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4800.24).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1602, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(18, vectorFunction1);
      CompressedVector compressedVector1 = CompressedVector.zero(1527);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(940);
      byte[] byteArray0 = compressedVector0.toBinary();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(940, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)940).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(940, vectorFunction1);
      CompressedVector.zero(905, 0);
      CompressedVector.fromBinary(byteArray0);
      assertEquals(0.0010638297872340426, compressedVector0.density(), 0.01);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(940);
      byte[] byteArray0 = compressedVector0.toBinary();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(940, vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(940, vectorFunction1);
      CompressedVector compressedVector1 = CompressedVector.zero(905, 0);
      assertEquals(905, compressedVector1.length());
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertEquals(940, compressedVector2.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)3, (byte) (-84), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.add(0.0);
      mockRandom0.ints(0L);
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        compressedVector0.set(836, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '836' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      byte byte0 = (byte)16;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      compressedVector0.euclideanNorm();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = (-1946);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-1946), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.toRowMatrix();
      compressedVector0.each(vectorProcedure0);
      compressedVector0.nonZeroAt(4);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(8);
      assertEquals(8, compressedVector1.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = new Integer(4);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double double1 = new Double(4);
      // Undeclared exception!
      try { 
        compressedVector0.set((-1484), 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1484' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      compressedVector0.product();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.nonZeroAt(0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = new CompressedVector();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2489;
      doubleArray0[1] = (double) 2489;
      doubleArray0[2] = (double) 2489;
      doubleArray0[3] = 1.4302197826960679;
      doubleArray0[4] = 854.33356759351;
      doubleArray0[5] = 1.4302197826960679;
      doubleArray0[6] = (double) 2489;
      doubleArray0[7] = (double) 2489;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector1.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-930.807435099);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-930.807435099);
      int int0 = (-1612);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.setSeed(566L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-1612), 1.0, (java.util.Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 940;
      CompressedVector.zero(940);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-930.807435099);
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5632);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      int int0 = 934;
      compressedVector0.set(934, 934);
      CompressedVector.zero(5632, 6);
      // Undeclared exception!
      compressedVector0.update(vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 123;
      int[] intArray0 = new int[7];
      intArray0[0] = 123;
      intArray0[1] = 5;
      intArray0[2] = 123;
      intArray0[3] = 123;
      intArray0[4] = 123;
      intArray0[5] = 123;
      intArray0[6] = 123;
      CompressedVector compressedVector0 = new CompressedVector(123, 5, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector compressedVector0 = CompressedVector.random(1522, (double) 0L, (java.util.Random) mockRandom0);
      compressedVector0.toDenseVector();
      ColumnMajorSparseMatrix.diagonal(1522, (-2171.3931));
      CompressedVector.zero(8);
      int[] intArray0 = new int[7];
      intArray0[0] = 9;
      intArray0[1] = 5;
      intArray0[2] = 1522;
      intArray0[3] = 9;
      intArray0[4] = 1522;
      intArray0[5] = 1522;
      intArray0[6] = 9;
      CompressedVector compressedVector1 = new CompressedVector(9, 5, (double[]) null, intArray0);
      assertEquals(0.5555555555555556, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      CompressedVector compressedVector0 = new CompressedVector(912, 804);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(912, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 1036);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-1690);
      doubleArray0[2] = (double) 1036;
      doubleArray0[3] = (double) (-1690);
      doubleArray0[4] = (double) 87;
      doubleArray0[6] = (double) 87;
      doubleArray0[7] = (double) 87;
      doubleArray0[8] = (double) (-1690);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(342, (-1489));
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(";ysgA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 940);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 940;
      doubleArray0[1] = (double) 940;
      doubleArray0[2] = (double) 940;
      doubleArray0[3] = (double) 940;
      doubleArray0[4] = (-1737.513943503);
      doubleArray0[5] = (double) 940;
      doubleArray0[6] = (double) 940;
      doubleArray0[7] = (double) 940;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.swapElements(940, (-1119));
      Random.setNextRandom(940);
      // Undeclared exception!
      try { 
        compressedVector0.set(2165, 940.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2165' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 87);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-3860), 87);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3860
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 940;
      CompressedVector compressedVector0 = CompressedVector.zero(940);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.nonZeroAt(940);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)2;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 87);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(87, (-1690));
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.zero(940);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2390), vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = (-1574L);
      MockRandom mockRandom0 = new MockRandom((-1574L));
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2765);
      compressedVector0.setAll(3193.0);
      mockRandom0.longs((-1117L), (-524L));
      // Undeclared exception!
      try { 
        CompressedVector.random(7, Double.POSITIVE_INFINITY, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1672L));
      mockRandom0.nextInt();
      CompressedVector compressedVector0 = CompressedVector.random(41, 1.0, (java.util.Random) mockRandom0);
      compressedVector0.setAll(1.0);
      assertEquals(41, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Integer integer0 = new Integer((-2529));
      linkedList0.add(integer0);
      compressedVector0.nonZeroIterator();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 57);
      compressedVector1.each(vectorProcedure0);
      compressedVector1.nonZeroAt((-2529));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(57, compressedVector1.length());
      
      compressedVector0.setAll(0.0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -402
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 1718;
      CompressedVector compressedVector0 = new CompressedVector(0, 1718, (double[]) null, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2489, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      columnMajorSparseMatrix0.transpose();
      CompressedVector.zero(0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = (-600);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-600), 1020);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-9.633694379619635);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      compressedVector0.toRowMatrix();
      compressedVector0.get(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1889.28594379149)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector.fromMap(hashMap0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      linkedList0.toArray();
      int int0 = 2770;
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromCollection(linkedList0);
      compressedVector0.swapElements(0, 0);
      compressedVector0.nonZeroIterator();
      CompressedVector.zero(1073741824);
      compressedVector0.subtract((-1190.815));
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("X9^AKySd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      int int0 = 2489;
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.stream();
      int int1 = 1432;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1432, 2489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.9;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.add(0.0);
      mockRandom0.ints(0L);
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        compressedVector0.set(836, 80.9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '836' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector.fromArray(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2121262846;
      intArray0[1] = 2121262846;
      intArray0[2] = 2121262846;
      intArray0[3] = 812;
      intArray0[4] = 1;
      intArray0[5] = 7;
      intArray0[6] = 7;
      CompressedVector compressedVector0 = new CompressedVector(2121262846, 1, doubleArray0, intArray0);
      compressedVector0.toBinary();
      int[] intArray1 = new int[2];
      intArray1[0] = 2140527990;
      int int0 = (-4175);
      intArray1[1] = (-4175);
      CompressedVector compressedVector1 = new CompressedVector(1456, 7, doubleArray0, intArray1);
      // Undeclared exception!
      try { 
        compressedVector1.toRowMatrix();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2140527990' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double[] doubleArray0 = new double[0];
      CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector2.each(vectorProcedure0);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1356.16447;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.divide(80.94117);
      int int0 = (-5109);
      int int1 = 4;
      // Undeclared exception!
      try { 
        CompressedVector.zero((-5109), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -5109
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 307.73912050095;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.multiply(307.73912050095);
      compressedVector0.spliterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(Integer.MAX_VALUE, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)121;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)64;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)121;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      compressedVector0.product();
      CompressedVector compressedVector1 = new CompressedVector((byte)121, (-1424), doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector1.copyOfLength(2139812967);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1424.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)81;
      MockRandom mockRandom0 = new MockRandom(1L);
      CompressedVector.random((int) (byte)0, 0.0, (java.util.Random) mockRandom0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      compressedVector0.toDenseVector();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      columnMajorSparseMatrix0.transpose();
      CompressedVector.zero(0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("org.la4j.vector.sparse.CompressedVector$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte byte0 = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(9);
      Vector vector0 = compressedVector0.blankOfLength(9);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      compressedVector0.copyOfLength(0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      Vector vector1 = compressedVector0.to(vectorFactory0);
      assertTrue(vector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(9);
      compressedVector0.blankOfLength(9);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.is(vectorPredicate0);
      assertFalse(boolean0);
      
      Vector vector0 = compressedVector0.copyOfLength(0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      compressedVector0.product();
      Vector vector0 = compressedVector0.copyOfLength(0);
      assertEquals(0, vector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[2] = 5;
      CompressedVector compressedVector0 = new CompressedVector(123, 5, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-3734));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3734
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      compressedVector0.toRowMatrix();
      double double0 = compressedVector0.get(0);
      assertEquals(0.0, double0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.sum();
      Vector.zero(1927);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(5, 1451.0561792425);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '5' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-1661);
      // Undeclared exception!
      try { 
        CompressedVector.zero(37, (-1661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1661.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-930.807435099);
      doubleArray0[1] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextInt((-14));
      mockRandom0.ints();
      mockRandom0.longs(0L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-14), (double) (-14), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 307.73912050095;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.multiply(307.73912050095);
      compressedVector0.spliterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(Integer.MAX_VALUE, vectorFunction0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      int int0 = (-3690);
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft((-3690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-3690].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.divide(0.0);
      CompressedVector compressedVector1 = CompressedVector.zero(2, 2);
      compressedVector1.toString();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.iterator();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        CompressedVector.random(0, (-3099.84327303), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "";
      CompressedVector.fromCSV("");
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long(491L);
      Long.sum(2366L, 0L);
      Long.sum(2366L, 491L);
      hashMap0.putIfAbsent((Integer) null, long0);
      int int0 = 32;
      Integer integer0 = new Integer(1829);
      hashMap0.put(integer0, long0);
      try { 
        Long.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorVectorOperation<String> vectorVectorOperation0 = null;
      CompressedVector compressedVector1 = new CompressedVector(0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      compressedVector0.toCSV(numberFormat0);
      linkedList0.push(integer0);
      // Undeclared exception!
      try { 
        compressedVector0.slice(0, 672);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      compressedVector0.swapElements((-728), 2);
      compressedVector0.setAll((-692.3119549));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 80.94117;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1356.16447;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 2040;
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, 2040);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2040.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.swapElements(2489, 2489);
      compressedVector0.nonZeroIterator();
      CompressedVector compressedVector1 = CompressedVector.zero(2489);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(1154, 3174);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 3174.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)99;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("u'c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)36;
      byteArray0[0] = (byte)36;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-20);
      byteArray0[2] = (byte) (-20);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 139;
      CompressedVector compressedVector0 = new CompressedVector(3731, 0, (double[]) null, intArray0);
      assertEquals(3731, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      compressedVector0.apply((VectorVectorOperation<Vector>) ooPlaceVectorHadamardProduct0, (Vector) compressedVector1);
      Vector vector0 = compressedVector0.blankOfLength(0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 5804;
      CompressedVector compressedVector0 = CompressedVector.zero(5804, 5804);
      compressedVector0.max();
      VectorVectorOperation<Object> vectorVectorOperation0 = null;
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-21.3664349);
      doubleArray0[1] = (-2510.73201);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2834.327744;
      doubleArray0[4] = 278.96;
      doubleArray0[5] = (-1307.935);
      doubleArray0[6] = (-321.023321421);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(3192, (-21.3664349));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3192' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (java.util.Random) mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      compressedVector0.multiply(matrix0);
      // Undeclared exception!
      try { 
        SparseVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("aR}<]Fc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = (-3964);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3964
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector.fromCollection(linkedList0);
      int int0 = 0;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int1 = 16;
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(16);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(1453);
      hashMap0.replace(integer0, integer0, integer2);
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(9);
      Integer.max(802, (-3113));
      hashMap0.put(integer0, (Integer) null);
      Random.setNextRandom(934);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-2178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector.fromCollection(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(16);
      hashMap0.put(integer1, integer1);
      Integer integer2 = new Integer(1453);
      hashMap0.replace(integer0, integer0, integer2);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(16, (-4416.8997968), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CompressedVector.random(5, 2376.960582686012, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      int int0 = (-1168);
      // Undeclared exception!
      try { 
        CompressedVector.random((-1168), 0.0, (java.util.Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1168
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.swapElements(2489, 2489);
      compressedVector0.nonZeroIterator();
      compressedVector0.each((VectorProcedure) null);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(350);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 923);
      compressedVector0.euclideanNorm();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 940);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 315;
      CompressedVector.fromMap(hashMap0, 315);
      Integer.getInteger("Can not decode CompressedVector from the given byte array.");
      int int1 = 0;
      Integer integer0 = new Integer(0);
      hashMap0.put((Integer) null, integer0);
      int int2 = (-666);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-666));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.toSparseVector();
      compressedVector0.nonZeroIterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8);
      Vector vector0 = compressedVector0.blank();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      String string0 = vector0.mkString(numberFormat0, "");
      assertEquals("00000000", string0);
      
      compressedVector0.outerProduct(vector0);
      SparseVector.zero(0, 0);
      Vector.unit(8);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertTrue(compressedVector0.equals((Object)vector0));
  }
}
